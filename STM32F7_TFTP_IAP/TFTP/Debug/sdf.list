
sdf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000117e4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d48  080119e4  080119e4  000219e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801472c  0801472c  000301c8  2**0
                  CONTENTS
  4 .ARM          00000008  0801472c  0801472c  0002472c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014734  08014734  000301c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014734  08014734  00024734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014738  08014738  00024738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0801473c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  080147c4  00030088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  08014864  00030128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008aa0  200001c8  08014904  000301c8  2**2
                  ALLOC
 12 ._user_heap_stack 00002000  20008c68  08014904  00038c68  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000301f6  2**0
                  CONTENTS, READONLY
 15 .debug_info   00022f9d  00000000  00000000  00030239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000062cd  00000000  00000000  000531d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001a50  00000000  00000000  000594a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000014cd  00000000  00000000  0005aef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000355f0  00000000  00000000  0005c3c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002d25e  00000000  00000000  000919b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010dac7  00000000  00000000  000bec13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00007560  00000000  00000000  001cc6dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005e  00000000  00000000  001d3c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001c8 	.word	0x200001c8
 800021c:	00000000 	.word	0x00000000
 8000220:	080119cc 	.word	0x080119cc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001cc 	.word	0x200001cc
 800023c:	080119cc 	.word	0x080119cc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{ 
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
   HAL_FLASH_Unlock(); 
 80005e0:	f002 fb94 	bl	8002d0c <HAL_FLASH_Unlock>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <FLASH_If_Erase>:
  * @param  StartSector: start of user flash area
  * @retval 0: user flash area successfully erased
  *         1: error occurred
  */
int8_t FLASH_If_Erase(uint32_t StartSector)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08a      	sub	sp, #40	; 0x28
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t FlashAddress;
 
  FlashAddress = StartSector;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
     be done by word */ 
 
  if (FlashAddress <= (uint32_t) USER_FLASH_LAST_PAGE_ADDRESS)
 80005f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f6:	4a10      	ldr	r2, [pc, #64]	; (8000638 <FLASH_If_Erase+0x50>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d816      	bhi.n	800062a <FLASH_If_Erase+0x42>
  {
    FLASH_EraseInitTypeDef FLASH_EraseInitStruct;
    uint32_t sectornb = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
    
    FLASH_EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]
    FLASH_EraseInitStruct.Sector = FLASH_SECTOR_5;
 8000604:	2305      	movs	r3, #5
 8000606:	61bb      	str	r3, [r7, #24]
    FLASH_EraseInitStruct.NbSectors = 19;
 8000608:	2313      	movs	r3, #19
 800060a:	61fb      	str	r3, [r7, #28]
    FLASH_EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800060c:	2302      	movs	r3, #2
 800060e:	623b      	str	r3, [r7, #32]
    
    if (HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &sectornb) != HAL_OK)
 8000610:	f107 020c 	add.w	r2, r7, #12
 8000614:	f107 0310 	add.w	r3, r7, #16
 8000618:	4611      	mov	r1, r2
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fcc8 	bl	8002fb0 <HAL_FLASHEx_Erase>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d003      	beq.n	800062e <FLASH_If_Erase+0x46>
      return (1);
 8000626:	2301      	movs	r3, #1
 8000628:	e002      	b.n	8000630 <FLASH_If_Erase+0x48>
  }
  else
  {
    return (1);
 800062a:	2301      	movs	r3, #1
 800062c:	e000      	b.n	8000630 <FLASH_If_Erase+0x48>
  }

  return (0);
 800062e:	2300      	movs	r3, #0
}
 8000630:	4618      	mov	r0, r3
 8000632:	3728      	adds	r7, #40	; 0x28
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	08040000 	.word	0x08040000

0800063c <FLASH_If_Write>:
  * @retval 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(__IO uint32_t* FlashAddress, uint32_t* Data ,uint16_t DataLength)
{
 800063c:	b5b0      	push	{r4, r5, r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	4613      	mov	r3, r2
 8000648:	80fb      	strh	r3, [r7, #6]
  uint32_t i = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]

  for (i = 0; (i < DataLength) && (*FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]
 8000652:	e028      	b.n	80006a6 <FLASH_If_Write+0x6a>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */ 
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, *FlashAddress, *(uint32_t*)(Data+i)) == HAL_OK)
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	6819      	ldr	r1, [r3, #0]
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	68ba      	ldr	r2, [r7, #8]
 800065e:	4413      	add	r3, r2
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2200      	movs	r2, #0
 8000664:	461c      	mov	r4, r3
 8000666:	4615      	mov	r5, r2
 8000668:	4622      	mov	r2, r4
 800066a:	462b      	mov	r3, r5
 800066c:	2002      	movs	r0, #2
 800066e:	f002 faf1 	bl	8002c54 <HAL_FLASH_Program>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d111      	bne.n	800069c <FLASH_If_Write+0x60>
    {
     /* Check the written value */
      if (*(uint32_t*)*FlashAddress != *(uint32_t*)(Data+i))
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	68b9      	ldr	r1, [r7, #8]
 8000684:	440b      	add	r3, r1
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	429a      	cmp	r2, r3
 800068a:	d001      	beq.n	8000690 <FLASH_If_Write+0x54>
      {
        /* Flash content doesn't match SRAM content */
        return(2);
 800068c:	2302      	movs	r3, #2
 800068e:	e014      	b.n	80006ba <FLASH_If_Write+0x7e>
      }
      /* Increment FLASH destination address */
      *FlashAddress += 4;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	1d1a      	adds	r2, r3, #4
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	e001      	b.n	80006a0 <FLASH_If_Write+0x64>
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      return (1);
 800069c:	2301      	movs	r3, #1
 800069e:	e00c      	b.n	80006ba <FLASH_If_Write+0x7e>
  for (i = 0; (i < DataLength) && (*FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	3301      	adds	r3, #1
 80006a4:	617b      	str	r3, [r7, #20]
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	697a      	ldr	r2, [r7, #20]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d204      	bcs.n	80006b8 <FLASH_If_Write+0x7c>
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a04      	ldr	r2, [pc, #16]	; (80006c4 <FLASH_If_Write+0x88>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d9cd      	bls.n	8000654 <FLASH_If_Write+0x18>
    }
  }

  return (0);
 80006b8:	2300      	movs	r3, #0
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3718      	adds	r7, #24
 80006be:	46bd      	mov	sp, r7
 80006c0:	bdb0      	pop	{r4, r5, r7, pc}
 80006c2:	bf00      	nop
 80006c4:	081ffffb 	.word	0x081ffffb

080006c8 <__io_putchar>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_FS_PCD_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, &ch, 1, 1000);
 80006d0:	1d39      	adds	r1, r7, #4
 80006d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d6:	2201      	movs	r2, #1
 80006d8:	4803      	ldr	r0, [pc, #12]	; (80006e8 <__io_putchar+0x20>)
 80006da:	f004 fa37 	bl	8004b4c <HAL_UART_Transmit>
    return ch;
 80006de:	687b      	ldr	r3, [r7, #4]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200001e4 	.word	0x200001e4

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f001 f855 	bl	80017a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 f86b 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fa:	f000 f937 	bl	800096c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006fe:	f000 f8d7 	bl	80008b0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000702:	f000 f905 	bl	8000910 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8000706:	f005 f9b3 	bl	8005a70 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == 0x00) {
 800070a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800070e:	4825      	ldr	r0, [pc, #148]	; (80007a4 <main+0xb8>)
 8000710:	f002 fef8 	bl	8003504 <HAL_GPIO_ReadPin>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d12a      	bne.n	8000770 <main+0x84>
	  printf("Button Press X !\r\n");
 800071a:	4823      	ldr	r0, [pc, #140]	; (80007a8 <main+0xbc>)
 800071c:	f010 f874 	bl	8010808 <puts>
/*	  uint32_t flash_address = *(__IO uint32_t*)USER_FLASH_FIRST_PAGE_ADDRESS;
	  uint32_t masked_address = flash_address & 0x2FFE0000;
	  printf(" %02X\r\n", masked_address);*/
	  /* Check if valid stack address (RAM address) then jump to user application */
	 if (((*(__IO uint32_t*)USER_FLASH_FIRST_PAGE_ADDRESS) & 0x2FFE0000 ) == 0x20080000)
 8000720:	4b22      	ldr	r3, [pc, #136]	; (80007ac <main+0xc0>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <main+0xc4>)
 8000726:	4013      	ands	r3, r2
 8000728:	4a22      	ldr	r2, [pc, #136]	; (80007b4 <main+0xc8>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d116      	bne.n	800075c <main+0x70>
	 {
		 printf("jump to user application !\r\n");
 800072e:	4822      	ldr	r0, [pc, #136]	; (80007b8 <main+0xcc>)
 8000730:	f010 f86a 	bl	8010808 <puts>
	   /* Jump to user application */
	   JumpAddress = *(__IO uint32_t*) (USER_FLASH_FIRST_PAGE_ADDRESS + 4);
 8000734:	4b21      	ldr	r3, [pc, #132]	; (80007bc <main+0xd0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <main+0xd4>)
 800073a:	6013      	str	r3, [r2, #0]
	   Jump_To_Application = (pFunction) JumpAddress;
 800073c:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <main+0xd4>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	461a      	mov	r2, r3
 8000742:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <main+0xd8>)
 8000744:	601a      	str	r2, [r3, #0]
	   /* Initialize user application's Stack Pointer */
	   __set_MSP(*(__IO uint32_t*) USER_FLASH_FIRST_PAGE_ADDRESS);
 8000746:	4b19      	ldr	r3, [pc, #100]	; (80007ac <main+0xc0>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	f383 8808 	msr	MSP, r3
}
 8000752:	bf00      	nop
	   Jump_To_Application();
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <main+0xd8>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4798      	blx	r3
	   while(1);
 800075a:	e7fe      	b.n	800075a <main+0x6e>
	 }
	 else{
		 printf("not valid stack address\r\n");
 800075c:	481a      	ldr	r0, [pc, #104]	; (80007c8 <main+0xdc>)
 800075e:	f010 f853 	bl	8010808 <puts>
		 HAL_GPIO_WritePin(LD3_GPIO_Port,LD3_Pin,GPIO_PIN_SET);
 8000762:	2201      	movs	r2, #1
 8000764:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000768:	4818      	ldr	r0, [pc, #96]	; (80007cc <main+0xe0>)
 800076a:	f002 fee3 	bl	8003534 <HAL_GPIO_WritePin>
		 while(1);
 800076e:	e7fe      	b.n	800076e <main+0x82>
	 }
  }
  else{
	  IAP_tftpd_init();
 8000770:	f000 fe4e 	bl	8001410 <IAP_tftpd_init>
  }

  HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	2101      	movs	r1, #1
 8000778:	4814      	ldr	r0, [pc, #80]	; (80007cc <main+0xe0>)
 800077a:	f002 fedb 	bl	8003534 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 800077e:	f005 fab7 	bl	8005cf0 <MX_LWIP_Process>
	  HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2101      	movs	r1, #1
 8000786:	4811      	ldr	r0, [pc, #68]	; (80007cc <main+0xe0>)
 8000788:	f002 fed4 	bl	8003534 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800078c:	2064      	movs	r0, #100	; 0x64
 800078e:	f001 f865 	bl	800185c <HAL_Delay>
	  HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_SET);
 8000792:	2201      	movs	r2, #1
 8000794:	2101      	movs	r1, #1
 8000796:	480d      	ldr	r0, [pc, #52]	; (80007cc <main+0xe0>)
 8000798:	f002 fecc 	bl	8003534 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800079c:	2064      	movs	r0, #100	; 0x64
 800079e:	f001 f85d 	bl	800185c <HAL_Delay>
	  MX_LWIP_Process();
 80007a2:	e7ec      	b.n	800077e <main+0x92>
 80007a4:	40020800 	.word	0x40020800
 80007a8:	080119e4 	.word	0x080119e4
 80007ac:	08020000 	.word	0x08020000
 80007b0:	2ffe0000 	.word	0x2ffe0000
 80007b4:	20080000 	.word	0x20080000
 80007b8:	080119f8 	.word	0x080119f8
 80007bc:	08020004 	.word	0x08020004
 80007c0:	20000778 	.word	0x20000778
 80007c4:	20000774 	.word	0x20000774
 80007c8:	08011a14 	.word	0x08011a14
 80007cc:	40020400 	.word	0x40020400

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b094      	sub	sp, #80	; 0x50
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2234      	movs	r2, #52	; 0x34
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f010 f93c 	bl	8010a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007f4:	f003 f800 	bl	80037f8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f8:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <SystemClock_Config+0xd8>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	4a2a      	ldr	r2, [pc, #168]	; (80008a8 <SystemClock_Config+0xd8>)
 80007fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000802:	6413      	str	r3, [r2, #64]	; 0x40
 8000804:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <SystemClock_Config+0xd8>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000810:	4b26      	ldr	r3, [pc, #152]	; (80008ac <SystemClock_Config+0xdc>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a25      	ldr	r2, [pc, #148]	; (80008ac <SystemClock_Config+0xdc>)
 8000816:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	4b23      	ldr	r3, [pc, #140]	; (80008ac <SystemClock_Config+0xdc>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000828:	2301      	movs	r3, #1
 800082a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800082c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000830:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000832:	2302      	movs	r3, #2
 8000834:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000836:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800083a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800083c:	2304      	movs	r3, #4
 800083e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000840:	23c0      	movs	r3, #192	; 0xc0
 8000842:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000844:	2302      	movs	r3, #2
 8000846:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000848:	2308      	movs	r3, #8
 800084a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800084c:	2302      	movs	r3, #2
 800084e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4618      	mov	r0, r3
 8000856:	f003 f82f 	bl	80038b8 <HAL_RCC_OscConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000860:	f000 f926 	bl	8000ab0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000864:	f002 ffd8 	bl	8003818 <HAL_PWREx_EnableOverDrive>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800086e:	f000 f91f 	bl	8000ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000872:	230f      	movs	r3, #15
 8000874:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000876:	2302      	movs	r3, #2
 8000878:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800087e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000882:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000888:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	2106      	movs	r1, #6
 8000890:	4618      	mov	r0, r3
 8000892:	f003 fabf 	bl	8003e14 <HAL_RCC_ClockConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800089c:	f000 f908 	bl	8000ab0 <Error_Handler>
  }
}
 80008a0:	bf00      	nop
 80008a2:	3750      	adds	r7, #80	; 0x50
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40007000 	.word	0x40007000

080008b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_USART3_UART_Init+0x58>)
 80008b6:	4a15      	ldr	r2, [pc, #84]	; (800090c <MX_USART3_UART_Init+0x5c>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ba:	4b13      	ldr	r3, [pc, #76]	; (8000908 <MX_USART3_UART_Init+0x58>)
 80008bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_USART3_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_USART3_UART_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_USART3_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_USART3_UART_Init+0x58>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MX_USART3_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_USART3_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_USART3_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_USART3_UART_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_USART3_UART_Init+0x58>)
 80008f4:	f004 f8dc 	bl	8004ab0 <HAL_UART_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008fe:	f000 f8d7 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200001e4 	.word	0x200001e4
 800090c:	40004800 	.word	0x40004800

08000910 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000916:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800091a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091e:	2206      	movs	r2, #6
 8000920:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000924:	2202      	movs	r2, #2
 8000926:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000930:	2202      	movs	r2, #2
 8000932:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000936:	2201      	movs	r2, #1
 8000938:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000948:	2201      	movs	r2, #1
 800094a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000954:	f002 fe07 	bl	8003566 <HAL_PCD_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800095e:	f000 f8a7 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000026c 	.word	0x2000026c

0800096c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08c      	sub	sp, #48	; 0x30
 8000970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000982:	4b47      	ldr	r3, [pc, #284]	; (8000aa0 <MX_GPIO_Init+0x134>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a46      	ldr	r2, [pc, #280]	; (8000aa0 <MX_GPIO_Init+0x134>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b44      	ldr	r3, [pc, #272]	; (8000aa0 <MX_GPIO_Init+0x134>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	61bb      	str	r3, [r7, #24]
 8000998:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099a:	4b41      	ldr	r3, [pc, #260]	; (8000aa0 <MX_GPIO_Init+0x134>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a40      	ldr	r2, [pc, #256]	; (8000aa0 <MX_GPIO_Init+0x134>)
 80009a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b3e      	ldr	r3, [pc, #248]	; (8000aa0 <MX_GPIO_Init+0x134>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b3b      	ldr	r3, [pc, #236]	; (8000aa0 <MX_GPIO_Init+0x134>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a3a      	ldr	r2, [pc, #232]	; (8000aa0 <MX_GPIO_Init+0x134>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b38      	ldr	r3, [pc, #224]	; (8000aa0 <MX_GPIO_Init+0x134>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b35      	ldr	r3, [pc, #212]	; (8000aa0 <MX_GPIO_Init+0x134>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a34      	ldr	r2, [pc, #208]	; (8000aa0 <MX_GPIO_Init+0x134>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b32      	ldr	r3, [pc, #200]	; (8000aa0 <MX_GPIO_Init+0x134>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e2:	4b2f      	ldr	r3, [pc, #188]	; (8000aa0 <MX_GPIO_Init+0x134>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a2e      	ldr	r2, [pc, #184]	; (8000aa0 <MX_GPIO_Init+0x134>)
 80009e8:	f043 0308 	orr.w	r3, r3, #8
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b2c      	ldr	r3, [pc, #176]	; (8000aa0 <MX_GPIO_Init+0x134>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0308 	and.w	r3, r3, #8
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009fa:	4b29      	ldr	r3, [pc, #164]	; (8000aa0 <MX_GPIO_Init+0x134>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a28      	ldr	r2, [pc, #160]	; (8000aa0 <MX_GPIO_Init+0x134>)
 8000a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <MX_GPIO_Init+0x134>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a18:	4822      	ldr	r0, [pc, #136]	; (8000aa4 <MX_GPIO_Init+0x138>)
 8000a1a:	f002 fd8b 	bl	8003534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2140      	movs	r1, #64	; 0x40
 8000a22:	4821      	ldr	r0, [pc, #132]	; (8000aa8 <MX_GPIO_Init+0x13c>)
 8000a24:	f002 fd86 	bl	8003534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	481b      	ldr	r0, [pc, #108]	; (8000aac <MX_GPIO_Init+0x140>)
 8000a40:	f002 fbb4 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a44:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4811      	ldr	r0, [pc, #68]	; (8000aa4 <MX_GPIO_Init+0x138>)
 8000a5e:	f002 fba5 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a62:	2340      	movs	r3, #64	; 0x40
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	480b      	ldr	r0, [pc, #44]	; (8000aa8 <MX_GPIO_Init+0x13c>)
 8000a7a:	f002 fb97 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a7e:	2380      	movs	r3, #128	; 0x80
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_GPIO_Init+0x13c>)
 8000a92:	f002 fb8b 	bl	80031ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a96:	bf00      	nop
 8000a98:	3730      	adds	r7, #48	; 0x30
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020400 	.word	0x40020400
 8000aa8:	40021800 	.word	0x40021800
 8000aac:	40020800 	.word	0x40020800

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <Error_Handler+0x8>
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <HAL_MspInit+0x44>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <HAL_MspInit+0x44>)
 8000ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <HAL_MspInit+0x44>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_MspInit+0x44>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <HAL_MspInit+0x44>)
 8000ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_MspInit+0x44>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800

08000b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b0ae      	sub	sp, #184	; 0xb8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2290      	movs	r2, #144	; 0x90
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f00f ff99 	bl	8010a5c <memset>
  if(huart->Instance==USART3)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a22      	ldr	r2, [pc, #136]	; (8000bb8 <HAL_UART_MspInit+0xb4>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d13c      	bne.n	8000bae <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b38:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4618      	mov	r0, r3
 8000b44:	f003 fb8c 	bl	8004260 <HAL_RCCEx_PeriphCLKConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b4e:	f7ff ffaf 	bl	8000ab0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b52:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <HAL_UART_MspInit+0xb8>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	4a19      	ldr	r2, [pc, #100]	; (8000bbc <HAL_UART_MspInit+0xb8>)
 8000b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5e:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <HAL_UART_MspInit+0xb8>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b6a:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <HAL_UART_MspInit+0xb8>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a13      	ldr	r2, [pc, #76]	; (8000bbc <HAL_UART_MspInit+0xb8>)
 8000b70:	f043 0308 	orr.w	r3, r3, #8
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_UART_MspInit+0xb8>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0308 	and.w	r3, r3, #8
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b96:	2303      	movs	r3, #3
 8000b98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b9c:	2307      	movs	r3, #7
 8000b9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <HAL_UART_MspInit+0xbc>)
 8000baa:	f002 faff 	bl	80031ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bae:	bf00      	nop
 8000bb0:	37b8      	adds	r7, #184	; 0xb8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40004800 	.word	0x40004800
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020c00 	.word	0x40020c00

08000bc4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b0ae      	sub	sp, #184	; 0xb8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2290      	movs	r2, #144	; 0x90
 8000be2:	2100      	movs	r1, #0
 8000be4:	4618      	mov	r0, r3
 8000be6:	f00f ff39 	bl	8010a5c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bf2:	d159      	bne.n	8000ca8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000bf4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000bf8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4618      	mov	r0, r3
 8000c06:	f003 fb2b 	bl	8004260 <HAL_RCCEx_PeriphCLKConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000c10:	f7ff ff4e 	bl	8000ab0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	4b26      	ldr	r3, [pc, #152]	; (8000cb0 <HAL_PCD_MspInit+0xec>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c18:	4a25      	ldr	r2, [pc, #148]	; (8000cb0 <HAL_PCD_MspInit+0xec>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c20:	4b23      	ldr	r3, [pc, #140]	; (8000cb0 <HAL_PCD_MspInit+0xec>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c2c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c46:	230a      	movs	r3, #10
 8000c48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c50:	4619      	mov	r1, r3
 8000c52:	4818      	ldr	r0, [pc, #96]	; (8000cb4 <HAL_PCD_MspInit+0xf0>)
 8000c54:	f002 faaa 	bl	80031ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c6c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c70:	4619      	mov	r1, r3
 8000c72:	4810      	ldr	r0, [pc, #64]	; (8000cb4 <HAL_PCD_MspInit+0xf0>)
 8000c74:	f002 fa9a 	bl	80031ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c78:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <HAL_PCD_MspInit+0xec>)
 8000c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c7c:	4a0c      	ldr	r2, [pc, #48]	; (8000cb0 <HAL_PCD_MspInit+0xec>)
 8000c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c82:	6353      	str	r3, [r2, #52]	; 0x34
 8000c84:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_PCD_MspInit+0xec>)
 8000c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <HAL_PCD_MspInit+0xec>)
 8000c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c94:	4a06      	ldr	r2, [pc, #24]	; (8000cb0 <HAL_PCD_MspInit+0xec>)
 8000c96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c9a:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <HAL_PCD_MspInit+0xec>)
 8000c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ca8:	bf00      	nop
 8000caa:	37b8      	adds	r7, #184	; 0xb8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020000 	.word	0x40020000

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cbc:	e7fe      	b.n	8000cbc <NMI_Handler+0x4>

08000cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <MemManage_Handler+0x4>

08000cca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <BusFault_Handler+0x4>

08000cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <UsageFault_Handler+0x4>

08000cd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d04:	f000 fd8a 	bl	800181c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return 1;
 8000d10:	2301      	movs	r3, #1
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <_kill>:

int _kill(int pid, int sig)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d26:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <_kill+0x20>)
 8000d28:	2216      	movs	r2, #22
 8000d2a:	601a      	str	r2, [r3, #0]
  return -1;
 8000d2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	20008c58 	.word	0x20008c58

08000d40 <_exit>:

void _exit (int status)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d48:	f04f 31ff 	mov.w	r1, #4294967295
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff ffe5 	bl	8000d1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d52:	e7fe      	b.n	8000d52 <_exit+0x12>

08000d54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	e00a      	b.n	8000d7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d66:	f3af 8000 	nop.w
 8000d6a:	4601      	mov	r1, r0
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	1c5a      	adds	r2, r3, #1
 8000d70:	60ba      	str	r2, [r7, #8]
 8000d72:	b2ca      	uxtb	r2, r1
 8000d74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	697a      	ldr	r2, [r7, #20]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	dbf0      	blt.n	8000d66 <_read+0x12>
  }

  return len;
 8000d84:	687b      	ldr	r3, [r7, #4]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b086      	sub	sp, #24
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	60f8      	str	r0, [r7, #12]
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
 8000d9e:	e009      	b.n	8000db4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	1c5a      	adds	r2, r3, #1
 8000da4:	60ba      	str	r2, [r7, #8]
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fc8d 	bl	80006c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	3301      	adds	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	dbf1      	blt.n	8000da0 <_write+0x12>
  }
  return len;
 8000dbc:	687b      	ldr	r3, [r7, #4]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <_close>:

int _close(int file)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b083      	sub	sp, #12
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
 8000de6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dee:	605a      	str	r2, [r3, #4]
  return 0;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <_isatty>:

int _isatty(int file)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e06:	2301      	movs	r3, #1
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
	...

08000e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b087      	sub	sp, #28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e38:	4a14      	ldr	r2, [pc, #80]	; (8000e8c <_sbrk+0x5c>)
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <_sbrk+0x60>)
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <_sbrk+0x64>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d102      	bne.n	8000e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <_sbrk+0x64>)
 8000e4e:	4a12      	ldr	r2, [pc, #72]	; (8000e98 <_sbrk+0x68>)
 8000e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <_sbrk+0x64>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d205      	bcs.n	8000e6c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000e60:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <_sbrk+0x6c>)
 8000e62:	220c      	movs	r2, #12
 8000e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6a:	e009      	b.n	8000e80 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e6c:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	4a06      	ldr	r2, [pc, #24]	; (8000e94 <_sbrk+0x64>)
 8000e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	371c      	adds	r7, #28
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	20080000 	.word	0x20080000
 8000e90:	00001000 	.word	0x00001000
 8000e94:	2000077c 	.word	0x2000077c
 8000e98:	20008c68 	.word	0x20008c68
 8000e9c:	20008c58 	.word	0x20008c58

08000ea0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <SystemInit+0x20>)
 8000ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eaa:	4a05      	ldr	r2, [pc, #20]	; (8000ec0 <SystemInit+0x20>)
 8000eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <IAP_tftp_decode_op>:
  * @brief Returns the TFTP opcode 
  * @param buf: pointer on the TFTP packet 
  * @retval None
  */
static tftp_opcode IAP_tftp_decode_op(char *buf)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  return (tftp_opcode)(buf[1]);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	781b      	ldrb	r3, [r3, #0]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <IAP_tftp_extract_block>:
  * @brief  Extracts the block number
  * @param  buf: pointer on the TFTP packet 
  * @retval block number
  */
static u16_t IAP_tftp_extract_block(char *buf)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b084      	sub	sp, #16
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  u16_t *b = (u16_t*)buf;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	60fb      	str	r3, [r7, #12]
  return ntohs(b[1]);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	3302      	adds	r3, #2
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f005 fae9 	bl	80064c8 <lwip_htons>
 8000ef6:	4603      	mov	r3, r0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <IAP_tftp_set_opcode>:
  * @param  buffer: pointer on the TFTP packet
  * @param  opcode: TFTP opcode
  * @retval None
  */
static void IAP_tftp_set_opcode(char *buffer, tftp_opcode opcode)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	70fb      	strb	r3, [r7, #3]
  buffer[0] = 0;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
  buffer[1] = (u8_t)opcode;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3301      	adds	r3, #1
 8000f16:	78fa      	ldrb	r2, [r7, #3]
 8000f18:	701a      	strb	r2, [r3, #0]
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <IAP_tftp_set_block>:
  * @param packet: pointer on the TFTP packet 
  * @param  block: block number
  * @retval None
  */
static void IAP_tftp_set_block(char* packet, u16_t block)
{
 8000f26:	b590      	push	{r4, r7, lr}
 8000f28:	b085      	sub	sp, #20
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	460b      	mov	r3, r1
 8000f30:	807b      	strh	r3, [r7, #2]
  u16_t *p = (u16_t *)packet;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60fb      	str	r3, [r7, #12]
  p[1] = htons(block);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	1c9c      	adds	r4, r3, #2
 8000f3a:	887b      	ldrh	r3, [r7, #2]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f005 fac3 	bl	80064c8 <lwip_htons>
 8000f42:	4603      	mov	r3, r0
 8000f44:	8023      	strh	r3, [r4, #0]
}
 8000f46:	bf00      	nop
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd90      	pop	{r4, r7, pc}
	...

08000f50 <IAP_tftp_send_ack_packet>:
  * @param to_port: receive port number
  * @param block: block number
  * @retval: err_t: error code 
  */
static err_t IAP_tftp_send_ack_packet(struct udp_pcb *upcb, const ip_addr_t *to, int to_port, int block)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
 8000f5c:	603b      	str	r3, [r7, #0]
  struct pbuf *pkt_buf; /* Chain of pbuf's to be sent */

  /* create the maximum possible size packet that a TFTP ACK packet can be */
  char packet[TFTP_ACK_PKT_LEN];
	
	memset(packet, 0, TFTP_ACK_PKT_LEN *sizeof(char));
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	2204      	movs	r2, #4
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f00f fd78 	bl	8010a5c <memset>

  /* define the first two bytes of the packet */
  IAP_tftp_set_opcode(packet, TFTP_ACK);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2104      	movs	r1, #4
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ffc4 	bl	8000f00 <IAP_tftp_set_opcode>
   * If we are ACK'ing a DATA pkt then the block number echoes that of the DATA pkt being ACK'd (duh)
   * If we are ACK'ing a WRQ pkt then the block number is always 0
   * RRQ packets are never sent ACK pkts by the server, instead the server sends DATA pkts to the
   * host which are, obviously, used as the "acknowledgement".  This saves from having to sEndTransferboth
   * an ACK packet and a DATA packet for RRQs - see RFC1350 for more info.  */
  IAP_tftp_set_block(packet, block);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4611      	mov	r1, r2
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff ffcf 	bl	8000f26 <IAP_tftp_set_block>

  /* PBUF_TRANSPORT - specifies the transport layer */
  pkt_buf = pbuf_alloc(PBUF_TRANSPORT, TFTP_ACK_PKT_LEN, PBUF_POOL);
 8000f88:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8000f8c:	2104      	movs	r1, #4
 8000f8e:	2036      	movs	r0, #54	; 0x36
 8000f90:	f006 fb14 	bl	80075bc <pbuf_alloc>
 8000f94:	61f8      	str	r0, [r7, #28]

  if (!pkt_buf)      /*if the packet pbuf == NULL exit and EndTransfertransmission */
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d105      	bne.n	8000fa8 <IAP_tftp_send_ack_packet+0x58>
  {

    printf("Can not allocate pbuf]\r\n");
 8000f9c:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <IAP_tftp_send_ack_packet+0x84>)
 8000f9e:	f00f fc33 	bl	8010808 <puts>

    return ERR_MEM;
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa6:	e011      	b.n	8000fcc <IAP_tftp_send_ack_packet+0x7c>
  }

  /* Copy the original data buffer over to the packet buffer's payload */
  memcpy(pkt_buf->payload, packet, TFTP_ACK_PKT_LEN);
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	697a      	ldr	r2, [r7, #20]
 8000fae:	601a      	str	r2, [r3, #0]

  /* Sending packet by UDP protocol */
  err = udp_sendto(upcb, pkt_buf, to, to_port);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	68ba      	ldr	r2, [r7, #8]
 8000fb6:	69f9      	ldr	r1, [r7, #28]
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f00c fce9 	bl	800d990 <udp_sendto>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	76fb      	strb	r3, [r7, #27]

  /* free the buffer pbuf */
  pbuf_free(pkt_buf);
 8000fc2:	69f8      	ldr	r0, [r7, #28]
 8000fc4:	f006 fdde 	bl	8007b84 <pbuf_free>

  return err;
 8000fc8:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3720      	adds	r7, #32
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	08011a30 	.word	0x08011a30

08000fd8 <IAP_wrq_recv_callback>:
  * @param  ip_addr: pointer on the receive IP_address structure
  * @param  port: receive port address
  * @retval None
  */
static void IAP_wrq_recv_callback(void *_args, struct udp_pcb *upcb, struct pbuf *pkt_buf, const ip_addr_t *addr, u16_t port)
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	f507 7410 	add.w	r4, r7, #576	; 0x240
 8000fe4:	f5a4 740d 	sub.w	r4, r4, #564	; 0x234
 8000fe8:	6020      	str	r0, [r4, #0]
 8000fea:	f507 7010 	add.w	r0, r7, #576	; 0x240
 8000fee:	f5a0 700e 	sub.w	r0, r0, #568	; 0x238
 8000ff2:	6001      	str	r1, [r0, #0]
 8000ff4:	f507 7110 	add.w	r1, r7, #576	; 0x240
 8000ff8:	f5a1 710f 	sub.w	r1, r1, #572	; 0x23c
 8000ffc:	600a      	str	r2, [r1, #0]
 8000ffe:	f507 7210 	add.w	r2, r7, #576	; 0x240
 8001002:	f5a2 7210 	sub.w	r2, r2, #576	; 0x240
 8001006:	6013      	str	r3, [r2, #0]
  tftp_connection_args *args = (tftp_connection_args *)_args;
 8001008:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800100c:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
  uint32_t data_buffer[128];
  uint16_t count=0;
 8001016:	2300      	movs	r3, #0
 8001018:	f8a7 323e 	strh.w	r3, [r7, #574]	; 0x23e


  char message[40];


  if (pkt_buf->len != pkt_buf->tot_len)
 800101c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001020:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	895a      	ldrh	r2, [r3, #10]
 8001028:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800102c:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	891b      	ldrh	r3, [r3, #8]
 8001034:	429a      	cmp	r2, r3
 8001036:	d003      	beq.n	8001040 <IAP_wrq_recv_callback+0x68>
  {

	  printf("Invalid data length\n");
 8001038:	4871      	ldr	r0, [pc, #452]	; (8001200 <IAP_wrq_recv_callback+0x228>)
 800103a:	f00f fbe5 	bl	8010808 <puts>

    return;
 800103e:	e0db      	b.n	80011f8 <IAP_wrq_recv_callback+0x220>
  }

  /* Does this packet have any valid data to write? */
  if ((pkt_buf->len > TFTP_DATA_PKT_HDR_LEN) &&
 8001040:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001044:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	895b      	ldrh	r3, [r3, #10]
 800104c:	2b04      	cmp	r3, #4
 800104e:	d96f      	bls.n	8001130 <IAP_wrq_recv_callback+0x158>
      (IAP_tftp_extract_block(pkt_buf->payload) == (args->block + 1)))
 8001050:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001054:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff3e 	bl	8000ede <IAP_tftp_extract_block>
 8001062:	4603      	mov	r3, r0
 8001064:	461a      	mov	r2, r3
 8001066:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800106a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800106e:	3301      	adds	r3, #1
  if ((pkt_buf->len > TFTP_DATA_PKT_HDR_LEN) &&
 8001070:	429a      	cmp	r2, r3
 8001072:	d15d      	bne.n	8001130 <IAP_wrq_recv_callback+0x158>
  {
    /* copy packet payload to data_buffer */
    pbuf_copy_partial(pkt_buf, data_buffer, pkt_buf->len - TFTP_DATA_PKT_HDR_LEN,
 8001074:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001078:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	895b      	ldrh	r3, [r3, #10]
 8001080:	3b04      	subs	r3, #4
 8001082:	b29a      	uxth	r2, r3
 8001084:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001088:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800108c:	f5a3 700f 	sub.w	r0, r3, #572	; 0x23c
 8001090:	2304      	movs	r3, #4
 8001092:	6800      	ldr	r0, [r0, #0]
 8001094:	f006 ff70 	bl	8007f78 <pbuf_copy_partial>
                      TFTP_DATA_PKT_HDR_LEN);
    
    total_count += pkt_buf->len - TFTP_DATA_PKT_HDR_LEN; 
 8001098:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800109c:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	895b      	ldrh	r3, [r3, #10]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b57      	ldr	r3, [pc, #348]	; (8001204 <IAP_wrq_recv_callback+0x22c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	3b04      	subs	r3, #4
 80010ae:	4a55      	ldr	r2, [pc, #340]	; (8001204 <IAP_wrq_recv_callback+0x22c>)
 80010b0:	6013      	str	r3, [r2, #0]
    
    count = (pkt_buf->len - TFTP_DATA_PKT_HDR_LEN)/4;
 80010b2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80010b6:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	895b      	ldrh	r3, [r3, #10]
 80010be:	3b04      	subs	r3, #4
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	da00      	bge.n	80010c6 <IAP_wrq_recv_callback+0xee>
 80010c4:	3303      	adds	r3, #3
 80010c6:	109b      	asrs	r3, r3, #2
 80010c8:	f8a7 323e 	strh.w	r3, [r7, #574]	; 0x23e
    if (((pkt_buf->len - TFTP_DATA_PKT_HDR_LEN)%4)!=0) 
 80010cc:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80010d0:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	895b      	ldrh	r3, [r3, #10]
 80010d8:	3b04      	subs	r3, #4
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d004      	beq.n	80010ec <IAP_wrq_recv_callback+0x114>
    count++;
 80010e2:	f8b7 323e 	ldrh.w	r3, [r7, #574]	; 0x23e
 80010e6:	3301      	adds	r3, #1
 80010e8:	f8a7 323e 	strh.w	r3, [r7, #574]	; 0x23e
     
    /* Write received data in Flash */
    FLASH_If_Write(&Flash_Write_Address, data_buffer ,count);
 80010ec:	f8b7 223e 	ldrh.w	r2, [r7, #574]	; 0x23e
 80010f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010f4:	4619      	mov	r1, r3
 80010f6:	4844      	ldr	r0, [pc, #272]	; (8001208 <IAP_wrq_recv_callback+0x230>)
 80010f8:	f7ff faa0 	bl	800063c <FLASH_If_Write>
       
    /* update our block number to match the block number just received */
    args->block++;
 80010fc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001100:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001104:	1c5a      	adds	r2, r3, #1
 8001106:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800110a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    /* update total bytes  */
    (args->tot_bytes) += (pkt_buf->len - TFTP_DATA_PKT_HDR_LEN);
 800110e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001112:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8001116:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800111a:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	895b      	ldrh	r3, [r3, #10]
 8001122:	3b04      	subs	r3, #4
 8001124:	441a      	add	r2, r3
 8001126:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800112a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 800112e:	e01a      	b.n	8001166 <IAP_wrq_recv_callback+0x18e>

    /* This is a valid pkt but it has no data.  This would occur if the file being
       written is an exact multiple of 512 bytes.  In this case, the args->block
       value must still be updated, but we can skip everything else.    */
  }
  else if (IAP_tftp_extract_block(pkt_buf->payload) == (args->block + 1))
 8001130:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001134:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fece 	bl	8000ede <IAP_tftp_extract_block>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800114a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800114e:	3301      	adds	r3, #1
 8001150:	429a      	cmp	r2, r3
 8001152:	d108      	bne.n	8001166 <IAP_wrq_recv_callback+0x18e>
  {
    /* update our block number to match the block number just received  */
    args->block++;
 8001154:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001158:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800115c:	1c5a      	adds	r2, r3, #1
 800115e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8001162:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Send the appropriate ACK pkt*/
  IAP_tftp_send_ack_packet(upcb, addr, port, args->block);   
 8001166:	f8b7 2250 	ldrh.w	r2, [r7, #592]	; 0x250
 800116a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800116e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001172:	f507 7110 	add.w	r1, r7, #576	; 0x240
 8001176:	f5a1 7110 	sub.w	r1, r1, #576	; 0x240
 800117a:	f507 7010 	add.w	r0, r7, #576	; 0x240
 800117e:	f5a0 700e 	sub.w	r0, r0, #568	; 0x238
 8001182:	6809      	ldr	r1, [r1, #0]
 8001184:	6800      	ldr	r0, [r0, #0]
 8001186:	f7ff fee3 	bl	8000f50 <IAP_tftp_send_ack_packet>

  /* If the last write returned less than the maximum TFTP data pkt length,
   * then we've received the whole file and so we can quit (this is how TFTP
   * signals the EndTransferof a transfer!)
   */
  if (pkt_buf->len < TFTP_DATA_PKT_LEN_MAX)
 800118a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800118e:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	895b      	ldrh	r3, [r3, #10]
 8001196:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800119a:	d225      	bcs.n	80011e8 <IAP_wrq_recv_callback+0x210>
  {
    IAP_tftp_cleanup_wr(upcb, args);
 800119c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80011a0:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80011a4:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 80011a8:	6818      	ldr	r0, [r3, #0]
 80011aa:	f000 f913 	bl	80013d4 <IAP_tftp_cleanup_wr>
    pbuf_free(pkt_buf);
 80011ae:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80011b2:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80011b6:	6818      	ldr	r0, [r3, #0]
 80011b8:	f006 fce4 	bl	8007b84 <pbuf_free>
    

    sprintf(message, "%d bytes ",(int)total_count);
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <IAP_wrq_recv_callback+0x22c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	4911      	ldr	r1, [pc, #68]	; (800120c <IAP_wrq_recv_callback+0x234>)
 80011c8:	4618      	mov	r0, r3
 80011ca:	f00f fb25 	bl	8010818 <siprintf>
    printf("Tot bytes Received:, %s\r\n", message);
 80011ce:	f107 0310 	add.w	r3, r7, #16
 80011d2:	4619      	mov	r1, r3
 80011d4:	480e      	ldr	r0, [pc, #56]	; (8001210 <IAP_wrq_recv_callback+0x238>)
 80011d6:	f00f fab1 	bl	801073c <iprintf>
    printf("  State: Prog Finished \r\n");
 80011da:	480e      	ldr	r0, [pc, #56]	; (8001214 <IAP_wrq_recv_callback+0x23c>)
 80011dc:	f00f fb14 	bl	8010808 <puts>
    printf("Reset the board \r\n");
 80011e0:	480d      	ldr	r0, [pc, #52]	; (8001218 <IAP_wrq_recv_callback+0x240>)
 80011e2:	f00f fb11 	bl	8010808 <puts>
 80011e6:	e007      	b.n	80011f8 <IAP_wrq_recv_callback+0x220>

  }
  else
  {
    pbuf_free(pkt_buf);
 80011e8:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80011ec:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	f006 fcc7 	bl	8007b84 <pbuf_free>
    return;
 80011f6:	bf00      	nop
  }
}
 80011f8:	f507 7711 	add.w	r7, r7, #580	; 0x244
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd90      	pop	{r4, r7, pc}
 8001200:	08011a48 	.word	0x08011a48
 8001204:	20000788 	.word	0x20000788
 8001208:	20000780 	.word	0x20000780
 800120c:	08011a5c 	.word	0x08011a5c
 8001210:	08011a68 	.word	0x08011a68
 8001214:	08011a84 	.word	0x08011a84
 8001218:	08011aa0 	.word	0x08011aa0

0800121c <IAP_tftp_process_write>:
  * @param  to: pointer on the receive IP address
  * @param  to_port: receive port number
  * @retval None
  */
static int IAP_tftp_process_write(struct udp_pcb *upcb, const ip_addr_t *to, int to_port)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  tftp_connection_args *args = NULL;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  /* This function is called from a callback,
  * therefore interrupts are disabled,
  * therefore we can use regular malloc   */
  args = mem_malloc(sizeof *args);
 800122c:	f44f 700a 	mov.w	r0, #552	; 0x228
 8001230:	f005 fc32 	bl	8006a98 <mem_malloc>
 8001234:	6178      	str	r0, [r7, #20]
  if (!args)
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d108      	bne.n	800124e <IAP_tftp_process_write+0x32>
  {

	 printf("Memory error \r\n");
 800123c:	481e      	ldr	r0, [pc, #120]	; (80012b8 <IAP_tftp_process_write+0x9c>)
 800123e:	f00f fae3 	bl	8010808 <puts>

    IAP_tftp_cleanup_wr(upcb, args);
 8001242:	6979      	ldr	r1, [r7, #20]
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f000 f8c5 	bl	80013d4 <IAP_tftp_cleanup_wr>
    return 0;
 800124a:	2300      	movs	r3, #0
 800124c:	e02f      	b.n	80012ae <IAP_tftp_process_write+0x92>
  }

  args->op = TFTP_WRQ;
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	2202      	movs	r2, #2
 8001252:	601a      	str	r2, [r3, #0]
  args->to_ip.addr = to->addr;
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  args->to_port = to_port;
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  /* the block # used as a positive response to a WRQ is _always_ 0!!! (see RFC1350)  */
  args->block = 0;
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	2200      	movs	r2, #0
 800126a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  args->tot_bytes = 0;
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	2200      	movs	r2, #0
 8001272:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  /* set callback for receives on this UDP PCB (Protocol Control Block) */
  udp_recv(upcb, IAP_wrq_recv_callback, args);
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	4910      	ldr	r1, [pc, #64]	; (80012bc <IAP_tftp_process_write+0xa0>)
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f00c fdee 	bl	800de5c <udp_recv>
  
  total_count =0;
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <IAP_tftp_process_write+0xa4>)
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]

  /* init flash */
  FLASH_If_Init();
 8001286:	f7ff f9a9 	bl	80005dc <FLASH_If_Init>
  
  /* erase user flash area */
  FLASH_If_Erase(USER_FLASH_FIRST_PAGE_ADDRESS);
 800128a:	480e      	ldr	r0, [pc, #56]	; (80012c4 <IAP_tftp_process_write+0xa8>)
 800128c:	f7ff f9ac 	bl	80005e8 <FLASH_If_Erase>
 
  Flash_Write_Address = USER_FLASH_FIRST_PAGE_ADDRESS;    
 8001290:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <IAP_tftp_process_write+0xac>)
 8001292:	4a0c      	ldr	r2, [pc, #48]	; (80012c4 <IAP_tftp_process_write+0xa8>)
 8001294:	601a      	str	r2, [r3, #0]
  /* initiate the write transaction by sending the first ack */
  IAP_tftp_send_ack_packet(upcb, to, to_port, args->block);
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	68b9      	ldr	r1, [r7, #8]
 80012a0:	68f8      	ldr	r0, [r7, #12]
 80012a2:	f7ff fe55 	bl	8000f50 <IAP_tftp_send_ack_packet>
  printf("  State: Programming... \r\n");
 80012a6:	4809      	ldr	r0, [pc, #36]	; (80012cc <IAP_tftp_process_write+0xb0>)
 80012a8:	f00f faae 	bl	8010808 <puts>

  return 0;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	08011ab4 	.word	0x08011ab4
 80012bc:	08000fd9 	.word	0x08000fd9
 80012c0:	20000788 	.word	0x20000788
 80012c4:	08020000 	.word	0x08020000
 80012c8:	20000780 	.word	0x20000780
 80012cc:	08011ac4 	.word	0x08011ac4

080012d0 <IAP_tftp_recv_callback>:
  * @param  port: receive port number
  * @retval None
  */
static void IAP_tftp_recv_callback(void *arg, struct udp_pcb *upcb, struct pbuf *pkt_buf,
                        const ip_addr_t *addr, u16_t port)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b0a0      	sub	sp, #128	; 0x80
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
 80012dc:	603b      	str	r3, [r7, #0]
  uint32_t i;
  char filename[40],message[46], *ptr;


  /* create new UDP PCB structure */
  upcb_tftp_data = udp_new();
 80012de:	f00c fe1f 	bl	800df20 <udp_new>
 80012e2:	67b8      	str	r0, [r7, #120]	; 0x78
  if (!upcb_tftp_data)
 80012e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d103      	bne.n	80012f2 <IAP_tftp_recv_callback+0x22>
  {
    /* Error creating PCB. Out of Memory  */
	printf("Can not create pcb \r\n");
 80012ea:	4833      	ldr	r0, [pc, #204]	; (80013b8 <IAP_tftp_recv_callback+0xe8>)
 80012ec:	f00f fa8c 	bl	8010808 <puts>

    return;
 80012f0:	e05e      	b.n	80013b0 <IAP_tftp_recv_callback+0xe0>
  /* bind to port 0 to receive next available free port */
  /* NOTE:  This is how TFTP works.  There is a UDP PCB for the standard port
  * 69 which al transactions begin communication on, however, _all_ subsequent
  * transactions for a given "stream" occur on another port  */
  ip_addr_t myIPADDR;
  IP_ADDR4(&myIPADDR, 192, 168, 0, 155);
 80012f2:	4b32      	ldr	r3, [pc, #200]	; (80013bc <IAP_tftp_recv_callback+0xec>)
 80012f4:	617b      	str	r3, [r7, #20]
  err = udp_bind(upcb_tftp_data, &myIPADDR, 0);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	2200      	movs	r2, #0
 80012fc:	4619      	mov	r1, r3
 80012fe:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001300:	f00c fcfc 	bl	800dcfc <udp_bind>
 8001304:	4603      	mov	r3, r0
 8001306:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if (err != ERR_OK)
 800130a:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <IAP_tftp_recv_callback+0x4a>
  {
    /* Unable to bind to port */
	printf("Can not create pcb \r\n");
 8001312:	4829      	ldr	r0, [pc, #164]	; (80013b8 <IAP_tftp_recv_callback+0xe8>)
 8001314:	f00f fa78 	bl	8010808 <puts>

    return;
 8001318:	e04a      	b.n	80013b0 <IAP_tftp_recv_callback+0xe0>
  }

  op = IAP_tftp_decode_op(pkt_buf->payload);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fdd0 	bl	8000ec4 <IAP_tftp_decode_op>
 8001324:	4603      	mov	r3, r0
 8001326:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
  if (op != TFTP_WRQ)
 800132a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800132e:	2b02      	cmp	r3, #2
 8001330:	d006      	beq.n	8001340 <IAP_tftp_recv_callback+0x70>
  {
    /* remove PCB */
    printf("Bad TFTP opcode \r\n");
 8001332:	4823      	ldr	r0, [pc, #140]	; (80013c0 <IAP_tftp_recv_callback+0xf0>)
 8001334:	f00f fa68 	bl	8010808 <puts>
    udp_remove(upcb_tftp_data);
 8001338:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800133a:	f00c fdaf 	bl	800de9c <udp_remove>
 800133e:	e034      	b.n	80013aa <IAP_tftp_recv_callback+0xda>
  }
  else
  {
    
    ptr = pkt_buf->payload;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	673b      	str	r3, [r7, #112]	; 0x70
    ptr = ptr +2;
 8001346:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001348:	3302      	adds	r3, #2
 800134a:	673b      	str	r3, [r7, #112]	; 0x70
    /*extract file name info */
    i= 0;
 800134c:	2300      	movs	r3, #0
 800134e:	67fb      	str	r3, [r7, #124]	; 0x7c
    while (*(ptr+i)!=0x0)
 8001350:	e002      	b.n	8001358 <IAP_tftp_recv_callback+0x88>
    {
      i++;
 8001352:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001354:	3301      	adds	r3, #1
 8001356:	67fb      	str	r3, [r7, #124]	; 0x7c
    while (*(ptr+i)!=0x0)
 8001358:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800135a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800135c:	4413      	add	r3, r2
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1f6      	bne.n	8001352 <IAP_tftp_recv_callback+0x82>
    }
    strncpy(filename, ptr, i+1);
 8001364:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800136c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800136e:	4618      	mov	r0, r3
 8001370:	f00f fb7c 	bl	8010a6c <strncpy>

    printf("IAP using TFTP \n");
 8001374:	4813      	ldr	r0, [pc, #76]	; (80013c4 <IAP_tftp_recv_callback+0xf4>)
 8001376:	f00f fa47 	bl	8010808 <puts>
    sprintf(message, "File: %s",filename);
 800137a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800137e:	f107 0318 	add.w	r3, r7, #24
 8001382:	4911      	ldr	r1, [pc, #68]	; (80013c8 <IAP_tftp_recv_callback+0xf8>)
 8001384:	4618      	mov	r0, r3
 8001386:	f00f fa47 	bl	8010818 <siprintf>
    printf("%s\r\n", message);
 800138a:	f107 0318 	add.w	r3, r7, #24
 800138e:	4619      	mov	r1, r3
 8001390:	480e      	ldr	r0, [pc, #56]	; (80013cc <IAP_tftp_recv_callback+0xfc>)
 8001392:	f00f f9d3 	bl	801073c <iprintf>
    printf("  State: Erasing...\r\n");
 8001396:	480e      	ldr	r0, [pc, #56]	; (80013d0 <IAP_tftp_recv_callback+0x100>)
 8001398:	f00f fa36 	bl	8010808 <puts>

     
    /* Start the TFTP write mode*/
    IAP_tftp_process_write(upcb_tftp_data, addr, port);
 800139c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80013a0:	461a      	mov	r2, r3
 80013a2:	6839      	ldr	r1, [r7, #0]
 80013a4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80013a6:	f7ff ff39 	bl	800121c <IAP_tftp_process_write>
  }
  pbuf_free(pkt_buf);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f006 fbea 	bl	8007b84 <pbuf_free>
}
 80013b0:	3780      	adds	r7, #128	; 0x80
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	08011ae0 	.word	0x08011ae0
 80013bc:	9b00a8c0 	.word	0x9b00a8c0
 80013c0:	08011af8 	.word	0x08011af8
 80013c4:	08011b0c 	.word	0x08011b0c
 80013c8:	08011b1c 	.word	0x08011b1c
 80013cc:	08011b28 	.word	0x08011b28
 80013d0:	08011b30 	.word	0x08011b30

080013d4 <IAP_tftp_cleanup_wr>:
  * @param  upcb: pointer on udp_pcb structure
  * @param  args: pointer on tftp_connection arguments
  * @retval None
  */
static void IAP_tftp_cleanup_wr(struct udp_pcb *upcb, tftp_connection_args *args)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  /* Free the tftp_connection_args structure */
  mem_free(args);
 80013de:	6838      	ldr	r0, [r7, #0]
 80013e0:	f005 f9f4 	bl	80067cc <mem_free>

  /* Disconnect the udp_pcb */
  udp_disconnect(upcb);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f00c fd11 	bl	800de0c <udp_disconnect>
  
  /* close the connection */
  udp_remove(upcb);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f00c fd56 	bl	800de9c <udp_remove>
  
  /* reset the callback function */
  udp_recv(UDPpcb, IAP_tftp_recv_callback, NULL);
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <IAP_tftp_cleanup_wr+0x34>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2200      	movs	r2, #0
 80013f6:	4905      	ldr	r1, [pc, #20]	; (800140c <IAP_tftp_cleanup_wr+0x38>)
 80013f8:	4618      	mov	r0, r3
 80013fa:	f00c fd2f 	bl	800de5c <udp_recv>
 
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000784 	.word	0x20000784
 800140c:	080012d1 	.word	0x080012d1

08001410 <IAP_tftpd_init>:
  * @brief  Creates and initializes a UDP PCB for TFTP receive operation  
  * @param  None  
  * @retval None
  */
void IAP_tftpd_init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
  err_t err;
  unsigned port = 69; /* 69 is the port used for TFTP protocol initial transaction */
 8001416:	2345      	movs	r3, #69	; 0x45
 8001418:	60fb      	str	r3, [r7, #12]

  /* create a new UDP PCB structure  */
  UDPpcb = udp_new();
 800141a:	f00c fd81 	bl	800df20 <udp_new>
 800141e:	4603      	mov	r3, r0
 8001420:	4a15      	ldr	r2, [pc, #84]	; (8001478 <IAP_tftpd_init+0x68>)
 8001422:	6013      	str	r3, [r2, #0]
  if (!UDPpcb)
 8001424:	4b14      	ldr	r3, [pc, #80]	; (8001478 <IAP_tftpd_init+0x68>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d103      	bne.n	8001434 <IAP_tftpd_init+0x24>
  {
    /* Error creating PCB. Out of Memory  */

	printf("Can not create pcb \r\n");
 800142c:	4813      	ldr	r0, [pc, #76]	; (800147c <IAP_tftpd_init+0x6c>)
 800142e:	f00f f9eb 	bl	8010808 <puts>
 8001432:	e01d      	b.n	8001470 <IAP_tftpd_init+0x60>
    return;
  }

  /* Bind this PCB to port 69  */
  ip_addr_t myIPADDR;
  	IP_ADDR4(&myIPADDR, 192, 168, 0, 155);
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <IAP_tftpd_init+0x70>)
 8001436:	607b      	str	r3, [r7, #4]
  err = udp_bind(UDPpcb, &myIPADDR, port);
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <IAP_tftpd_init+0x68>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	b292      	uxth	r2, r2
 8001440:	1d39      	adds	r1, r7, #4
 8001442:	4618      	mov	r0, r3
 8001444:	f00c fc5a 	bl	800dcfc <udp_bind>
 8001448:	4603      	mov	r3, r0
 800144a:	72fb      	strb	r3, [r7, #11]
  if (err == ERR_OK)
 800144c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d10a      	bne.n	800146a <IAP_tftpd_init+0x5a>
  {
    /* Initialize receive callback function  */
    udp_recv(UDPpcb, IAP_tftp_recv_callback, NULL);
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <IAP_tftpd_init+0x68>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2200      	movs	r2, #0
 800145a:	490a      	ldr	r1, [pc, #40]	; (8001484 <IAP_tftpd_init+0x74>)
 800145c:	4618      	mov	r0, r3
 800145e:	f00c fcfd 	bl	800de5c <udp_recv>
    printf("tftp bootloader initialized \n");
 8001462:	4809      	ldr	r0, [pc, #36]	; (8001488 <IAP_tftpd_init+0x78>)
 8001464:	f00f f9d0 	bl	8010808 <puts>
 8001468:	e002      	b.n	8001470 <IAP_tftpd_init+0x60>
  } 
  else
  {
	printf("Can not create pcb \r\n");
 800146a:	4804      	ldr	r0, [pc, #16]	; (800147c <IAP_tftpd_init+0x6c>)
 800146c:	f00f f9cc 	bl	8010808 <puts>

  }
}
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000784 	.word	0x20000784
 800147c:	08011ae0 	.word	0x08011ae0
 8001480:	9b00a8c0 	.word	0x9b00a8c0
 8001484:	080012d1 	.word	0x080012d1
 8001488:	08011b48 	.word	0x08011b48

0800148c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800148c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001490:	480d      	ldr	r0, [pc, #52]	; (80014c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001492:	490e      	ldr	r1, [pc, #56]	; (80014cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001494:	4a0e      	ldr	r2, [pc, #56]	; (80014d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001498:	e002      	b.n	80014a0 <LoopCopyDataInit>

0800149a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800149c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149e:	3304      	adds	r3, #4

080014a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a4:	d3f9      	bcc.n	800149a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a6:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014a8:	4c0b      	ldr	r4, [pc, #44]	; (80014d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ac:	e001      	b.n	80014b2 <LoopFillZerobss>

080014ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b0:	3204      	adds	r2, #4

080014b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b4:	d3fb      	bcc.n	80014ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014b6:	f7ff fcf3 	bl	8000ea0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ba:	f00f fb31 	bl	8010b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014be:	f7ff f915 	bl	80006ec <main>
  bx  lr    
 80014c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014c4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80014c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014cc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80014d0:	0801473c 	.word	0x0801473c
  ldr r2, =_sbss
 80014d4:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 80014d8:	20008c68 	.word	0x20008c68

080014dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014dc:	e7fe      	b.n	80014dc <ADC_IRQHandler>

080014de <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00b      	beq.n	8001506 <LAN8742_RegisterBusIO+0x28>
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d007      	beq.n	8001506 <LAN8742_RegisterBusIO+0x28>
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <LAN8742_RegisterBusIO+0x28>
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d102      	bne.n	800150c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
 800150a:	e014      	b.n	8001536 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	68da      	ldr	r2, [r3, #12]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	691a      	ldr	r2, [r3, #16]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d17c      	bne.n	800165c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d002      	beq.n	8001570 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2220      	movs	r2, #32
 8001574:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	e01c      	b.n	80015b6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	f107 0208 	add.w	r2, r7, #8
 8001584:	2112      	movs	r1, #18
 8001586:	6978      	ldr	r0, [r7, #20]
 8001588:	4798      	blx	r3
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	da03      	bge.n	8001598 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001590:	f06f 0304 	mvn.w	r3, #4
 8001594:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001596:	e00b      	b.n	80015b0 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	f003 031f 	and.w	r3, r3, #31
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d105      	bne.n	80015b0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
         break;
 80015ae:	e005      	b.n	80015bc <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	3301      	adds	r3, #1
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	2b1f      	cmp	r3, #31
 80015ba:	d9df      	bls.n	800157c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b1f      	cmp	r3, #31
 80015c2:	d902      	bls.n	80015ca <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80015c4:	f06f 0302 	mvn.w	r3, #2
 80015c8:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d145      	bne.n	800165c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	6810      	ldr	r0, [r2, #0]
 80015d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015dc:	2100      	movs	r1, #0
 80015de:	4798      	blx	r3
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	db37      	blt.n	8001656 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6810      	ldr	r0, [r2, #0]
 80015ee:	f107 0208 	add.w	r2, r7, #8
 80015f2:	2100      	movs	r1, #0
 80015f4:	4798      	blx	r3
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	db28      	blt.n	800164e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4798      	blx	r3
 8001602:	4603      	mov	r3, r0
 8001604:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001606:	e01c      	b.n	8001642 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	4798      	blx	r3
 800160e:	4603      	mov	r3, r0
 8001610:	461a      	mov	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800161a:	d80e      	bhi.n	800163a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6810      	ldr	r0, [r2, #0]
 8001624:	f107 0208 	add.w	r2, r7, #8
 8001628:	2100      	movs	r1, #0
 800162a:	4798      	blx	r3
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	da07      	bge.n	8001642 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001632:	f06f 0304 	mvn.w	r3, #4
 8001636:	613b      	str	r3, [r7, #16]
                 break;
 8001638:	e010      	b.n	800165c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800163a:	f06f 0301 	mvn.w	r3, #1
 800163e:	613b      	str	r3, [r7, #16]
               break;
 8001640:	e00c      	b.n	800165c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1dd      	bne.n	8001608 <LAN8742_Init+0xc6>
 800164c:	e006      	b.n	800165c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800164e:	f06f 0304 	mvn.w	r3, #4
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	e002      	b.n	800165c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001656:	f06f 0303 	mvn.w	r3, #3
 800165a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d112      	bne.n	8001688 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	4798      	blx	r3
 8001668:	4603      	mov	r3, r0
 800166a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800166c:	bf00      	nop
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	4798      	blx	r3
 8001674:	4603      	mov	r3, r0
 8001676:	461a      	mov	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001680:	d9f5      	bls.n	800166e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001688:	693b      	ldr	r3, [r7, #16]
 }
 800168a:	4618      	mov	r0, r3
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b084      	sub	sp, #16
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6810      	ldr	r0, [r2, #0]
 80016a6:	f107 020c 	add.w	r2, r7, #12
 80016aa:	2101      	movs	r1, #1
 80016ac:	4798      	blx	r3
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	da02      	bge.n	80016ba <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80016b4:	f06f 0304 	mvn.w	r3, #4
 80016b8:	e06e      	b.n	8001798 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6810      	ldr	r0, [r2, #0]
 80016c2:	f107 020c 	add.w	r2, r7, #12
 80016c6:	2101      	movs	r1, #1
 80016c8:	4798      	blx	r3
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	da02      	bge.n	80016d6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80016d0:	f06f 0304 	mvn.w	r3, #4
 80016d4:	e060      	b.n	8001798 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80016e0:	2301      	movs	r3, #1
 80016e2:	e059      	b.n	8001798 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6810      	ldr	r0, [r2, #0]
 80016ec:	f107 020c 	add.w	r2, r7, #12
 80016f0:	2100      	movs	r1, #0
 80016f2:	4798      	blx	r3
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	da02      	bge.n	8001700 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80016fa:	f06f 0304 	mvn.w	r3, #4
 80016fe:	e04b      	b.n	8001798 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d11b      	bne.n	8001742 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d006      	beq.n	8001722 <LAN8742_GetLinkState+0x90>
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800171e:	2302      	movs	r3, #2
 8001720:	e03a      	b.n	8001798 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800172c:	2303      	movs	r3, #3
 800172e:	e033      	b.n	8001798 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800173a:	2304      	movs	r3, #4
 800173c:	e02c      	b.n	8001798 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800173e:	2305      	movs	r3, #5
 8001740:	e02a      	b.n	8001798 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6810      	ldr	r0, [r2, #0]
 800174a:	f107 020c 	add.w	r2, r7, #12
 800174e:	211f      	movs	r1, #31
 8001750:	4798      	blx	r3
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	da02      	bge.n	800175e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001758:	f06f 0304 	mvn.w	r3, #4
 800175c:	e01c      	b.n	8001798 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001768:	2306      	movs	r3, #6
 800176a:	e015      	b.n	8001798 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 031c 	and.w	r3, r3, #28
 8001772:	2b18      	cmp	r3, #24
 8001774:	d101      	bne.n	800177a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001776:	2302      	movs	r3, #2
 8001778:	e00e      	b.n	8001798 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f003 031c 	and.w	r3, r3, #28
 8001780:	2b08      	cmp	r3, #8
 8001782:	d101      	bne.n	8001788 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001784:	2303      	movs	r3, #3
 8001786:	e007      	b.n	8001798 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 031c 	and.w	r3, r3, #28
 800178e:	2b14      	cmp	r3, #20
 8001790:	d101      	bne.n	8001796 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001792:	2304      	movs	r3, #4
 8001794:	e000      	b.n	8001798 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001796:	2305      	movs	r3, #5
    }				
  }
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a4:	2003      	movs	r0, #3
 80017a6:	f000 f92f 	bl	8001a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017aa:	2000      	movs	r0, #0
 80017ac:	f000 f806 	bl	80017bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b0:	f7ff f984 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_InitTick+0x54>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_InitTick+0x58>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	4619      	mov	r1, r3
 80017ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 f93b 	bl	8001a56 <HAL_SYSTICK_Config>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00e      	b.n	8001808 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b0f      	cmp	r3, #15
 80017ee:	d80a      	bhi.n	8001806 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f0:	2200      	movs	r2, #0
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
 80017f8:	f000 f911 	bl	8001a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017fc:	4a06      	ldr	r2, [pc, #24]	; (8001818 <HAL_InitTick+0x5c>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	e000      	b.n	8001808 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000000 	.word	0x20000000
 8001814:	20000008 	.word	0x20000008
 8001818:	20000004 	.word	0x20000004

0800181c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_IncTick+0x20>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_IncTick+0x24>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4413      	add	r3, r2
 800182c:	4a04      	ldr	r2, [pc, #16]	; (8001840 <HAL_IncTick+0x24>)
 800182e:	6013      	str	r3, [r2, #0]
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000008 	.word	0x20000008
 8001840:	2000078c 	.word	0x2000078c

08001844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return uwTick;
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <HAL_GetTick+0x14>)
 800184a:	681b      	ldr	r3, [r3, #0]
}
 800184c:	4618      	mov	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	2000078c 	.word	0x2000078c

0800185c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001864:	f7ff ffee 	bl	8001844 <HAL_GetTick>
 8001868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001874:	d005      	beq.n	8001882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001876:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <HAL_Delay+0x44>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	461a      	mov	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4413      	add	r3, r2
 8001880:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001882:	bf00      	nop
 8001884:	f7ff ffde 	bl	8001844 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	429a      	cmp	r2, r3
 8001892:	d8f7      	bhi.n	8001884 <HAL_Delay+0x28>
  {
  }
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000008 	.word	0x20000008

080018a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <__NVIC_SetPriorityGrouping+0x40>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c0:	4013      	ands	r3, r2
 80018c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018d2:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <__NVIC_SetPriorityGrouping+0x40>)
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	60d3      	str	r3, [r2, #12]
}
 80018d8:	bf00      	nop
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00
 80018e8:	05fa0000 	.word	0x05fa0000

080018ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f0:	4b04      	ldr	r3, [pc, #16]	; (8001904 <__NVIC_GetPriorityGrouping+0x18>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	0a1b      	lsrs	r3, r3, #8
 80018f6:	f003 0307 	and.w	r3, r3, #7
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	db0a      	blt.n	8001932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	490c      	ldr	r1, [pc, #48]	; (8001954 <__NVIC_SetPriority+0x4c>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	0112      	lsls	r2, r2, #4
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	440b      	add	r3, r1
 800192c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001930:	e00a      	b.n	8001948 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4908      	ldr	r1, [pc, #32]	; (8001958 <__NVIC_SetPriority+0x50>)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	3b04      	subs	r3, #4
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	440b      	add	r3, r1
 8001946:	761a      	strb	r2, [r3, #24]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000e100 	.word	0xe000e100
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f1c3 0307 	rsb	r3, r3, #7
 8001976:	2b04      	cmp	r3, #4
 8001978:	bf28      	it	cs
 800197a:	2304      	movcs	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3304      	adds	r3, #4
 8001982:	2b06      	cmp	r3, #6
 8001984:	d902      	bls.n	800198c <NVIC_EncodePriority+0x30>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3b03      	subs	r3, #3
 800198a:	e000      	b.n	800198e <NVIC_EncodePriority+0x32>
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	f04f 32ff 	mov.w	r2, #4294967295
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	401a      	ands	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	4313      	orrs	r3, r2
         );
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3724      	adds	r7, #36	; 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d4:	d301      	bcc.n	80019da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00f      	b.n	80019fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <SysTick_Config+0x40>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e2:	210f      	movs	r1, #15
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f7ff ff8e 	bl	8001908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <SysTick_Config+0x40>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f2:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <SysTick_Config+0x40>)
 80019f4:	2207      	movs	r2, #7
 80019f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	e000e010 	.word	0xe000e010

08001a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ff47 	bl	80018a4 <__NVIC_SetPriorityGrouping>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a30:	f7ff ff5c 	bl	80018ec <__NVIC_GetPriorityGrouping>
 8001a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f7ff ff8e 	bl	800195c <NVIC_EncodePriority>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff5d 	bl	8001908 <__NVIC_SetPriority>
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ffb0 	bl	80019c4 <SysTick_Config>
 8001a64:	4603      	mov	r3, r0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e06a      	b.n	8001b58 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d106      	bne.n	8001a9a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2223      	movs	r2, #35	; 0x23
 8001a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f004 fb13 	bl	80060c0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9a:	4b31      	ldr	r3, [pc, #196]	; (8001b60 <HAL_ETH_Init+0xf0>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	4a30      	ldr	r2, [pc, #192]	; (8001b60 <HAL_ETH_Init+0xf0>)
 8001aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa6:	4b2e      	ldr	r3, [pc, #184]	; (8001b60 <HAL_ETH_Init+0xf0>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001ab2:	4b2c      	ldr	r3, [pc, #176]	; (8001b64 <HAL_ETH_Init+0xf4>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	4a2b      	ldr	r2, [pc, #172]	; (8001b64 <HAL_ETH_Init+0xf4>)
 8001ab8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001abc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001abe:	4b29      	ldr	r3, [pc, #164]	; (8001b64 <HAL_ETH_Init+0xf4>)
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	4927      	ldr	r1, [pc, #156]	; (8001b64 <HAL_ETH_Init+0xf4>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001acc:	4b25      	ldr	r3, [pc, #148]	; (8001b64 <HAL_ETH_Init+0xf4>)
 8001ace:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ae6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ae8:	f7ff feac 	bl	8001844 <HAL_GetTick>
 8001aec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001aee:	e011      	b.n	8001b14 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001af0:	f7ff fea8 	bl	8001844 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001afe:	d909      	bls.n	8001b14 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2204      	movs	r2, #4
 8001b04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	22e0      	movs	r2, #224	; 0xe0
 8001b0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e021      	b.n	8001b58 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1e4      	bne.n	8001af0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 fdf0 	bl	800270c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 fe97 	bl	8002860 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 feed 	bl	8002912 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	2100      	movs	r1, #0
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 fe55 	bl	80027f0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2210      	movs	r2, #16
 8001b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40013800 	.word	0x40013800

08001b68 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b76:	2b10      	cmp	r3, #16
 8001b78:	d150      	bne.n	8001c1c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2223      	movs	r2, #35	; 0x23
 8001b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2204      	movs	r2, #4
 8001b86:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f9fd 	bl	8001f88 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f042 0208 	orr.w	r2, r2, #8
 8001b9c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	f7ff fe58 	bl	800185c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0204 	orr.w	r2, r2, #4
 8001bc2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bcc:	2001      	movs	r0, #1
 8001bce:	f7ff fe45 	bl	800185c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 fc36 	bl	800244c <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bf2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bf6:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	6812      	ldr	r2, [r2, #0]
 8001c06:	f043 0302 	orr.w	r3, r3, #2
 8001c0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c0e:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2223      	movs	r2, #35	; 0x23
 8001c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	e000      	b.n	8001c1e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
  }
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c34:	2b23      	cmp	r3, #35	; 0x23
 8001c36:	d14a      	bne.n	8001cce <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2223      	movs	r2, #35	; 0x23
 8001c3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c56:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6812      	ldr	r2, [r2, #0]
 8001c66:	f023 0302 	bic.w	r3, r3, #2
 8001c6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c6e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0204 	bic.w	r2, r2, #4
 8001c7e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c88:	2001      	movs	r0, #1
 8001c8a:	f7ff fde7 	bl	800185c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 fbd8 	bl	800244c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0208 	bic.w	r2, r2, #8
 8001caa:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	f7ff fdd1 	bl	800185c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2210      	movs	r2, #16
 8001cc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e000      	b.n	8001cd0 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
  }
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d109      	bne.n	8001cfe <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf0:	f043 0201 	orr.w	r2, r3, #1
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e07c      	b.n	8001df8 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d04:	2b23      	cmp	r3, #35	; 0x23
 8001d06:	d176      	bne.n	8001df6 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	68b9      	ldr	r1, [r7, #8]
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 fe6d 	bl	80029ec <ETH_Prepare_Tx_Descriptors>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d009      	beq.n	8001d2c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1e:	f043 0202 	orr.w	r2, r3, #2
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e065      	b.n	8001df8 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d2c:	f3bf 8f4f 	dsb	sy
}
 8001d30:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	3206      	adds	r2, #6
 8001d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d3e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	629a      	str	r2, [r3, #40]	; 0x28
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d904      	bls.n	8001d5c <HAL_ETH_Transmit+0x84>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d56:	1f1a      	subs	r2, r3, #4
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	3106      	adds	r1, #6
 8001d68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d70:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001d72:	f7ff fd67 	bl	8001844 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001d78:	e037      	b.n	8001dea <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d011      	beq.n	8001db0 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d92:	f043 0208 	orr.w	r2, r3, #8
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001da4:	695a      	ldr	r2, [r3, #20]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e023      	b.n	8001df8 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db6:	d018      	beq.n	8001dea <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001db8:	f7ff fd44 	bl	8001844 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d302      	bcc.n	8001dce <HAL_ETH_Transmit+0xf6>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10d      	bne.n	8001dea <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd4:	f043 0204 	orr.w	r2, r3, #4
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001de4:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e006      	b.n	8001df8 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	dbc3      	blt.n	8001d7a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e000      	b.n	8001df8 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
  }
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b088      	sub	sp, #32
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d109      	bne.n	8001e2c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e1e:	f043 0201 	orr.w	r2, r3, #1
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0a8      	b.n	8001f7e <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e32:	2b23      	cmp	r3, #35	; 0x23
 8001e34:	d001      	beq.n	8001e3a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e0a1      	b.n	8001f7e <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69fa      	ldr	r2, [r7, #28]
 8001e44:	3212      	adds	r2, #18
 8001e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e50:	f1c3 0304 	rsb	r3, r3, #4
 8001e54:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001e56:	e06a      	b.n	8001f2e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d007      	beq.n	8001e74 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	699a      	ldr	r2, [r3, #24]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	69da      	ldr	r2, [r3, #28]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d103      	bne.n	8001e88 <HAL_ETH_ReadData+0x88>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d040      	beq.n	8001f0a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00c      	beq.n	8001ecc <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	0c1b      	lsrs	r3, r3, #16
 8001eb8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001ebc:	3b04      	subs	r3, #4
 8001ebe:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	f004 faab 	bl	8006444 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	441a      	add	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	2200      	movs	r2, #0
 8001f08:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	61fb      	str	r3, [r7, #28]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d902      	bls.n	8001f1c <HAL_ETH_ReadData+0x11c>
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3b04      	subs	r3, #4
 8001f1a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69fa      	ldr	r2, [r7, #28]
 8001f20:	3212      	adds	r2, #18
 8001f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f26:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	db06      	blt.n	8001f44 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d202      	bcs.n	8001f44 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d089      	beq.n	8001e58 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	441a      	add	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 f815 	bl	8001f88 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69fa      	ldr	r2, [r7, #28]
 8001f62:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d108      	bne.n	8001f7c <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	e000      	b.n	8001f7e <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3720      	adds	r7, #32
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001f94:	2301      	movs	r3, #1
 8001f96:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f9c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69fa      	ldr	r2, [r7, #28]
 8001fa2:	3212      	adds	r2, #18
 8001fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fae:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001fb0:	e040      	b.n	8002034 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d112      	bne.n	8001fe0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001fba:	f107 030c 	add.w	r3, r7, #12
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f004 fa10 	bl	80063e4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d102      	bne.n	8001fd0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	74fb      	strb	r3, [r7, #19]
 8001fce:	e007      	b.n	8001fe0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001fe0:	7cfb      	ldrb	r3, [r7, #19]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d026      	beq.n	8002034 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d103      	bne.n	8001ff6 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	4a1e      	ldr	r2, [pc, #120]	; (800206c <ETH_UpdateDescriptor+0xe4>)
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	e003      	b.n	8001ffe <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001ffc:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001ffe:	f3bf 8f5f 	dmb	sy
}
 8002002:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	3301      	adds	r3, #1
 8002014:	61fb      	str	r3, [r7, #28]
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	2b03      	cmp	r3, #3
 800201a:	d902      	bls.n	8002022 <ETH_UpdateDescriptor+0x9a>
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	3b04      	subs	r3, #4
 8002020:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69fa      	ldr	r2, [r7, #28]
 8002026:	3212      	adds	r2, #18
 8002028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800202c:	617b      	str	r3, [r7, #20]
      desccount--;
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	3b01      	subs	r3, #1
 8002032:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d002      	beq.n	8002040 <ETH_UpdateDescriptor+0xb8>
 800203a:	7cfb      	ldrb	r3, [r7, #19]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1b8      	bne.n	8001fb2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	429a      	cmp	r2, r3
 8002048:	d00c      	beq.n	8002064 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002052:	461a      	mov	r2, r3
 8002054:	2300      	movs	r3, #0
 8002056:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002064:	bf00      	nop
 8002066:	3720      	adds	r7, #32
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	80004600 	.word	0x80004600

08002070 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f003 031c 	and.w	r3, r3, #28
 800208c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	02db      	lsls	r3, r3, #11
 8002092:	b29b      	uxth	r3, r3
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	4313      	orrs	r3, r2
 8002098:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	019b      	lsls	r3, r3, #6
 800209e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f023 0302 	bic.w	r3, r3, #2
 80020ae:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80020c0:	f7ff fbc0 	bl	8001844 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80020c6:	e00d      	b.n	80020e4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80020c8:	f7ff fbbc 	bl	8001844 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d6:	d301      	bcc.n	80020dc <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e010      	b.n	80020fe <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1ec      	bne.n	80020c8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	461a      	mov	r2, r3
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b086      	sub	sp, #24
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f003 031c 	and.w	r3, r3, #28
 8002122:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	02db      	lsls	r3, r3, #11
 8002128:	b29b      	uxth	r3, r3
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	4313      	orrs	r3, r2
 800212e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	019b      	lsls	r3, r3, #6
 8002134:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	4313      	orrs	r3, r2
 800213c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f043 0302 	orr.w	r3, r3, #2
 8002144:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	b29a      	uxth	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002160:	f7ff fb70 	bl	8001844 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002166:	e00d      	b.n	8002184 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002168:	f7ff fb6c 	bl	8001844 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002176:	d301      	bcc.n	800217c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e009      	b.n	8002190 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1ec      	bne.n	8002168 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0d9      	b.n	8002360 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	bf14      	ite	ne
 80021ba:	2301      	movne	r3, #1
 80021bc:	2300      	moveq	r3, #0
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	461a      	mov	r2, r3
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bf0c      	ite	eq
 80021e4:	2301      	moveq	r3, #1
 80021e6:	2300      	movne	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	bf14      	ite	ne
 8002200:	2301      	movne	r3, #1
 8002202:	2300      	moveq	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002216:	2b00      	cmp	r3, #0
 8002218:	bf0c      	ite	eq
 800221a:	2301      	moveq	r3, #1
 800221c:	2300      	movne	r3, #0
 800221e:	b2db      	uxtb	r3, r3
 8002220:	461a      	mov	r2, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002230:	2b00      	cmp	r3, #0
 8002232:	bf14      	ite	ne
 8002234:	2301      	movne	r3, #1
 8002236:	2300      	moveq	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	461a      	mov	r2, r3
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002266:	2b00      	cmp	r3, #0
 8002268:	bf0c      	ite	eq
 800226a:	2301      	moveq	r3, #1
 800226c:	2300      	movne	r3, #0
 800226e:	b2db      	uxtb	r3, r3
 8002270:	461a      	mov	r2, r3
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002280:	2b00      	cmp	r3, #0
 8002282:	bf0c      	ite	eq
 8002284:	2301      	moveq	r3, #1
 8002286:	2300      	movne	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	461a      	mov	r2, r3
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229a:	2b00      	cmp	r3, #0
 800229c:	bf14      	ite	ne
 800229e:	2301      	movne	r3, #1
 80022a0:	2300      	moveq	r3, #0
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	461a      	mov	r2, r3
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	bf14      	ite	ne
 80022c6:	2301      	movne	r3, #1
 80022c8:	2300      	moveq	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bf14      	ite	ne
 80022e0:	2301      	movne	r3, #1
 80022e2:	2300      	moveq	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	461a      	mov	r2, r3
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	bf0c      	ite	eq
 80022fc:	2301      	moveq	r3, #1
 80022fe:	2300      	movne	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	461a      	mov	r2, r3
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	0c1b      	lsrs	r3, r3, #16
 8002320:	b29a      	uxth	r2, r3
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	bf14      	ite	ne
 8002334:	2301      	movne	r3, #1
 8002336:	2300      	moveq	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	461a      	mov	r2, r3
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800234c:	2b00      	cmp	r3, #0
 800234e:	bf14      	ite	ne
 8002350:	2301      	movne	r3, #1
 8002352:	2300      	moveq	r3, #0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e00b      	b.n	8002398 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002386:	2b10      	cmp	r3, #16
 8002388:	d105      	bne.n	8002396 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800238a:	6839      	ldr	r1, [r7, #0]
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f883 	bl	8002498 <ETH_SetMACConfig>

    return HAL_OK;
 8002392:	2300      	movs	r3, #0
 8002394:	e000      	b.n	8002398 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
  }
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f023 031c 	bic.w	r3, r3, #28
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80023b8:	f001 ff1e 	bl	80041f8 <HAL_RCC_GetHCLKFreq>
 80023bc:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	4a1d      	ldr	r2, [pc, #116]	; (8002438 <HAL_ETH_SetMDIOClockRange+0x98>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d908      	bls.n	80023d8 <HAL_ETH_SetMDIOClockRange+0x38>
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	4a1c      	ldr	r2, [pc, #112]	; (800243c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d804      	bhi.n	80023d8 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f043 0308 	orr.w	r3, r3, #8
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	e027      	b.n	8002428 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	4a18      	ldr	r2, [pc, #96]	; (800243c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d908      	bls.n	80023f2 <HAL_ETH_SetMDIOClockRange+0x52>
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	4a17      	ldr	r2, [pc, #92]	; (8002440 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d204      	bcs.n	80023f2 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f043 030c 	orr.w	r3, r3, #12
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	e01a      	b.n	8002428 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	4a12      	ldr	r2, [pc, #72]	; (8002440 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d303      	bcc.n	8002402 <HAL_ETH_SetMDIOClockRange+0x62>
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	4a11      	ldr	r2, [pc, #68]	; (8002444 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d911      	bls.n	8002426 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	4a0f      	ldr	r2, [pc, #60]	; (8002444 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d908      	bls.n	800241c <HAL_ETH_SetMDIOClockRange+0x7c>
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	4a0e      	ldr	r2, [pc, #56]	; (8002448 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d804      	bhi.n	800241c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f043 0304 	orr.w	r3, r3, #4
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	e005      	b.n	8002428 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f043 0310 	orr.w	r3, r3, #16
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	e000      	b.n	8002428 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002426:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	611a      	str	r2, [r3, #16]
}
 8002430:	bf00      	nop
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	01312cff 	.word	0x01312cff
 800243c:	02160ebf 	.word	0x02160ebf
 8002440:	03938700 	.word	0x03938700
 8002444:	05f5e0ff 	.word	0x05f5e0ff
 8002448:	08f0d17f 	.word	0x08f0d17f

0800244c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6812      	ldr	r2, [r2, #0]
 8002466:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800246a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800246e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800247c:	2001      	movs	r0, #1
 800247e:	f7ff f9ed 	bl	800185c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800248c:	6193      	str	r3, [r2, #24]
}
 800248e:	bf00      	nop
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	4b51      	ldr	r3, [pc, #324]	; (80025f4 <ETH_SetMACConfig+0x15c>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	7c1b      	ldrb	r3, [r3, #16]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d102      	bne.n	80024c0 <ETH_SetMACConfig+0x28>
 80024ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80024be:	e000      	b.n	80024c2 <ETH_SetMACConfig+0x2a>
 80024c0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	7c5b      	ldrb	r3, [r3, #17]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d102      	bne.n	80024d0 <ETH_SetMACConfig+0x38>
 80024ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024ce:	e000      	b.n	80024d2 <ETH_SetMACConfig+0x3a>
 80024d0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80024d2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80024d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	7fdb      	ldrb	r3, [r3, #31]
 80024de:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80024e0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80024e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	7f92      	ldrb	r2, [r2, #30]
 80024ec:	2a00      	cmp	r2, #0
 80024ee:	d102      	bne.n	80024f6 <ETH_SetMACConfig+0x5e>
 80024f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024f4:	e000      	b.n	80024f8 <ETH_SetMACConfig+0x60>
 80024f6:	2200      	movs	r2, #0
                        macconf->Speed |
 80024f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	7f1b      	ldrb	r3, [r3, #28]
 80024fe:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002500:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002506:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	791b      	ldrb	r3, [r3, #4]
 800250c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800250e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002516:	2a00      	cmp	r2, #0
 8002518:	d102      	bne.n	8002520 <ETH_SetMACConfig+0x88>
 800251a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800251e:	e000      	b.n	8002522 <ETH_SetMACConfig+0x8a>
 8002520:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002522:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	7bdb      	ldrb	r3, [r3, #15]
 8002528:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800252a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002530:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002538:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800253a:	4313      	orrs	r3, r2
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	4313      	orrs	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002552:	2001      	movs	r0, #1
 8002554:	f7ff f982 	bl	800185c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800256e:	4013      	ands	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002576:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800257e:	2a00      	cmp	r2, #0
 8002580:	d101      	bne.n	8002586 <ETH_SetMACConfig+0xee>
 8002582:	2280      	movs	r2, #128	; 0x80
 8002584:	e000      	b.n	8002588 <ETH_SetMACConfig+0xf0>
 8002586:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002588:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800258e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002596:	2a01      	cmp	r2, #1
 8002598:	d101      	bne.n	800259e <ETH_SetMACConfig+0x106>
 800259a:	2208      	movs	r2, #8
 800259c:	e000      	b.n	80025a0 <ETH_SetMACConfig+0x108>
 800259e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80025a0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80025a8:	2a01      	cmp	r2, #1
 80025aa:	d101      	bne.n	80025b0 <ETH_SetMACConfig+0x118>
 80025ac:	2204      	movs	r2, #4
 80025ae:	e000      	b.n	80025b2 <ETH_SetMACConfig+0x11a>
 80025b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80025b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80025ba:	2a01      	cmp	r2, #1
 80025bc:	d101      	bne.n	80025c2 <ETH_SetMACConfig+0x12a>
 80025be:	2202      	movs	r2, #2
 80025c0:	e000      	b.n	80025c4 <ETH_SetMACConfig+0x12c>
 80025c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80025c4:	4313      	orrs	r3, r2
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025dc:	2001      	movs	r0, #1
 80025de:	f7ff f93d 	bl	800185c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	619a      	str	r2, [r3, #24]
}
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	ff20810f 	.word	0xff20810f

080025f8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4b3d      	ldr	r3, [pc, #244]	; (8002708 <ETH_SetDMAConfig+0x110>)
 8002612:	4013      	ands	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	7b1b      	ldrb	r3, [r3, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d102      	bne.n	8002624 <ETH_SetDMAConfig+0x2c>
 800261e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002622:	e000      	b.n	8002626 <ETH_SetDMAConfig+0x2e>
 8002624:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	7b5b      	ldrb	r3, [r3, #13]
 800262a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800262c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	7f52      	ldrb	r2, [r2, #29]
 8002632:	2a00      	cmp	r2, #0
 8002634:	d102      	bne.n	800263c <ETH_SetDMAConfig+0x44>
 8002636:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800263a:	e000      	b.n	800263e <ETH_SetDMAConfig+0x46>
 800263c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800263e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	7b9b      	ldrb	r3, [r3, #14]
 8002644:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002646:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800264c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	7f1b      	ldrb	r3, [r3, #28]
 8002652:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002654:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	7f9b      	ldrb	r3, [r3, #30]
 800265a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800265c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002662:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800266a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800266c:	4313      	orrs	r3, r2
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4313      	orrs	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800267c:	461a      	mov	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800268e:	2001      	movs	r0, #1
 8002690:	f7ff f8e4 	bl	800185c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800269c:	461a      	mov	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	791b      	ldrb	r3, [r3, #4]
 80026a6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80026ac:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80026b2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80026b8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026c0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80026c2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80026ca:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80026d0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026de:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026ec:	2001      	movs	r0, #1
 80026ee:	f7ff f8b5 	bl	800185c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026fa:	461a      	mov	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6013      	str	r3, [r2, #0]
}
 8002700:	bf00      	nop
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	f8de3f23 	.word	0xf8de3f23

0800270c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b0a6      	sub	sp, #152	; 0x98
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002714:	2301      	movs	r3, #1
 8002716:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800271a:	2301      	movs	r3, #1
 800271c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002720:	2300      	movs	r3, #0
 8002722:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002724:	2300      	movs	r3, #0
 8002726:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800272a:	2301      	movs	r3, #1
 800272c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002730:	2300      	movs	r3, #0
 8002732:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002736:	2301      	movs	r3, #1
 8002738:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800273c:	2300      	movs	r3, #0
 800273e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002742:	2300      	movs	r3, #0
 8002744:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002748:	2300      	movs	r3, #0
 800274a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800274c:	2300      	movs	r3, #0
 800274e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002752:	2300      	movs	r3, #0
 8002754:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002756:	2300      	movs	r3, #0
 8002758:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800275c:	2300      	movs	r3, #0
 800275e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002762:	2300      	movs	r3, #0
 8002764:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002768:	2300      	movs	r3, #0
 800276a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800276e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002772:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002774:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002778:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800277a:	2300      	movs	r3, #0
 800277c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002780:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002784:	4619      	mov	r1, r3
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff fe86 	bl	8002498 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800278c:	2301      	movs	r3, #1
 800278e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002790:	2301      	movs	r3, #1
 8002792:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002794:	2301      	movs	r3, #1
 8002796:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800279a:	2301      	movs	r3, #1
 800279c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80027a2:	2300      	movs	r3, #0
 80027a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80027a8:	2300      	movs	r3, #0
 80027aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80027ae:	2300      	movs	r3, #0
 80027b0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80027b2:	2301      	movs	r3, #1
 80027b4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80027b8:	2301      	movs	r3, #1
 80027ba:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80027bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027c0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80027c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027c6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80027c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027cc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80027ce:	2301      	movs	r3, #1
 80027d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80027d8:	2300      	movs	r3, #0
 80027da:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80027dc:	f107 0308 	add.w	r3, r7, #8
 80027e0:	4619      	mov	r1, r3
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff ff08 	bl	80025f8 <ETH_SetDMAConfig>
}
 80027e8:	bf00      	nop
 80027ea:	3798      	adds	r7, #152	; 0x98
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3305      	adds	r3, #5
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	021b      	lsls	r3, r3, #8
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	3204      	adds	r2, #4
 8002808:	7812      	ldrb	r2, [r2, #0]
 800280a:	4313      	orrs	r3, r2
 800280c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	4b11      	ldr	r3, [pc, #68]	; (8002858 <ETH_MACAddressConfig+0x68>)
 8002812:	4413      	add	r3, r2
 8002814:	461a      	mov	r2, r3
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3303      	adds	r3, #3
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	061a      	lsls	r2, r3, #24
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3302      	adds	r3, #2
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	041b      	lsls	r3, r3, #16
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3301      	adds	r3, #1
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	021b      	lsls	r3, r3, #8
 8002834:	4313      	orrs	r3, r2
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	7812      	ldrb	r2, [r2, #0]
 800283a:	4313      	orrs	r3, r2
 800283c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	4b06      	ldr	r3, [pc, #24]	; (800285c <ETH_MACAddressConfig+0x6c>)
 8002842:	4413      	add	r3, r2
 8002844:	461a      	mov	r2, r3
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	6013      	str	r3, [r2, #0]
}
 800284a:	bf00      	nop
 800284c:	371c      	adds	r7, #28
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40028040 	.word	0x40028040
 800285c:	40028044 	.word	0x40028044

08002860 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002868:	2300      	movs	r3, #0
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	e03e      	b.n	80028ec <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68d9      	ldr	r1, [r3, #12]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	440b      	add	r3, r1
 800287e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2200      	movs	r2, #0
 800288a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2200      	movs	r2, #0
 8002896:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	3206      	adds	r2, #6
 80028a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d80c      	bhi.n	80028d0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68d9      	ldr	r1, [r3, #12]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1c5a      	adds	r2, r3, #1
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	440b      	add	r3, r1
 80028c8:	461a      	mov	r2, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	e004      	b.n	80028da <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	461a      	mov	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	3301      	adds	r3, #1
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	d9bd      	bls.n	800286e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002904:	611a      	str	r2, [r3, #16]
}
 8002906:	bf00      	nop
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002912:	b480      	push	{r7}
 8002914:	b085      	sub	sp, #20
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	e046      	b.n	80029ae <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6919      	ldr	r1, [r3, #16]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	440b      	add	r3, r1
 8002930:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2200      	movs	r2, #0
 800293c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2200      	movs	r2, #0
 8002942:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2200      	movs	r2, #0
 8002948:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2200      	movs	r2, #0
 800294e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2200      	movs	r2, #0
 8002954:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800295c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002964:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	3212      	adds	r2, #18
 800297a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2b02      	cmp	r3, #2
 8002982:	d80c      	bhi.n	800299e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6919      	ldr	r1, [r3, #16]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	440b      	add	r3, r1
 8002996:	461a      	mov	r2, r3
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	60da      	str	r2, [r3, #12]
 800299c:	e004      	b.n	80029a8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	461a      	mov	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	3301      	adds	r3, #1
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d9b5      	bls.n	8002920 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029de:	60da      	str	r2, [r3, #12]
}
 80029e0:	bf00      	nop
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b08d      	sub	sp, #52	; 0x34
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	3318      	adds	r3, #24
 80029fc:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a16:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a2e:	d007      	beq.n	8002a40 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a34:	3304      	adds	r3, #4
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002a40:	2302      	movs	r3, #2
 8002a42:	e0ff      	b.n	8002c44 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	3301      	adds	r3, #1
 8002a48:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	4b7d      	ldr	r3, [pc, #500]	; (8002c50 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	69fa      	ldr	r2, [r7, #28]
 8002a5e:	6852      	ldr	r2, [r2, #4]
 8002a60:	431a      	orrs	r2, r3
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d008      	beq.n	8002a84 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0320 	and.w	r3, r3, #32
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002ac6:	f3bf 8f5f 	dmb	sy
}
 8002aca:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002ad8:	e082      	b.n	8002be0 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d006      	beq.n	8002afa <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	e005      	b.n	8002b06 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b08:	3301      	adds	r3, #1
 8002b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d902      	bls.n	8002b18 <ETH_Prepare_Tx_Descriptors+0x12c>
 8002b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b14:	3b04      	subs	r3, #4
 8002b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b20:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b3a:	d007      	beq.n	8002b4c <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b40:	3304      	adds	r3, #4
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d029      	beq.n	8002ba0 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b58:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b5e:	e019      	b.n	8002b94 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002b60:	f3bf 8f5f 	dmb	sy
}
 8002b64:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b74:	3301      	adds	r3, #1
 8002b76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7a:	2b03      	cmp	r3, #3
 8002b7c:	d902      	bls.n	8002b84 <ETH_Prepare_Tx_Descriptors+0x198>
 8002b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b80:	3b04      	subs	r3, #4
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b8c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b90:	3301      	adds	r3, #1
 8002b92:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d3e1      	bcc.n	8002b60 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e051      	b.n	8002c44 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	4b25      	ldr	r3, [pc, #148]	; (8002c50 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	6852      	ldr	r2, [r2, #4]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002bce:	f3bf 8f5f 	dmb	sy
}
 8002bd2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f47f af78 	bne.w	8002ada <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d006      	beq.n	8002bfe <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e005      	b.n	8002c0a <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c1a:	6979      	ldr	r1, [r7, #20]
 8002c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1e:	3304      	adds	r3, #4
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	440b      	add	r3, r1
 8002c24:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c2a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c2c:	b672      	cpsid	i
}
 8002c2e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	4413      	add	r3, r2
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002c3e:	b662      	cpsie	i
}
 8002c40:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3734      	adds	r7, #52	; 0x34
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	ffffe000 	.word	0xffffe000

08002c54 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002c66:	4b27      	ldr	r3, [pc, #156]	; (8002d04 <HAL_FLASH_Program+0xb0>)
 8002c68:	7d1b      	ldrb	r3, [r3, #20]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <HAL_FLASH_Program+0x1e>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e043      	b.n	8002cfa <HAL_FLASH_Program+0xa6>
 8002c72:	4b24      	ldr	r3, [pc, #144]	; (8002d04 <HAL_FLASH_Program+0xb0>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c7c:	f000 f868 	bl	8002d50 <FLASH_WaitForLastOperation>
 8002c80:	4603      	mov	r3, r0
 8002c82:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d133      	bne.n	8002cf2 <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d823      	bhi.n	8002cd8 <HAL_FLASH_Program+0x84>
 8002c90:	a201      	add	r2, pc, #4	; (adr r2, 8002c98 <HAL_FLASH_Program+0x44>)
 8002c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c96:	bf00      	nop
 8002c98:	08002ca9 	.word	0x08002ca9
 8002c9c:	08002cb5 	.word	0x08002cb5
 8002ca0:	08002cc1 	.word	0x08002cc1
 8002ca4:	08002ccd 	.word	0x08002ccd
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8002ca8:	783b      	ldrb	r3, [r7, #0]
 8002caa:	4619      	mov	r1, r3
 8002cac:	68b8      	ldr	r0, [r7, #8]
 8002cae:	f000 f911 	bl	8002ed4 <FLASH_Program_Byte>
        break;
 8002cb2:	e012      	b.n	8002cda <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002cb4:	883b      	ldrh	r3, [r7, #0]
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	68b8      	ldr	r0, [r7, #8]
 8002cba:	f000 f8e5 	bl	8002e88 <FLASH_Program_HalfWord>
        break;
 8002cbe:	e00c      	b.n	8002cda <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	68b8      	ldr	r0, [r7, #8]
 8002cc6:	f000 f8b9 	bl	8002e3c <FLASH_Program_Word>
        break;
 8002cca:	e006      	b.n	8002cda <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8002ccc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cd0:	68b8      	ldr	r0, [r7, #8]
 8002cd2:	f000 f87d 	bl	8002dd0 <FLASH_Program_DoubleWord>
        break;
 8002cd6:	e000      	b.n	8002cda <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8002cd8:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002cda:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002cde:	f000 f837 	bl	8002d50 <FLASH_WaitForLastOperation>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8002ce6:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <HAL_FLASH_Program+0xb4>)
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	4a07      	ldr	r2, [pc, #28]	; (8002d08 <HAL_FLASH_Program+0xb4>)
 8002cec:	f023 0301 	bic.w	r3, r3, #1
 8002cf0:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002cf2:	4b04      	ldr	r3, [pc, #16]	; (8002d04 <HAL_FLASH_Program+0xb0>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	751a      	strb	r2, [r3, #20]

  return status;
 8002cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20000790 	.word	0x20000790
 8002d08:	40023c00 	.word	0x40023c00

08002d0c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002d16:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <HAL_FLASH_Unlock+0x38>)
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	da0b      	bge.n	8002d36 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002d1e:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <HAL_FLASH_Unlock+0x38>)
 8002d20:	4a09      	ldr	r2, [pc, #36]	; (8002d48 <HAL_FLASH_Unlock+0x3c>)
 8002d22:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002d24:	4b07      	ldr	r3, [pc, #28]	; (8002d44 <HAL_FLASH_Unlock+0x38>)
 8002d26:	4a09      	ldr	r2, [pc, #36]	; (8002d4c <HAL_FLASH_Unlock+0x40>)
 8002d28:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002d2a:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_FLASH_Unlock+0x38>)
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	da01      	bge.n	8002d36 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002d36:	79fb      	ldrb	r3, [r7, #7]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	40023c00 	.word	0x40023c00
 8002d48:	45670123 	.word	0x45670123
 8002d4c:	cdef89ab 	.word	0xcdef89ab

08002d50 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002d5c:	4b1a      	ldr	r3, [pc, #104]	; (8002dc8 <FLASH_WaitForLastOperation+0x78>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002d62:	f7fe fd6f 	bl	8001844 <HAL_GetTick>
 8002d66:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002d68:	e010      	b.n	8002d8c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d70:	d00c      	beq.n	8002d8c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d007      	beq.n	8002d88 <FLASH_WaitForLastOperation+0x38>
 8002d78:	f7fe fd64 	bl	8001844 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d201      	bcs.n	8002d8c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e019      	b.n	8002dc0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002d8c:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <FLASH_WaitForLastOperation+0x7c>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1e8      	bne.n	8002d6a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8002d98:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <FLASH_WaitForLastOperation+0x7c>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002da4:	f000 f8ba 	bl	8002f1c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e009      	b.n	8002dc0 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002dac:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <FLASH_WaitForLastOperation+0x7c>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002db8:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <FLASH_WaitForLastOperation+0x7c>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
  
}  
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	20000790 	.word	0x20000790
 8002dcc:	40023c00 	.word	0x40023c00

08002dd0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002ddc:	4b16      	ldr	r3, [pc, #88]	; (8002e38 <FLASH_Program_DoubleWord+0x68>)
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	4a15      	ldr	r2, [pc, #84]	; (8002e38 <FLASH_Program_DoubleWord+0x68>)
 8002de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002de8:	4b13      	ldr	r3, [pc, #76]	; (8002e38 <FLASH_Program_DoubleWord+0x68>)
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	4a12      	ldr	r2, [pc, #72]	; (8002e38 <FLASH_Program_DoubleWord+0x68>)
 8002dee:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002df2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002df4:	4b10      	ldr	r3, [pc, #64]	; (8002e38 <FLASH_Program_DoubleWord+0x68>)
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	4a0f      	ldr	r2, [pc, #60]	; (8002e38 <FLASH_Program_DoubleWord+0x68>)
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002e06:	f3bf 8f6f 	isb	sy
}
 8002e0a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002e0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	000a      	movs	r2, r1
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	68f9      	ldr	r1, [r7, #12]
 8002e1e:	3104      	adds	r1, #4
 8002e20:	4613      	mov	r3, r2
 8002e22:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e24:	f3bf 8f4f 	dsb	sy
}
 8002e28:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002e2a:	bf00      	nop
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40023c00 	.word	0x40023c00

08002e3c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002e46:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <FLASH_Program_Word+0x48>)
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	4a0e      	ldr	r2, [pc, #56]	; (8002e84 <FLASH_Program_Word+0x48>)
 8002e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e50:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002e52:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <FLASH_Program_Word+0x48>)
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	4a0b      	ldr	r2, [pc, #44]	; (8002e84 <FLASH_Program_Word+0x48>)
 8002e58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e5c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002e5e:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <FLASH_Program_Word+0x48>)
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	4a08      	ldr	r2, [pc, #32]	; (8002e84 <FLASH_Program_Word+0x48>)
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e70:	f3bf 8f4f 	dsb	sy
}
 8002e74:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40023c00 	.word	0x40023c00

08002e88 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002e94:	4b0e      	ldr	r3, [pc, #56]	; (8002ed0 <FLASH_Program_HalfWord+0x48>)
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	4a0d      	ldr	r2, [pc, #52]	; (8002ed0 <FLASH_Program_HalfWord+0x48>)
 8002e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <FLASH_Program_HalfWord+0x48>)
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	4a0a      	ldr	r2, [pc, #40]	; (8002ed0 <FLASH_Program_HalfWord+0x48>)
 8002ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eaa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002eac:	4b08      	ldr	r3, [pc, #32]	; (8002ed0 <FLASH_Program_HalfWord+0x48>)
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	4a07      	ldr	r2, [pc, #28]	; (8002ed0 <FLASH_Program_HalfWord+0x48>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	887a      	ldrh	r2, [r7, #2]
 8002ebc:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002ebe:	f3bf 8f4f 	dsb	sy
}
 8002ec2:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	40023c00 	.word	0x40023c00

08002ed4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002ee0:	4b0d      	ldr	r3, [pc, #52]	; (8002f18 <FLASH_Program_Byte+0x44>)
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	4a0c      	ldr	r2, [pc, #48]	; (8002f18 <FLASH_Program_Byte+0x44>)
 8002ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002eec:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <FLASH_Program_Byte+0x44>)
 8002eee:	4a0a      	ldr	r2, [pc, #40]	; (8002f18 <FLASH_Program_Byte+0x44>)
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002ef4:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <FLASH_Program_Byte+0x44>)
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	4a07      	ldr	r2, [pc, #28]	; (8002f18 <FLASH_Program_Byte+0x44>)
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	78fa      	ldrb	r2, [r7, #3]
 8002f04:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002f06:	f3bf 8f4f 	dsb	sy
}
 8002f0a:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	40023c00 	.word	0x40023c00

08002f1c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002f20:	4b21      	ldr	r3, [pc, #132]	; (8002fa8 <FLASH_SetErrorCode+0x8c>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002f2c:	4b1f      	ldr	r3, [pc, #124]	; (8002fac <FLASH_SetErrorCode+0x90>)
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	f043 0320 	orr.w	r3, r3, #32
 8002f34:	4a1d      	ldr	r2, [pc, #116]	; (8002fac <FLASH_SetErrorCode+0x90>)
 8002f36:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002f38:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <FLASH_SetErrorCode+0x8c>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002f44:	4b19      	ldr	r3, [pc, #100]	; (8002fac <FLASH_SetErrorCode+0x90>)
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f043 0310 	orr.w	r3, r3, #16
 8002f4c:	4a17      	ldr	r2, [pc, #92]	; (8002fac <FLASH_SetErrorCode+0x90>)
 8002f4e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002f50:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <FLASH_SetErrorCode+0x8c>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f003 0320 	and.w	r3, r3, #32
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002f5c:	4b13      	ldr	r3, [pc, #76]	; (8002fac <FLASH_SetErrorCode+0x90>)
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f043 0308 	orr.w	r3, r3, #8
 8002f64:	4a11      	ldr	r2, [pc, #68]	; (8002fac <FLASH_SetErrorCode+0x90>)
 8002f66:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002f68:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <FLASH_SetErrorCode+0x8c>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d005      	beq.n	8002f80 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002f74:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <FLASH_SetErrorCode+0x90>)
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f043 0304 	orr.w	r3, r3, #4
 8002f7c:	4a0b      	ldr	r2, [pc, #44]	; (8002fac <FLASH_SetErrorCode+0x90>)
 8002f7e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8002f80:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <FLASH_SetErrorCode+0x8c>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8002f8c:	4b07      	ldr	r3, [pc, #28]	; (8002fac <FLASH_SetErrorCode+0x90>)
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	f043 0302 	orr.w	r3, r3, #2
 8002f94:	4a05      	ldr	r2, [pc, #20]	; (8002fac <FLASH_SetErrorCode+0x90>)
 8002f96:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8002f98:	4b03      	ldr	r3, [pc, #12]	; (8002fa8 <FLASH_SetErrorCode+0x8c>)
 8002f9a:	22f2      	movs	r2, #242	; 0xf2
 8002f9c:	60da      	str	r2, [r3, #12]
}
 8002f9e:	bf00      	nop
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	40023c00 	.word	0x40023c00
 8002fac:	20000790 	.word	0x20000790

08002fb0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002fc2:	4b30      	ldr	r3, [pc, #192]	; (8003084 <HAL_FLASHEx_Erase+0xd4>)
 8002fc4:	7d1b      	ldrb	r3, [r3, #20]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_FLASHEx_Erase+0x1e>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e056      	b.n	800307c <HAL_FLASHEx_Erase+0xcc>
 8002fce:	4b2d      	ldr	r3, [pc, #180]	; (8003084 <HAL_FLASHEx_Erase+0xd4>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002fd4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002fd8:	f7ff feba 	bl	8002d50 <FLASH_WaitForLastOperation>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d146      	bne.n	8003074 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fec:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d115      	bne.n	8003022 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	4619      	mov	r1, r3
 8003002:	4610      	mov	r0, r2
 8003004:	f000 f844 	bl	8003090 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003008:	f24c 3050 	movw	r0, #50000	; 0xc350
 800300c:	f7ff fea0 	bl	8002d50 <FLASH_WaitForLastOperation>
 8003010:	4603      	mov	r3, r0
 8003012:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003014:	4b1c      	ldr	r3, [pc, #112]	; (8003088 <HAL_FLASHEx_Erase+0xd8>)
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	491b      	ldr	r1, [pc, #108]	; (8003088 <HAL_FLASHEx_Erase+0xd8>)
 800301a:	4b1c      	ldr	r3, [pc, #112]	; (800308c <HAL_FLASHEx_Erase+0xdc>)
 800301c:	4013      	ands	r3, r2
 800301e:	610b      	str	r3, [r1, #16]
 8003020:	e028      	b.n	8003074 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	e01c      	b.n	8003064 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	b2db      	uxtb	r3, r3
 8003030:	4619      	mov	r1, r3
 8003032:	68b8      	ldr	r0, [r7, #8]
 8003034:	f000 f868 	bl	8003108 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003038:	f24c 3050 	movw	r0, #50000	; 0xc350
 800303c:	f7ff fe88 	bl	8002d50 <FLASH_WaitForLastOperation>
 8003040:	4603      	mov	r3, r0
 8003042:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8003044:	4b10      	ldr	r3, [pc, #64]	; (8003088 <HAL_FLASHEx_Erase+0xd8>)
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	4a0f      	ldr	r2, [pc, #60]	; (8003088 <HAL_FLASHEx_Erase+0xd8>)
 800304a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800304e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8003050:	7bfb      	ldrb	r3, [r7, #15]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	601a      	str	r2, [r3, #0]
          break;
 800305c:	e00a      	b.n	8003074 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	3301      	adds	r3, #1
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	4413      	add	r3, r2
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	429a      	cmp	r2, r3
 8003072:	d3da      	bcc.n	800302a <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003074:	4b03      	ldr	r3, [pc, #12]	; (8003084 <HAL_FLASHEx_Erase+0xd4>)
 8003076:	2200      	movs	r2, #0
 8003078:	751a      	strb	r2, [r3, #20]

  return status;
 800307a:	7bfb      	ldrb	r3, [r7, #15]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20000790 	.word	0x20000790
 8003088:	40023c00 	.word	0x40023c00
 800308c:	ffff7ffb 	.word	0xffff7ffb

08003090 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	6039      	str	r1, [r7, #0]
 800309a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 800309c:	4b19      	ldr	r3, [pc, #100]	; (8003104 <FLASH_MassErase+0x74>)
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	4a18      	ldr	r2, [pc, #96]	; (8003104 <FLASH_MassErase+0x74>)
 80030a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a6:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	2b03      	cmp	r3, #3
 80030ac:	d107      	bne.n	80030be <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 80030ae:	4b15      	ldr	r3, [pc, #84]	; (8003104 <FLASH_MassErase+0x74>)
 80030b0:	691a      	ldr	r2, [r3, #16]
 80030b2:	4914      	ldr	r1, [pc, #80]	; (8003104 <FLASH_MassErase+0x74>)
 80030b4:	f248 0304 	movw	r3, #32772	; 0x8004
 80030b8:	4313      	orrs	r3, r2
 80030ba:	610b      	str	r3, [r1, #16]
 80030bc:	e00f      	b.n	80030de <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d106      	bne.n	80030d2 <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 80030c4:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <FLASH_MassErase+0x74>)
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	4a0e      	ldr	r2, [pc, #56]	; (8003104 <FLASH_MassErase+0x74>)
 80030ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ce:	6113      	str	r3, [r2, #16]
 80030d0:	e005      	b.n	80030de <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 80030d2:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <FLASH_MassErase+0x74>)
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	4a0b      	ldr	r2, [pc, #44]	; (8003104 <FLASH_MassErase+0x74>)
 80030d8:	f043 0304 	orr.w	r3, r3, #4
 80030dc:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 80030de:	4b09      	ldr	r3, [pc, #36]	; (8003104 <FLASH_MassErase+0x74>)
 80030e0:	691a      	ldr	r2, [r3, #16]
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	021b      	lsls	r3, r3, #8
 80030e6:	4313      	orrs	r3, r2
 80030e8:	4a06      	ldr	r2, [pc, #24]	; (8003104 <FLASH_MassErase+0x74>)
 80030ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ee:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80030f0:	f3bf 8f4f 	dsb	sy
}
 80030f4:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40023c00 	.word	0x40023c00

08003108 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8003114:	2300      	movs	r3, #0
 8003116:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003118:	78fb      	ldrb	r3, [r7, #3]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d102      	bne.n	8003124 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	e010      	b.n	8003146 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003124:	78fb      	ldrb	r3, [r7, #3]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d103      	bne.n	8003132 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800312a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	e009      	b.n	8003146 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003132:	78fb      	ldrb	r3, [r7, #3]
 8003134:	2b02      	cmp	r3, #2
 8003136:	d103      	bne.n	8003140 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	e002      	b.n	8003146 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003140:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003144:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b0b      	cmp	r3, #11
 800314a:	d902      	bls.n	8003152 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3304      	adds	r3, #4
 8003150:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8003152:	4b15      	ldr	r3, [pc, #84]	; (80031a8 <FLASH_Erase_Sector+0xa0>)
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	4a14      	ldr	r2, [pc, #80]	; (80031a8 <FLASH_Erase_Sector+0xa0>)
 8003158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800315c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800315e:	4b12      	ldr	r3, [pc, #72]	; (80031a8 <FLASH_Erase_Sector+0xa0>)
 8003160:	691a      	ldr	r2, [r3, #16]
 8003162:	4911      	ldr	r1, [pc, #68]	; (80031a8 <FLASH_Erase_Sector+0xa0>)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800316a:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <FLASH_Erase_Sector+0xa0>)
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	4a0e      	ldr	r2, [pc, #56]	; (80031a8 <FLASH_Erase_Sector+0xa0>)
 8003170:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003174:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003176:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <FLASH_Erase_Sector+0xa0>)
 8003178:	691a      	ldr	r2, [r3, #16]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4313      	orrs	r3, r2
 8003180:	4a09      	ldr	r2, [pc, #36]	; (80031a8 <FLASH_Erase_Sector+0xa0>)
 8003182:	f043 0302 	orr.w	r3, r3, #2
 8003186:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003188:	4b07      	ldr	r3, [pc, #28]	; (80031a8 <FLASH_Erase_Sector+0xa0>)
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	4a06      	ldr	r2, [pc, #24]	; (80031a8 <FLASH_Erase_Sector+0xa0>)
 800318e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003192:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8003194:	f3bf 8f4f 	dsb	sy
}
 8003198:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800319a:	bf00      	nop
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40023c00 	.word	0x40023c00

080031ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b089      	sub	sp, #36	; 0x24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80031be:	2300      	movs	r3, #0
 80031c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80031c2:	2300      	movs	r3, #0
 80031c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
 80031ca:	e175      	b.n	80034b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80031cc:	2201      	movs	r2, #1
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4013      	ands	r3, r2
 80031de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	f040 8164 	bne.w	80034b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d005      	beq.n	8003202 <HAL_GPIO_Init+0x56>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d130      	bne.n	8003264 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	2203      	movs	r2, #3
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003238:	2201      	movs	r2, #1
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	091b      	lsrs	r3, r3, #4
 800324e:	f003 0201 	and.w	r2, r3, #1
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	2b03      	cmp	r3, #3
 800326e:	d017      	beq.n	80032a0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	2203      	movs	r2, #3
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d123      	bne.n	80032f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	08da      	lsrs	r2, r3, #3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3208      	adds	r2, #8
 80032b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	220f      	movs	r2, #15
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	08da      	lsrs	r2, r3, #3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3208      	adds	r2, #8
 80032ee:	69b9      	ldr	r1, [r7, #24]
 80032f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	2203      	movs	r2, #3
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 0203 	and.w	r2, r3, #3
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80be 	beq.w	80034b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003336:	4b66      	ldr	r3, [pc, #408]	; (80034d0 <HAL_GPIO_Init+0x324>)
 8003338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333a:	4a65      	ldr	r2, [pc, #404]	; (80034d0 <HAL_GPIO_Init+0x324>)
 800333c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003340:	6453      	str	r3, [r2, #68]	; 0x44
 8003342:	4b63      	ldr	r3, [pc, #396]	; (80034d0 <HAL_GPIO_Init+0x324>)
 8003344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800334e:	4a61      	ldr	r2, [pc, #388]	; (80034d4 <HAL_GPIO_Init+0x328>)
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	089b      	lsrs	r3, r3, #2
 8003354:	3302      	adds	r3, #2
 8003356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800335a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	220f      	movs	r2, #15
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43db      	mvns	r3, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4013      	ands	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a58      	ldr	r2, [pc, #352]	; (80034d8 <HAL_GPIO_Init+0x32c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d037      	beq.n	80033ea <HAL_GPIO_Init+0x23e>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a57      	ldr	r2, [pc, #348]	; (80034dc <HAL_GPIO_Init+0x330>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d031      	beq.n	80033e6 <HAL_GPIO_Init+0x23a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a56      	ldr	r2, [pc, #344]	; (80034e0 <HAL_GPIO_Init+0x334>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d02b      	beq.n	80033e2 <HAL_GPIO_Init+0x236>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a55      	ldr	r2, [pc, #340]	; (80034e4 <HAL_GPIO_Init+0x338>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d025      	beq.n	80033de <HAL_GPIO_Init+0x232>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a54      	ldr	r2, [pc, #336]	; (80034e8 <HAL_GPIO_Init+0x33c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d01f      	beq.n	80033da <HAL_GPIO_Init+0x22e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a53      	ldr	r2, [pc, #332]	; (80034ec <HAL_GPIO_Init+0x340>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d019      	beq.n	80033d6 <HAL_GPIO_Init+0x22a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a52      	ldr	r2, [pc, #328]	; (80034f0 <HAL_GPIO_Init+0x344>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d013      	beq.n	80033d2 <HAL_GPIO_Init+0x226>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a51      	ldr	r2, [pc, #324]	; (80034f4 <HAL_GPIO_Init+0x348>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00d      	beq.n	80033ce <HAL_GPIO_Init+0x222>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a50      	ldr	r2, [pc, #320]	; (80034f8 <HAL_GPIO_Init+0x34c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d007      	beq.n	80033ca <HAL_GPIO_Init+0x21e>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a4f      	ldr	r2, [pc, #316]	; (80034fc <HAL_GPIO_Init+0x350>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d101      	bne.n	80033c6 <HAL_GPIO_Init+0x21a>
 80033c2:	2309      	movs	r3, #9
 80033c4:	e012      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033c6:	230a      	movs	r3, #10
 80033c8:	e010      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033ca:	2308      	movs	r3, #8
 80033cc:	e00e      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033ce:	2307      	movs	r3, #7
 80033d0:	e00c      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033d2:	2306      	movs	r3, #6
 80033d4:	e00a      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033d6:	2305      	movs	r3, #5
 80033d8:	e008      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033da:	2304      	movs	r3, #4
 80033dc:	e006      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033de:	2303      	movs	r3, #3
 80033e0:	e004      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033e2:	2302      	movs	r3, #2
 80033e4:	e002      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033ea:	2300      	movs	r3, #0
 80033ec:	69fa      	ldr	r2, [r7, #28]
 80033ee:	f002 0203 	and.w	r2, r2, #3
 80033f2:	0092      	lsls	r2, r2, #2
 80033f4:	4093      	lsls	r3, r2
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80033fc:	4935      	ldr	r1, [pc, #212]	; (80034d4 <HAL_GPIO_Init+0x328>)
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	089b      	lsrs	r3, r3, #2
 8003402:	3302      	adds	r3, #2
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800340a:	4b3d      	ldr	r3, [pc, #244]	; (8003500 <HAL_GPIO_Init+0x354>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	43db      	mvns	r3, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4013      	ands	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800342e:	4a34      	ldr	r2, [pc, #208]	; (8003500 <HAL_GPIO_Init+0x354>)
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003434:	4b32      	ldr	r3, [pc, #200]	; (8003500 <HAL_GPIO_Init+0x354>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	43db      	mvns	r3, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4013      	ands	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003458:	4a29      	ldr	r2, [pc, #164]	; (8003500 <HAL_GPIO_Init+0x354>)
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800345e:	4b28      	ldr	r3, [pc, #160]	; (8003500 <HAL_GPIO_Init+0x354>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	43db      	mvns	r3, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4013      	ands	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003482:	4a1f      	ldr	r2, [pc, #124]	; (8003500 <HAL_GPIO_Init+0x354>)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003488:	4b1d      	ldr	r3, [pc, #116]	; (8003500 <HAL_GPIO_Init+0x354>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034ac:	4a14      	ldr	r2, [pc, #80]	; (8003500 <HAL_GPIO_Init+0x354>)
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	3301      	adds	r3, #1
 80034b6:	61fb      	str	r3, [r7, #28]
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	2b0f      	cmp	r3, #15
 80034bc:	f67f ae86 	bls.w	80031cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80034c0:	bf00      	nop
 80034c2:	bf00      	nop
 80034c4:	3724      	adds	r7, #36	; 0x24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40023800 	.word	0x40023800
 80034d4:	40013800 	.word	0x40013800
 80034d8:	40020000 	.word	0x40020000
 80034dc:	40020400 	.word	0x40020400
 80034e0:	40020800 	.word	0x40020800
 80034e4:	40020c00 	.word	0x40020c00
 80034e8:	40021000 	.word	0x40021000
 80034ec:	40021400 	.word	0x40021400
 80034f0:	40021800 	.word	0x40021800
 80034f4:	40021c00 	.word	0x40021c00
 80034f8:	40022000 	.word	0x40022000
 80034fc:	40022400 	.word	0x40022400
 8003500:	40013c00 	.word	0x40013c00

08003504 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	887b      	ldrh	r3, [r7, #2]
 8003516:	4013      	ands	r3, r2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d002      	beq.n	8003522 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800351c:	2301      	movs	r3, #1
 800351e:	73fb      	strb	r3, [r7, #15]
 8003520:	e001      	b.n	8003526 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003522:	2300      	movs	r3, #0
 8003524:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003526:	7bfb      	ldrb	r3, [r7, #15]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	807b      	strh	r3, [r7, #2]
 8003540:	4613      	mov	r3, r2
 8003542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003544:	787b      	ldrb	r3, [r7, #1]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800354a:	887a      	ldrh	r2, [r7, #2]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003550:	e003      	b.n	800355a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003552:	887b      	ldrh	r3, [r7, #2]
 8003554:	041a      	lsls	r2, r3, #16
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	619a      	str	r2, [r3, #24]
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003566:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003568:	b08f      	sub	sp, #60	; 0x3c
 800356a:	af0a      	add	r7, sp, #40	; 0x28
 800356c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e116      	b.n	80037a6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d106      	bne.n	8003598 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fd fb16 	bl	8000bc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2203      	movs	r2, #3
 800359c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d102      	bne.n	80035b2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f001 ffbe 	bl	8005538 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	687e      	ldr	r6, [r7, #4]
 80035c4:	466d      	mov	r5, sp
 80035c6:	f106 0410 	add.w	r4, r6, #16
 80035ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80035da:	1d33      	adds	r3, r6, #4
 80035dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035de:	6838      	ldr	r0, [r7, #0]
 80035e0:	f001 ff52 	bl	8005488 <USB_CoreInit>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d005      	beq.n	80035f6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2202      	movs	r2, #2
 80035ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e0d7      	b.n	80037a6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2100      	movs	r1, #0
 80035fc:	4618      	mov	r0, r3
 80035fe:	f001 ffac 	bl	800555a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003602:	2300      	movs	r3, #0
 8003604:	73fb      	strb	r3, [r7, #15]
 8003606:	e04a      	b.n	800369e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003608:	7bfa      	ldrb	r2, [r7, #15]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	333d      	adds	r3, #61	; 0x3d
 8003618:	2201      	movs	r2, #1
 800361a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800361c:	7bfa      	ldrb	r2, [r7, #15]
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	333c      	adds	r3, #60	; 0x3c
 800362c:	7bfa      	ldrb	r2, [r7, #15]
 800362e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003630:	7bfa      	ldrb	r2, [r7, #15]
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	b298      	uxth	r0, r3
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	4413      	add	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	3344      	adds	r3, #68	; 0x44
 8003644:	4602      	mov	r2, r0
 8003646:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003648:	7bfa      	ldrb	r2, [r7, #15]
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	3340      	adds	r3, #64	; 0x40
 8003658:	2200      	movs	r2, #0
 800365a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800365c:	7bfa      	ldrb	r2, [r7, #15]
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	3348      	adds	r3, #72	; 0x48
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003670:	7bfa      	ldrb	r2, [r7, #15]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	334c      	adds	r3, #76	; 0x4c
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003684:	7bfa      	ldrb	r2, [r7, #15]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	3354      	adds	r3, #84	; 0x54
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003698:	7bfb      	ldrb	r3, [r7, #15]
 800369a:	3301      	adds	r3, #1
 800369c:	73fb      	strb	r3, [r7, #15]
 800369e:	7bfa      	ldrb	r2, [r7, #15]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d3af      	bcc.n	8003608 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036a8:	2300      	movs	r3, #0
 80036aa:	73fb      	strb	r3, [r7, #15]
 80036ac:	e044      	b.n	8003738 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036ae:	7bfa      	ldrb	r2, [r7, #15]
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	4613      	mov	r3, r2
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	4413      	add	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80036c0:	2200      	movs	r2, #0
 80036c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036c4:	7bfa      	ldrb	r2, [r7, #15]
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	4413      	add	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80036d6:	7bfa      	ldrb	r2, [r7, #15]
 80036d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036da:	7bfa      	ldrb	r2, [r7, #15]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	4413      	add	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80036ec:	2200      	movs	r2, #0
 80036ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036f0:	7bfa      	ldrb	r2, [r7, #15]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003706:	7bfa      	ldrb	r2, [r7, #15]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	4413      	add	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800371c:	7bfa      	ldrb	r2, [r7, #15]
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	4413      	add	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003732:	7bfb      	ldrb	r3, [r7, #15]
 8003734:	3301      	adds	r3, #1
 8003736:	73fb      	strb	r3, [r7, #15]
 8003738:	7bfa      	ldrb	r2, [r7, #15]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	429a      	cmp	r2, r3
 8003740:	d3b5      	bcc.n	80036ae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	603b      	str	r3, [r7, #0]
 8003748:	687e      	ldr	r6, [r7, #4]
 800374a:	466d      	mov	r5, sp
 800374c:	f106 0410 	add.w	r4, r6, #16
 8003750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003752:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003758:	e894 0003 	ldmia.w	r4, {r0, r1}
 800375c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003760:	1d33      	adds	r3, r6, #4
 8003762:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003764:	6838      	ldr	r0, [r7, #0]
 8003766:	f001 ff45 	bl	80055f4 <USB_DevInit>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e014      	b.n	80037a6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	2b01      	cmp	r3, #1
 8003792:	d102      	bne.n	800379a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f80b 	bl	80037b0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f002 f903 	bl	80059aa <USB_DevDisconnect>

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080037b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037de:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_PCDEx_ActivateLPM+0x44>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	10000003 	.word	0x10000003

080037f8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037fc:	4b05      	ldr	r3, [pc, #20]	; (8003814 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a04      	ldr	r2, [pc, #16]	; (8003814 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003806:	6013      	str	r3, [r2, #0]
}
 8003808:	bf00      	nop
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40007000 	.word	0x40007000

08003818 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800381e:	2300      	movs	r3, #0
 8003820:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003822:	4b23      	ldr	r3, [pc, #140]	; (80038b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	4a22      	ldr	r2, [pc, #136]	; (80038b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800382c:	6413      	str	r3, [r2, #64]	; 0x40
 800382e:	4b20      	ldr	r3, [pc, #128]	; (80038b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003836:	603b      	str	r3, [r7, #0]
 8003838:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800383a:	4b1e      	ldr	r3, [pc, #120]	; (80038b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a1d      	ldr	r2, [pc, #116]	; (80038b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003844:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003846:	f7fd fffd 	bl	8001844 <HAL_GetTick>
 800384a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800384c:	e009      	b.n	8003862 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800384e:	f7fd fff9 	bl	8001844 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800385c:	d901      	bls.n	8003862 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e022      	b.n	80038a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003862:	4b14      	ldr	r3, [pc, #80]	; (80038b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800386a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800386e:	d1ee      	bne.n	800384e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003870:	4b10      	ldr	r3, [pc, #64]	; (80038b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a0f      	ldr	r2, [pc, #60]	; (80038b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800387a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800387c:	f7fd ffe2 	bl	8001844 <HAL_GetTick>
 8003880:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003882:	e009      	b.n	8003898 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003884:	f7fd ffde 	bl	8001844 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003892:	d901      	bls.n	8003898 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e007      	b.n	80038a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003898:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038a4:	d1ee      	bne.n	8003884 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40023800 	.word	0x40023800
 80038b4:	40007000 	.word	0x40007000

080038b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80038c0:	2300      	movs	r3, #0
 80038c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e29b      	b.n	8003e06 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 8087 	beq.w	80039ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038dc:	4b96      	ldr	r3, [pc, #600]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 030c 	and.w	r3, r3, #12
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d00c      	beq.n	8003902 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038e8:	4b93      	ldr	r3, [pc, #588]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 030c 	and.w	r3, r3, #12
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d112      	bne.n	800391a <HAL_RCC_OscConfig+0x62>
 80038f4:	4b90      	ldr	r3, [pc, #576]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003900:	d10b      	bne.n	800391a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003902:	4b8d      	ldr	r3, [pc, #564]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d06c      	beq.n	80039e8 <HAL_RCC_OscConfig+0x130>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d168      	bne.n	80039e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e275      	b.n	8003e06 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003922:	d106      	bne.n	8003932 <HAL_RCC_OscConfig+0x7a>
 8003924:	4b84      	ldr	r3, [pc, #528]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a83      	ldr	r2, [pc, #524]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 800392a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	e02e      	b.n	8003990 <HAL_RCC_OscConfig+0xd8>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10c      	bne.n	8003954 <HAL_RCC_OscConfig+0x9c>
 800393a:	4b7f      	ldr	r3, [pc, #508]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a7e      	ldr	r2, [pc, #504]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 8003940:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	4b7c      	ldr	r3, [pc, #496]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a7b      	ldr	r2, [pc, #492]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 800394c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	e01d      	b.n	8003990 <HAL_RCC_OscConfig+0xd8>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800395c:	d10c      	bne.n	8003978 <HAL_RCC_OscConfig+0xc0>
 800395e:	4b76      	ldr	r3, [pc, #472]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a75      	ldr	r2, [pc, #468]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 8003964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	4b73      	ldr	r3, [pc, #460]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a72      	ldr	r2, [pc, #456]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 8003970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	e00b      	b.n	8003990 <HAL_RCC_OscConfig+0xd8>
 8003978:	4b6f      	ldr	r3, [pc, #444]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a6e      	ldr	r2, [pc, #440]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 800397e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	4b6c      	ldr	r3, [pc, #432]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a6b      	ldr	r2, [pc, #428]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 800398a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800398e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d013      	beq.n	80039c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003998:	f7fd ff54 	bl	8001844 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039a0:	f7fd ff50 	bl	8001844 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b64      	cmp	r3, #100	; 0x64
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e229      	b.n	8003e06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b2:	4b61      	ldr	r3, [pc, #388]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0f0      	beq.n	80039a0 <HAL_RCC_OscConfig+0xe8>
 80039be:	e014      	b.n	80039ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c0:	f7fd ff40 	bl	8001844 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c8:	f7fd ff3c 	bl	8001844 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b64      	cmp	r3, #100	; 0x64
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e215      	b.n	8003e06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039da:	4b57      	ldr	r3, [pc, #348]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x110>
 80039e6:	e000      	b.n	80039ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d069      	beq.n	8003aca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039f6:	4b50      	ldr	r3, [pc, #320]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 030c 	and.w	r3, r3, #12
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00b      	beq.n	8003a1a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a02:	4b4d      	ldr	r3, [pc, #308]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	d11c      	bne.n	8003a48 <HAL_RCC_OscConfig+0x190>
 8003a0e:	4b4a      	ldr	r3, [pc, #296]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d116      	bne.n	8003a48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a1a:	4b47      	ldr	r3, [pc, #284]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d005      	beq.n	8003a32 <HAL_RCC_OscConfig+0x17a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d001      	beq.n	8003a32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e1e9      	b.n	8003e06 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a32:	4b41      	ldr	r3, [pc, #260]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	493d      	ldr	r1, [pc, #244]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a46:	e040      	b.n	8003aca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d023      	beq.n	8003a98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a50:	4b39      	ldr	r3, [pc, #228]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a38      	ldr	r2, [pc, #224]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7fd fef2 	bl	8001844 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a64:	f7fd feee 	bl	8001844 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e1c7      	b.n	8003e06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a76:	4b30      	ldr	r3, [pc, #192]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f0      	beq.n	8003a64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a82:	4b2d      	ldr	r3, [pc, #180]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	4929      	ldr	r1, [pc, #164]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	600b      	str	r3, [r1, #0]
 8003a96:	e018      	b.n	8003aca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a98:	4b27      	ldr	r3, [pc, #156]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a26      	ldr	r2, [pc, #152]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 8003a9e:	f023 0301 	bic.w	r3, r3, #1
 8003aa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa4:	f7fd fece 	bl	8001844 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aac:	f7fd feca 	bl	8001844 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e1a3      	b.n	8003e06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003abe:	4b1e      	ldr	r3, [pc, #120]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f0      	bne.n	8003aac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d038      	beq.n	8003b48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d019      	beq.n	8003b12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ade:	4b16      	ldr	r3, [pc, #88]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 8003ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae2:	4a15      	ldr	r2, [pc, #84]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 8003ae4:	f043 0301 	orr.w	r3, r3, #1
 8003ae8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aea:	f7fd feab 	bl	8001844 <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003af2:	f7fd fea7 	bl	8001844 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e180      	b.n	8003e06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b04:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 8003b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0f0      	beq.n	8003af2 <HAL_RCC_OscConfig+0x23a>
 8003b10:	e01a      	b.n	8003b48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b12:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 8003b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b16:	4a08      	ldr	r2, [pc, #32]	; (8003b38 <HAL_RCC_OscConfig+0x280>)
 8003b18:	f023 0301 	bic.w	r3, r3, #1
 8003b1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b1e:	f7fd fe91 	bl	8001844 <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b24:	e00a      	b.n	8003b3c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b26:	f7fd fe8d 	bl	8001844 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d903      	bls.n	8003b3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e166      	b.n	8003e06 <HAL_RCC_OscConfig+0x54e>
 8003b38:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b3c:	4b92      	ldr	r3, [pc, #584]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1ee      	bne.n	8003b26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 80a4 	beq.w	8003c9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b56:	4b8c      	ldr	r3, [pc, #560]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10d      	bne.n	8003b7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b62:	4b89      	ldr	r3, [pc, #548]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	4a88      	ldr	r2, [pc, #544]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b6e:	4b86      	ldr	r3, [pc, #536]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b76:	60bb      	str	r3, [r7, #8]
 8003b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b7e:	4b83      	ldr	r3, [pc, #524]	; (8003d8c <HAL_RCC_OscConfig+0x4d4>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d118      	bne.n	8003bbc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003b8a:	4b80      	ldr	r3, [pc, #512]	; (8003d8c <HAL_RCC_OscConfig+0x4d4>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a7f      	ldr	r2, [pc, #508]	; (8003d8c <HAL_RCC_OscConfig+0x4d4>)
 8003b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b96:	f7fd fe55 	bl	8001844 <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b9e:	f7fd fe51 	bl	8001844 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b64      	cmp	r3, #100	; 0x64
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e12a      	b.n	8003e06 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bb0:	4b76      	ldr	r3, [pc, #472]	; (8003d8c <HAL_RCC_OscConfig+0x4d4>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0f0      	beq.n	8003b9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d106      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x31a>
 8003bc4:	4b70      	ldr	r3, [pc, #448]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc8:	4a6f      	ldr	r2, [pc, #444]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003bca:	f043 0301 	orr.w	r3, r3, #1
 8003bce:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd0:	e02d      	b.n	8003c2e <HAL_RCC_OscConfig+0x376>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10c      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x33c>
 8003bda:	4b6b      	ldr	r3, [pc, #428]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bde:	4a6a      	ldr	r2, [pc, #424]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003be0:	f023 0301 	bic.w	r3, r3, #1
 8003be4:	6713      	str	r3, [r2, #112]	; 0x70
 8003be6:	4b68      	ldr	r3, [pc, #416]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bea:	4a67      	ldr	r2, [pc, #412]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003bec:	f023 0304 	bic.w	r3, r3, #4
 8003bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf2:	e01c      	b.n	8003c2e <HAL_RCC_OscConfig+0x376>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	2b05      	cmp	r3, #5
 8003bfa:	d10c      	bne.n	8003c16 <HAL_RCC_OscConfig+0x35e>
 8003bfc:	4b62      	ldr	r3, [pc, #392]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c00:	4a61      	ldr	r2, [pc, #388]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003c02:	f043 0304 	orr.w	r3, r3, #4
 8003c06:	6713      	str	r3, [r2, #112]	; 0x70
 8003c08:	4b5f      	ldr	r3, [pc, #380]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0c:	4a5e      	ldr	r2, [pc, #376]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003c0e:	f043 0301 	orr.w	r3, r3, #1
 8003c12:	6713      	str	r3, [r2, #112]	; 0x70
 8003c14:	e00b      	b.n	8003c2e <HAL_RCC_OscConfig+0x376>
 8003c16:	4b5c      	ldr	r3, [pc, #368]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1a:	4a5b      	ldr	r2, [pc, #364]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003c1c:	f023 0301 	bic.w	r3, r3, #1
 8003c20:	6713      	str	r3, [r2, #112]	; 0x70
 8003c22:	4b59      	ldr	r3, [pc, #356]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c26:	4a58      	ldr	r2, [pc, #352]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003c28:	f023 0304 	bic.w	r3, r3, #4
 8003c2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d015      	beq.n	8003c62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c36:	f7fd fe05 	bl	8001844 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3c:	e00a      	b.n	8003c54 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3e:	f7fd fe01 	bl	8001844 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e0d8      	b.n	8003e06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c54:	4b4c      	ldr	r3, [pc, #304]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0ee      	beq.n	8003c3e <HAL_RCC_OscConfig+0x386>
 8003c60:	e014      	b.n	8003c8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c62:	f7fd fdef 	bl	8001844 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c68:	e00a      	b.n	8003c80 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c6a:	f7fd fdeb 	bl	8001844 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e0c2      	b.n	8003e06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c80:	4b41      	ldr	r3, [pc, #260]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1ee      	bne.n	8003c6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c8c:	7dfb      	ldrb	r3, [r7, #23]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d105      	bne.n	8003c9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c92:	4b3d      	ldr	r3, [pc, #244]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	4a3c      	ldr	r2, [pc, #240]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003c98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 80ae 	beq.w	8003e04 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ca8:	4b37      	ldr	r3, [pc, #220]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 030c 	and.w	r3, r3, #12
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d06d      	beq.n	8003d90 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d14b      	bne.n	8003d54 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cbc:	4b32      	ldr	r3, [pc, #200]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a31      	ldr	r2, [pc, #196]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003cc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc8:	f7fd fdbc 	bl	8001844 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd0:	f7fd fdb8 	bl	8001844 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e091      	b.n	8003e06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce2:	4b29      	ldr	r3, [pc, #164]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69da      	ldr	r2, [r3, #28]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	019b      	lsls	r3, r3, #6
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d04:	085b      	lsrs	r3, r3, #1
 8003d06:	3b01      	subs	r3, #1
 8003d08:	041b      	lsls	r3, r3, #16
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	061b      	lsls	r3, r3, #24
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	071b      	lsls	r3, r3, #28
 8003d1a:	491b      	ldr	r1, [pc, #108]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d20:	4b19      	ldr	r3, [pc, #100]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a18      	ldr	r2, [pc, #96]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2c:	f7fd fd8a 	bl	8001844 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d34:	f7fd fd86 	bl	8001844 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e05f      	b.n	8003e06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d46:	4b10      	ldr	r3, [pc, #64]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0x47c>
 8003d52:	e057      	b.n	8003e04 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d54:	4b0c      	ldr	r3, [pc, #48]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a0b      	ldr	r2, [pc, #44]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d60:	f7fd fd70 	bl	8001844 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d68:	f7fd fd6c 	bl	8001844 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e045      	b.n	8003e06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d7a:	4b03      	ldr	r3, [pc, #12]	; (8003d88 <HAL_RCC_OscConfig+0x4d0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f0      	bne.n	8003d68 <HAL_RCC_OscConfig+0x4b0>
 8003d86:	e03d      	b.n	8003e04 <HAL_RCC_OscConfig+0x54c>
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003d90:	4b1f      	ldr	r3, [pc, #124]	; (8003e10 <HAL_RCC_OscConfig+0x558>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d030      	beq.n	8003e00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d129      	bne.n	8003e00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d122      	bne.n	8003e00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dc6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d119      	bne.n	8003e00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd6:	085b      	lsrs	r3, r3, #1
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d10f      	bne.n	8003e00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d107      	bne.n	8003e00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d001      	beq.n	8003e04 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e000      	b.n	8003e06 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40023800 	.word	0x40023800

08003e14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0d0      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e2c:	4b6a      	ldr	r3, [pc, #424]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d910      	bls.n	8003e5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3a:	4b67      	ldr	r3, [pc, #412]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f023 020f 	bic.w	r2, r3, #15
 8003e42:	4965      	ldr	r1, [pc, #404]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4a:	4b63      	ldr	r3, [pc, #396]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d001      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e0b8      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d020      	beq.n	8003eaa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e74:	4b59      	ldr	r3, [pc, #356]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	4a58      	ldr	r2, [pc, #352]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003e7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e8c:	4b53      	ldr	r3, [pc, #332]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	4a52      	ldr	r2, [pc, #328]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003e92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e98:	4b50      	ldr	r3, [pc, #320]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	494d      	ldr	r1, [pc, #308]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d040      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d107      	bne.n	8003ece <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ebe:	4b47      	ldr	r3, [pc, #284]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d115      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e07f      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d107      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed6:	4b41      	ldr	r3, [pc, #260]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d109      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e073      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee6:	4b3d      	ldr	r3, [pc, #244]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e06b      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ef6:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f023 0203 	bic.w	r2, r3, #3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	4936      	ldr	r1, [pc, #216]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f08:	f7fd fc9c 	bl	8001844 <HAL_GetTick>
 8003f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0e:	e00a      	b.n	8003f26 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f10:	f7fd fc98 	bl	8001844 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e053      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f26:	4b2d      	ldr	r3, [pc, #180]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 020c 	and.w	r2, r3, #12
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d1eb      	bne.n	8003f10 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f38:	4b27      	ldr	r3, [pc, #156]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 030f 	and.w	r3, r3, #15
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d210      	bcs.n	8003f68 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f46:	4b24      	ldr	r3, [pc, #144]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f023 020f 	bic.w	r2, r3, #15
 8003f4e:	4922      	ldr	r1, [pc, #136]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f56:	4b20      	ldr	r3, [pc, #128]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d001      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e032      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f74:	4b19      	ldr	r3, [pc, #100]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	4916      	ldr	r1, [pc, #88]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d009      	beq.n	8003fa6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f92:	4b12      	ldr	r3, [pc, #72]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	490e      	ldr	r1, [pc, #56]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fa6:	f000 f821 	bl	8003fec <HAL_RCC_GetSysClockFreq>
 8003faa:	4602      	mov	r2, r0
 8003fac:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <HAL_RCC_ClockConfig+0x1c8>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	091b      	lsrs	r3, r3, #4
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	490a      	ldr	r1, [pc, #40]	; (8003fe0 <HAL_RCC_ClockConfig+0x1cc>)
 8003fb8:	5ccb      	ldrb	r3, [r1, r3]
 8003fba:	fa22 f303 	lsr.w	r3, r2, r3
 8003fbe:	4a09      	ldr	r2, [pc, #36]	; (8003fe4 <HAL_RCC_ClockConfig+0x1d0>)
 8003fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fc2:	4b09      	ldr	r3, [pc, #36]	; (8003fe8 <HAL_RCC_ClockConfig+0x1d4>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fd fbf8 	bl	80017bc <HAL_InitTick>

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40023c00 	.word	0x40023c00
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	08014548 	.word	0x08014548
 8003fe4:	20000000 	.word	0x20000000
 8003fe8:	20000004 	.word	0x20000004

08003fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ff0:	b094      	sub	sp, #80	; 0x50
 8003ff2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004000:	2300      	movs	r3, #0
 8004002:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004004:	4b79      	ldr	r3, [pc, #484]	; (80041ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 030c 	and.w	r3, r3, #12
 800400c:	2b08      	cmp	r3, #8
 800400e:	d00d      	beq.n	800402c <HAL_RCC_GetSysClockFreq+0x40>
 8004010:	2b08      	cmp	r3, #8
 8004012:	f200 80e1 	bhi.w	80041d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <HAL_RCC_GetSysClockFreq+0x34>
 800401a:	2b04      	cmp	r3, #4
 800401c:	d003      	beq.n	8004026 <HAL_RCC_GetSysClockFreq+0x3a>
 800401e:	e0db      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004020:	4b73      	ldr	r3, [pc, #460]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004022:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004024:	e0db      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004026:	4b73      	ldr	r3, [pc, #460]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004028:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800402a:	e0d8      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800402c:	4b6f      	ldr	r3, [pc, #444]	; (80041ec <HAL_RCC_GetSysClockFreq+0x200>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004034:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004036:	4b6d      	ldr	r3, [pc, #436]	; (80041ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d063      	beq.n	800410a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004042:	4b6a      	ldr	r3, [pc, #424]	; (80041ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	099b      	lsrs	r3, r3, #6
 8004048:	2200      	movs	r2, #0
 800404a:	63bb      	str	r3, [r7, #56]	; 0x38
 800404c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800404e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004054:	633b      	str	r3, [r7, #48]	; 0x30
 8004056:	2300      	movs	r3, #0
 8004058:	637b      	str	r3, [r7, #52]	; 0x34
 800405a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800405e:	4622      	mov	r2, r4
 8004060:	462b      	mov	r3, r5
 8004062:	f04f 0000 	mov.w	r0, #0
 8004066:	f04f 0100 	mov.w	r1, #0
 800406a:	0159      	lsls	r1, r3, #5
 800406c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004070:	0150      	lsls	r0, r2, #5
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	4621      	mov	r1, r4
 8004078:	1a51      	subs	r1, r2, r1
 800407a:	6139      	str	r1, [r7, #16]
 800407c:	4629      	mov	r1, r5
 800407e:	eb63 0301 	sbc.w	r3, r3, r1
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	f04f 0300 	mov.w	r3, #0
 800408c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004090:	4659      	mov	r1, fp
 8004092:	018b      	lsls	r3, r1, #6
 8004094:	4651      	mov	r1, sl
 8004096:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800409a:	4651      	mov	r1, sl
 800409c:	018a      	lsls	r2, r1, #6
 800409e:	4651      	mov	r1, sl
 80040a0:	ebb2 0801 	subs.w	r8, r2, r1
 80040a4:	4659      	mov	r1, fp
 80040a6:	eb63 0901 	sbc.w	r9, r3, r1
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040be:	4690      	mov	r8, r2
 80040c0:	4699      	mov	r9, r3
 80040c2:	4623      	mov	r3, r4
 80040c4:	eb18 0303 	adds.w	r3, r8, r3
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	462b      	mov	r3, r5
 80040cc:	eb49 0303 	adc.w	r3, r9, r3
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	f04f 0300 	mov.w	r3, #0
 80040da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040de:	4629      	mov	r1, r5
 80040e0:	024b      	lsls	r3, r1, #9
 80040e2:	4621      	mov	r1, r4
 80040e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040e8:	4621      	mov	r1, r4
 80040ea:	024a      	lsls	r2, r1, #9
 80040ec:	4610      	mov	r0, r2
 80040ee:	4619      	mov	r1, r3
 80040f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040f2:	2200      	movs	r2, #0
 80040f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80040f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040fc:	f7fc f8f0 	bl	80002e0 <__aeabi_uldivmod>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4613      	mov	r3, r2
 8004106:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004108:	e058      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800410a:	4b38      	ldr	r3, [pc, #224]	; (80041ec <HAL_RCC_GetSysClockFreq+0x200>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	099b      	lsrs	r3, r3, #6
 8004110:	2200      	movs	r2, #0
 8004112:	4618      	mov	r0, r3
 8004114:	4611      	mov	r1, r2
 8004116:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800411a:	623b      	str	r3, [r7, #32]
 800411c:	2300      	movs	r3, #0
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
 8004120:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004124:	4642      	mov	r2, r8
 8004126:	464b      	mov	r3, r9
 8004128:	f04f 0000 	mov.w	r0, #0
 800412c:	f04f 0100 	mov.w	r1, #0
 8004130:	0159      	lsls	r1, r3, #5
 8004132:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004136:	0150      	lsls	r0, r2, #5
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4641      	mov	r1, r8
 800413e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004142:	4649      	mov	r1, r9
 8004144:	eb63 0b01 	sbc.w	fp, r3, r1
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	f04f 0300 	mov.w	r3, #0
 8004150:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004154:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004158:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800415c:	ebb2 040a 	subs.w	r4, r2, sl
 8004160:	eb63 050b 	sbc.w	r5, r3, fp
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	00eb      	lsls	r3, r5, #3
 800416e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004172:	00e2      	lsls	r2, r4, #3
 8004174:	4614      	mov	r4, r2
 8004176:	461d      	mov	r5, r3
 8004178:	4643      	mov	r3, r8
 800417a:	18e3      	adds	r3, r4, r3
 800417c:	603b      	str	r3, [r7, #0]
 800417e:	464b      	mov	r3, r9
 8004180:	eb45 0303 	adc.w	r3, r5, r3
 8004184:	607b      	str	r3, [r7, #4]
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	f04f 0300 	mov.w	r3, #0
 800418e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004192:	4629      	mov	r1, r5
 8004194:	028b      	lsls	r3, r1, #10
 8004196:	4621      	mov	r1, r4
 8004198:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800419c:	4621      	mov	r1, r4
 800419e:	028a      	lsls	r2, r1, #10
 80041a0:	4610      	mov	r0, r2
 80041a2:	4619      	mov	r1, r3
 80041a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041a6:	2200      	movs	r2, #0
 80041a8:	61bb      	str	r3, [r7, #24]
 80041aa:	61fa      	str	r2, [r7, #28]
 80041ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041b0:	f7fc f896 	bl	80002e0 <__aeabi_uldivmod>
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4613      	mov	r3, r2
 80041ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80041bc:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <HAL_RCC_GetSysClockFreq+0x200>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	0c1b      	lsrs	r3, r3, #16
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	3301      	adds	r3, #1
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80041cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041d6:	e002      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041d8:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80041da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3750      	adds	r7, #80	; 0x50
 80041e4:	46bd      	mov	sp, r7
 80041e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ea:	bf00      	nop
 80041ec:	40023800 	.word	0x40023800
 80041f0:	00f42400 	.word	0x00f42400
 80041f4:	007a1200 	.word	0x007a1200

080041f8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041fc:	4b03      	ldr	r3, [pc, #12]	; (800420c <HAL_RCC_GetHCLKFreq+0x14>)
 80041fe:	681b      	ldr	r3, [r3, #0]
}
 8004200:	4618      	mov	r0, r3
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	20000000 	.word	0x20000000

08004210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004214:	f7ff fff0 	bl	80041f8 <HAL_RCC_GetHCLKFreq>
 8004218:	4602      	mov	r2, r0
 800421a:	4b05      	ldr	r3, [pc, #20]	; (8004230 <HAL_RCC_GetPCLK1Freq+0x20>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	0a9b      	lsrs	r3, r3, #10
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	4903      	ldr	r1, [pc, #12]	; (8004234 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004226:	5ccb      	ldrb	r3, [r1, r3]
 8004228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800422c:	4618      	mov	r0, r3
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40023800 	.word	0x40023800
 8004234:	08014558 	.word	0x08014558

08004238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800423c:	f7ff ffdc 	bl	80041f8 <HAL_RCC_GetHCLKFreq>
 8004240:	4602      	mov	r2, r0
 8004242:	4b05      	ldr	r3, [pc, #20]	; (8004258 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	0b5b      	lsrs	r3, r3, #13
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	4903      	ldr	r1, [pc, #12]	; (800425c <HAL_RCC_GetPCLK2Freq+0x24>)
 800424e:	5ccb      	ldrb	r3, [r1, r3]
 8004250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004254:	4618      	mov	r0, r3
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40023800 	.word	0x40023800
 800425c:	08014558 	.word	0x08014558

08004260 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b088      	sub	sp, #32
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800426c:	2300      	movs	r3, #0
 800426e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004270:	2300      	movs	r3, #0
 8004272:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004274:	2300      	movs	r3, #0
 8004276:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004278:	2300      	movs	r3, #0
 800427a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d012      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004288:	4b69      	ldr	r3, [pc, #420]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	4a68      	ldr	r2, [pc, #416]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004292:	6093      	str	r3, [r2, #8]
 8004294:	4b66      	ldr	r3, [pc, #408]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800429c:	4964      	ldr	r1, [pc, #400]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80042aa:	2301      	movs	r3, #1
 80042ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d017      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042ba:	4b5d      	ldr	r3, [pc, #372]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c8:	4959      	ldr	r1, [pc, #356]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042d8:	d101      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80042da:	2301      	movs	r3, #1
 80042dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80042e6:	2301      	movs	r3, #1
 80042e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d017      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042f6:	4b4e      	ldr	r3, [pc, #312]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	494a      	ldr	r1, [pc, #296]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004314:	d101      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004316:	2301      	movs	r3, #1
 8004318:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004322:	2301      	movs	r3, #1
 8004324:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004332:	2301      	movs	r3, #1
 8004334:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 808b 	beq.w	800445a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004344:	4b3a      	ldr	r3, [pc, #232]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	4a39      	ldr	r2, [pc, #228]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800434a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800434e:	6413      	str	r3, [r2, #64]	; 0x40
 8004350:	4b37      	ldr	r3, [pc, #220]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004358:	60bb      	str	r3, [r7, #8]
 800435a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800435c:	4b35      	ldr	r3, [pc, #212]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a34      	ldr	r2, [pc, #208]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004366:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004368:	f7fd fa6c 	bl	8001844 <HAL_GetTick>
 800436c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004370:	f7fd fa68 	bl	8001844 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b64      	cmp	r3, #100	; 0x64
 800437c:	d901      	bls.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e38f      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004382:	4b2c      	ldr	r3, [pc, #176]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0f0      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800438e:	4b28      	ldr	r3, [pc, #160]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004396:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d035      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d02e      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043ac:	4b20      	ldr	r3, [pc, #128]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043b6:	4b1e      	ldr	r3, [pc, #120]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ba:	4a1d      	ldr	r2, [pc, #116]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043c2:	4b1b      	ldr	r3, [pc, #108]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c6:	4a1a      	ldr	r2, [pc, #104]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80043ce:	4a18      	ldr	r2, [pc, #96]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043d4:	4b16      	ldr	r3, [pc, #88]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d114      	bne.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e0:	f7fd fa30 	bl	8001844 <HAL_GetTick>
 80043e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e6:	e00a      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043e8:	f7fd fa2c 	bl	8001844 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d901      	bls.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e351      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043fe:	4b0c      	ldr	r3, [pc, #48]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0ee      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004412:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004416:	d111      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004418:	4b05      	ldr	r3, [pc, #20]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004424:	4b04      	ldr	r3, [pc, #16]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004426:	400b      	ands	r3, r1
 8004428:	4901      	ldr	r1, [pc, #4]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800442a:	4313      	orrs	r3, r2
 800442c:	608b      	str	r3, [r1, #8]
 800442e:	e00b      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004430:	40023800 	.word	0x40023800
 8004434:	40007000 	.word	0x40007000
 8004438:	0ffffcff 	.word	0x0ffffcff
 800443c:	4bac      	ldr	r3, [pc, #688]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	4aab      	ldr	r2, [pc, #684]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004442:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004446:	6093      	str	r3, [r2, #8]
 8004448:	4ba9      	ldr	r3, [pc, #676]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800444a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004454:	49a6      	ldr	r1, [pc, #664]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004456:	4313      	orrs	r3, r2
 8004458:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	2b00      	cmp	r3, #0
 8004464:	d010      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004466:	4ba2      	ldr	r3, [pc, #648]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800446c:	4aa0      	ldr	r2, [pc, #640]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800446e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004472:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004476:	4b9e      	ldr	r3, [pc, #632]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004478:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004480:	499b      	ldr	r1, [pc, #620]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00a      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004494:	4b96      	ldr	r3, [pc, #600]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044a2:	4993      	ldr	r1, [pc, #588]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044b6:	4b8e      	ldr	r3, [pc, #568]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044c4:	498a      	ldr	r1, [pc, #552]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00a      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044d8:	4b85      	ldr	r3, [pc, #532]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044e6:	4982      	ldr	r1, [pc, #520]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00a      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044fa:	4b7d      	ldr	r3, [pc, #500]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004500:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004508:	4979      	ldr	r1, [pc, #484]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800451c:	4b74      	ldr	r3, [pc, #464]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800451e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004522:	f023 0203 	bic.w	r2, r3, #3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452a:	4971      	ldr	r1, [pc, #452]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800453e:	4b6c      	ldr	r3, [pc, #432]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004544:	f023 020c 	bic.w	r2, r3, #12
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800454c:	4968      	ldr	r1, [pc, #416]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00a      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004560:	4b63      	ldr	r3, [pc, #396]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004566:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800456e:	4960      	ldr	r1, [pc, #384]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004582:	4b5b      	ldr	r3, [pc, #364]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004588:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004590:	4957      	ldr	r1, [pc, #348]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045a4:	4b52      	ldr	r3, [pc, #328]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b2:	494f      	ldr	r1, [pc, #316]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80045c6:	4b4a      	ldr	r3, [pc, #296]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d4:	4946      	ldr	r1, [pc, #280]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00a      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80045e8:	4b41      	ldr	r3, [pc, #260]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f6:	493e      	ldr	r1, [pc, #248]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800460a:	4b39      	ldr	r3, [pc, #228]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800460c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004610:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004618:	4935      	ldr	r1, [pc, #212]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800461a:	4313      	orrs	r3, r2
 800461c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800462c:	4b30      	ldr	r3, [pc, #192]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800462e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004632:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800463a:	492d      	ldr	r1, [pc, #180]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d011      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800464e:	4b28      	ldr	r3, [pc, #160]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004654:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800465c:	4924      	ldr	r1, [pc, #144]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800465e:	4313      	orrs	r3, r2
 8004660:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004668:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800466c:	d101      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800466e:	2301      	movs	r3, #1
 8004670:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0308 	and.w	r3, r3, #8
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800467e:	2301      	movs	r3, #1
 8004680:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800468e:	4b18      	ldr	r3, [pc, #96]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004694:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800469c:	4914      	ldr	r1, [pc, #80]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00b      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046b0:	4b0f      	ldr	r3, [pc, #60]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046c0:	490b      	ldr	r1, [pc, #44]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00f      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80046d4:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046da:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e4:	4902      	ldr	r1, [pc, #8]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80046ec:	e002      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80046ee:	bf00      	nop
 80046f0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00b      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004700:	4b8a      	ldr	r3, [pc, #552]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004702:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004706:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004710:	4986      	ldr	r1, [pc, #536]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00b      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004724:	4b81      	ldr	r3, [pc, #516]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800472a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004734:	497d      	ldr	r1, [pc, #500]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d006      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 80d6 	beq.w	80048fc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004750:	4b76      	ldr	r3, [pc, #472]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a75      	ldr	r2, [pc, #468]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004756:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800475a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800475c:	f7fd f872 	bl	8001844 <HAL_GetTick>
 8004760:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004764:	f7fd f86e 	bl	8001844 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b64      	cmp	r3, #100	; 0x64
 8004770:	d901      	bls.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e195      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004776:	4b6d      	ldr	r3, [pc, #436]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f0      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d021      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004792:	2b00      	cmp	r3, #0
 8004794:	d11d      	bne.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004796:	4b65      	ldr	r3, [pc, #404]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800479c:	0c1b      	lsrs	r3, r3, #16
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047a4:	4b61      	ldr	r3, [pc, #388]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047aa:	0e1b      	lsrs	r3, r3, #24
 80047ac:	f003 030f 	and.w	r3, r3, #15
 80047b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	019a      	lsls	r2, r3, #6
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	041b      	lsls	r3, r3, #16
 80047bc:	431a      	orrs	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	061b      	lsls	r3, r3, #24
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	071b      	lsls	r3, r3, #28
 80047ca:	4958      	ldr	r1, [pc, #352]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d004      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047e6:	d00a      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d02e      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047fc:	d129      	bne.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047fe:	4b4b      	ldr	r3, [pc, #300]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004804:	0c1b      	lsrs	r3, r3, #16
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800480c:	4b47      	ldr	r3, [pc, #284]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800480e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004812:	0f1b      	lsrs	r3, r3, #28
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	019a      	lsls	r2, r3, #6
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	041b      	lsls	r3, r3, #16
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	061b      	lsls	r3, r3, #24
 800482c:	431a      	orrs	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	071b      	lsls	r3, r3, #28
 8004832:	493e      	ldr	r1, [pc, #248]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800483a:	4b3c      	ldr	r3, [pc, #240]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800483c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004840:	f023 021f 	bic.w	r2, r3, #31
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	3b01      	subs	r3, #1
 800484a:	4938      	ldr	r1, [pc, #224]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800484c:	4313      	orrs	r3, r2
 800484e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d01d      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800485e:	4b33      	ldr	r3, [pc, #204]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004864:	0e1b      	lsrs	r3, r3, #24
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800486c:	4b2f      	ldr	r3, [pc, #188]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800486e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004872:	0f1b      	lsrs	r3, r3, #28
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	019a      	lsls	r2, r3, #6
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	041b      	lsls	r3, r3, #16
 8004886:	431a      	orrs	r2, r3
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	061b      	lsls	r3, r3, #24
 800488c:	431a      	orrs	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	071b      	lsls	r3, r3, #28
 8004892:	4926      	ldr	r1, [pc, #152]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d011      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	019a      	lsls	r2, r3, #6
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	041b      	lsls	r3, r3, #16
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	061b      	lsls	r3, r3, #24
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	071b      	lsls	r3, r3, #28
 80048c2:	491a      	ldr	r1, [pc, #104]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048ca:	4b18      	ldr	r3, [pc, #96]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a17      	ldr	r2, [pc, #92]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048d6:	f7fc ffb5 	bl	8001844 <HAL_GetTick>
 80048da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048dc:	e008      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048de:	f7fc ffb1 	bl	8001844 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b64      	cmp	r3, #100	; 0x64
 80048ea:	d901      	bls.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e0d8      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048f0:	4b0e      	ldr	r3, [pc, #56]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0f0      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	f040 80ce 	bne.w	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004904:	4b09      	ldr	r3, [pc, #36]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a08      	ldr	r2, [pc, #32]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800490a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800490e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004910:	f7fc ff98 	bl	8001844 <HAL_GetTick>
 8004914:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004916:	e00b      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004918:	f7fc ff94 	bl	8001844 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b64      	cmp	r3, #100	; 0x64
 8004924:	d904      	bls.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e0bb      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800492a:	bf00      	nop
 800492c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004930:	4b5e      	ldr	r3, [pc, #376]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800493c:	d0ec      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494e:	2b00      	cmp	r3, #0
 8004950:	d009      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800495a:	2b00      	cmp	r3, #0
 800495c:	d02e      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	2b00      	cmp	r3, #0
 8004964:	d12a      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004966:	4b51      	ldr	r3, [pc, #324]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496c:	0c1b      	lsrs	r3, r3, #16
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004974:	4b4d      	ldr	r3, [pc, #308]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497a:	0f1b      	lsrs	r3, r3, #28
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	019a      	lsls	r2, r3, #6
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	041b      	lsls	r3, r3, #16
 800498c:	431a      	orrs	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	061b      	lsls	r3, r3, #24
 8004994:	431a      	orrs	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	071b      	lsls	r3, r3, #28
 800499a:	4944      	ldr	r1, [pc, #272]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80049a2:	4b42      	ldr	r3, [pc, #264]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b0:	3b01      	subs	r3, #1
 80049b2:	021b      	lsls	r3, r3, #8
 80049b4:	493d      	ldr	r1, [pc, #244]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d022      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049d0:	d11d      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80049d2:	4b36      	ldr	r3, [pc, #216]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d8:	0e1b      	lsrs	r3, r3, #24
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049e0:	4b32      	ldr	r3, [pc, #200]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e6:	0f1b      	lsrs	r3, r3, #28
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	019a      	lsls	r2, r3, #6
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	041b      	lsls	r3, r3, #16
 80049fa:	431a      	orrs	r2, r3
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	061b      	lsls	r3, r3, #24
 8004a00:	431a      	orrs	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	071b      	lsls	r3, r3, #28
 8004a06:	4929      	ldr	r1, [pc, #164]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0308 	and.w	r3, r3, #8
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d028      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a1a:	4b24      	ldr	r3, [pc, #144]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a20:	0e1b      	lsrs	r3, r3, #24
 8004a22:	f003 030f 	and.w	r3, r3, #15
 8004a26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a28:	4b20      	ldr	r3, [pc, #128]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2e:	0c1b      	lsrs	r3, r3, #16
 8004a30:	f003 0303 	and.w	r3, r3, #3
 8004a34:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	019a      	lsls	r2, r3, #6
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	041b      	lsls	r3, r3, #16
 8004a40:	431a      	orrs	r2, r3
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	061b      	lsls	r3, r3, #24
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	071b      	lsls	r3, r3, #28
 8004a4e:	4917      	ldr	r1, [pc, #92]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004a56:	4b15      	ldr	r3, [pc, #84]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	4911      	ldr	r1, [pc, #68]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004a6c:	4b0f      	ldr	r3, [pc, #60]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a0e      	ldr	r2, [pc, #56]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a78:	f7fc fee4 	bl	8001844 <HAL_GetTick>
 8004a7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a80:	f7fc fee0 	bl	8001844 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b64      	cmp	r3, #100	; 0x64
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e007      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a92:	4b06      	ldr	r3, [pc, #24]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a9e:	d1ef      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3720      	adds	r7, #32
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40023800 	.word	0x40023800

08004ab0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e040      	b.n	8004b44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d106      	bne.n	8004ad8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7fc f816 	bl	8000b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2224      	movs	r2, #36	; 0x24
 8004adc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0201 	bic.w	r2, r2, #1
 8004aec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f8b0 	bl	8004c54 <UART_SetConfig>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d101      	bne.n	8004afe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e022      	b.n	8004b44 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fb08 	bl	800511c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689a      	ldr	r2, [r3, #8]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0201 	orr.w	r2, r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 fb8f 	bl	8005260 <UART_CheckIdleState>
 8004b42:	4603      	mov	r3, r0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08a      	sub	sp, #40	; 0x28
 8004b50:	af02      	add	r7, sp, #8
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	603b      	str	r3, [r7, #0]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b60:	2b20      	cmp	r3, #32
 8004b62:	d171      	bne.n	8004c48 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d002      	beq.n	8004b70 <HAL_UART_Transmit+0x24>
 8004b6a:	88fb      	ldrh	r3, [r7, #6]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e06a      	b.n	8004c4a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2221      	movs	r2, #33	; 0x21
 8004b80:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b82:	f7fc fe5f 	bl	8001844 <HAL_GetTick>
 8004b86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	88fa      	ldrh	r2, [r7, #6]
 8004b8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	88fa      	ldrh	r2, [r7, #6]
 8004b94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba0:	d108      	bne.n	8004bb4 <HAL_UART_Transmit+0x68>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d104      	bne.n	8004bb4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004baa:	2300      	movs	r3, #0
 8004bac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	61bb      	str	r3, [r7, #24]
 8004bb2:	e003      	b.n	8004bbc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004bbc:	e02c      	b.n	8004c18 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	2180      	movs	r1, #128	; 0x80
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 fb96 	bl	80052fa <UART_WaitOnFlagUntilTimeout>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e038      	b.n	8004c4a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10b      	bne.n	8004bf6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	461a      	mov	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	3302      	adds	r3, #2
 8004bf2:	61bb      	str	r3, [r7, #24]
 8004bf4:	e007      	b.n	8004c06 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	781a      	ldrb	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	3301      	adds	r3, #1
 8004c04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1cc      	bne.n	8004bbe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	2140      	movs	r1, #64	; 0x40
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 fb63 	bl	80052fa <UART_WaitOnFlagUntilTimeout>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e005      	b.n	8004c4a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2220      	movs	r2, #32
 8004c42:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004c44:	2300      	movs	r3, #0
 8004c46:	e000      	b.n	8004c4a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004c48:	2302      	movs	r3, #2
  }
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3720      	adds	r7, #32
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	4ba6      	ldr	r3, [pc, #664]	; (8004f18 <UART_SetConfig+0x2c4>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6812      	ldr	r2, [r2, #0]
 8004c86:	6979      	ldr	r1, [r7, #20]
 8004c88:	430b      	orrs	r3, r1
 8004c8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a94      	ldr	r2, [pc, #592]	; (8004f1c <UART_SetConfig+0x2c8>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d120      	bne.n	8004d12 <UART_SetConfig+0xbe>
 8004cd0:	4b93      	ldr	r3, [pc, #588]	; (8004f20 <UART_SetConfig+0x2cc>)
 8004cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd6:	f003 0303 	and.w	r3, r3, #3
 8004cda:	2b03      	cmp	r3, #3
 8004cdc:	d816      	bhi.n	8004d0c <UART_SetConfig+0xb8>
 8004cde:	a201      	add	r2, pc, #4	; (adr r2, 8004ce4 <UART_SetConfig+0x90>)
 8004ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce4:	08004cf5 	.word	0x08004cf5
 8004ce8:	08004d01 	.word	0x08004d01
 8004cec:	08004cfb 	.word	0x08004cfb
 8004cf0:	08004d07 	.word	0x08004d07
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	77fb      	strb	r3, [r7, #31]
 8004cf8:	e150      	b.n	8004f9c <UART_SetConfig+0x348>
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	77fb      	strb	r3, [r7, #31]
 8004cfe:	e14d      	b.n	8004f9c <UART_SetConfig+0x348>
 8004d00:	2304      	movs	r3, #4
 8004d02:	77fb      	strb	r3, [r7, #31]
 8004d04:	e14a      	b.n	8004f9c <UART_SetConfig+0x348>
 8004d06:	2308      	movs	r3, #8
 8004d08:	77fb      	strb	r3, [r7, #31]
 8004d0a:	e147      	b.n	8004f9c <UART_SetConfig+0x348>
 8004d0c:	2310      	movs	r3, #16
 8004d0e:	77fb      	strb	r3, [r7, #31]
 8004d10:	e144      	b.n	8004f9c <UART_SetConfig+0x348>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a83      	ldr	r2, [pc, #524]	; (8004f24 <UART_SetConfig+0x2d0>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d132      	bne.n	8004d82 <UART_SetConfig+0x12e>
 8004d1c:	4b80      	ldr	r3, [pc, #512]	; (8004f20 <UART_SetConfig+0x2cc>)
 8004d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d22:	f003 030c 	and.w	r3, r3, #12
 8004d26:	2b0c      	cmp	r3, #12
 8004d28:	d828      	bhi.n	8004d7c <UART_SetConfig+0x128>
 8004d2a:	a201      	add	r2, pc, #4	; (adr r2, 8004d30 <UART_SetConfig+0xdc>)
 8004d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d30:	08004d65 	.word	0x08004d65
 8004d34:	08004d7d 	.word	0x08004d7d
 8004d38:	08004d7d 	.word	0x08004d7d
 8004d3c:	08004d7d 	.word	0x08004d7d
 8004d40:	08004d71 	.word	0x08004d71
 8004d44:	08004d7d 	.word	0x08004d7d
 8004d48:	08004d7d 	.word	0x08004d7d
 8004d4c:	08004d7d 	.word	0x08004d7d
 8004d50:	08004d6b 	.word	0x08004d6b
 8004d54:	08004d7d 	.word	0x08004d7d
 8004d58:	08004d7d 	.word	0x08004d7d
 8004d5c:	08004d7d 	.word	0x08004d7d
 8004d60:	08004d77 	.word	0x08004d77
 8004d64:	2300      	movs	r3, #0
 8004d66:	77fb      	strb	r3, [r7, #31]
 8004d68:	e118      	b.n	8004f9c <UART_SetConfig+0x348>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	77fb      	strb	r3, [r7, #31]
 8004d6e:	e115      	b.n	8004f9c <UART_SetConfig+0x348>
 8004d70:	2304      	movs	r3, #4
 8004d72:	77fb      	strb	r3, [r7, #31]
 8004d74:	e112      	b.n	8004f9c <UART_SetConfig+0x348>
 8004d76:	2308      	movs	r3, #8
 8004d78:	77fb      	strb	r3, [r7, #31]
 8004d7a:	e10f      	b.n	8004f9c <UART_SetConfig+0x348>
 8004d7c:	2310      	movs	r3, #16
 8004d7e:	77fb      	strb	r3, [r7, #31]
 8004d80:	e10c      	b.n	8004f9c <UART_SetConfig+0x348>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a68      	ldr	r2, [pc, #416]	; (8004f28 <UART_SetConfig+0x2d4>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d120      	bne.n	8004dce <UART_SetConfig+0x17a>
 8004d8c:	4b64      	ldr	r3, [pc, #400]	; (8004f20 <UART_SetConfig+0x2cc>)
 8004d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d92:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d96:	2b30      	cmp	r3, #48	; 0x30
 8004d98:	d013      	beq.n	8004dc2 <UART_SetConfig+0x16e>
 8004d9a:	2b30      	cmp	r3, #48	; 0x30
 8004d9c:	d814      	bhi.n	8004dc8 <UART_SetConfig+0x174>
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	d009      	beq.n	8004db6 <UART_SetConfig+0x162>
 8004da2:	2b20      	cmp	r3, #32
 8004da4:	d810      	bhi.n	8004dc8 <UART_SetConfig+0x174>
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <UART_SetConfig+0x15c>
 8004daa:	2b10      	cmp	r3, #16
 8004dac:	d006      	beq.n	8004dbc <UART_SetConfig+0x168>
 8004dae:	e00b      	b.n	8004dc8 <UART_SetConfig+0x174>
 8004db0:	2300      	movs	r3, #0
 8004db2:	77fb      	strb	r3, [r7, #31]
 8004db4:	e0f2      	b.n	8004f9c <UART_SetConfig+0x348>
 8004db6:	2302      	movs	r3, #2
 8004db8:	77fb      	strb	r3, [r7, #31]
 8004dba:	e0ef      	b.n	8004f9c <UART_SetConfig+0x348>
 8004dbc:	2304      	movs	r3, #4
 8004dbe:	77fb      	strb	r3, [r7, #31]
 8004dc0:	e0ec      	b.n	8004f9c <UART_SetConfig+0x348>
 8004dc2:	2308      	movs	r3, #8
 8004dc4:	77fb      	strb	r3, [r7, #31]
 8004dc6:	e0e9      	b.n	8004f9c <UART_SetConfig+0x348>
 8004dc8:	2310      	movs	r3, #16
 8004dca:	77fb      	strb	r3, [r7, #31]
 8004dcc:	e0e6      	b.n	8004f9c <UART_SetConfig+0x348>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a56      	ldr	r2, [pc, #344]	; (8004f2c <UART_SetConfig+0x2d8>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d120      	bne.n	8004e1a <UART_SetConfig+0x1c6>
 8004dd8:	4b51      	ldr	r3, [pc, #324]	; (8004f20 <UART_SetConfig+0x2cc>)
 8004dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004de2:	2bc0      	cmp	r3, #192	; 0xc0
 8004de4:	d013      	beq.n	8004e0e <UART_SetConfig+0x1ba>
 8004de6:	2bc0      	cmp	r3, #192	; 0xc0
 8004de8:	d814      	bhi.n	8004e14 <UART_SetConfig+0x1c0>
 8004dea:	2b80      	cmp	r3, #128	; 0x80
 8004dec:	d009      	beq.n	8004e02 <UART_SetConfig+0x1ae>
 8004dee:	2b80      	cmp	r3, #128	; 0x80
 8004df0:	d810      	bhi.n	8004e14 <UART_SetConfig+0x1c0>
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <UART_SetConfig+0x1a8>
 8004df6:	2b40      	cmp	r3, #64	; 0x40
 8004df8:	d006      	beq.n	8004e08 <UART_SetConfig+0x1b4>
 8004dfa:	e00b      	b.n	8004e14 <UART_SetConfig+0x1c0>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	77fb      	strb	r3, [r7, #31]
 8004e00:	e0cc      	b.n	8004f9c <UART_SetConfig+0x348>
 8004e02:	2302      	movs	r3, #2
 8004e04:	77fb      	strb	r3, [r7, #31]
 8004e06:	e0c9      	b.n	8004f9c <UART_SetConfig+0x348>
 8004e08:	2304      	movs	r3, #4
 8004e0a:	77fb      	strb	r3, [r7, #31]
 8004e0c:	e0c6      	b.n	8004f9c <UART_SetConfig+0x348>
 8004e0e:	2308      	movs	r3, #8
 8004e10:	77fb      	strb	r3, [r7, #31]
 8004e12:	e0c3      	b.n	8004f9c <UART_SetConfig+0x348>
 8004e14:	2310      	movs	r3, #16
 8004e16:	77fb      	strb	r3, [r7, #31]
 8004e18:	e0c0      	b.n	8004f9c <UART_SetConfig+0x348>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a44      	ldr	r2, [pc, #272]	; (8004f30 <UART_SetConfig+0x2dc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d125      	bne.n	8004e70 <UART_SetConfig+0x21c>
 8004e24:	4b3e      	ldr	r3, [pc, #248]	; (8004f20 <UART_SetConfig+0x2cc>)
 8004e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e32:	d017      	beq.n	8004e64 <UART_SetConfig+0x210>
 8004e34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e38:	d817      	bhi.n	8004e6a <UART_SetConfig+0x216>
 8004e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e3e:	d00b      	beq.n	8004e58 <UART_SetConfig+0x204>
 8004e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e44:	d811      	bhi.n	8004e6a <UART_SetConfig+0x216>
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <UART_SetConfig+0x1fe>
 8004e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e4e:	d006      	beq.n	8004e5e <UART_SetConfig+0x20a>
 8004e50:	e00b      	b.n	8004e6a <UART_SetConfig+0x216>
 8004e52:	2300      	movs	r3, #0
 8004e54:	77fb      	strb	r3, [r7, #31]
 8004e56:	e0a1      	b.n	8004f9c <UART_SetConfig+0x348>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	77fb      	strb	r3, [r7, #31]
 8004e5c:	e09e      	b.n	8004f9c <UART_SetConfig+0x348>
 8004e5e:	2304      	movs	r3, #4
 8004e60:	77fb      	strb	r3, [r7, #31]
 8004e62:	e09b      	b.n	8004f9c <UART_SetConfig+0x348>
 8004e64:	2308      	movs	r3, #8
 8004e66:	77fb      	strb	r3, [r7, #31]
 8004e68:	e098      	b.n	8004f9c <UART_SetConfig+0x348>
 8004e6a:	2310      	movs	r3, #16
 8004e6c:	77fb      	strb	r3, [r7, #31]
 8004e6e:	e095      	b.n	8004f9c <UART_SetConfig+0x348>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a2f      	ldr	r2, [pc, #188]	; (8004f34 <UART_SetConfig+0x2e0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d125      	bne.n	8004ec6 <UART_SetConfig+0x272>
 8004e7a:	4b29      	ldr	r3, [pc, #164]	; (8004f20 <UART_SetConfig+0x2cc>)
 8004e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e88:	d017      	beq.n	8004eba <UART_SetConfig+0x266>
 8004e8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e8e:	d817      	bhi.n	8004ec0 <UART_SetConfig+0x26c>
 8004e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e94:	d00b      	beq.n	8004eae <UART_SetConfig+0x25a>
 8004e96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e9a:	d811      	bhi.n	8004ec0 <UART_SetConfig+0x26c>
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <UART_SetConfig+0x254>
 8004ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea4:	d006      	beq.n	8004eb4 <UART_SetConfig+0x260>
 8004ea6:	e00b      	b.n	8004ec0 <UART_SetConfig+0x26c>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	77fb      	strb	r3, [r7, #31]
 8004eac:	e076      	b.n	8004f9c <UART_SetConfig+0x348>
 8004eae:	2302      	movs	r3, #2
 8004eb0:	77fb      	strb	r3, [r7, #31]
 8004eb2:	e073      	b.n	8004f9c <UART_SetConfig+0x348>
 8004eb4:	2304      	movs	r3, #4
 8004eb6:	77fb      	strb	r3, [r7, #31]
 8004eb8:	e070      	b.n	8004f9c <UART_SetConfig+0x348>
 8004eba:	2308      	movs	r3, #8
 8004ebc:	77fb      	strb	r3, [r7, #31]
 8004ebe:	e06d      	b.n	8004f9c <UART_SetConfig+0x348>
 8004ec0:	2310      	movs	r3, #16
 8004ec2:	77fb      	strb	r3, [r7, #31]
 8004ec4:	e06a      	b.n	8004f9c <UART_SetConfig+0x348>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a1b      	ldr	r2, [pc, #108]	; (8004f38 <UART_SetConfig+0x2e4>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d138      	bne.n	8004f42 <UART_SetConfig+0x2ee>
 8004ed0:	4b13      	ldr	r3, [pc, #76]	; (8004f20 <UART_SetConfig+0x2cc>)
 8004ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004eda:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ede:	d017      	beq.n	8004f10 <UART_SetConfig+0x2bc>
 8004ee0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ee4:	d82a      	bhi.n	8004f3c <UART_SetConfig+0x2e8>
 8004ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eea:	d00b      	beq.n	8004f04 <UART_SetConfig+0x2b0>
 8004eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ef0:	d824      	bhi.n	8004f3c <UART_SetConfig+0x2e8>
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <UART_SetConfig+0x2aa>
 8004ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004efa:	d006      	beq.n	8004f0a <UART_SetConfig+0x2b6>
 8004efc:	e01e      	b.n	8004f3c <UART_SetConfig+0x2e8>
 8004efe:	2300      	movs	r3, #0
 8004f00:	77fb      	strb	r3, [r7, #31]
 8004f02:	e04b      	b.n	8004f9c <UART_SetConfig+0x348>
 8004f04:	2302      	movs	r3, #2
 8004f06:	77fb      	strb	r3, [r7, #31]
 8004f08:	e048      	b.n	8004f9c <UART_SetConfig+0x348>
 8004f0a:	2304      	movs	r3, #4
 8004f0c:	77fb      	strb	r3, [r7, #31]
 8004f0e:	e045      	b.n	8004f9c <UART_SetConfig+0x348>
 8004f10:	2308      	movs	r3, #8
 8004f12:	77fb      	strb	r3, [r7, #31]
 8004f14:	e042      	b.n	8004f9c <UART_SetConfig+0x348>
 8004f16:	bf00      	nop
 8004f18:	efff69f3 	.word	0xefff69f3
 8004f1c:	40011000 	.word	0x40011000
 8004f20:	40023800 	.word	0x40023800
 8004f24:	40004400 	.word	0x40004400
 8004f28:	40004800 	.word	0x40004800
 8004f2c:	40004c00 	.word	0x40004c00
 8004f30:	40005000 	.word	0x40005000
 8004f34:	40011400 	.word	0x40011400
 8004f38:	40007800 	.word	0x40007800
 8004f3c:	2310      	movs	r3, #16
 8004f3e:	77fb      	strb	r3, [r7, #31]
 8004f40:	e02c      	b.n	8004f9c <UART_SetConfig+0x348>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a72      	ldr	r2, [pc, #456]	; (8005110 <UART_SetConfig+0x4bc>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d125      	bne.n	8004f98 <UART_SetConfig+0x344>
 8004f4c:	4b71      	ldr	r3, [pc, #452]	; (8005114 <UART_SetConfig+0x4c0>)
 8004f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f56:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f5a:	d017      	beq.n	8004f8c <UART_SetConfig+0x338>
 8004f5c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f60:	d817      	bhi.n	8004f92 <UART_SetConfig+0x33e>
 8004f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f66:	d00b      	beq.n	8004f80 <UART_SetConfig+0x32c>
 8004f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f6c:	d811      	bhi.n	8004f92 <UART_SetConfig+0x33e>
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <UART_SetConfig+0x326>
 8004f72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f76:	d006      	beq.n	8004f86 <UART_SetConfig+0x332>
 8004f78:	e00b      	b.n	8004f92 <UART_SetConfig+0x33e>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	77fb      	strb	r3, [r7, #31]
 8004f7e:	e00d      	b.n	8004f9c <UART_SetConfig+0x348>
 8004f80:	2302      	movs	r3, #2
 8004f82:	77fb      	strb	r3, [r7, #31]
 8004f84:	e00a      	b.n	8004f9c <UART_SetConfig+0x348>
 8004f86:	2304      	movs	r3, #4
 8004f88:	77fb      	strb	r3, [r7, #31]
 8004f8a:	e007      	b.n	8004f9c <UART_SetConfig+0x348>
 8004f8c:	2308      	movs	r3, #8
 8004f8e:	77fb      	strb	r3, [r7, #31]
 8004f90:	e004      	b.n	8004f9c <UART_SetConfig+0x348>
 8004f92:	2310      	movs	r3, #16
 8004f94:	77fb      	strb	r3, [r7, #31]
 8004f96:	e001      	b.n	8004f9c <UART_SetConfig+0x348>
 8004f98:	2310      	movs	r3, #16
 8004f9a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fa4:	d15b      	bne.n	800505e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004fa6:	7ffb      	ldrb	r3, [r7, #31]
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d828      	bhi.n	8004ffe <UART_SetConfig+0x3aa>
 8004fac:	a201      	add	r2, pc, #4	; (adr r2, 8004fb4 <UART_SetConfig+0x360>)
 8004fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb2:	bf00      	nop
 8004fb4:	08004fd9 	.word	0x08004fd9
 8004fb8:	08004fe1 	.word	0x08004fe1
 8004fbc:	08004fe9 	.word	0x08004fe9
 8004fc0:	08004fff 	.word	0x08004fff
 8004fc4:	08004fef 	.word	0x08004fef
 8004fc8:	08004fff 	.word	0x08004fff
 8004fcc:	08004fff 	.word	0x08004fff
 8004fd0:	08004fff 	.word	0x08004fff
 8004fd4:	08004ff7 	.word	0x08004ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fd8:	f7ff f91a 	bl	8004210 <HAL_RCC_GetPCLK1Freq>
 8004fdc:	61b8      	str	r0, [r7, #24]
        break;
 8004fde:	e013      	b.n	8005008 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fe0:	f7ff f92a 	bl	8004238 <HAL_RCC_GetPCLK2Freq>
 8004fe4:	61b8      	str	r0, [r7, #24]
        break;
 8004fe6:	e00f      	b.n	8005008 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fe8:	4b4b      	ldr	r3, [pc, #300]	; (8005118 <UART_SetConfig+0x4c4>)
 8004fea:	61bb      	str	r3, [r7, #24]
        break;
 8004fec:	e00c      	b.n	8005008 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fee:	f7fe fffd 	bl	8003fec <HAL_RCC_GetSysClockFreq>
 8004ff2:	61b8      	str	r0, [r7, #24]
        break;
 8004ff4:	e008      	b.n	8005008 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ffa:	61bb      	str	r3, [r7, #24]
        break;
 8004ffc:	e004      	b.n	8005008 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004ffe:	2300      	movs	r3, #0
 8005000:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	77bb      	strb	r3, [r7, #30]
        break;
 8005006:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d074      	beq.n	80050f8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	005a      	lsls	r2, r3, #1
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	085b      	lsrs	r3, r3, #1
 8005018:	441a      	add	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005022:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	2b0f      	cmp	r3, #15
 8005028:	d916      	bls.n	8005058 <UART_SetConfig+0x404>
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005030:	d212      	bcs.n	8005058 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	b29b      	uxth	r3, r3
 8005036:	f023 030f 	bic.w	r3, r3, #15
 800503a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	085b      	lsrs	r3, r3, #1
 8005040:	b29b      	uxth	r3, r3
 8005042:	f003 0307 	and.w	r3, r3, #7
 8005046:	b29a      	uxth	r2, r3
 8005048:	89fb      	ldrh	r3, [r7, #14]
 800504a:	4313      	orrs	r3, r2
 800504c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	89fa      	ldrh	r2, [r7, #14]
 8005054:	60da      	str	r2, [r3, #12]
 8005056:	e04f      	b.n	80050f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	77bb      	strb	r3, [r7, #30]
 800505c:	e04c      	b.n	80050f8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800505e:	7ffb      	ldrb	r3, [r7, #31]
 8005060:	2b08      	cmp	r3, #8
 8005062:	d828      	bhi.n	80050b6 <UART_SetConfig+0x462>
 8005064:	a201      	add	r2, pc, #4	; (adr r2, 800506c <UART_SetConfig+0x418>)
 8005066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506a:	bf00      	nop
 800506c:	08005091 	.word	0x08005091
 8005070:	08005099 	.word	0x08005099
 8005074:	080050a1 	.word	0x080050a1
 8005078:	080050b7 	.word	0x080050b7
 800507c:	080050a7 	.word	0x080050a7
 8005080:	080050b7 	.word	0x080050b7
 8005084:	080050b7 	.word	0x080050b7
 8005088:	080050b7 	.word	0x080050b7
 800508c:	080050af 	.word	0x080050af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005090:	f7ff f8be 	bl	8004210 <HAL_RCC_GetPCLK1Freq>
 8005094:	61b8      	str	r0, [r7, #24]
        break;
 8005096:	e013      	b.n	80050c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005098:	f7ff f8ce 	bl	8004238 <HAL_RCC_GetPCLK2Freq>
 800509c:	61b8      	str	r0, [r7, #24]
        break;
 800509e:	e00f      	b.n	80050c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050a0:	4b1d      	ldr	r3, [pc, #116]	; (8005118 <UART_SetConfig+0x4c4>)
 80050a2:	61bb      	str	r3, [r7, #24]
        break;
 80050a4:	e00c      	b.n	80050c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050a6:	f7fe ffa1 	bl	8003fec <HAL_RCC_GetSysClockFreq>
 80050aa:	61b8      	str	r0, [r7, #24]
        break;
 80050ac:	e008      	b.n	80050c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050b2:	61bb      	str	r3, [r7, #24]
        break;
 80050b4:	e004      	b.n	80050c0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	77bb      	strb	r3, [r7, #30]
        break;
 80050be:	bf00      	nop
    }

    if (pclk != 0U)
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d018      	beq.n	80050f8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	085a      	lsrs	r2, r3, #1
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	441a      	add	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b0f      	cmp	r3, #15
 80050de:	d909      	bls.n	80050f4 <UART_SetConfig+0x4a0>
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e6:	d205      	bcs.n	80050f4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	60da      	str	r2, [r3, #12]
 80050f2:	e001      	b.n	80050f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005104:	7fbb      	ldrb	r3, [r7, #30]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3720      	adds	r7, #32
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	40007c00 	.word	0x40007c00
 8005114:	40023800 	.word	0x40023800
 8005118:	00f42400 	.word	0x00f42400

0800511c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00a      	beq.n	8005146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00a      	beq.n	800518a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	f003 0310 	and.w	r3, r3, #16
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00a      	beq.n	80051ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	f003 0320 	and.w	r3, r3, #32
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01a      	beq.n	8005232 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800521a:	d10a      	bne.n	8005232 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	605a      	str	r2, [r3, #4]
  }
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af02      	add	r7, sp, #8
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005270:	f7fc fae8 	bl	8001844 <HAL_GetTick>
 8005274:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0308 	and.w	r3, r3, #8
 8005280:	2b08      	cmp	r3, #8
 8005282:	d10e      	bne.n	80052a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005284:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f831 	bl	80052fa <UART_WaitOnFlagUntilTimeout>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e027      	b.n	80052f2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b04      	cmp	r3, #4
 80052ae:	d10e      	bne.n	80052ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f81b 	bl	80052fa <UART_WaitOnFlagUntilTimeout>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e011      	b.n	80052f2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2220      	movs	r2, #32
 80052d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b09c      	sub	sp, #112	; 0x70
 80052fe:	af00      	add	r7, sp, #0
 8005300:	60f8      	str	r0, [r7, #12]
 8005302:	60b9      	str	r1, [r7, #8]
 8005304:	603b      	str	r3, [r7, #0]
 8005306:	4613      	mov	r3, r2
 8005308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800530a:	e0a7      	b.n	800545c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800530c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800530e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005312:	f000 80a3 	beq.w	800545c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005316:	f7fc fa95 	bl	8001844 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005322:	429a      	cmp	r2, r3
 8005324:	d302      	bcc.n	800532c <UART_WaitOnFlagUntilTimeout+0x32>
 8005326:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005328:	2b00      	cmp	r3, #0
 800532a:	d13f      	bne.n	80053ac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005334:	e853 3f00 	ldrex	r3, [r3]
 8005338:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800533a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800533c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005340:	667b      	str	r3, [r7, #100]	; 0x64
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	461a      	mov	r2, r3
 8005348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800534a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800534c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005350:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005352:	e841 2300 	strex	r3, r2, [r1]
 8005356:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1e6      	bne.n	800532c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3308      	adds	r3, #8
 8005364:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005368:	e853 3f00 	ldrex	r3, [r3]
 800536c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800536e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005370:	f023 0301 	bic.w	r3, r3, #1
 8005374:	663b      	str	r3, [r7, #96]	; 0x60
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3308      	adds	r3, #8
 800537c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800537e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005380:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005382:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005384:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005386:	e841 2300 	strex	r3, r2, [r1]
 800538a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800538c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1e5      	bne.n	800535e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2220      	movs	r2, #32
 8005396:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2220      	movs	r2, #32
 800539c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e068      	b.n	800547e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d050      	beq.n	800545c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053c8:	d148      	bne.n	800545c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053d2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f2:	637b      	str	r3, [r7, #52]	; 0x34
 80053f4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053fa:	e841 2300 	strex	r3, r2, [r1]
 80053fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1e6      	bne.n	80053d4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3308      	adds	r3, #8
 800540c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	e853 3f00 	ldrex	r3, [r3]
 8005414:	613b      	str	r3, [r7, #16]
   return(result);
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f023 0301 	bic.w	r3, r3, #1
 800541c:	66bb      	str	r3, [r7, #104]	; 0x68
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3308      	adds	r3, #8
 8005424:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005426:	623a      	str	r2, [r7, #32]
 8005428:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542a:	69f9      	ldr	r1, [r7, #28]
 800542c:	6a3a      	ldr	r2, [r7, #32]
 800542e:	e841 2300 	strex	r3, r2, [r1]
 8005432:	61bb      	str	r3, [r7, #24]
   return(result);
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1e5      	bne.n	8005406 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2220      	movs	r2, #32
 800543e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2220      	movs	r2, #32
 8005444:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2220      	movs	r2, #32
 800544c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e010      	b.n	800547e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69da      	ldr	r2, [r3, #28]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	4013      	ands	r3, r2
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	429a      	cmp	r2, r3
 800546a:	bf0c      	ite	eq
 800546c:	2301      	moveq	r3, #1
 800546e:	2300      	movne	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	461a      	mov	r2, r3
 8005474:	79fb      	ldrb	r3, [r7, #7]
 8005476:	429a      	cmp	r2, r3
 8005478:	f43f af48 	beq.w	800530c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3770      	adds	r7, #112	; 0x70
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
	...

08005488 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005488:	b084      	sub	sp, #16
 800548a:	b580      	push	{r7, lr}
 800548c:	b084      	sub	sp, #16
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	f107 001c 	add.w	r0, r7, #28
 8005496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800549a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549c:	2b01      	cmp	r3, #1
 800549e:	d120      	bne.n	80054e2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	4b20      	ldr	r3, [pc, #128]	; (8005534 <USB_CoreInit+0xac>)
 80054b2:	4013      	ands	r3, r2
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d105      	bne.n	80054d6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fa96 	bl	8005a08 <USB_CoreReset>
 80054dc:	4603      	mov	r3, r0
 80054de:	73fb      	strb	r3, [r7, #15]
 80054e0:	e010      	b.n	8005504 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fa8a 	bl	8005a08 <USB_CoreReset>
 80054f4:	4603      	mov	r3, r0
 80054f6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005506:	2b01      	cmp	r3, #1
 8005508:	d10b      	bne.n	8005522 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f043 0206 	orr.w	r2, r3, #6
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f043 0220 	orr.w	r2, r3, #32
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005522:	7bfb      	ldrb	r3, [r7, #15]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800552e:	b004      	add	sp, #16
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	ffbdffbf 	.word	0xffbdffbf

08005538 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f023 0201 	bic.w	r2, r3, #1
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b084      	sub	sp, #16
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	460b      	mov	r3, r1
 8005564:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005566:	2300      	movs	r3, #0
 8005568:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005576:	78fb      	ldrb	r3, [r7, #3]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d115      	bne.n	80055a8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005588:	2001      	movs	r0, #1
 800558a:	f7fc f967 	bl	800185c <HAL_Delay>
      ms++;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3301      	adds	r3, #1
 8005592:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 fa29 	bl	80059ec <USB_GetMode>
 800559a:	4603      	mov	r3, r0
 800559c:	2b01      	cmp	r3, #1
 800559e:	d01e      	beq.n	80055de <USB_SetCurrentMode+0x84>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2b31      	cmp	r3, #49	; 0x31
 80055a4:	d9f0      	bls.n	8005588 <USB_SetCurrentMode+0x2e>
 80055a6:	e01a      	b.n	80055de <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055a8:	78fb      	ldrb	r3, [r7, #3]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d115      	bne.n	80055da <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055ba:	2001      	movs	r0, #1
 80055bc:	f7fc f94e 	bl	800185c <HAL_Delay>
      ms++;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	3301      	adds	r3, #1
 80055c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 fa10 	bl	80059ec <USB_GetMode>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <USB_SetCurrentMode+0x84>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b31      	cmp	r3, #49	; 0x31
 80055d6:	d9f0      	bls.n	80055ba <USB_SetCurrentMode+0x60>
 80055d8:	e001      	b.n	80055de <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e005      	b.n	80055ea <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b32      	cmp	r3, #50	; 0x32
 80055e2:	d101      	bne.n	80055e8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e000      	b.n	80055ea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
	...

080055f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055f4:	b084      	sub	sp, #16
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b086      	sub	sp, #24
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005602:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800560e:	2300      	movs	r3, #0
 8005610:	613b      	str	r3, [r7, #16]
 8005612:	e009      	b.n	8005628 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	3340      	adds	r3, #64	; 0x40
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	2200      	movs	r2, #0
 8005620:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	3301      	adds	r3, #1
 8005626:	613b      	str	r3, [r7, #16]
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	2b0e      	cmp	r3, #14
 800562c:	d9f2      	bls.n	8005614 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800562e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005630:	2b00      	cmp	r3, #0
 8005632:	d11c      	bne.n	800566e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005642:	f043 0302 	orr.w	r3, r3, #2
 8005646:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	e005      	b.n	800567a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005672:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005680:	461a      	mov	r2, r3
 8005682:	2300      	movs	r3, #0
 8005684:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800568c:	4619      	mov	r1, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005694:	461a      	mov	r2, r3
 8005696:	680b      	ldr	r3, [r1, #0]
 8005698:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800569a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569c:	2b01      	cmp	r3, #1
 800569e:	d10c      	bne.n	80056ba <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80056a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d104      	bne.n	80056b0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80056a6:	2100      	movs	r1, #0
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f965 	bl	8005978 <USB_SetDevSpeed>
 80056ae:	e008      	b.n	80056c2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80056b0:	2101      	movs	r1, #1
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f960 	bl	8005978 <USB_SetDevSpeed>
 80056b8:	e003      	b.n	80056c2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80056ba:	2103      	movs	r1, #3
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f95b 	bl	8005978 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056c2:	2110      	movs	r1, #16
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f8f3 	bl	80058b0 <USB_FlushTxFifo>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f91f 	bl	8005918 <USB_FlushRxFifo>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ea:	461a      	mov	r2, r3
 80056ec:	2300      	movs	r3, #0
 80056ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f6:	461a      	mov	r2, r3
 80056f8:	2300      	movs	r3, #0
 80056fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005702:	461a      	mov	r2, r3
 8005704:	2300      	movs	r3, #0
 8005706:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005708:	2300      	movs	r3, #0
 800570a:	613b      	str	r3, [r7, #16]
 800570c:	e043      	b.n	8005796 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005720:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005724:	d118      	bne.n	8005758 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10a      	bne.n	8005742 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4413      	add	r3, r2
 8005734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005738:	461a      	mov	r2, r3
 800573a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800573e:	6013      	str	r3, [r2, #0]
 8005740:	e013      	b.n	800576a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	4413      	add	r3, r2
 800574a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574e:	461a      	mov	r2, r3
 8005750:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	e008      	b.n	800576a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005764:	461a      	mov	r2, r3
 8005766:	2300      	movs	r3, #0
 8005768:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005776:	461a      	mov	r2, r3
 8005778:	2300      	movs	r3, #0
 800577a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005788:	461a      	mov	r2, r3
 800578a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800578e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	3301      	adds	r3, #1
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	429a      	cmp	r2, r3
 800579c:	d3b7      	bcc.n	800570e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800579e:	2300      	movs	r3, #0
 80057a0:	613b      	str	r3, [r7, #16]
 80057a2:	e043      	b.n	800582c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057ba:	d118      	bne.n	80057ee <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10a      	bne.n	80057d8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ce:	461a      	mov	r2, r3
 80057d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	e013      	b.n	8005800 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e4:	461a      	mov	r2, r3
 80057e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057ea:	6013      	str	r3, [r2, #0]
 80057ec:	e008      	b.n	8005800 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fa:	461a      	mov	r2, r3
 80057fc:	2300      	movs	r3, #0
 80057fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580c:	461a      	mov	r2, r3
 800580e:	2300      	movs	r3, #0
 8005810:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4413      	add	r3, r2
 800581a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581e:	461a      	mov	r2, r3
 8005820:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005824:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	3301      	adds	r3, #1
 800582a:	613b      	str	r3, [r7, #16]
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	429a      	cmp	r2, r3
 8005832:	d3b7      	bcc.n	80057a4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005842:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005846:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005854:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	2b00      	cmp	r3, #0
 800585a:	d105      	bne.n	8005868 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	f043 0210 	orr.w	r2, r3, #16
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	699a      	ldr	r2, [r3, #24]
 800586c:	4b0e      	ldr	r3, [pc, #56]	; (80058a8 <USB_DevInit+0x2b4>)
 800586e:	4313      	orrs	r3, r2
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005876:	2b00      	cmp	r3, #0
 8005878:	d005      	beq.n	8005886 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	f043 0208 	orr.w	r2, r3, #8
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005888:	2b01      	cmp	r3, #1
 800588a:	d105      	bne.n	8005898 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	699a      	ldr	r2, [r3, #24]
 8005890:	4b06      	ldr	r3, [pc, #24]	; (80058ac <USB_DevInit+0x2b8>)
 8005892:	4313      	orrs	r3, r2
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005898:	7dfb      	ldrb	r3, [r7, #23]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3718      	adds	r7, #24
 800589e:	46bd      	mov	sp, r7
 80058a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058a4:	b004      	add	sp, #16
 80058a6:	4770      	bx	lr
 80058a8:	803c3800 	.word	0x803c3800
 80058ac:	40000004 	.word	0x40000004

080058b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	3301      	adds	r3, #1
 80058c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	4a13      	ldr	r2, [pc, #76]	; (8005914 <USB_FlushTxFifo+0x64>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d901      	bls.n	80058d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e01b      	b.n	8005908 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	daf2      	bge.n	80058be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	019b      	lsls	r3, r3, #6
 80058e0:	f043 0220 	orr.w	r2, r3, #32
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	3301      	adds	r3, #1
 80058ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	4a08      	ldr	r2, [pc, #32]	; (8005914 <USB_FlushTxFifo+0x64>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d901      	bls.n	80058fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e006      	b.n	8005908 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	f003 0320 	and.w	r3, r3, #32
 8005902:	2b20      	cmp	r3, #32
 8005904:	d0f0      	beq.n	80058e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	00030d40 	.word	0x00030d40

08005918 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3301      	adds	r3, #1
 8005928:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4a11      	ldr	r2, [pc, #68]	; (8005974 <USB_FlushRxFifo+0x5c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d901      	bls.n	8005936 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e018      	b.n	8005968 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	2b00      	cmp	r3, #0
 800593c:	daf2      	bge.n	8005924 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800593e:	2300      	movs	r3, #0
 8005940:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2210      	movs	r2, #16
 8005946:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	3301      	adds	r3, #1
 800594c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4a08      	ldr	r2, [pc, #32]	; (8005974 <USB_FlushRxFifo+0x5c>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d901      	bls.n	800595a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e006      	b.n	8005968 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	f003 0310 	and.w	r3, r3, #16
 8005962:	2b10      	cmp	r3, #16
 8005964:	d0f0      	beq.n	8005948 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3714      	adds	r7, #20
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr
 8005974:	00030d40 	.word	0x00030d40

08005978 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	78fb      	ldrb	r3, [r7, #3]
 8005992:	68f9      	ldr	r1, [r7, #12]
 8005994:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005998:	4313      	orrs	r3, r2
 800599a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b085      	sub	sp, #20
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80059c4:	f023 0303 	bic.w	r3, r3, #3
 80059c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059d8:	f043 0302 	orr.w	r3, r3, #2
 80059dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	f003 0301 	and.w	r3, r3, #1
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a10:	2300      	movs	r3, #0
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	3301      	adds	r3, #1
 8005a18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	4a13      	ldr	r2, [pc, #76]	; (8005a6c <USB_CoreReset+0x64>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d901      	bls.n	8005a26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e01b      	b.n	8005a5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	daf2      	bge.n	8005a14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	f043 0201 	orr.w	r2, r3, #1
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	3301      	adds	r3, #1
 8005a42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	4a09      	ldr	r2, [pc, #36]	; (8005a6c <USB_CoreReset+0x64>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d901      	bls.n	8005a50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e006      	b.n	8005a5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d0f0      	beq.n	8005a3e <USB_CoreReset+0x36>

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	00030d40 	.word	0x00030d40

08005a70 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005a76:	4b87      	ldr	r3, [pc, #540]	; (8005c94 <MX_LWIP_Init+0x224>)
 8005a78:	22c0      	movs	r2, #192	; 0xc0
 8005a7a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005a7c:	4b85      	ldr	r3, [pc, #532]	; (8005c94 <MX_LWIP_Init+0x224>)
 8005a7e:	22a8      	movs	r2, #168	; 0xa8
 8005a80:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8005a82:	4b84      	ldr	r3, [pc, #528]	; (8005c94 <MX_LWIP_Init+0x224>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 155;
 8005a88:	4b82      	ldr	r3, [pc, #520]	; (8005c94 <MX_LWIP_Init+0x224>)
 8005a8a:	229b      	movs	r2, #155	; 0x9b
 8005a8c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005a8e:	4b82      	ldr	r3, [pc, #520]	; (8005c98 <MX_LWIP_Init+0x228>)
 8005a90:	22ff      	movs	r2, #255	; 0xff
 8005a92:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005a94:	4b80      	ldr	r3, [pc, #512]	; (8005c98 <MX_LWIP_Init+0x228>)
 8005a96:	22ff      	movs	r2, #255	; 0xff
 8005a98:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005a9a:	4b7f      	ldr	r3, [pc, #508]	; (8005c98 <MX_LWIP_Init+0x228>)
 8005a9c:	22ff      	movs	r2, #255	; 0xff
 8005a9e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005aa0:	4b7d      	ldr	r3, [pc, #500]	; (8005c98 <MX_LWIP_Init+0x228>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8005aa6:	4b7d      	ldr	r3, [pc, #500]	; (8005c9c <MX_LWIP_Init+0x22c>)
 8005aa8:	22c0      	movs	r2, #192	; 0xc0
 8005aaa:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005aac:	4b7b      	ldr	r3, [pc, #492]	; (8005c9c <MX_LWIP_Init+0x22c>)
 8005aae:	22a8      	movs	r2, #168	; 0xa8
 8005ab0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005ab2:	4b7a      	ldr	r3, [pc, #488]	; (8005c9c <MX_LWIP_Init+0x22c>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005ab8:	4b78      	ldr	r3, [pc, #480]	; (8005c9c <MX_LWIP_Init+0x22c>)
 8005aba:	2201      	movs	r2, #1
 8005abc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8005abe:	f000 fd31 	bl	8006524 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005ac2:	4b74      	ldr	r3, [pc, #464]	; (8005c94 <MX_LWIP_Init+0x224>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	061a      	lsls	r2, r3, #24
 8005ac8:	4b72      	ldr	r3, [pc, #456]	; (8005c94 <MX_LWIP_Init+0x224>)
 8005aca:	785b      	ldrb	r3, [r3, #1]
 8005acc:	041b      	lsls	r3, r3, #16
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	4b70      	ldr	r3, [pc, #448]	; (8005c94 <MX_LWIP_Init+0x224>)
 8005ad2:	789b      	ldrb	r3, [r3, #2]
 8005ad4:	021b      	lsls	r3, r3, #8
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	4a6e      	ldr	r2, [pc, #440]	; (8005c94 <MX_LWIP_Init+0x224>)
 8005ada:	78d2      	ldrb	r2, [r2, #3]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	061a      	lsls	r2, r3, #24
 8005ae0:	4b6c      	ldr	r3, [pc, #432]	; (8005c94 <MX_LWIP_Init+0x224>)
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	0619      	lsls	r1, r3, #24
 8005ae6:	4b6b      	ldr	r3, [pc, #428]	; (8005c94 <MX_LWIP_Init+0x224>)
 8005ae8:	785b      	ldrb	r3, [r3, #1]
 8005aea:	041b      	lsls	r3, r3, #16
 8005aec:	4319      	orrs	r1, r3
 8005aee:	4b69      	ldr	r3, [pc, #420]	; (8005c94 <MX_LWIP_Init+0x224>)
 8005af0:	789b      	ldrb	r3, [r3, #2]
 8005af2:	021b      	lsls	r3, r3, #8
 8005af4:	430b      	orrs	r3, r1
 8005af6:	4967      	ldr	r1, [pc, #412]	; (8005c94 <MX_LWIP_Init+0x224>)
 8005af8:	78c9      	ldrb	r1, [r1, #3]
 8005afa:	430b      	orrs	r3, r1
 8005afc:	021b      	lsls	r3, r3, #8
 8005afe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b02:	431a      	orrs	r2, r3
 8005b04:	4b63      	ldr	r3, [pc, #396]	; (8005c94 <MX_LWIP_Init+0x224>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	0619      	lsls	r1, r3, #24
 8005b0a:	4b62      	ldr	r3, [pc, #392]	; (8005c94 <MX_LWIP_Init+0x224>)
 8005b0c:	785b      	ldrb	r3, [r3, #1]
 8005b0e:	041b      	lsls	r3, r3, #16
 8005b10:	4319      	orrs	r1, r3
 8005b12:	4b60      	ldr	r3, [pc, #384]	; (8005c94 <MX_LWIP_Init+0x224>)
 8005b14:	789b      	ldrb	r3, [r3, #2]
 8005b16:	021b      	lsls	r3, r3, #8
 8005b18:	430b      	orrs	r3, r1
 8005b1a:	495e      	ldr	r1, [pc, #376]	; (8005c94 <MX_LWIP_Init+0x224>)
 8005b1c:	78c9      	ldrb	r1, [r1, #3]
 8005b1e:	430b      	orrs	r3, r1
 8005b20:	0a1b      	lsrs	r3, r3, #8
 8005b22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005b26:	431a      	orrs	r2, r3
 8005b28:	4b5a      	ldr	r3, [pc, #360]	; (8005c94 <MX_LWIP_Init+0x224>)
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	0619      	lsls	r1, r3, #24
 8005b2e:	4b59      	ldr	r3, [pc, #356]	; (8005c94 <MX_LWIP_Init+0x224>)
 8005b30:	785b      	ldrb	r3, [r3, #1]
 8005b32:	041b      	lsls	r3, r3, #16
 8005b34:	4319      	orrs	r1, r3
 8005b36:	4b57      	ldr	r3, [pc, #348]	; (8005c94 <MX_LWIP_Init+0x224>)
 8005b38:	789b      	ldrb	r3, [r3, #2]
 8005b3a:	021b      	lsls	r3, r3, #8
 8005b3c:	430b      	orrs	r3, r1
 8005b3e:	4955      	ldr	r1, [pc, #340]	; (8005c94 <MX_LWIP_Init+0x224>)
 8005b40:	78c9      	ldrb	r1, [r1, #3]
 8005b42:	430b      	orrs	r3, r1
 8005b44:	0e1b      	lsrs	r3, r3, #24
 8005b46:	4313      	orrs	r3, r2
 8005b48:	4a55      	ldr	r2, [pc, #340]	; (8005ca0 <MX_LWIP_Init+0x230>)
 8005b4a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005b4c:	4b52      	ldr	r3, [pc, #328]	; (8005c98 <MX_LWIP_Init+0x228>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	061a      	lsls	r2, r3, #24
 8005b52:	4b51      	ldr	r3, [pc, #324]	; (8005c98 <MX_LWIP_Init+0x228>)
 8005b54:	785b      	ldrb	r3, [r3, #1]
 8005b56:	041b      	lsls	r3, r3, #16
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	4b4f      	ldr	r3, [pc, #316]	; (8005c98 <MX_LWIP_Init+0x228>)
 8005b5c:	789b      	ldrb	r3, [r3, #2]
 8005b5e:	021b      	lsls	r3, r3, #8
 8005b60:	4313      	orrs	r3, r2
 8005b62:	4a4d      	ldr	r2, [pc, #308]	; (8005c98 <MX_LWIP_Init+0x228>)
 8005b64:	78d2      	ldrb	r2, [r2, #3]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	061a      	lsls	r2, r3, #24
 8005b6a:	4b4b      	ldr	r3, [pc, #300]	; (8005c98 <MX_LWIP_Init+0x228>)
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	0619      	lsls	r1, r3, #24
 8005b70:	4b49      	ldr	r3, [pc, #292]	; (8005c98 <MX_LWIP_Init+0x228>)
 8005b72:	785b      	ldrb	r3, [r3, #1]
 8005b74:	041b      	lsls	r3, r3, #16
 8005b76:	4319      	orrs	r1, r3
 8005b78:	4b47      	ldr	r3, [pc, #284]	; (8005c98 <MX_LWIP_Init+0x228>)
 8005b7a:	789b      	ldrb	r3, [r3, #2]
 8005b7c:	021b      	lsls	r3, r3, #8
 8005b7e:	430b      	orrs	r3, r1
 8005b80:	4945      	ldr	r1, [pc, #276]	; (8005c98 <MX_LWIP_Init+0x228>)
 8005b82:	78c9      	ldrb	r1, [r1, #3]
 8005b84:	430b      	orrs	r3, r1
 8005b86:	021b      	lsls	r3, r3, #8
 8005b88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	4b42      	ldr	r3, [pc, #264]	; (8005c98 <MX_LWIP_Init+0x228>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	0619      	lsls	r1, r3, #24
 8005b94:	4b40      	ldr	r3, [pc, #256]	; (8005c98 <MX_LWIP_Init+0x228>)
 8005b96:	785b      	ldrb	r3, [r3, #1]
 8005b98:	041b      	lsls	r3, r3, #16
 8005b9a:	4319      	orrs	r1, r3
 8005b9c:	4b3e      	ldr	r3, [pc, #248]	; (8005c98 <MX_LWIP_Init+0x228>)
 8005b9e:	789b      	ldrb	r3, [r3, #2]
 8005ba0:	021b      	lsls	r3, r3, #8
 8005ba2:	430b      	orrs	r3, r1
 8005ba4:	493c      	ldr	r1, [pc, #240]	; (8005c98 <MX_LWIP_Init+0x228>)
 8005ba6:	78c9      	ldrb	r1, [r1, #3]
 8005ba8:	430b      	orrs	r3, r1
 8005baa:	0a1b      	lsrs	r3, r3, #8
 8005bac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	4b39      	ldr	r3, [pc, #228]	; (8005c98 <MX_LWIP_Init+0x228>)
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	0619      	lsls	r1, r3, #24
 8005bb8:	4b37      	ldr	r3, [pc, #220]	; (8005c98 <MX_LWIP_Init+0x228>)
 8005bba:	785b      	ldrb	r3, [r3, #1]
 8005bbc:	041b      	lsls	r3, r3, #16
 8005bbe:	4319      	orrs	r1, r3
 8005bc0:	4b35      	ldr	r3, [pc, #212]	; (8005c98 <MX_LWIP_Init+0x228>)
 8005bc2:	789b      	ldrb	r3, [r3, #2]
 8005bc4:	021b      	lsls	r3, r3, #8
 8005bc6:	430b      	orrs	r3, r1
 8005bc8:	4933      	ldr	r1, [pc, #204]	; (8005c98 <MX_LWIP_Init+0x228>)
 8005bca:	78c9      	ldrb	r1, [r1, #3]
 8005bcc:	430b      	orrs	r3, r1
 8005bce:	0e1b      	lsrs	r3, r3, #24
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	4a34      	ldr	r2, [pc, #208]	; (8005ca4 <MX_LWIP_Init+0x234>)
 8005bd4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005bd6:	4b31      	ldr	r3, [pc, #196]	; (8005c9c <MX_LWIP_Init+0x22c>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	061a      	lsls	r2, r3, #24
 8005bdc:	4b2f      	ldr	r3, [pc, #188]	; (8005c9c <MX_LWIP_Init+0x22c>)
 8005bde:	785b      	ldrb	r3, [r3, #1]
 8005be0:	041b      	lsls	r3, r3, #16
 8005be2:	431a      	orrs	r2, r3
 8005be4:	4b2d      	ldr	r3, [pc, #180]	; (8005c9c <MX_LWIP_Init+0x22c>)
 8005be6:	789b      	ldrb	r3, [r3, #2]
 8005be8:	021b      	lsls	r3, r3, #8
 8005bea:	4313      	orrs	r3, r2
 8005bec:	4a2b      	ldr	r2, [pc, #172]	; (8005c9c <MX_LWIP_Init+0x22c>)
 8005bee:	78d2      	ldrb	r2, [r2, #3]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	061a      	lsls	r2, r3, #24
 8005bf4:	4b29      	ldr	r3, [pc, #164]	; (8005c9c <MX_LWIP_Init+0x22c>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	0619      	lsls	r1, r3, #24
 8005bfa:	4b28      	ldr	r3, [pc, #160]	; (8005c9c <MX_LWIP_Init+0x22c>)
 8005bfc:	785b      	ldrb	r3, [r3, #1]
 8005bfe:	041b      	lsls	r3, r3, #16
 8005c00:	4319      	orrs	r1, r3
 8005c02:	4b26      	ldr	r3, [pc, #152]	; (8005c9c <MX_LWIP_Init+0x22c>)
 8005c04:	789b      	ldrb	r3, [r3, #2]
 8005c06:	021b      	lsls	r3, r3, #8
 8005c08:	430b      	orrs	r3, r1
 8005c0a:	4924      	ldr	r1, [pc, #144]	; (8005c9c <MX_LWIP_Init+0x22c>)
 8005c0c:	78c9      	ldrb	r1, [r1, #3]
 8005c0e:	430b      	orrs	r3, r1
 8005c10:	021b      	lsls	r3, r3, #8
 8005c12:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c16:	431a      	orrs	r2, r3
 8005c18:	4b20      	ldr	r3, [pc, #128]	; (8005c9c <MX_LWIP_Init+0x22c>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	0619      	lsls	r1, r3, #24
 8005c1e:	4b1f      	ldr	r3, [pc, #124]	; (8005c9c <MX_LWIP_Init+0x22c>)
 8005c20:	785b      	ldrb	r3, [r3, #1]
 8005c22:	041b      	lsls	r3, r3, #16
 8005c24:	4319      	orrs	r1, r3
 8005c26:	4b1d      	ldr	r3, [pc, #116]	; (8005c9c <MX_LWIP_Init+0x22c>)
 8005c28:	789b      	ldrb	r3, [r3, #2]
 8005c2a:	021b      	lsls	r3, r3, #8
 8005c2c:	430b      	orrs	r3, r1
 8005c2e:	491b      	ldr	r1, [pc, #108]	; (8005c9c <MX_LWIP_Init+0x22c>)
 8005c30:	78c9      	ldrb	r1, [r1, #3]
 8005c32:	430b      	orrs	r3, r1
 8005c34:	0a1b      	lsrs	r3, r3, #8
 8005c36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	4b17      	ldr	r3, [pc, #92]	; (8005c9c <MX_LWIP_Init+0x22c>)
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	0619      	lsls	r1, r3, #24
 8005c42:	4b16      	ldr	r3, [pc, #88]	; (8005c9c <MX_LWIP_Init+0x22c>)
 8005c44:	785b      	ldrb	r3, [r3, #1]
 8005c46:	041b      	lsls	r3, r3, #16
 8005c48:	4319      	orrs	r1, r3
 8005c4a:	4b14      	ldr	r3, [pc, #80]	; (8005c9c <MX_LWIP_Init+0x22c>)
 8005c4c:	789b      	ldrb	r3, [r3, #2]
 8005c4e:	021b      	lsls	r3, r3, #8
 8005c50:	430b      	orrs	r3, r1
 8005c52:	4912      	ldr	r1, [pc, #72]	; (8005c9c <MX_LWIP_Init+0x22c>)
 8005c54:	78c9      	ldrb	r1, [r1, #3]
 8005c56:	430b      	orrs	r3, r1
 8005c58:	0e1b      	lsrs	r3, r3, #24
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	4a12      	ldr	r2, [pc, #72]	; (8005ca8 <MX_LWIP_Init+0x238>)
 8005c5e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005c60:	4b12      	ldr	r3, [pc, #72]	; (8005cac <MX_LWIP_Init+0x23c>)
 8005c62:	9302      	str	r3, [sp, #8]
 8005c64:	4b12      	ldr	r3, [pc, #72]	; (8005cb0 <MX_LWIP_Init+0x240>)
 8005c66:	9301      	str	r3, [sp, #4]
 8005c68:	2300      	movs	r3, #0
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	4b0e      	ldr	r3, [pc, #56]	; (8005ca8 <MX_LWIP_Init+0x238>)
 8005c6e:	4a0d      	ldr	r2, [pc, #52]	; (8005ca4 <MX_LWIP_Init+0x234>)
 8005c70:	490b      	ldr	r1, [pc, #44]	; (8005ca0 <MX_LWIP_Init+0x230>)
 8005c72:	4810      	ldr	r0, [pc, #64]	; (8005cb4 <MX_LWIP_Init+0x244>)
 8005c74:	f001 f942 	bl	8006efc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005c78:	480e      	ldr	r0, [pc, #56]	; (8005cb4 <MX_LWIP_Init+0x244>)
 8005c7a:	f001 faf1 	bl	8007260 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8005c7e:	480d      	ldr	r0, [pc, #52]	; (8005cb4 <MX_LWIP_Init+0x244>)
 8005c80:	f001 fafe 	bl	8007280 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005c84:	490c      	ldr	r1, [pc, #48]	; (8005cb8 <MX_LWIP_Init+0x248>)
 8005c86:	480b      	ldr	r0, [pc, #44]	; (8005cb4 <MX_LWIP_Init+0x244>)
 8005c88:	f001 fbfc 	bl	8007484 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005c8c:	bf00      	nop
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	200007f0 	.word	0x200007f0
 8005c98:	200007f4 	.word	0x200007f4
 8005c9c:	200007f8 	.word	0x200007f8
 8005ca0:	200007e4 	.word	0x200007e4
 8005ca4:	200007e8 	.word	0x200007e8
 8005ca8:	200007ec 	.word	0x200007ec
 8005cac:	08010391 	.word	0x08010391
 8005cb0:	08006021 	.word	0x08006021
 8005cb4:	200007b0 	.word	0x200007b0
 8005cb8:	08005d0d 	.word	0x08005d0d

08005cbc <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8005cc4:	f7fb fdbe 	bl	8001844 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	4b08      	ldr	r3, [pc, #32]	; (8005cec <Ethernet_Link_Periodic_Handle+0x30>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	2b63      	cmp	r3, #99	; 0x63
 8005cd2:	d907      	bls.n	8005ce4 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8005cd4:	f7fb fdb6 	bl	8001844 <HAL_GetTick>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	4a04      	ldr	r2, [pc, #16]	; (8005cec <Ethernet_Link_Periodic_Handle+0x30>)
 8005cdc:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 faf4 	bl	80062cc <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8005ce4:	bf00      	nop
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	200007ac 	.word	0x200007ac

08005cf0 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005cf4:	4804      	ldr	r0, [pc, #16]	; (8005d08 <MX_LWIP_Process+0x18>)
 8005cf6:	f000 f973 	bl	8005fe0 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8005cfa:	f007 fc45 	bl	800d588 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8005cfe:	4802      	ldr	r0, [pc, #8]	; (8005d08 <MX_LWIP_Process+0x18>)
 8005d00:	f7ff ffdc 	bl	8005cbc <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005d04:	bf00      	nop
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	200007b0 	.word	0x200007b0

08005d0c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <SCB_InvalidateDCache_by_Addr>:
{
 8005d20:	b480      	push	{r7}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8005d32:	2320      	movs	r3, #32
 8005d34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d36:	f3bf 8f4f 	dsb	sy
}
 8005d3a:	bf00      	nop
    while (op_size > 0) {
 8005d3c:	e00b      	b.n	8005d56 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8005d3e:	4a0d      	ldr	r2, [pc, #52]	; (8005d74 <SCB_InvalidateDCache_by_Addr+0x54>)
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	dcf0      	bgt.n	8005d3e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005d5c:	f3bf 8f4f 	dsb	sy
}
 8005d60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005d62:	f3bf 8f6f 	isb	sy
}
 8005d66:	bf00      	nop
}
 8005d68:	bf00      	nop
 8005d6a:	371c      	adds	r7, #28
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	e000ed00 	.word	0xe000ed00

08005d78 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005d84:	4b40      	ldr	r3, [pc, #256]	; (8005e88 <low_level_init+0x110>)
 8005d86:	4a41      	ldr	r2, [pc, #260]	; (8005e8c <low_level_init+0x114>)
 8005d88:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005d8e:	2380      	movs	r3, #128	; 0x80
 8005d90:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005d92:	23e1      	movs	r3, #225	; 0xe1
 8005d94:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005d96:	2300      	movs	r3, #0
 8005d98:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005da2:	4a39      	ldr	r2, [pc, #228]	; (8005e88 <low_level_init+0x110>)
 8005da4:	f107 0308 	add.w	r3, r7, #8
 8005da8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005daa:	4b37      	ldr	r3, [pc, #220]	; (8005e88 <low_level_init+0x110>)
 8005dac:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005db0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005db2:	4b35      	ldr	r3, [pc, #212]	; (8005e88 <low_level_init+0x110>)
 8005db4:	4a36      	ldr	r2, [pc, #216]	; (8005e90 <low_level_init+0x118>)
 8005db6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005db8:	4b33      	ldr	r3, [pc, #204]	; (8005e88 <low_level_init+0x110>)
 8005dba:	4a36      	ldr	r2, [pc, #216]	; (8005e94 <low_level_init+0x11c>)
 8005dbc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005dbe:	4b32      	ldr	r3, [pc, #200]	; (8005e88 <low_level_init+0x110>)
 8005dc0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005dc4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005dc6:	4830      	ldr	r0, [pc, #192]	; (8005e88 <low_level_init+0x110>)
 8005dc8:	f7fb fe52 	bl	8001a70 <HAL_ETH_Init>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005dd0:	2238      	movs	r2, #56	; 0x38
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	4830      	ldr	r0, [pc, #192]	; (8005e98 <low_level_init+0x120>)
 8005dd6:	f00a fe41 	bl	8010a5c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005dda:	4b2f      	ldr	r3, [pc, #188]	; (8005e98 <low_level_init+0x120>)
 8005ddc:	2221      	movs	r2, #33	; 0x21
 8005dde:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005de0:	4b2d      	ldr	r3, [pc, #180]	; (8005e98 <low_level_init+0x120>)
 8005de2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005de6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005de8:	4b2b      	ldr	r3, [pc, #172]	; (8005e98 <low_level_init+0x120>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005dee:	482b      	ldr	r0, [pc, #172]	; (8005e9c <low_level_init+0x124>)
 8005df0:	f000 ff4c 	bl	8006c8c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2206      	movs	r2, #6
 8005df8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005dfc:	4b22      	ldr	r3, [pc, #136]	; (8005e88 <low_level_init+0x110>)
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	781a      	ldrb	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005e08:	4b1f      	ldr	r3, [pc, #124]	; (8005e88 <low_level_init+0x110>)
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	785a      	ldrb	r2, [r3, #1]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005e14:	4b1c      	ldr	r3, [pc, #112]	; (8005e88 <low_level_init+0x110>)
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	789a      	ldrb	r2, [r3, #2]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005e20:	4b19      	ldr	r3, [pc, #100]	; (8005e88 <low_level_init+0x110>)
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	78da      	ldrb	r2, [r3, #3]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005e2c:	4b16      	ldr	r3, [pc, #88]	; (8005e88 <low_level_init+0x110>)
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	791a      	ldrb	r2, [r3, #4]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005e38:	4b13      	ldr	r3, [pc, #76]	; (8005e88 <low_level_init+0x110>)
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	795a      	ldrb	r2, [r3, #5]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005e4a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e52:	f043 030a 	orr.w	r3, r3, #10
 8005e56:	b2da      	uxtb	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005e5e:	4910      	ldr	r1, [pc, #64]	; (8005ea0 <low_level_init+0x128>)
 8005e60:	4810      	ldr	r0, [pc, #64]	; (8005ea4 <low_level_init+0x12c>)
 8005e62:	f7fb fb3c 	bl	80014de <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8005e66:	480f      	ldr	r0, [pc, #60]	; (8005ea4 <low_level_init+0x12c>)
 8005e68:	f7fb fb6b 	bl	8001542 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d103      	bne.n	8005e7a <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fa2a 	bl	80062cc <ethernet_link_check_state>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8005e78:	e001      	b.n	8005e7e <low_level_init+0x106>
    Error_Handler();
 8005e7a:	f7fa fe19 	bl	8000ab0 <Error_Handler>
}
 8005e7e:	bf00      	nop
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	20005188 	.word	0x20005188
 8005e8c:	40028000 	.word	0x40028000
 8005e90:	20000128 	.word	0x20000128
 8005e94:	20000088 	.word	0x20000088
 8005e98:	20005238 	.word	0x20005238
 8005e9c:	08014560 	.word	0x08014560
 8005ea0:	2000000c 	.word	0x2000000c
 8005ea4:	20005270 	.word	0x20005270

08005ea8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b092      	sub	sp, #72	; 0x48
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005ec0:	f107 030c 	add.w	r3, r7, #12
 8005ec4:	2230      	movs	r2, #48	; 0x30
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f00a fdc7 	bl	8010a5c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005ece:	f107 030c 	add.w	r3, r7, #12
 8005ed2:	2230      	movs	r2, #48	; 0x30
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f00a fdc0 	bl	8010a5c <memset>

  for(q = p; q != NULL; q = q->next)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	643b      	str	r3, [r7, #64]	; 0x40
 8005ee0:	e045      	b.n	8005f6e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ee4:	2b03      	cmp	r3, #3
 8005ee6:	d902      	bls.n	8005eee <low_level_output+0x46>
      return ERR_IF;
 8005ee8:	f06f 030b 	mvn.w	r3, #11
 8005eec:	e055      	b.n	8005f9a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8005eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ef0:	6859      	ldr	r1, [r3, #4]
 8005ef2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	4413      	add	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	3348      	adds	r3, #72	; 0x48
 8005efe:	443b      	add	r3, r7
 8005f00:	3b3c      	subs	r3, #60	; 0x3c
 8005f02:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f06:	895b      	ldrh	r3, [r3, #10]
 8005f08:	4619      	mov	r1, r3
 8005f0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	4413      	add	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	3348      	adds	r3, #72	; 0x48
 8005f16:	443b      	add	r3, r7
 8005f18:	3b38      	subs	r3, #56	; 0x38
 8005f1a:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d011      	beq.n	8005f46 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f24:	1e5a      	subs	r2, r3, #1
 8005f26:	f107 000c 	add.w	r0, r7, #12
 8005f2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	005b      	lsls	r3, r3, #1
 8005f30:	440b      	add	r3, r1
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	18c1      	adds	r1, r0, r3
 8005f36:	4613      	mov	r3, r2
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	4413      	add	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	3348      	adds	r3, #72	; 0x48
 8005f40:	443b      	add	r3, r7
 8005f42:	3b34      	subs	r3, #52	; 0x34
 8005f44:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d109      	bne.n	8005f62 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005f4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f50:	4613      	mov	r3, r2
 8005f52:	005b      	lsls	r3, r3, #1
 8005f54:	4413      	add	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	3348      	adds	r3, #72	; 0x48
 8005f5a:	443b      	add	r3, r7
 8005f5c:	3b34      	subs	r3, #52	; 0x34
 8005f5e:	2200      	movs	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005f62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f64:	3301      	adds	r3, #1
 8005f66:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	643b      	str	r3, [r7, #64]	; 0x40
 8005f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1b6      	bne.n	8005ee2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	891b      	ldrh	r3, [r3, #8]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	4b0a      	ldr	r3, [pc, #40]	; (8005fa4 <low_level_output+0xfc>)
 8005f7c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005f7e:	4a09      	ldr	r2, [pc, #36]	; (8005fa4 <low_level_output+0xfc>)
 8005f80:	f107 030c 	add.w	r3, r7, #12
 8005f84:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005f86:	4a07      	ldr	r2, [pc, #28]	; (8005fa4 <low_level_output+0xfc>)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8005f8c:	2214      	movs	r2, #20
 8005f8e:	4905      	ldr	r1, [pc, #20]	; (8005fa4 <low_level_output+0xfc>)
 8005f90:	4805      	ldr	r0, [pc, #20]	; (8005fa8 <low_level_output+0x100>)
 8005f92:	f7fb fea1 	bl	8001cd8 <HAL_ETH_Transmit>

  return errval;
 8005f96:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3748      	adds	r7, #72	; 0x48
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	20005238 	.word	0x20005238
 8005fa8:	20005188 	.word	0x20005188

08005fac <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005fb8:	4b07      	ldr	r3, [pc, #28]	; (8005fd8 <low_level_input+0x2c>)
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d105      	bne.n	8005fcc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005fc0:	f107 030c 	add.w	r3, r7, #12
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4805      	ldr	r0, [pc, #20]	; (8005fdc <low_level_input+0x30>)
 8005fc8:	f7fb ff1a 	bl	8001e00 <HAL_ETH_ReadData>
  }

  return p;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20005184 	.word	0x20005184
 8005fdc:	20005188 	.word	0x20005188

08005fe0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7ff ffdd 	bl	8005fac <low_level_input>
 8005ff2:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	6879      	ldr	r1, [r7, #4]
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	4798      	blx	r3
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f001 fdba 	bl	8007b84 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1ea      	bne.n	8005fec <ethernetif_input+0xc>
}
 8006016:	bf00      	nop
 8006018:	bf00      	nop
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d106      	bne.n	800603c <ethernetif_init+0x1c>
 800602e:	4b0e      	ldr	r3, [pc, #56]	; (8006068 <ethernetif_init+0x48>)
 8006030:	f240 127b 	movw	r2, #379	; 0x17b
 8006034:	490d      	ldr	r1, [pc, #52]	; (800606c <ethernetif_init+0x4c>)
 8006036:	480e      	ldr	r0, [pc, #56]	; (8006070 <ethernetif_init+0x50>)
 8006038:	f00a fb80 	bl	801073c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2273      	movs	r2, #115	; 0x73
 8006040:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2274      	movs	r2, #116	; 0x74
 8006048:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a09      	ldr	r2, [pc, #36]	; (8006074 <ethernetif_init+0x54>)
 8006050:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a08      	ldr	r2, [pc, #32]	; (8006078 <ethernetif_init+0x58>)
 8006056:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f7ff fe8d 	bl	8005d78 <low_level_init>

  return ERR_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	08011b68 	.word	0x08011b68
 800606c:	08011b84 	.word	0x08011b84
 8006070:	08011b94 	.word	0x08011b94
 8006074:	0800e849 	.word	0x0800e849
 8006078:	08005ea9 	.word	0x08005ea9

0800607c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006088:	68f9      	ldr	r1, [r7, #12]
 800608a:	4807      	ldr	r0, [pc, #28]	; (80060a8 <pbuf_free_custom+0x2c>)
 800608c:	f000 fee0 	bl	8006e50 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006090:	4b06      	ldr	r3, [pc, #24]	; (80060ac <pbuf_free_custom+0x30>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d102      	bne.n	800609e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8006098:	4b04      	ldr	r3, [pc, #16]	; (80060ac <pbuf_free_custom+0x30>)
 800609a:	2200      	movs	r2, #0
 800609c:	701a      	strb	r2, [r3, #0]
  }
}
 800609e:	bf00      	nop
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	08014560 	.word	0x08014560
 80060ac:	20005184 	.word	0x20005184

080060b0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80060b4:	f7fb fbc6 	bl	8001844 <HAL_GetTick>
 80060b8:	4603      	mov	r3, r0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	bd80      	pop	{r7, pc}
	...

080060c0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08e      	sub	sp, #56	; 0x38
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060cc:	2200      	movs	r2, #0
 80060ce:	601a      	str	r2, [r3, #0]
 80060d0:	605a      	str	r2, [r3, #4]
 80060d2:	609a      	str	r2, [r3, #8]
 80060d4:	60da      	str	r2, [r3, #12]
 80060d6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a4e      	ldr	r2, [pc, #312]	; (8006218 <HAL_ETH_MspInit+0x158>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	f040 8096 	bne.w	8006210 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80060e4:	4b4d      	ldr	r3, [pc, #308]	; (800621c <HAL_ETH_MspInit+0x15c>)
 80060e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e8:	4a4c      	ldr	r2, [pc, #304]	; (800621c <HAL_ETH_MspInit+0x15c>)
 80060ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80060ee:	6313      	str	r3, [r2, #48]	; 0x30
 80060f0:	4b4a      	ldr	r3, [pc, #296]	; (800621c <HAL_ETH_MspInit+0x15c>)
 80060f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f8:	623b      	str	r3, [r7, #32]
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	4b47      	ldr	r3, [pc, #284]	; (800621c <HAL_ETH_MspInit+0x15c>)
 80060fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006100:	4a46      	ldr	r2, [pc, #280]	; (800621c <HAL_ETH_MspInit+0x15c>)
 8006102:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006106:	6313      	str	r3, [r2, #48]	; 0x30
 8006108:	4b44      	ldr	r3, [pc, #272]	; (800621c <HAL_ETH_MspInit+0x15c>)
 800610a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006110:	61fb      	str	r3, [r7, #28]
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	4b41      	ldr	r3, [pc, #260]	; (800621c <HAL_ETH_MspInit+0x15c>)
 8006116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006118:	4a40      	ldr	r2, [pc, #256]	; (800621c <HAL_ETH_MspInit+0x15c>)
 800611a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800611e:	6313      	str	r3, [r2, #48]	; 0x30
 8006120:	4b3e      	ldr	r3, [pc, #248]	; (800621c <HAL_ETH_MspInit+0x15c>)
 8006122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006128:	61bb      	str	r3, [r7, #24]
 800612a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800612c:	4b3b      	ldr	r3, [pc, #236]	; (800621c <HAL_ETH_MspInit+0x15c>)
 800612e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006130:	4a3a      	ldr	r2, [pc, #232]	; (800621c <HAL_ETH_MspInit+0x15c>)
 8006132:	f043 0304 	orr.w	r3, r3, #4
 8006136:	6313      	str	r3, [r2, #48]	; 0x30
 8006138:	4b38      	ldr	r3, [pc, #224]	; (800621c <HAL_ETH_MspInit+0x15c>)
 800613a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613c:	f003 0304 	and.w	r3, r3, #4
 8006140:	617b      	str	r3, [r7, #20]
 8006142:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006144:	4b35      	ldr	r3, [pc, #212]	; (800621c <HAL_ETH_MspInit+0x15c>)
 8006146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006148:	4a34      	ldr	r2, [pc, #208]	; (800621c <HAL_ETH_MspInit+0x15c>)
 800614a:	f043 0301 	orr.w	r3, r3, #1
 800614e:	6313      	str	r3, [r2, #48]	; 0x30
 8006150:	4b32      	ldr	r3, [pc, #200]	; (800621c <HAL_ETH_MspInit+0x15c>)
 8006152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	613b      	str	r3, [r7, #16]
 800615a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800615c:	4b2f      	ldr	r3, [pc, #188]	; (800621c <HAL_ETH_MspInit+0x15c>)
 800615e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006160:	4a2e      	ldr	r2, [pc, #184]	; (800621c <HAL_ETH_MspInit+0x15c>)
 8006162:	f043 0302 	orr.w	r3, r3, #2
 8006166:	6313      	str	r3, [r2, #48]	; 0x30
 8006168:	4b2c      	ldr	r3, [pc, #176]	; (800621c <HAL_ETH_MspInit+0x15c>)
 800616a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616c:	f003 0302 	and.w	r3, r3, #2
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006174:	4b29      	ldr	r3, [pc, #164]	; (800621c <HAL_ETH_MspInit+0x15c>)
 8006176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006178:	4a28      	ldr	r2, [pc, #160]	; (800621c <HAL_ETH_MspInit+0x15c>)
 800617a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800617e:	6313      	str	r3, [r2, #48]	; 0x30
 8006180:	4b26      	ldr	r3, [pc, #152]	; (800621c <HAL_ETH_MspInit+0x15c>)
 8006182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006188:	60bb      	str	r3, [r7, #8]
 800618a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800618c:	2332      	movs	r3, #50	; 0x32
 800618e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006190:	2302      	movs	r3, #2
 8006192:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006194:	2300      	movs	r3, #0
 8006196:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006198:	2303      	movs	r3, #3
 800619a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800619c:	230b      	movs	r3, #11
 800619e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80061a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061a4:	4619      	mov	r1, r3
 80061a6:	481e      	ldr	r0, [pc, #120]	; (8006220 <HAL_ETH_MspInit+0x160>)
 80061a8:	f7fd f800 	bl	80031ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80061ac:	2386      	movs	r3, #134	; 0x86
 80061ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061b0:	2302      	movs	r3, #2
 80061b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061b4:	2300      	movs	r3, #0
 80061b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061b8:	2303      	movs	r3, #3
 80061ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80061bc:	230b      	movs	r3, #11
 80061be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061c4:	4619      	mov	r1, r3
 80061c6:	4817      	ldr	r0, [pc, #92]	; (8006224 <HAL_ETH_MspInit+0x164>)
 80061c8:	f7fc fff0 	bl	80031ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80061cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80061d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061d2:	2302      	movs	r3, #2
 80061d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061d6:	2300      	movs	r3, #0
 80061d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061da:	2303      	movs	r3, #3
 80061dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80061de:	230b      	movs	r3, #11
 80061e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80061e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061e6:	4619      	mov	r1, r3
 80061e8:	480f      	ldr	r0, [pc, #60]	; (8006228 <HAL_ETH_MspInit+0x168>)
 80061ea:	f7fc ffdf 	bl	80031ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80061ee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80061f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061f4:	2302      	movs	r3, #2
 80061f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061f8:	2300      	movs	r3, #0
 80061fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061fc:	2303      	movs	r3, #3
 80061fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006200:	230b      	movs	r3, #11
 8006202:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006208:	4619      	mov	r1, r3
 800620a:	4808      	ldr	r0, [pc, #32]	; (800622c <HAL_ETH_MspInit+0x16c>)
 800620c:	f7fc ffce 	bl	80031ac <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006210:	bf00      	nop
 8006212:	3738      	adds	r7, #56	; 0x38
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	40028000 	.word	0x40028000
 800621c:	40023800 	.word	0x40023800
 8006220:	40020800 	.word	0x40020800
 8006224:	40020000 	.word	0x40020000
 8006228:	40020400 	.word	0x40020400
 800622c:	40021800 	.word	0x40021800

08006230 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006234:	4802      	ldr	r0, [pc, #8]	; (8006240 <ETH_PHY_IO_Init+0x10>)
 8006236:	f7fc f8b3 	bl	80023a0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	bd80      	pop	{r7, pc}
 8006240:	20005188 	.word	0x20005188

08006244 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006244:	b480      	push	{r7}
 8006246:	af00      	add	r7, sp, #0
  return 0;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	68f9      	ldr	r1, [r7, #12]
 8006266:	4807      	ldr	r0, [pc, #28]	; (8006284 <ETH_PHY_IO_ReadReg+0x30>)
 8006268:	f7fb ff02 	bl	8002070 <HAL_ETH_ReadPHYRegister>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8006272:	f04f 33ff 	mov.w	r3, #4294967295
 8006276:	e000      	b.n	800627a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	20005188 	.word	0x20005188

08006288 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	68f9      	ldr	r1, [r7, #12]
 800629a:	4807      	ldr	r0, [pc, #28]	; (80062b8 <ETH_PHY_IO_WriteReg+0x30>)
 800629c:	f7fb ff33 	bl	8002106 <HAL_ETH_WritePHYRegister>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d002      	beq.n	80062ac <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80062a6:	f04f 33ff 	mov.w	r3, #4294967295
 80062aa:	e000      	b.n	80062ae <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	20005188 	.word	0x20005188

080062bc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80062c0:	f7fb fac0 	bl	8001844 <HAL_GetTick>
 80062c4:	4603      	mov	r3, r0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	bd80      	pop	{r7, pc}
	...

080062cc <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b0a0      	sub	sp, #128	; 0x80
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80062d4:	f107 030c 	add.w	r3, r7, #12
 80062d8:	2264      	movs	r2, #100	; 0x64
 80062da:	2100      	movs	r1, #0
 80062dc:	4618      	mov	r0, r3
 80062de:	f00a fbbd 	bl	8010a5c <memset>
  int32_t PHYLinkState = 0;
 80062e2:	2300      	movs	r3, #0
 80062e4:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80062e6:	2300      	movs	r3, #0
 80062e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80062ea:	2300      	movs	r3, #0
 80062ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80062ee:	2300      	movs	r3, #0
 80062f0:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80062f2:	483a      	ldr	r0, [pc, #232]	; (80063dc <ethernet_link_check_state+0x110>)
 80062f4:	f7fb f9cd 	bl	8001692 <LAN8742_GetLinkState>
 80062f8:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006300:	089b      	lsrs	r3, r3, #2
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00c      	beq.n	8006326 <ethernet_link_check_state+0x5a>
 800630c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800630e:	2b01      	cmp	r3, #1
 8006310:	dc09      	bgt.n	8006326 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8006312:	4833      	ldr	r0, [pc, #204]	; (80063e0 <ethernet_link_check_state+0x114>)
 8006314:	f7fb fc87 	bl	8001c26 <HAL_ETH_Stop>
    netif_set_down(netif);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f001 f81d 	bl	8007358 <netif_set_down>
    netif_set_link_down(netif);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f001 f880 	bl	8007424 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8006324:	e055      	b.n	80063d2 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	d14e      	bne.n	80063d2 <ethernet_link_check_state+0x106>
 8006334:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006336:	2b01      	cmp	r3, #1
 8006338:	dd4b      	ble.n	80063d2 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800633a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800633c:	3b02      	subs	r3, #2
 800633e:	2b03      	cmp	r3, #3
 8006340:	d82a      	bhi.n	8006398 <ethernet_link_check_state+0xcc>
 8006342:	a201      	add	r2, pc, #4	; (adr r2, 8006348 <ethernet_link_check_state+0x7c>)
 8006344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006348:	08006359 	.word	0x08006359
 800634c:	0800636b 	.word	0x0800636b
 8006350:	0800637b 	.word	0x0800637b
 8006354:	0800638b 	.word	0x0800638b
      duplex = ETH_FULLDUPLEX_MODE;
 8006358:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800635c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800635e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006362:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006364:	2301      	movs	r3, #1
 8006366:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006368:	e017      	b.n	800639a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800636a:	2300      	movs	r3, #0
 800636c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800636e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006372:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006374:	2301      	movs	r3, #1
 8006376:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006378:	e00f      	b.n	800639a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800637a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800637e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8006380:	2300      	movs	r3, #0
 8006382:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006384:	2301      	movs	r3, #1
 8006386:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006388:	e007      	b.n	800639a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800638a:	2300      	movs	r3, #0
 800638c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800638e:	2300      	movs	r3, #0
 8006390:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006392:	2301      	movs	r3, #1
 8006394:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006396:	e000      	b.n	800639a <ethernet_link_check_state+0xce>
      break;
 8006398:	bf00      	nop
    if(linkchanged)
 800639a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800639c:	2b00      	cmp	r3, #0
 800639e:	d018      	beq.n	80063d2 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80063a0:	f107 030c 	add.w	r3, r7, #12
 80063a4:	4619      	mov	r1, r3
 80063a6:	480e      	ldr	r0, [pc, #56]	; (80063e0 <ethernet_link_check_state+0x114>)
 80063a8:	f7fb fef6 	bl	8002198 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80063ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80063b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063b2:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80063b4:	f107 030c 	add.w	r3, r7, #12
 80063b8:	4619      	mov	r1, r3
 80063ba:	4809      	ldr	r0, [pc, #36]	; (80063e0 <ethernet_link_check_state+0x114>)
 80063bc:	f7fb ffd6 	bl	800236c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80063c0:	4807      	ldr	r0, [pc, #28]	; (80063e0 <ethernet_link_check_state+0x114>)
 80063c2:	f7fb fbd1 	bl	8001b68 <HAL_ETH_Start>
      netif_set_up(netif);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 ff5a 	bl	8007280 <netif_set_up>
      netif_set_link_up(netif);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fff5 	bl	80073bc <netif_set_link_up>
}
 80063d2:	bf00      	nop
 80063d4:	3780      	adds	r7, #128	; 0x80
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	20005270 	.word	0x20005270
 80063e0:	20005188 	.word	0x20005188

080063e4 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af02      	add	r7, sp, #8
 80063ea:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80063ec:	4812      	ldr	r0, [pc, #72]	; (8006438 <HAL_ETH_RxAllocateCallback+0x54>)
 80063ee:	f000 fcc1 	bl	8006d74 <memp_malloc_pool>
 80063f2:	60f8      	str	r0, [r7, #12]
  if (p)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d014      	beq.n	8006424 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f103 0220 	add.w	r2, r3, #32
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4a0d      	ldr	r2, [pc, #52]	; (800643c <HAL_ETH_RxAllocateCallback+0x58>)
 8006408:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006412:	9201      	str	r2, [sp, #4]
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2241      	movs	r2, #65	; 0x41
 800641a:	2100      	movs	r1, #0
 800641c:	2000      	movs	r0, #0
 800641e:	f001 f9f7 	bl	8007810 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006422:	e005      	b.n	8006430 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006424:	4b06      	ldr	r3, [pc, #24]	; (8006440 <HAL_ETH_RxAllocateCallback+0x5c>)
 8006426:	2201      	movs	r2, #1
 8006428:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	601a      	str	r2, [r3, #0]
}
 8006430:	bf00      	nop
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	08014560 	.word	0x08014560
 800643c:	0800607d 	.word	0x0800607d
 8006440:	20005184 	.word	0x20005184

08006444 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b088      	sub	sp, #32
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
 8006450:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800645a:	2300      	movs	r3, #0
 800645c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	3b20      	subs	r3, #32
 8006462:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	2200      	movs	r2, #0
 8006468:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	2200      	movs	r2, #0
 800646e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	887a      	ldrh	r2, [r7, #2]
 8006474:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d103      	bne.n	8006486 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	69fa      	ldr	r2, [r7, #28]
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	e003      	b.n	800648e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	69fa      	ldr	r2, [r7, #28]
 800648c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	69fa      	ldr	r2, [r7, #28]
 8006492:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	61fb      	str	r3, [r7, #28]
 800649a:	e009      	b.n	80064b0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	891a      	ldrh	r2, [r3, #8]
 80064a0:	887b      	ldrh	r3, [r7, #2]
 80064a2:	4413      	add	r3, r2
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	61fb      	str	r3, [r7, #28]
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1f2      	bne.n	800649c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80064b6:	887b      	ldrh	r3, [r7, #2]
 80064b8:	4619      	mov	r1, r3
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff fc30 	bl	8005d20 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 80064c0:	bf00      	nop
 80064c2:	3720      	adds	r7, #32
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	4603      	mov	r3, r0
 80064d0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80064d2:	88fb      	ldrh	r3, [r7, #6]
 80064d4:	021b      	lsls	r3, r3, #8
 80064d6:	b21a      	sxth	r2, r3
 80064d8:	88fb      	ldrh	r3, [r7, #6]
 80064da:	0a1b      	lsrs	r3, r3, #8
 80064dc:	b29b      	uxth	r3, r3
 80064de:	b21b      	sxth	r3, r3
 80064e0:	4313      	orrs	r3, r2
 80064e2:	b21b      	sxth	r3, r3
 80064e4:	b29b      	uxth	r3, r3
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b083      	sub	sp, #12
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	061a      	lsls	r2, r3, #24
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	021b      	lsls	r3, r3, #8
 8006502:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006506:	431a      	orrs	r2, r3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	0a1b      	lsrs	r3, r3, #8
 800650c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006510:	431a      	orrs	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	0e1b      	lsrs	r3, r3, #24
 8006516:	4313      	orrs	r3, r2
}
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800652a:	2300      	movs	r3, #0
 800652c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800652e:	f000 f8d5 	bl	80066dc <mem_init>
  memp_init();
 8006532:	f000 fbdb 	bl	8006cec <memp_init>
  pbuf_init();
  netif_init();
 8006536:	f000 fcd9 	bl	8006eec <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800653a:	f007 f867 	bl	800d60c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800653e:	f001 fdbf 	bl	80080c0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006542:	f006 ffd9 	bl	800d4f8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006546:	bf00      	nop
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	4603      	mov	r3, r0
 8006558:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800655a:	4b05      	ldr	r3, [pc, #20]	; (8006570 <ptr_to_mem+0x20>)
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	88fb      	ldrh	r3, [r7, #6]
 8006560:	4413      	add	r3, r2
}
 8006562:	4618      	mov	r0, r3
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	20005abc 	.word	0x20005abc

08006574 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800657c:	4b05      	ldr	r3, [pc, #20]	; (8006594 <mem_to_ptr+0x20>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	b29b      	uxth	r3, r3
}
 8006586:	4618      	mov	r0, r3
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	20005abc 	.word	0x20005abc

08006598 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006598:	b590      	push	{r4, r7, lr}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80065a0:	4b45      	ldr	r3, [pc, #276]	; (80066b8 <plug_holes+0x120>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d206      	bcs.n	80065b8 <plug_holes+0x20>
 80065aa:	4b44      	ldr	r3, [pc, #272]	; (80066bc <plug_holes+0x124>)
 80065ac:	f240 12df 	movw	r2, #479	; 0x1df
 80065b0:	4943      	ldr	r1, [pc, #268]	; (80066c0 <plug_holes+0x128>)
 80065b2:	4844      	ldr	r0, [pc, #272]	; (80066c4 <plug_holes+0x12c>)
 80065b4:	f00a f8c2 	bl	801073c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80065b8:	4b43      	ldr	r3, [pc, #268]	; (80066c8 <plug_holes+0x130>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d306      	bcc.n	80065d0 <plug_holes+0x38>
 80065c2:	4b3e      	ldr	r3, [pc, #248]	; (80066bc <plug_holes+0x124>)
 80065c4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80065c8:	4940      	ldr	r1, [pc, #256]	; (80066cc <plug_holes+0x134>)
 80065ca:	483e      	ldr	r0, [pc, #248]	; (80066c4 <plug_holes+0x12c>)
 80065cc:	f00a f8b6 	bl	801073c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	791b      	ldrb	r3, [r3, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d006      	beq.n	80065e6 <plug_holes+0x4e>
 80065d8:	4b38      	ldr	r3, [pc, #224]	; (80066bc <plug_holes+0x124>)
 80065da:	f240 12e1 	movw	r2, #481	; 0x1e1
 80065de:	493c      	ldr	r1, [pc, #240]	; (80066d0 <plug_holes+0x138>)
 80065e0:	4838      	ldr	r0, [pc, #224]	; (80066c4 <plug_holes+0x12c>)
 80065e2:	f00a f8ab 	bl	801073c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ee:	d906      	bls.n	80065fe <plug_holes+0x66>
 80065f0:	4b32      	ldr	r3, [pc, #200]	; (80066bc <plug_holes+0x124>)
 80065f2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80065f6:	4937      	ldr	r1, [pc, #220]	; (80066d4 <plug_holes+0x13c>)
 80065f8:	4832      	ldr	r0, [pc, #200]	; (80066c4 <plug_holes+0x12c>)
 80065fa:	f00a f89f 	bl	801073c <iprintf>

  nmem = ptr_to_mem(mem->next);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	4618      	mov	r0, r3
 8006604:	f7ff ffa4 	bl	8006550 <ptr_to_mem>
 8006608:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	429a      	cmp	r2, r3
 8006610:	d024      	beq.n	800665c <plug_holes+0xc4>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	791b      	ldrb	r3, [r3, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d120      	bne.n	800665c <plug_holes+0xc4>
 800661a:	4b2b      	ldr	r3, [pc, #172]	; (80066c8 <plug_holes+0x130>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	429a      	cmp	r2, r3
 8006622:	d01b      	beq.n	800665c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006624:	4b2c      	ldr	r3, [pc, #176]	; (80066d8 <plug_holes+0x140>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	429a      	cmp	r2, r3
 800662c:	d102      	bne.n	8006634 <plug_holes+0x9c>
      lfree = mem;
 800662e:	4a2a      	ldr	r2, [pc, #168]	; (80066d8 <plug_holes+0x140>)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	881a      	ldrh	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006644:	d00a      	beq.n	800665c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	4618      	mov	r0, r3
 800664c:	f7ff ff80 	bl	8006550 <ptr_to_mem>
 8006650:	4604      	mov	r4, r0
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7ff ff8e 	bl	8006574 <mem_to_ptr>
 8006658:	4603      	mov	r3, r0
 800665a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	885b      	ldrh	r3, [r3, #2]
 8006660:	4618      	mov	r0, r3
 8006662:	f7ff ff75 	bl	8006550 <ptr_to_mem>
 8006666:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	429a      	cmp	r2, r3
 800666e:	d01f      	beq.n	80066b0 <plug_holes+0x118>
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	791b      	ldrb	r3, [r3, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d11b      	bne.n	80066b0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006678:	4b17      	ldr	r3, [pc, #92]	; (80066d8 <plug_holes+0x140>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	429a      	cmp	r2, r3
 8006680:	d102      	bne.n	8006688 <plug_holes+0xf0>
      lfree = pmem;
 8006682:	4a15      	ldr	r2, [pc, #84]	; (80066d8 <plug_holes+0x140>)
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	881a      	ldrh	r2, [r3, #0]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006698:	d00a      	beq.n	80066b0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	4618      	mov	r0, r3
 80066a0:	f7ff ff56 	bl	8006550 <ptr_to_mem>
 80066a4:	4604      	mov	r4, r0
 80066a6:	68b8      	ldr	r0, [r7, #8]
 80066a8:	f7ff ff64 	bl	8006574 <mem_to_ptr>
 80066ac:	4603      	mov	r3, r0
 80066ae:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80066b0:	bf00      	nop
 80066b2:	3714      	adds	r7, #20
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd90      	pop	{r4, r7, pc}
 80066b8:	20005abc 	.word	0x20005abc
 80066bc:	08011bbc 	.word	0x08011bbc
 80066c0:	08011bec 	.word	0x08011bec
 80066c4:	08011c04 	.word	0x08011c04
 80066c8:	20005ac0 	.word	0x20005ac0
 80066cc:	08011c2c 	.word	0x08011c2c
 80066d0:	08011c48 	.word	0x08011c48
 80066d4:	08011c64 	.word	0x08011c64
 80066d8:	20005ac4 	.word	0x20005ac4

080066dc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80066e2:	4b18      	ldr	r3, [pc, #96]	; (8006744 <mem_init+0x68>)
 80066e4:	3303      	adds	r3, #3
 80066e6:	f023 0303 	bic.w	r3, r3, #3
 80066ea:	461a      	mov	r2, r3
 80066ec:	4b16      	ldr	r3, [pc, #88]	; (8006748 <mem_init+0x6c>)
 80066ee:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80066f0:	4b15      	ldr	r3, [pc, #84]	; (8006748 <mem_init+0x6c>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066fc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800670a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800670e:	f7ff ff1f 	bl	8006550 <ptr_to_mem>
 8006712:	4603      	mov	r3, r0
 8006714:	4a0d      	ldr	r2, [pc, #52]	; (800674c <mem_init+0x70>)
 8006716:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8006718:	4b0c      	ldr	r3, [pc, #48]	; (800674c <mem_init+0x70>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2201      	movs	r2, #1
 800671e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006720:	4b0a      	ldr	r3, [pc, #40]	; (800674c <mem_init+0x70>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006728:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800672a:	4b08      	ldr	r3, [pc, #32]	; (800674c <mem_init+0x70>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006732:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006734:	4b04      	ldr	r3, [pc, #16]	; (8006748 <mem_init+0x6c>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a05      	ldr	r2, [pc, #20]	; (8006750 <mem_init+0x74>)
 800673a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800673c:	bf00      	nop
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	200052a8 	.word	0x200052a8
 8006748:	20005abc 	.word	0x20005abc
 800674c:	20005ac0 	.word	0x20005ac0
 8006750:	20005ac4 	.word	0x20005ac4

08006754 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b086      	sub	sp, #24
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f7ff ff09 	bl	8006574 <mem_to_ptr>
 8006762:	4603      	mov	r3, r0
 8006764:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	881b      	ldrh	r3, [r3, #0]
 800676a:	4618      	mov	r0, r3
 800676c:	f7ff fef0 	bl	8006550 <ptr_to_mem>
 8006770:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	885b      	ldrh	r3, [r3, #2]
 8006776:	4618      	mov	r0, r3
 8006778:	f7ff feea 	bl	8006550 <ptr_to_mem>
 800677c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	881b      	ldrh	r3, [r3, #0]
 8006782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006786:	d818      	bhi.n	80067ba <mem_link_valid+0x66>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	885b      	ldrh	r3, [r3, #2]
 800678c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006790:	d813      	bhi.n	80067ba <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006796:	8afa      	ldrh	r2, [r7, #22]
 8006798:	429a      	cmp	r2, r3
 800679a:	d004      	beq.n	80067a6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	881b      	ldrh	r3, [r3, #0]
 80067a0:	8afa      	ldrh	r2, [r7, #22]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d109      	bne.n	80067ba <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80067a6:	4b08      	ldr	r3, [pc, #32]	; (80067c8 <mem_link_valid+0x74>)
 80067a8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d006      	beq.n	80067be <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	885b      	ldrh	r3, [r3, #2]
 80067b4:	8afa      	ldrh	r2, [r7, #22]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d001      	beq.n	80067be <mem_link_valid+0x6a>
    return 0;
 80067ba:	2300      	movs	r3, #0
 80067bc:	e000      	b.n	80067c0 <mem_link_valid+0x6c>
  }
  return 1;
 80067be:	2301      	movs	r3, #1
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3718      	adds	r7, #24
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	20005ac0 	.word	0x20005ac0

080067cc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d04c      	beq.n	8006874 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f003 0303 	and.w	r3, r3, #3
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d007      	beq.n	80067f4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80067e4:	4b25      	ldr	r3, [pc, #148]	; (800687c <mem_free+0xb0>)
 80067e6:	f240 2273 	movw	r2, #627	; 0x273
 80067ea:	4925      	ldr	r1, [pc, #148]	; (8006880 <mem_free+0xb4>)
 80067ec:	4825      	ldr	r0, [pc, #148]	; (8006884 <mem_free+0xb8>)
 80067ee:	f009 ffa5 	bl	801073c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80067f2:	e040      	b.n	8006876 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	3b08      	subs	r3, #8
 80067f8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80067fa:	4b23      	ldr	r3, [pc, #140]	; (8006888 <mem_free+0xbc>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	429a      	cmp	r2, r3
 8006802:	d306      	bcc.n	8006812 <mem_free+0x46>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f103 020c 	add.w	r2, r3, #12
 800680a:	4b20      	ldr	r3, [pc, #128]	; (800688c <mem_free+0xc0>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	429a      	cmp	r2, r3
 8006810:	d907      	bls.n	8006822 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8006812:	4b1a      	ldr	r3, [pc, #104]	; (800687c <mem_free+0xb0>)
 8006814:	f240 227f 	movw	r2, #639	; 0x27f
 8006818:	491d      	ldr	r1, [pc, #116]	; (8006890 <mem_free+0xc4>)
 800681a:	481a      	ldr	r0, [pc, #104]	; (8006884 <mem_free+0xb8>)
 800681c:	f009 ff8e 	bl	801073c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006820:	e029      	b.n	8006876 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	791b      	ldrb	r3, [r3, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d107      	bne.n	800683a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800682a:	4b14      	ldr	r3, [pc, #80]	; (800687c <mem_free+0xb0>)
 800682c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8006830:	4918      	ldr	r1, [pc, #96]	; (8006894 <mem_free+0xc8>)
 8006832:	4814      	ldr	r0, [pc, #80]	; (8006884 <mem_free+0xb8>)
 8006834:	f009 ff82 	bl	801073c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006838:	e01d      	b.n	8006876 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f7ff ff8a 	bl	8006754 <mem_link_valid>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d107      	bne.n	8006856 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006846:	4b0d      	ldr	r3, [pc, #52]	; (800687c <mem_free+0xb0>)
 8006848:	f240 2295 	movw	r2, #661	; 0x295
 800684c:	4912      	ldr	r1, [pc, #72]	; (8006898 <mem_free+0xcc>)
 800684e:	480d      	ldr	r0, [pc, #52]	; (8006884 <mem_free+0xb8>)
 8006850:	f009 ff74 	bl	801073c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006854:	e00f      	b.n	8006876 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800685c:	4b0f      	ldr	r3, [pc, #60]	; (800689c <mem_free+0xd0>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	429a      	cmp	r2, r3
 8006864:	d202      	bcs.n	800686c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006866:	4a0d      	ldr	r2, [pc, #52]	; (800689c <mem_free+0xd0>)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f7ff fe93 	bl	8006598 <plug_holes>
 8006872:	e000      	b.n	8006876 <mem_free+0xaa>
    return;
 8006874:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	08011bbc 	.word	0x08011bbc
 8006880:	08011c90 	.word	0x08011c90
 8006884:	08011c04 	.word	0x08011c04
 8006888:	20005abc 	.word	0x20005abc
 800688c:	20005ac0 	.word	0x20005ac0
 8006890:	08011cb4 	.word	0x08011cb4
 8006894:	08011cd0 	.word	0x08011cd0
 8006898:	08011cf8 	.word	0x08011cf8
 800689c:	20005ac4 	.word	0x20005ac4

080068a0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b088      	sub	sp, #32
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	460b      	mov	r3, r1
 80068aa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80068ac:	887b      	ldrh	r3, [r7, #2]
 80068ae:	3303      	adds	r3, #3
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	f023 0303 	bic.w	r3, r3, #3
 80068b6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80068b8:	8bfb      	ldrh	r3, [r7, #30]
 80068ba:	2b0b      	cmp	r3, #11
 80068bc:	d801      	bhi.n	80068c2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80068be:	230c      	movs	r3, #12
 80068c0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80068c2:	8bfb      	ldrh	r3, [r7, #30]
 80068c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068c8:	d803      	bhi.n	80068d2 <mem_trim+0x32>
 80068ca:	8bfa      	ldrh	r2, [r7, #30]
 80068cc:	887b      	ldrh	r3, [r7, #2]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d201      	bcs.n	80068d6 <mem_trim+0x36>
    return NULL;
 80068d2:	2300      	movs	r3, #0
 80068d4:	e0cc      	b.n	8006a70 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80068d6:	4b68      	ldr	r3, [pc, #416]	; (8006a78 <mem_trim+0x1d8>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d304      	bcc.n	80068ea <mem_trim+0x4a>
 80068e0:	4b66      	ldr	r3, [pc, #408]	; (8006a7c <mem_trim+0x1dc>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d306      	bcc.n	80068f8 <mem_trim+0x58>
 80068ea:	4b65      	ldr	r3, [pc, #404]	; (8006a80 <mem_trim+0x1e0>)
 80068ec:	f240 22d1 	movw	r2, #721	; 0x2d1
 80068f0:	4964      	ldr	r1, [pc, #400]	; (8006a84 <mem_trim+0x1e4>)
 80068f2:	4865      	ldr	r0, [pc, #404]	; (8006a88 <mem_trim+0x1e8>)
 80068f4:	f009 ff22 	bl	801073c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80068f8:	4b5f      	ldr	r3, [pc, #380]	; (8006a78 <mem_trim+0x1d8>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d304      	bcc.n	800690c <mem_trim+0x6c>
 8006902:	4b5e      	ldr	r3, [pc, #376]	; (8006a7c <mem_trim+0x1dc>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	429a      	cmp	r2, r3
 800690a:	d301      	bcc.n	8006910 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	e0af      	b.n	8006a70 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	3b08      	subs	r3, #8
 8006914:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8006916:	69b8      	ldr	r0, [r7, #24]
 8006918:	f7ff fe2c 	bl	8006574 <mem_to_ptr>
 800691c:	4603      	mov	r3, r0
 800691e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	881a      	ldrh	r2, [r3, #0]
 8006924:	8afb      	ldrh	r3, [r7, #22]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	b29b      	uxth	r3, r3
 800692a:	3b08      	subs	r3, #8
 800692c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800692e:	8bfa      	ldrh	r2, [r7, #30]
 8006930:	8abb      	ldrh	r3, [r7, #20]
 8006932:	429a      	cmp	r2, r3
 8006934:	d906      	bls.n	8006944 <mem_trim+0xa4>
 8006936:	4b52      	ldr	r3, [pc, #328]	; (8006a80 <mem_trim+0x1e0>)
 8006938:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800693c:	4953      	ldr	r1, [pc, #332]	; (8006a8c <mem_trim+0x1ec>)
 800693e:	4852      	ldr	r0, [pc, #328]	; (8006a88 <mem_trim+0x1e8>)
 8006940:	f009 fefc 	bl	801073c <iprintf>
  if (newsize > size) {
 8006944:	8bfa      	ldrh	r2, [r7, #30]
 8006946:	8abb      	ldrh	r3, [r7, #20]
 8006948:	429a      	cmp	r2, r3
 800694a:	d901      	bls.n	8006950 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800694c:	2300      	movs	r3, #0
 800694e:	e08f      	b.n	8006a70 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006950:	8bfa      	ldrh	r2, [r7, #30]
 8006952:	8abb      	ldrh	r3, [r7, #20]
 8006954:	429a      	cmp	r2, r3
 8006956:	d101      	bne.n	800695c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	e089      	b.n	8006a70 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	881b      	ldrh	r3, [r3, #0]
 8006960:	4618      	mov	r0, r3
 8006962:	f7ff fdf5 	bl	8006550 <ptr_to_mem>
 8006966:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	791b      	ldrb	r3, [r3, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d13f      	bne.n	80069f0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	881b      	ldrh	r3, [r3, #0]
 8006974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006978:	d106      	bne.n	8006988 <mem_trim+0xe8>
 800697a:	4b41      	ldr	r3, [pc, #260]	; (8006a80 <mem_trim+0x1e0>)
 800697c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8006980:	4943      	ldr	r1, [pc, #268]	; (8006a90 <mem_trim+0x1f0>)
 8006982:	4841      	ldr	r0, [pc, #260]	; (8006a88 <mem_trim+0x1e8>)
 8006984:	f009 feda 	bl	801073c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800698e:	8afa      	ldrh	r2, [r7, #22]
 8006990:	8bfb      	ldrh	r3, [r7, #30]
 8006992:	4413      	add	r3, r2
 8006994:	b29b      	uxth	r3, r3
 8006996:	3308      	adds	r3, #8
 8006998:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800699a:	4b3e      	ldr	r3, [pc, #248]	; (8006a94 <mem_trim+0x1f4>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d106      	bne.n	80069b2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80069a4:	89fb      	ldrh	r3, [r7, #14]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7ff fdd2 	bl	8006550 <ptr_to_mem>
 80069ac:	4603      	mov	r3, r0
 80069ae:	4a39      	ldr	r2, [pc, #228]	; (8006a94 <mem_trim+0x1f4>)
 80069b0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80069b2:	89fb      	ldrh	r3, [r7, #14]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7ff fdcb 	bl	8006550 <ptr_to_mem>
 80069ba:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	2200      	movs	r2, #0
 80069c0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	89ba      	ldrh	r2, [r7, #12]
 80069c6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	8afa      	ldrh	r2, [r7, #22]
 80069cc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	89fa      	ldrh	r2, [r7, #14]
 80069d2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069dc:	d047      	beq.n	8006a6e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	881b      	ldrh	r3, [r3, #0]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7ff fdb4 	bl	8006550 <ptr_to_mem>
 80069e8:	4602      	mov	r2, r0
 80069ea:	89fb      	ldrh	r3, [r7, #14]
 80069ec:	8053      	strh	r3, [r2, #2]
 80069ee:	e03e      	b.n	8006a6e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80069f0:	8bfb      	ldrh	r3, [r7, #30]
 80069f2:	f103 0214 	add.w	r2, r3, #20
 80069f6:	8abb      	ldrh	r3, [r7, #20]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d838      	bhi.n	8006a6e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80069fc:	8afa      	ldrh	r2, [r7, #22]
 80069fe:	8bfb      	ldrh	r3, [r7, #30]
 8006a00:	4413      	add	r3, r2
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	3308      	adds	r3, #8
 8006a06:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a10:	d106      	bne.n	8006a20 <mem_trim+0x180>
 8006a12:	4b1b      	ldr	r3, [pc, #108]	; (8006a80 <mem_trim+0x1e0>)
 8006a14:	f240 3216 	movw	r2, #790	; 0x316
 8006a18:	491d      	ldr	r1, [pc, #116]	; (8006a90 <mem_trim+0x1f0>)
 8006a1a:	481b      	ldr	r0, [pc, #108]	; (8006a88 <mem_trim+0x1e8>)
 8006a1c:	f009 fe8e 	bl	801073c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006a20:	89fb      	ldrh	r3, [r7, #14]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7ff fd94 	bl	8006550 <ptr_to_mem>
 8006a28:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8006a2a:	4b1a      	ldr	r3, [pc, #104]	; (8006a94 <mem_trim+0x1f4>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d202      	bcs.n	8006a3a <mem_trim+0x19a>
      lfree = mem2;
 8006a34:	4a17      	ldr	r2, [pc, #92]	; (8006a94 <mem_trim+0x1f4>)
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	881a      	ldrh	r2, [r3, #0]
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	8afa      	ldrh	r2, [r7, #22]
 8006a4c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	89fa      	ldrh	r2, [r7, #14]
 8006a52:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	881b      	ldrh	r3, [r3, #0]
 8006a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a5c:	d007      	beq.n	8006a6e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7ff fd74 	bl	8006550 <ptr_to_mem>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	89fb      	ldrh	r3, [r7, #14]
 8006a6c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006a6e:	687b      	ldr	r3, [r7, #4]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3720      	adds	r7, #32
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	20005abc 	.word	0x20005abc
 8006a7c:	20005ac0 	.word	0x20005ac0
 8006a80:	08011bbc 	.word	0x08011bbc
 8006a84:	08011d2c 	.word	0x08011d2c
 8006a88:	08011c04 	.word	0x08011c04
 8006a8c:	08011d44 	.word	0x08011d44
 8006a90:	08011d64 	.word	0x08011d64
 8006a94:	20005ac4 	.word	0x20005ac4

08006a98 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b088      	sub	sp, #32
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006aa2:	88fb      	ldrh	r3, [r7, #6]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d101      	bne.n	8006aac <mem_malloc+0x14>
    return NULL;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	e0d9      	b.n	8006c60 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006aac:	88fb      	ldrh	r3, [r7, #6]
 8006aae:	3303      	adds	r3, #3
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	f023 0303 	bic.w	r3, r3, #3
 8006ab6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006ab8:	8bbb      	ldrh	r3, [r7, #28]
 8006aba:	2b0b      	cmp	r3, #11
 8006abc:	d801      	bhi.n	8006ac2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8006abe:	230c      	movs	r3, #12
 8006ac0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006ac2:	8bbb      	ldrh	r3, [r7, #28]
 8006ac4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ac8:	d803      	bhi.n	8006ad2 <mem_malloc+0x3a>
 8006aca:	8bba      	ldrh	r2, [r7, #28]
 8006acc:	88fb      	ldrh	r3, [r7, #6]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d201      	bcs.n	8006ad6 <mem_malloc+0x3e>
    return NULL;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	e0c4      	b.n	8006c60 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006ad6:	4b64      	ldr	r3, [pc, #400]	; (8006c68 <mem_malloc+0x1d0>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7ff fd4a 	bl	8006574 <mem_to_ptr>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	83fb      	strh	r3, [r7, #30]
 8006ae4:	e0b4      	b.n	8006c50 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006ae6:	8bfb      	ldrh	r3, [r7, #30]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7ff fd31 	bl	8006550 <ptr_to_mem>
 8006aee:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	791b      	ldrb	r3, [r3, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f040 80a4 	bne.w	8006c42 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	461a      	mov	r2, r3
 8006b00:	8bfb      	ldrh	r3, [r7, #30]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	f1a3 0208 	sub.w	r2, r3, #8
 8006b08:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	f0c0 8099 	bcc.w	8006c42 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	461a      	mov	r2, r3
 8006b16:	8bfb      	ldrh	r3, [r7, #30]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	f1a3 0208 	sub.w	r2, r3, #8
 8006b1e:	8bbb      	ldrh	r3, [r7, #28]
 8006b20:	3314      	adds	r3, #20
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d333      	bcc.n	8006b8e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006b26:	8bfa      	ldrh	r2, [r7, #30]
 8006b28:	8bbb      	ldrh	r3, [r7, #28]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	3308      	adds	r3, #8
 8006b30:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006b32:	8a7b      	ldrh	r3, [r7, #18]
 8006b34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b38:	d106      	bne.n	8006b48 <mem_malloc+0xb0>
 8006b3a:	4b4c      	ldr	r3, [pc, #304]	; (8006c6c <mem_malloc+0x1d4>)
 8006b3c:	f240 3287 	movw	r2, #903	; 0x387
 8006b40:	494b      	ldr	r1, [pc, #300]	; (8006c70 <mem_malloc+0x1d8>)
 8006b42:	484c      	ldr	r0, [pc, #304]	; (8006c74 <mem_malloc+0x1dc>)
 8006b44:	f009 fdfa 	bl	801073c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006b48:	8a7b      	ldrh	r3, [r7, #18]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7ff fd00 	bl	8006550 <ptr_to_mem>
 8006b50:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	881a      	ldrh	r2, [r3, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8bfa      	ldrh	r2, [r7, #30]
 8006b64:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	8a7a      	ldrh	r2, [r7, #18]
 8006b6a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b7a:	d00b      	beq.n	8006b94 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7ff fce5 	bl	8006550 <ptr_to_mem>
 8006b86:	4602      	mov	r2, r0
 8006b88:	8a7b      	ldrh	r3, [r7, #18]
 8006b8a:	8053      	strh	r3, [r2, #2]
 8006b8c:	e002      	b.n	8006b94 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	2201      	movs	r2, #1
 8006b92:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006b94:	4b34      	ldr	r3, [pc, #208]	; (8006c68 <mem_malloc+0x1d0>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d127      	bne.n	8006bee <mem_malloc+0x156>
          struct mem *cur = lfree;
 8006b9e:	4b32      	ldr	r3, [pc, #200]	; (8006c68 <mem_malloc+0x1d0>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006ba4:	e005      	b.n	8006bb2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7ff fcd0 	bl	8006550 <ptr_to_mem>
 8006bb0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	791b      	ldrb	r3, [r3, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d004      	beq.n	8006bc4 <mem_malloc+0x12c>
 8006bba:	4b2f      	ldr	r3, [pc, #188]	; (8006c78 <mem_malloc+0x1e0>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d1f0      	bne.n	8006ba6 <mem_malloc+0x10e>
          }
          lfree = cur;
 8006bc4:	4a28      	ldr	r2, [pc, #160]	; (8006c68 <mem_malloc+0x1d0>)
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006bca:	4b27      	ldr	r3, [pc, #156]	; (8006c68 <mem_malloc+0x1d0>)
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	4b2a      	ldr	r3, [pc, #168]	; (8006c78 <mem_malloc+0x1e0>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d00b      	beq.n	8006bee <mem_malloc+0x156>
 8006bd6:	4b24      	ldr	r3, [pc, #144]	; (8006c68 <mem_malloc+0x1d0>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	791b      	ldrb	r3, [r3, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d006      	beq.n	8006bee <mem_malloc+0x156>
 8006be0:	4b22      	ldr	r3, [pc, #136]	; (8006c6c <mem_malloc+0x1d4>)
 8006be2:	f240 32b5 	movw	r2, #949	; 0x3b5
 8006be6:	4925      	ldr	r1, [pc, #148]	; (8006c7c <mem_malloc+0x1e4>)
 8006be8:	4822      	ldr	r0, [pc, #136]	; (8006c74 <mem_malloc+0x1dc>)
 8006bea:	f009 fda7 	bl	801073c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006bee:	8bba      	ldrh	r2, [r7, #28]
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	4a20      	ldr	r2, [pc, #128]	; (8006c78 <mem_malloc+0x1e0>)
 8006bf8:	6812      	ldr	r2, [r2, #0]
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d906      	bls.n	8006c0c <mem_malloc+0x174>
 8006bfe:	4b1b      	ldr	r3, [pc, #108]	; (8006c6c <mem_malloc+0x1d4>)
 8006c00:	f240 32b9 	movw	r2, #953	; 0x3b9
 8006c04:	491e      	ldr	r1, [pc, #120]	; (8006c80 <mem_malloc+0x1e8>)
 8006c06:	481b      	ldr	r0, [pc, #108]	; (8006c74 <mem_malloc+0x1dc>)
 8006c08:	f009 fd98 	bl	801073c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f003 0303 	and.w	r3, r3, #3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d006      	beq.n	8006c24 <mem_malloc+0x18c>
 8006c16:	4b15      	ldr	r3, [pc, #84]	; (8006c6c <mem_malloc+0x1d4>)
 8006c18:	f240 32bb 	movw	r2, #955	; 0x3bb
 8006c1c:	4919      	ldr	r1, [pc, #100]	; (8006c84 <mem_malloc+0x1ec>)
 8006c1e:	4815      	ldr	r0, [pc, #84]	; (8006c74 <mem_malloc+0x1dc>)
 8006c20:	f009 fd8c 	bl	801073c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	f003 0303 	and.w	r3, r3, #3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d006      	beq.n	8006c3c <mem_malloc+0x1a4>
 8006c2e:	4b0f      	ldr	r3, [pc, #60]	; (8006c6c <mem_malloc+0x1d4>)
 8006c30:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006c34:	4914      	ldr	r1, [pc, #80]	; (8006c88 <mem_malloc+0x1f0>)
 8006c36:	480f      	ldr	r0, [pc, #60]	; (8006c74 <mem_malloc+0x1dc>)
 8006c38:	f009 fd80 	bl	801073c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	3308      	adds	r3, #8
 8006c40:	e00e      	b.n	8006c60 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006c42:	8bfb      	ldrh	r3, [r7, #30]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7ff fc83 	bl	8006550 <ptr_to_mem>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	881b      	ldrh	r3, [r3, #0]
 8006c4e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006c50:	8bfa      	ldrh	r2, [r7, #30]
 8006c52:	8bbb      	ldrh	r3, [r7, #28]
 8006c54:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	f4ff af44 	bcc.w	8006ae6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3720      	adds	r7, #32
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	20005ac4 	.word	0x20005ac4
 8006c6c:	08011bbc 	.word	0x08011bbc
 8006c70:	08011d64 	.word	0x08011d64
 8006c74:	08011c04 	.word	0x08011c04
 8006c78:	20005ac0 	.word	0x20005ac0
 8006c7c:	08011d78 	.word	0x08011d78
 8006c80:	08011d94 	.word	0x08011d94
 8006c84:	08011dc4 	.word	0x08011dc4
 8006c88:	08011df4 	.word	0x08011df4

08006c8c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	3303      	adds	r3, #3
 8006ca2:	f023 0303 	bic.w	r3, r3, #3
 8006ca6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006ca8:	2300      	movs	r3, #0
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	e011      	b.n	8006cd2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	881b      	ldrh	r3, [r3, #0]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	4413      	add	r3, r2
 8006cca:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	60fb      	str	r3, [r7, #12]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	885b      	ldrh	r3, [r3, #2]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	dbe7      	blt.n	8006cae <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006cde:	bf00      	nop
 8006ce0:	bf00      	nop
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	80fb      	strh	r3, [r7, #6]
 8006cf6:	e009      	b.n	8006d0c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006cf8:	88fb      	ldrh	r3, [r7, #6]
 8006cfa:	4a08      	ldr	r2, [pc, #32]	; (8006d1c <memp_init+0x30>)
 8006cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7ff ffc3 	bl	8006c8c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006d06:	88fb      	ldrh	r3, [r7, #6]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	80fb      	strh	r3, [r7, #6]
 8006d0c:	88fb      	ldrh	r3, [r7, #6]
 8006d0e:	2b08      	cmp	r3, #8
 8006d10:	d9f2      	bls.n	8006cf8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006d12:	bf00      	nop
 8006d14:	bf00      	nop
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	080145d8 	.word	0x080145d8

08006d20 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d012      	beq.n	8006d5c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	6812      	ldr	r2, [r2, #0]
 8006d3e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f003 0303 	and.w	r3, r3, #3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d006      	beq.n	8006d58 <do_memp_malloc_pool+0x38>
 8006d4a:	4b07      	ldr	r3, [pc, #28]	; (8006d68 <do_memp_malloc_pool+0x48>)
 8006d4c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006d50:	4906      	ldr	r1, [pc, #24]	; (8006d6c <do_memp_malloc_pool+0x4c>)
 8006d52:	4807      	ldr	r0, [pc, #28]	; (8006d70 <do_memp_malloc_pool+0x50>)
 8006d54:	f009 fcf2 	bl	801073c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	e000      	b.n	8006d5e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	08011e18 	.word	0x08011e18
 8006d6c:	08011e48 	.word	0x08011e48
 8006d70:	08011e6c 	.word	0x08011e6c

08006d74 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d106      	bne.n	8006d90 <memp_malloc_pool+0x1c>
 8006d82:	4b0a      	ldr	r3, [pc, #40]	; (8006dac <memp_malloc_pool+0x38>)
 8006d84:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8006d88:	4909      	ldr	r1, [pc, #36]	; (8006db0 <memp_malloc_pool+0x3c>)
 8006d8a:	480a      	ldr	r0, [pc, #40]	; (8006db4 <memp_malloc_pool+0x40>)
 8006d8c:	f009 fcd6 	bl	801073c <iprintf>
  if (desc == NULL) {
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d101      	bne.n	8006d9a <memp_malloc_pool+0x26>
    return NULL;
 8006d96:	2300      	movs	r3, #0
 8006d98:	e003      	b.n	8006da2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7ff ffc0 	bl	8006d20 <do_memp_malloc_pool>
 8006da0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	08011e18 	.word	0x08011e18
 8006db0:	08011e94 	.word	0x08011e94
 8006db4:	08011e6c 	.word	0x08011e6c

08006db8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006dc2:	79fb      	ldrb	r3, [r7, #7]
 8006dc4:	2b08      	cmp	r3, #8
 8006dc6:	d908      	bls.n	8006dda <memp_malloc+0x22>
 8006dc8:	4b0a      	ldr	r3, [pc, #40]	; (8006df4 <memp_malloc+0x3c>)
 8006dca:	f240 1257 	movw	r2, #343	; 0x157
 8006dce:	490a      	ldr	r1, [pc, #40]	; (8006df8 <memp_malloc+0x40>)
 8006dd0:	480a      	ldr	r0, [pc, #40]	; (8006dfc <memp_malloc+0x44>)
 8006dd2:	f009 fcb3 	bl	801073c <iprintf>
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	e008      	b.n	8006dec <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006dda:	79fb      	ldrb	r3, [r7, #7]
 8006ddc:	4a08      	ldr	r2, [pc, #32]	; (8006e00 <memp_malloc+0x48>)
 8006dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7ff ff9c 	bl	8006d20 <do_memp_malloc_pool>
 8006de8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006dea:	68fb      	ldr	r3, [r7, #12]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	08011e18 	.word	0x08011e18
 8006df8:	08011ea8 	.word	0x08011ea8
 8006dfc:	08011e6c 	.word	0x08011e6c
 8006e00:	080145d8 	.word	0x080145d8

08006e04 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	f003 0303 	and.w	r3, r3, #3
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d006      	beq.n	8006e26 <do_memp_free_pool+0x22>
 8006e18:	4b0a      	ldr	r3, [pc, #40]	; (8006e44 <do_memp_free_pool+0x40>)
 8006e1a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006e1e:	490a      	ldr	r1, [pc, #40]	; (8006e48 <do_memp_free_pool+0x44>)
 8006e20:	480a      	ldr	r0, [pc, #40]	; (8006e4c <do_memp_free_pool+0x48>)
 8006e22:	f009 fc8b 	bl	801073c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006e3c:	bf00      	nop
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	08011e18 	.word	0x08011e18
 8006e48:	08011ec8 	.word	0x08011ec8
 8006e4c:	08011e6c 	.word	0x08011e6c

08006e50 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d106      	bne.n	8006e6e <memp_free_pool+0x1e>
 8006e60:	4b0a      	ldr	r3, [pc, #40]	; (8006e8c <memp_free_pool+0x3c>)
 8006e62:	f240 1295 	movw	r2, #405	; 0x195
 8006e66:	490a      	ldr	r1, [pc, #40]	; (8006e90 <memp_free_pool+0x40>)
 8006e68:	480a      	ldr	r0, [pc, #40]	; (8006e94 <memp_free_pool+0x44>)
 8006e6a:	f009 fc67 	bl	801073c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d007      	beq.n	8006e84 <memp_free_pool+0x34>
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d004      	beq.n	8006e84 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8006e7a:	6839      	ldr	r1, [r7, #0]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7ff ffc1 	bl	8006e04 <do_memp_free_pool>
 8006e82:	e000      	b.n	8006e86 <memp_free_pool+0x36>
    return;
 8006e84:	bf00      	nop
}
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	08011e18 	.word	0x08011e18
 8006e90:	08011e94 	.word	0x08011e94
 8006e94:	08011e6c 	.word	0x08011e6c

08006e98 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	6039      	str	r1, [r7, #0]
 8006ea2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006ea4:	79fb      	ldrb	r3, [r7, #7]
 8006ea6:	2b08      	cmp	r3, #8
 8006ea8:	d907      	bls.n	8006eba <memp_free+0x22>
 8006eaa:	4b0c      	ldr	r3, [pc, #48]	; (8006edc <memp_free+0x44>)
 8006eac:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006eb0:	490b      	ldr	r1, [pc, #44]	; (8006ee0 <memp_free+0x48>)
 8006eb2:	480c      	ldr	r0, [pc, #48]	; (8006ee4 <memp_free+0x4c>)
 8006eb4:	f009 fc42 	bl	801073c <iprintf>
 8006eb8:	e00c      	b.n	8006ed4 <memp_free+0x3c>

  if (mem == NULL) {
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d008      	beq.n	8006ed2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006ec0:	79fb      	ldrb	r3, [r7, #7]
 8006ec2:	4a09      	ldr	r2, [pc, #36]	; (8006ee8 <memp_free+0x50>)
 8006ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7ff ff9a 	bl	8006e04 <do_memp_free_pool>
 8006ed0:	e000      	b.n	8006ed4 <memp_free+0x3c>
    return;
 8006ed2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	08011e18 	.word	0x08011e18
 8006ee0:	08011ee8 	.word	0x08011ee8
 8006ee4:	08011e6c 	.word	0x08011e6c
 8006ee8:	080145d8 	.word	0x080145d8

08006eec <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006eec:	b480      	push	{r7}
 8006eee:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006ef0:	bf00      	nop
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
	...

08006efc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
 8006f08:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d108      	bne.n	8006f22 <netif_add+0x26>
 8006f10:	4b57      	ldr	r3, [pc, #348]	; (8007070 <netif_add+0x174>)
 8006f12:	f240 1227 	movw	r2, #295	; 0x127
 8006f16:	4957      	ldr	r1, [pc, #348]	; (8007074 <netif_add+0x178>)
 8006f18:	4857      	ldr	r0, [pc, #348]	; (8007078 <netif_add+0x17c>)
 8006f1a:	f009 fc0f 	bl	801073c <iprintf>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	e0a2      	b.n	8007068 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d108      	bne.n	8006f3a <netif_add+0x3e>
 8006f28:	4b51      	ldr	r3, [pc, #324]	; (8007070 <netif_add+0x174>)
 8006f2a:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006f2e:	4953      	ldr	r1, [pc, #332]	; (800707c <netif_add+0x180>)
 8006f30:	4851      	ldr	r0, [pc, #324]	; (8007078 <netif_add+0x17c>)
 8006f32:	f009 fc03 	bl	801073c <iprintf>
 8006f36:	2300      	movs	r3, #0
 8006f38:	e096      	b.n	8007068 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006f40:	4b4f      	ldr	r3, [pc, #316]	; (8007080 <netif_add+0x184>)
 8006f42:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006f4a:	4b4d      	ldr	r3, [pc, #308]	; (8007080 <netif_add+0x184>)
 8006f4c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006f54:	4b4a      	ldr	r3, [pc, #296]	; (8007080 <netif_add+0x184>)
 8006f56:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	4a45      	ldr	r2, [pc, #276]	; (8007084 <netif_add+0x188>)
 8006f6e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6a3a      	ldr	r2, [r7, #32]
 8006f88:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006f8a:	4b3f      	ldr	r3, [pc, #252]	; (8007088 <netif_add+0x18c>)
 8006f8c:	781a      	ldrb	r2, [r3, #0]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f98:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	68b9      	ldr	r1, [r7, #8]
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f000 f913 	bl	80071cc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	4798      	blx	r3
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d001      	beq.n	8006fb6 <netif_add+0xba>
    return NULL;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	e058      	b.n	8007068 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006fbc:	2bff      	cmp	r3, #255	; 0xff
 8006fbe:	d103      	bne.n	8006fc8 <netif_add+0xcc>
        netif->num = 0;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006fcc:	4b2f      	ldr	r3, [pc, #188]	; (800708c <netif_add+0x190>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	617b      	str	r3, [r7, #20]
 8006fd2:	e02b      	b.n	800702c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d106      	bne.n	8006fea <netif_add+0xee>
 8006fdc:	4b24      	ldr	r3, [pc, #144]	; (8007070 <netif_add+0x174>)
 8006fde:	f240 128b 	movw	r2, #395	; 0x18b
 8006fe2:	492b      	ldr	r1, [pc, #172]	; (8007090 <netif_add+0x194>)
 8006fe4:	4824      	ldr	r0, [pc, #144]	; (8007078 <netif_add+0x17c>)
 8006fe6:	f009 fba9 	bl	801073c <iprintf>
        num_netifs++;
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	3301      	adds	r3, #1
 8006fee:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	2bff      	cmp	r3, #255	; 0xff
 8006ff4:	dd06      	ble.n	8007004 <netif_add+0x108>
 8006ff6:	4b1e      	ldr	r3, [pc, #120]	; (8007070 <netif_add+0x174>)
 8006ff8:	f240 128d 	movw	r2, #397	; 0x18d
 8006ffc:	4925      	ldr	r1, [pc, #148]	; (8007094 <netif_add+0x198>)
 8006ffe:	481e      	ldr	r0, [pc, #120]	; (8007078 <netif_add+0x17c>)
 8007000:	f009 fb9c 	bl	801073c <iprintf>
        if (netif2->num == netif->num) {
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007010:	429a      	cmp	r2, r3
 8007012:	d108      	bne.n	8007026 <netif_add+0x12a>
          netif->num++;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800701a:	3301      	adds	r3, #1
 800701c:	b2da      	uxtb	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8007024:	e005      	b.n	8007032 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	617b      	str	r3, [r7, #20]
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1d0      	bne.n	8006fd4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1be      	bne.n	8006fb6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800703e:	2bfe      	cmp	r3, #254	; 0xfe
 8007040:	d103      	bne.n	800704a <netif_add+0x14e>
    netif_num = 0;
 8007042:	4b11      	ldr	r3, [pc, #68]	; (8007088 <netif_add+0x18c>)
 8007044:	2200      	movs	r2, #0
 8007046:	701a      	strb	r2, [r3, #0]
 8007048:	e006      	b.n	8007058 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007050:	3301      	adds	r3, #1
 8007052:	b2da      	uxtb	r2, r3
 8007054:	4b0c      	ldr	r3, [pc, #48]	; (8007088 <netif_add+0x18c>)
 8007056:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007058:	4b0c      	ldr	r3, [pc, #48]	; (800708c <netif_add+0x190>)
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007060:	4a0a      	ldr	r2, [pc, #40]	; (800708c <netif_add+0x190>)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007066:	68fb      	ldr	r3, [r7, #12]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	08011f04 	.word	0x08011f04
 8007074:	08011f98 	.word	0x08011f98
 8007078:	08011f54 	.word	0x08011f54
 800707c:	08011fb4 	.word	0x08011fb4
 8007080:	0801463c 	.word	0x0801463c
 8007084:	080074a7 	.word	0x080074a7
 8007088:	200089bc 	.word	0x200089bc
 800708c:	200089b4 	.word	0x200089b4
 8007090:	08011fd8 	.word	0x08011fd8
 8007094:	08011fec 	.word	0x08011fec

08007098 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80070a2:	6839      	ldr	r1, [r7, #0]
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f002 fb53 	bl	8009750 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f006 ff4f 	bl	800df50 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80070b2:	bf00      	nop
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
	...

080070bc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d106      	bne.n	80070dc <netif_do_set_ipaddr+0x20>
 80070ce:	4b1d      	ldr	r3, [pc, #116]	; (8007144 <netif_do_set_ipaddr+0x88>)
 80070d0:	f240 12cb 	movw	r2, #459	; 0x1cb
 80070d4:	491c      	ldr	r1, [pc, #112]	; (8007148 <netif_do_set_ipaddr+0x8c>)
 80070d6:	481d      	ldr	r0, [pc, #116]	; (800714c <netif_do_set_ipaddr+0x90>)
 80070d8:	f009 fb30 	bl	801073c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d106      	bne.n	80070f0 <netif_do_set_ipaddr+0x34>
 80070e2:	4b18      	ldr	r3, [pc, #96]	; (8007144 <netif_do_set_ipaddr+0x88>)
 80070e4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80070e8:	4917      	ldr	r1, [pc, #92]	; (8007148 <netif_do_set_ipaddr+0x8c>)
 80070ea:	4818      	ldr	r0, [pc, #96]	; (800714c <netif_do_set_ipaddr+0x90>)
 80070ec:	f009 fb26 	bl	801073c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3304      	adds	r3, #4
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d01c      	beq.n	8007138 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	3304      	adds	r3, #4
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800710e:	f107 0314 	add.w	r3, r7, #20
 8007112:	4619      	mov	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7ff ffbf 	bl	8007098 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d002      	beq.n	8007126 <netif_do_set_ipaddr+0x6a>
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	e000      	b.n	8007128 <netif_do_set_ipaddr+0x6c>
 8007126:	2300      	movs	r3, #0
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800712c:	2101      	movs	r1, #1
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f000 f8d2 	bl	80072d8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007134:	2301      	movs	r3, #1
 8007136:	e000      	b.n	800713a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3718      	adds	r7, #24
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	08011f04 	.word	0x08011f04
 8007148:	0801201c 	.word	0x0801201c
 800714c:	08011f54 	.word	0x08011f54

08007150 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	3308      	adds	r3, #8
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	429a      	cmp	r2, r3
 8007168:	d00a      	beq.n	8007180 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d002      	beq.n	8007176 <netif_do_set_netmask+0x26>
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	e000      	b.n	8007178 <netif_do_set_netmask+0x28>
 8007176:	2300      	movs	r3, #0
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800717c:	2301      	movs	r3, #1
 800717e:	e000      	b.n	8007182 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800718e:	b480      	push	{r7}
 8007190:	b085      	sub	sp, #20
 8007192:	af00      	add	r7, sp, #0
 8007194:	60f8      	str	r0, [r7, #12]
 8007196:	60b9      	str	r1, [r7, #8]
 8007198:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	330c      	adds	r3, #12
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d00a      	beq.n	80071be <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d002      	beq.n	80071b4 <netif_do_set_gw+0x26>
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	e000      	b.n	80071b6 <netif_do_set_gw+0x28>
 80071b4:	2300      	movs	r3, #0
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80071ba:	2301      	movs	r3, #1
 80071bc:	e000      	b.n	80071c0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3714      	adds	r7, #20
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b088      	sub	sp, #32
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
 80071d8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80071da:	2300      	movs	r3, #0
 80071dc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80071de:	2300      	movs	r3, #0
 80071e0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80071e8:	4b1c      	ldr	r3, [pc, #112]	; (800725c <netif_set_addr+0x90>)
 80071ea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80071f2:	4b1a      	ldr	r3, [pc, #104]	; (800725c <netif_set_addr+0x90>)
 80071f4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d101      	bne.n	8007200 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80071fc:	4b17      	ldr	r3, [pc, #92]	; (800725c <netif_set_addr+0x90>)
 80071fe:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <netif_set_addr+0x42>
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <netif_set_addr+0x46>
 800720e:	2301      	movs	r3, #1
 8007210:	e000      	b.n	8007214 <netif_set_addr+0x48>
 8007212:	2300      	movs	r3, #0
 8007214:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d006      	beq.n	800722a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800721c:	f107 0310 	add.w	r3, r7, #16
 8007220:	461a      	mov	r2, r3
 8007222:	68b9      	ldr	r1, [r7, #8]
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f7ff ff49 	bl	80070bc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800722a:	69fa      	ldr	r2, [r7, #28]
 800722c:	6879      	ldr	r1, [r7, #4]
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f7ff ff8e 	bl	8007150 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007234:	69ba      	ldr	r2, [r7, #24]
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f7ff ffa8 	bl	800718e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d106      	bne.n	8007252 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007244:	f107 0310 	add.w	r3, r7, #16
 8007248:	461a      	mov	r2, r3
 800724a:	68b9      	ldr	r1, [r7, #8]
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f7ff ff35 	bl	80070bc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007252:	bf00      	nop
 8007254:	3720      	adds	r7, #32
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	0801463c 	.word	0x0801463c

08007260 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007268:	4a04      	ldr	r2, [pc, #16]	; (800727c <netif_set_default+0x1c>)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800726e:	bf00      	nop
 8007270:	370c      	adds	r7, #12
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	200089b8 	.word	0x200089b8

08007280 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d107      	bne.n	800729e <netif_set_up+0x1e>
 800728e:	4b0f      	ldr	r3, [pc, #60]	; (80072cc <netif_set_up+0x4c>)
 8007290:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007294:	490e      	ldr	r1, [pc, #56]	; (80072d0 <netif_set_up+0x50>)
 8007296:	480f      	ldr	r0, [pc, #60]	; (80072d4 <netif_set_up+0x54>)
 8007298:	f009 fa50 	bl	801073c <iprintf>
 800729c:	e013      	b.n	80072c6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10c      	bne.n	80072c6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80072b2:	f043 0301 	orr.w	r3, r3, #1
 80072b6:	b2da      	uxtb	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80072be:	2103      	movs	r1, #3
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f809 	bl	80072d8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	08011f04 	.word	0x08011f04
 80072d0:	0801208c 	.word	0x0801208c
 80072d4:	08011f54 	.word	0x08011f54

080072d8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	460b      	mov	r3, r1
 80072e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d106      	bne.n	80072f8 <netif_issue_reports+0x20>
 80072ea:	4b18      	ldr	r3, [pc, #96]	; (800734c <netif_issue_reports+0x74>)
 80072ec:	f240 326d 	movw	r2, #877	; 0x36d
 80072f0:	4917      	ldr	r1, [pc, #92]	; (8007350 <netif_issue_reports+0x78>)
 80072f2:	4818      	ldr	r0, [pc, #96]	; (8007354 <netif_issue_reports+0x7c>)
 80072f4:	f009 fa22 	bl	801073c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80072fe:	f003 0304 	and.w	r3, r3, #4
 8007302:	2b00      	cmp	r3, #0
 8007304:	d01e      	beq.n	8007344 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800730c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007310:	2b00      	cmp	r3, #0
 8007312:	d017      	beq.n	8007344 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007314:	78fb      	ldrb	r3, [r7, #3]
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b00      	cmp	r3, #0
 800731c:	d013      	beq.n	8007346 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	3304      	adds	r3, #4
 8007322:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00e      	beq.n	8007346 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800732e:	f003 0308 	and.w	r3, r3, #8
 8007332:	2b00      	cmp	r3, #0
 8007334:	d007      	beq.n	8007346 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	3304      	adds	r3, #4
 800733a:	4619      	mov	r1, r3
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f007 fd71 	bl	800ee24 <etharp_request>
 8007342:	e000      	b.n	8007346 <netif_issue_reports+0x6e>
    return;
 8007344:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007346:	3708      	adds	r7, #8
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	08011f04 	.word	0x08011f04
 8007350:	080120a8 	.word	0x080120a8
 8007354:	08011f54 	.word	0x08011f54

08007358 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d107      	bne.n	8007376 <netif_set_down+0x1e>
 8007366:	4b12      	ldr	r3, [pc, #72]	; (80073b0 <netif_set_down+0x58>)
 8007368:	f240 329b 	movw	r2, #923	; 0x39b
 800736c:	4911      	ldr	r1, [pc, #68]	; (80073b4 <netif_set_down+0x5c>)
 800736e:	4812      	ldr	r0, [pc, #72]	; (80073b8 <netif_set_down+0x60>)
 8007370:	f009 f9e4 	bl	801073c <iprintf>
 8007374:	e019      	b.n	80073aa <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800737c:	f003 0301 	and.w	r3, r3, #1
 8007380:	2b00      	cmp	r3, #0
 8007382:	d012      	beq.n	80073aa <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800738a:	f023 0301 	bic.w	r3, r3, #1
 800738e:	b2da      	uxtb	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800739c:	f003 0308 	and.w	r3, r3, #8
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d002      	beq.n	80073aa <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f007 f8fb 	bl	800e5a0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	08011f04 	.word	0x08011f04
 80073b4:	080120cc 	.word	0x080120cc
 80073b8:	08011f54 	.word	0x08011f54

080073bc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d107      	bne.n	80073da <netif_set_link_up+0x1e>
 80073ca:	4b13      	ldr	r3, [pc, #76]	; (8007418 <netif_set_link_up+0x5c>)
 80073cc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80073d0:	4912      	ldr	r1, [pc, #72]	; (800741c <netif_set_link_up+0x60>)
 80073d2:	4813      	ldr	r0, [pc, #76]	; (8007420 <netif_set_link_up+0x64>)
 80073d4:	f009 f9b2 	bl	801073c <iprintf>
 80073d8:	e01b      	b.n	8007412 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80073e0:	f003 0304 	and.w	r3, r3, #4
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d114      	bne.n	8007412 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80073ee:	f043 0304 	orr.w	r3, r3, #4
 80073f2:	b2da      	uxtb	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80073fa:	2103      	movs	r1, #3
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7ff ff6b 	bl	80072d8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <netif_set_link_up+0x56>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	69db      	ldr	r3, [r3, #28]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	08011f04 	.word	0x08011f04
 800741c:	080120ec 	.word	0x080120ec
 8007420:	08011f54 	.word	0x08011f54

08007424 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d107      	bne.n	8007442 <netif_set_link_down+0x1e>
 8007432:	4b11      	ldr	r3, [pc, #68]	; (8007478 <netif_set_link_down+0x54>)
 8007434:	f240 4206 	movw	r2, #1030	; 0x406
 8007438:	4910      	ldr	r1, [pc, #64]	; (800747c <netif_set_link_down+0x58>)
 800743a:	4811      	ldr	r0, [pc, #68]	; (8007480 <netif_set_link_down+0x5c>)
 800743c:	f009 f97e 	bl	801073c <iprintf>
 8007440:	e017      	b.n	8007472 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007448:	f003 0304 	and.w	r3, r3, #4
 800744c:	2b00      	cmp	r3, #0
 800744e:	d010      	beq.n	8007472 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007456:	f023 0304 	bic.w	r3, r3, #4
 800745a:	b2da      	uxtb	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d003      	beq.n	8007472 <netif_set_link_down+0x4e>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	08011f04 	.word	0x08011f04
 800747c:	08012110 	.word	0x08012110
 8007480:	08011f54 	.word	0x08011f54

08007484 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d002      	beq.n	800749a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	683a      	ldr	r2, [r7, #0]
 8007498:	61da      	str	r2, [r3, #28]
  }
}
 800749a:	bf00      	nop
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b085      	sub	sp, #20
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80074b2:	f06f 030b 	mvn.w	r3, #11
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3714      	adds	r7, #20
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
	...

080074c4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	4603      	mov	r3, r0
 80074cc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80074ce:	79fb      	ldrb	r3, [r7, #7]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d013      	beq.n	80074fc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80074d4:	4b0d      	ldr	r3, [pc, #52]	; (800750c <netif_get_by_index+0x48>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	60fb      	str	r3, [r7, #12]
 80074da:	e00c      	b.n	80074f6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80074e2:	3301      	adds	r3, #1
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	79fa      	ldrb	r2, [r7, #7]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d101      	bne.n	80074f0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	e006      	b.n	80074fe <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	60fb      	str	r3, [r7, #12]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1ef      	bne.n	80074dc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	200089b4 	.word	0x200089b4

08007510 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007516:	4b0c      	ldr	r3, [pc, #48]	; (8007548 <pbuf_free_ooseq+0x38>)
 8007518:	2200      	movs	r2, #0
 800751a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800751c:	4b0b      	ldr	r3, [pc, #44]	; (800754c <pbuf_free_ooseq+0x3c>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	607b      	str	r3, [r7, #4]
 8007522:	e00a      	b.n	800753a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007528:	2b00      	cmp	r3, #0
 800752a:	d003      	beq.n	8007534 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f002 f94d 	bl	80097cc <tcp_free_ooseq>
      return;
 8007532:	e005      	b.n	8007540 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	607b      	str	r3, [r7, #4]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1f1      	bne.n	8007524 <pbuf_free_ooseq+0x14>
    }
  }
}
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	200089bd 	.word	0x200089bd
 800754c:	200089cc 	.word	0x200089cc

08007550 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007550:	b480      	push	{r7}
 8007552:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007554:	4b03      	ldr	r3, [pc, #12]	; (8007564 <pbuf_pool_is_empty+0x14>)
 8007556:	2201      	movs	r2, #1
 8007558:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800755a:	bf00      	nop
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr
 8007564:	200089bd 	.word	0x200089bd

08007568 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	4611      	mov	r1, r2
 8007574:	461a      	mov	r2, r3
 8007576:	460b      	mov	r3, r1
 8007578:	80fb      	strh	r3, [r7, #6]
 800757a:	4613      	mov	r3, r2
 800757c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	88fa      	ldrh	r2, [r7, #6]
 800758e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	88ba      	ldrh	r2, [r7, #4]
 8007594:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007596:	8b3b      	ldrh	r3, [r7, #24]
 8007598:	b2da      	uxtb	r2, r3
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	7f3a      	ldrb	r2, [r7, #28]
 80075a2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2201      	movs	r2, #1
 80075a8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	73da      	strb	r2, [r3, #15]
}
 80075b0:	bf00      	nop
 80075b2:	3714      	adds	r7, #20
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b08c      	sub	sp, #48	; 0x30
 80075c0:	af02      	add	r7, sp, #8
 80075c2:	4603      	mov	r3, r0
 80075c4:	71fb      	strb	r3, [r7, #7]
 80075c6:	460b      	mov	r3, r1
 80075c8:	80bb      	strh	r3, [r7, #4]
 80075ca:	4613      	mov	r3, r2
 80075cc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80075ce:	79fb      	ldrb	r3, [r7, #7]
 80075d0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80075d2:	887b      	ldrh	r3, [r7, #2]
 80075d4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80075d8:	d07f      	beq.n	80076da <pbuf_alloc+0x11e>
 80075da:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80075de:	f300 80c8 	bgt.w	8007772 <pbuf_alloc+0x1b6>
 80075e2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80075e6:	d010      	beq.n	800760a <pbuf_alloc+0x4e>
 80075e8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80075ec:	f300 80c1 	bgt.w	8007772 <pbuf_alloc+0x1b6>
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d002      	beq.n	80075fa <pbuf_alloc+0x3e>
 80075f4:	2b41      	cmp	r3, #65	; 0x41
 80075f6:	f040 80bc 	bne.w	8007772 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80075fa:	887a      	ldrh	r2, [r7, #2]
 80075fc:	88bb      	ldrh	r3, [r7, #4]
 80075fe:	4619      	mov	r1, r3
 8007600:	2000      	movs	r0, #0
 8007602:	f000 f8d1 	bl	80077a8 <pbuf_alloc_reference>
 8007606:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8007608:	e0bd      	b.n	8007786 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800760a:	2300      	movs	r3, #0
 800760c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800760e:	2300      	movs	r3, #0
 8007610:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8007612:	88bb      	ldrh	r3, [r7, #4]
 8007614:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007616:	2008      	movs	r0, #8
 8007618:	f7ff fbce 	bl	8006db8 <memp_malloc>
 800761c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d109      	bne.n	8007638 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8007624:	f7ff ff94 	bl	8007550 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8007628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762a:	2b00      	cmp	r3, #0
 800762c:	d002      	beq.n	8007634 <pbuf_alloc+0x78>
            pbuf_free(p);
 800762e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007630:	f000 faa8 	bl	8007b84 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007634:	2300      	movs	r3, #0
 8007636:	e0a7      	b.n	8007788 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007638:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800763a:	3303      	adds	r3, #3
 800763c:	b29b      	uxth	r3, r3
 800763e:	f023 0303 	bic.w	r3, r3, #3
 8007642:	b29b      	uxth	r3, r3
 8007644:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8007648:	b29b      	uxth	r3, r3
 800764a:	8b7a      	ldrh	r2, [r7, #26]
 800764c:	4293      	cmp	r3, r2
 800764e:	bf28      	it	cs
 8007650:	4613      	movcs	r3, r2
 8007652:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007654:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007656:	3310      	adds	r3, #16
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	4413      	add	r3, r2
 800765c:	3303      	adds	r3, #3
 800765e:	f023 0303 	bic.w	r3, r3, #3
 8007662:	4618      	mov	r0, r3
 8007664:	89f9      	ldrh	r1, [r7, #14]
 8007666:	8b7a      	ldrh	r2, [r7, #26]
 8007668:	2300      	movs	r3, #0
 800766a:	9301      	str	r3, [sp, #4]
 800766c:	887b      	ldrh	r3, [r7, #2]
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	460b      	mov	r3, r1
 8007672:	4601      	mov	r1, r0
 8007674:	6938      	ldr	r0, [r7, #16]
 8007676:	f7ff ff77 	bl	8007568 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f003 0303 	and.w	r3, r3, #3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d006      	beq.n	8007694 <pbuf_alloc+0xd8>
 8007686:	4b42      	ldr	r3, [pc, #264]	; (8007790 <pbuf_alloc+0x1d4>)
 8007688:	f44f 7280 	mov.w	r2, #256	; 0x100
 800768c:	4941      	ldr	r1, [pc, #260]	; (8007794 <pbuf_alloc+0x1d8>)
 800768e:	4842      	ldr	r0, [pc, #264]	; (8007798 <pbuf_alloc+0x1dc>)
 8007690:	f009 f854 	bl	801073c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007694:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007696:	3303      	adds	r3, #3
 8007698:	f023 0303 	bic.w	r3, r3, #3
 800769c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80076a0:	d106      	bne.n	80076b0 <pbuf_alloc+0xf4>
 80076a2:	4b3b      	ldr	r3, [pc, #236]	; (8007790 <pbuf_alloc+0x1d4>)
 80076a4:	f44f 7281 	mov.w	r2, #258	; 0x102
 80076a8:	493c      	ldr	r1, [pc, #240]	; (800779c <pbuf_alloc+0x1e0>)
 80076aa:	483b      	ldr	r0, [pc, #236]	; (8007798 <pbuf_alloc+0x1dc>)
 80076ac:	f009 f846 	bl	801073c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d102      	bne.n	80076bc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	627b      	str	r3, [r7, #36]	; 0x24
 80076ba:	e002      	b.n	80076c2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80076c6:	8b7a      	ldrh	r2, [r7, #26]
 80076c8:	89fb      	ldrh	r3, [r7, #14]
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80076ce:	2300      	movs	r3, #0
 80076d0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80076d2:	8b7b      	ldrh	r3, [r7, #26]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d19e      	bne.n	8007616 <pbuf_alloc+0x5a>
      break;
 80076d8:	e055      	b.n	8007786 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80076da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80076dc:	3303      	adds	r3, #3
 80076de:	b29b      	uxth	r3, r3
 80076e0:	f023 0303 	bic.w	r3, r3, #3
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	88bb      	ldrh	r3, [r7, #4]
 80076e8:	3303      	adds	r3, #3
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	f023 0303 	bic.w	r3, r3, #3
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	4413      	add	r3, r2
 80076f4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80076f6:	8b3b      	ldrh	r3, [r7, #24]
 80076f8:	3310      	adds	r3, #16
 80076fa:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80076fc:	8b3a      	ldrh	r2, [r7, #24]
 80076fe:	88bb      	ldrh	r3, [r7, #4]
 8007700:	3303      	adds	r3, #3
 8007702:	f023 0303 	bic.w	r3, r3, #3
 8007706:	429a      	cmp	r2, r3
 8007708:	d306      	bcc.n	8007718 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800770a:	8afa      	ldrh	r2, [r7, #22]
 800770c:	88bb      	ldrh	r3, [r7, #4]
 800770e:	3303      	adds	r3, #3
 8007710:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007714:	429a      	cmp	r2, r3
 8007716:	d201      	bcs.n	800771c <pbuf_alloc+0x160>
        return NULL;
 8007718:	2300      	movs	r3, #0
 800771a:	e035      	b.n	8007788 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800771c:	8afb      	ldrh	r3, [r7, #22]
 800771e:	4618      	mov	r0, r3
 8007720:	f7ff f9ba 	bl	8006a98 <mem_malloc>
 8007724:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007728:	2b00      	cmp	r3, #0
 800772a:	d101      	bne.n	8007730 <pbuf_alloc+0x174>
        return NULL;
 800772c:	2300      	movs	r3, #0
 800772e:	e02b      	b.n	8007788 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007730:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007732:	3310      	adds	r3, #16
 8007734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007736:	4413      	add	r3, r2
 8007738:	3303      	adds	r3, #3
 800773a:	f023 0303 	bic.w	r3, r3, #3
 800773e:	4618      	mov	r0, r3
 8007740:	88b9      	ldrh	r1, [r7, #4]
 8007742:	88ba      	ldrh	r2, [r7, #4]
 8007744:	2300      	movs	r3, #0
 8007746:	9301      	str	r3, [sp, #4]
 8007748:	887b      	ldrh	r3, [r7, #2]
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	460b      	mov	r3, r1
 800774e:	4601      	mov	r1, r0
 8007750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007752:	f7ff ff09 	bl	8007568 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	f003 0303 	and.w	r3, r3, #3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d010      	beq.n	8007784 <pbuf_alloc+0x1c8>
 8007762:	4b0b      	ldr	r3, [pc, #44]	; (8007790 <pbuf_alloc+0x1d4>)
 8007764:	f44f 7291 	mov.w	r2, #290	; 0x122
 8007768:	490d      	ldr	r1, [pc, #52]	; (80077a0 <pbuf_alloc+0x1e4>)
 800776a:	480b      	ldr	r0, [pc, #44]	; (8007798 <pbuf_alloc+0x1dc>)
 800776c:	f008 ffe6 	bl	801073c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007770:	e008      	b.n	8007784 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007772:	4b07      	ldr	r3, [pc, #28]	; (8007790 <pbuf_alloc+0x1d4>)
 8007774:	f240 1227 	movw	r2, #295	; 0x127
 8007778:	490a      	ldr	r1, [pc, #40]	; (80077a4 <pbuf_alloc+0x1e8>)
 800777a:	4807      	ldr	r0, [pc, #28]	; (8007798 <pbuf_alloc+0x1dc>)
 800777c:	f008 ffde 	bl	801073c <iprintf>
      return NULL;
 8007780:	2300      	movs	r3, #0
 8007782:	e001      	b.n	8007788 <pbuf_alloc+0x1cc>
      break;
 8007784:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007788:	4618      	mov	r0, r3
 800778a:	3728      	adds	r7, #40	; 0x28
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	08012134 	.word	0x08012134
 8007794:	08012164 	.word	0x08012164
 8007798:	08012194 	.word	0x08012194
 800779c:	080121bc 	.word	0x080121bc
 80077a0:	080121f0 	.word	0x080121f0
 80077a4:	0801221c 	.word	0x0801221c

080077a8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af02      	add	r7, sp, #8
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	460b      	mov	r3, r1
 80077b2:	807b      	strh	r3, [r7, #2]
 80077b4:	4613      	mov	r3, r2
 80077b6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80077b8:	883b      	ldrh	r3, [r7, #0]
 80077ba:	2b41      	cmp	r3, #65	; 0x41
 80077bc:	d009      	beq.n	80077d2 <pbuf_alloc_reference+0x2a>
 80077be:	883b      	ldrh	r3, [r7, #0]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d006      	beq.n	80077d2 <pbuf_alloc_reference+0x2a>
 80077c4:	4b0f      	ldr	r3, [pc, #60]	; (8007804 <pbuf_alloc_reference+0x5c>)
 80077c6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80077ca:	490f      	ldr	r1, [pc, #60]	; (8007808 <pbuf_alloc_reference+0x60>)
 80077cc:	480f      	ldr	r0, [pc, #60]	; (800780c <pbuf_alloc_reference+0x64>)
 80077ce:	f008 ffb5 	bl	801073c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80077d2:	2007      	movs	r0, #7
 80077d4:	f7ff faf0 	bl	8006db8 <memp_malloc>
 80077d8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d101      	bne.n	80077e4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80077e0:	2300      	movs	r3, #0
 80077e2:	e00b      	b.n	80077fc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80077e4:	8879      	ldrh	r1, [r7, #2]
 80077e6:	887a      	ldrh	r2, [r7, #2]
 80077e8:	2300      	movs	r3, #0
 80077ea:	9301      	str	r3, [sp, #4]
 80077ec:	883b      	ldrh	r3, [r7, #0]
 80077ee:	9300      	str	r3, [sp, #0]
 80077f0:	460b      	mov	r3, r1
 80077f2:	6879      	ldr	r1, [r7, #4]
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f7ff feb7 	bl	8007568 <pbuf_init_alloced_pbuf>
  return p;
 80077fa:	68fb      	ldr	r3, [r7, #12]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	08012134 	.word	0x08012134
 8007808:	08012238 	.word	0x08012238
 800780c:	08012194 	.word	0x08012194

08007810 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b088      	sub	sp, #32
 8007814:	af02      	add	r7, sp, #8
 8007816:	607b      	str	r3, [r7, #4]
 8007818:	4603      	mov	r3, r0
 800781a:	73fb      	strb	r3, [r7, #15]
 800781c:	460b      	mov	r3, r1
 800781e:	81bb      	strh	r3, [r7, #12]
 8007820:	4613      	mov	r3, r2
 8007822:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8007824:	7bfb      	ldrb	r3, [r7, #15]
 8007826:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007828:	8a7b      	ldrh	r3, [r7, #18]
 800782a:	3303      	adds	r3, #3
 800782c:	f023 0203 	bic.w	r2, r3, #3
 8007830:	89bb      	ldrh	r3, [r7, #12]
 8007832:	441a      	add	r2, r3
 8007834:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007836:	429a      	cmp	r2, r3
 8007838:	d901      	bls.n	800783e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800783a:	2300      	movs	r3, #0
 800783c:	e018      	b.n	8007870 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800783e:	6a3b      	ldr	r3, [r7, #32]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d007      	beq.n	8007854 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007844:	8a7b      	ldrh	r3, [r7, #18]
 8007846:	3303      	adds	r3, #3
 8007848:	f023 0303 	bic.w	r3, r3, #3
 800784c:	6a3a      	ldr	r2, [r7, #32]
 800784e:	4413      	add	r3, r2
 8007850:	617b      	str	r3, [r7, #20]
 8007852:	e001      	b.n	8007858 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007854:	2300      	movs	r3, #0
 8007856:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	89b9      	ldrh	r1, [r7, #12]
 800785c:	89ba      	ldrh	r2, [r7, #12]
 800785e:	2302      	movs	r3, #2
 8007860:	9301      	str	r3, [sp, #4]
 8007862:	897b      	ldrh	r3, [r7, #10]
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	460b      	mov	r3, r1
 8007868:	6979      	ldr	r1, [r7, #20]
 800786a:	f7ff fe7d 	bl	8007568 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800786e:	687b      	ldr	r3, [r7, #4]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3718      	adds	r7, #24
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	460b      	mov	r3, r1
 8007882:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d106      	bne.n	8007898 <pbuf_realloc+0x20>
 800788a:	4b3a      	ldr	r3, [pc, #232]	; (8007974 <pbuf_realloc+0xfc>)
 800788c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8007890:	4939      	ldr	r1, [pc, #228]	; (8007978 <pbuf_realloc+0x100>)
 8007892:	483a      	ldr	r0, [pc, #232]	; (800797c <pbuf_realloc+0x104>)
 8007894:	f008 ff52 	bl	801073c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	891b      	ldrh	r3, [r3, #8]
 800789c:	887a      	ldrh	r2, [r7, #2]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d263      	bcs.n	800796a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	891a      	ldrh	r2, [r3, #8]
 80078a6:	887b      	ldrh	r3, [r7, #2]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80078ac:	887b      	ldrh	r3, [r7, #2]
 80078ae:	817b      	strh	r3, [r7, #10]
  q = p;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80078b4:	e018      	b.n	80078e8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	895b      	ldrh	r3, [r3, #10]
 80078ba:	897a      	ldrh	r2, [r7, #10]
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	891a      	ldrh	r2, [r3, #8]
 80078c4:	893b      	ldrh	r3, [r7, #8]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d106      	bne.n	80078e8 <pbuf_realloc+0x70>
 80078da:	4b26      	ldr	r3, [pc, #152]	; (8007974 <pbuf_realloc+0xfc>)
 80078dc:	f240 12af 	movw	r2, #431	; 0x1af
 80078e0:	4927      	ldr	r1, [pc, #156]	; (8007980 <pbuf_realloc+0x108>)
 80078e2:	4826      	ldr	r0, [pc, #152]	; (800797c <pbuf_realloc+0x104>)
 80078e4:	f008 ff2a 	bl	801073c <iprintf>
  while (rem_len > q->len) {
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	895b      	ldrh	r3, [r3, #10]
 80078ec:	897a      	ldrh	r2, [r7, #10]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d8e1      	bhi.n	80078b6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	7b1b      	ldrb	r3, [r3, #12]
 80078f6:	f003 030f 	and.w	r3, r3, #15
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d121      	bne.n	8007942 <pbuf_realloc+0xca>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	895b      	ldrh	r3, [r3, #10]
 8007902:	897a      	ldrh	r2, [r7, #10]
 8007904:	429a      	cmp	r2, r3
 8007906:	d01c      	beq.n	8007942 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	7b5b      	ldrb	r3, [r3, #13]
 800790c:	f003 0302 	and.w	r3, r3, #2
 8007910:	2b00      	cmp	r3, #0
 8007912:	d116      	bne.n	8007942 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	685a      	ldr	r2, [r3, #4]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	b29a      	uxth	r2, r3
 800791e:	897b      	ldrh	r3, [r7, #10]
 8007920:	4413      	add	r3, r2
 8007922:	b29b      	uxth	r3, r3
 8007924:	4619      	mov	r1, r3
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	f7fe ffba 	bl	80068a0 <mem_trim>
 800792c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d106      	bne.n	8007942 <pbuf_realloc+0xca>
 8007934:	4b0f      	ldr	r3, [pc, #60]	; (8007974 <pbuf_realloc+0xfc>)
 8007936:	f240 12bd 	movw	r2, #445	; 0x1bd
 800793a:	4912      	ldr	r1, [pc, #72]	; (8007984 <pbuf_realloc+0x10c>)
 800793c:	480f      	ldr	r0, [pc, #60]	; (800797c <pbuf_realloc+0x104>)
 800793e:	f008 fefd 	bl	801073c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	897a      	ldrh	r2, [r7, #10]
 8007946:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	895a      	ldrh	r2, [r3, #10]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d004      	beq.n	8007962 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4618      	mov	r0, r3
 800795e:	f000 f911 	bl	8007b84 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	601a      	str	r2, [r3, #0]
 8007968:	e000      	b.n	800796c <pbuf_realloc+0xf4>
    return;
 800796a:	bf00      	nop

}
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	08012134 	.word	0x08012134
 8007978:	0801224c 	.word	0x0801224c
 800797c:	08012194 	.word	0x08012194
 8007980:	08012264 	.word	0x08012264
 8007984:	0801227c 	.word	0x0801227c

08007988 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	4613      	mov	r3, r2
 8007994:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d106      	bne.n	80079aa <pbuf_add_header_impl+0x22>
 800799c:	4b2b      	ldr	r3, [pc, #172]	; (8007a4c <pbuf_add_header_impl+0xc4>)
 800799e:	f240 12df 	movw	r2, #479	; 0x1df
 80079a2:	492b      	ldr	r1, [pc, #172]	; (8007a50 <pbuf_add_header_impl+0xc8>)
 80079a4:	482b      	ldr	r0, [pc, #172]	; (8007a54 <pbuf_add_header_impl+0xcc>)
 80079a6:	f008 fec9 	bl	801073c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d003      	beq.n	80079b8 <pbuf_add_header_impl+0x30>
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079b6:	d301      	bcc.n	80079bc <pbuf_add_header_impl+0x34>
    return 1;
 80079b8:	2301      	movs	r3, #1
 80079ba:	e043      	b.n	8007a44 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d101      	bne.n	80079c6 <pbuf_add_header_impl+0x3e>
    return 0;
 80079c2:	2300      	movs	r3, #0
 80079c4:	e03e      	b.n	8007a44 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	891a      	ldrh	r2, [r3, #8]
 80079ce:	8a7b      	ldrh	r3, [r7, #18]
 80079d0:	4413      	add	r3, r2
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	8a7a      	ldrh	r2, [r7, #18]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d901      	bls.n	80079de <pbuf_add_header_impl+0x56>
    return 1;
 80079da:	2301      	movs	r3, #1
 80079dc:	e032      	b.n	8007a44 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	7b1b      	ldrb	r3, [r3, #12]
 80079e2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80079e4:	8a3b      	ldrh	r3, [r7, #16]
 80079e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00c      	beq.n	8007a08 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	685a      	ldr	r2, [r3, #4]
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	425b      	negs	r3, r3
 80079f6:	4413      	add	r3, r2
 80079f8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	3310      	adds	r3, #16
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d20d      	bcs.n	8007a20 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e01d      	b.n	8007a44 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8007a08:	79fb      	ldrb	r3, [r7, #7]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d006      	beq.n	8007a1c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	685a      	ldr	r2, [r3, #4]
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	425b      	negs	r3, r3
 8007a16:	4413      	add	r3, r2
 8007a18:	617b      	str	r3, [r7, #20]
 8007a1a:	e001      	b.n	8007a20 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e011      	b.n	8007a44 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	697a      	ldr	r2, [r7, #20]
 8007a24:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	895a      	ldrh	r2, [r3, #10]
 8007a2a:	8a7b      	ldrh	r3, [r7, #18]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	891a      	ldrh	r2, [r3, #8]
 8007a38:	8a7b      	ldrh	r3, [r7, #18]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	811a      	strh	r2, [r3, #8]


  return 0;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3718      	adds	r7, #24
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	08012134 	.word	0x08012134
 8007a50:	08012298 	.word	0x08012298
 8007a54:	08012194 	.word	0x08012194

08007a58 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007a62:	2200      	movs	r2, #0
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7ff ff8e 	bl	8007988 <pbuf_add_header_impl>
 8007a6c:	4603      	mov	r3, r0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
	...

08007a78 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d106      	bne.n	8007a96 <pbuf_remove_header+0x1e>
 8007a88:	4b20      	ldr	r3, [pc, #128]	; (8007b0c <pbuf_remove_header+0x94>)
 8007a8a:	f240 224b 	movw	r2, #587	; 0x24b
 8007a8e:	4920      	ldr	r1, [pc, #128]	; (8007b10 <pbuf_remove_header+0x98>)
 8007a90:	4820      	ldr	r0, [pc, #128]	; (8007b14 <pbuf_remove_header+0x9c>)
 8007a92:	f008 fe53 	bl	801073c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d003      	beq.n	8007aa4 <pbuf_remove_header+0x2c>
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aa2:	d301      	bcc.n	8007aa8 <pbuf_remove_header+0x30>
    return 1;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e02c      	b.n	8007b02 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d101      	bne.n	8007ab2 <pbuf_remove_header+0x3a>
    return 0;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	e027      	b.n	8007b02 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	895b      	ldrh	r3, [r3, #10]
 8007aba:	89fa      	ldrh	r2, [r7, #14]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d908      	bls.n	8007ad2 <pbuf_remove_header+0x5a>
 8007ac0:	4b12      	ldr	r3, [pc, #72]	; (8007b0c <pbuf_remove_header+0x94>)
 8007ac2:	f240 2255 	movw	r2, #597	; 0x255
 8007ac6:	4914      	ldr	r1, [pc, #80]	; (8007b18 <pbuf_remove_header+0xa0>)
 8007ac8:	4812      	ldr	r0, [pc, #72]	; (8007b14 <pbuf_remove_header+0x9c>)
 8007aca:	f008 fe37 	bl	801073c <iprintf>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e017      	b.n	8007b02 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	441a      	add	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	895a      	ldrh	r2, [r3, #10]
 8007ae8:	89fb      	ldrh	r3, [r7, #14]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	891a      	ldrh	r2, [r3, #8]
 8007af6:	89fb      	ldrh	r3, [r7, #14]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	08012134 	.word	0x08012134
 8007b10:	08012298 	.word	0x08012298
 8007b14:	08012194 	.word	0x08012194
 8007b18:	080122a4 	.word	0x080122a4

08007b1c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	460b      	mov	r3, r1
 8007b26:	807b      	strh	r3, [r7, #2]
 8007b28:	4613      	mov	r3, r2
 8007b2a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007b2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	da08      	bge.n	8007b46 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007b34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b38:	425b      	negs	r3, r3
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7ff ff9b 	bl	8007a78 <pbuf_remove_header>
 8007b42:	4603      	mov	r3, r0
 8007b44:	e007      	b.n	8007b56 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007b46:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b4a:	787a      	ldrb	r2, [r7, #1]
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7ff ff1a 	bl	8007988 <pbuf_add_header_impl>
 8007b54:	4603      	mov	r3, r0
  }
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b082      	sub	sp, #8
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
 8007b66:	460b      	mov	r3, r1
 8007b68:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007b6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	4619      	mov	r1, r3
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7ff ffd2 	bl	8007b1c <pbuf_header_impl>
 8007b78:	4603      	mov	r3, r0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3708      	adds	r7, #8
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
	...

08007b84 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d10b      	bne.n	8007baa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d106      	bne.n	8007ba6 <pbuf_free+0x22>
 8007b98:	4b38      	ldr	r3, [pc, #224]	; (8007c7c <pbuf_free+0xf8>)
 8007b9a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8007b9e:	4938      	ldr	r1, [pc, #224]	; (8007c80 <pbuf_free+0xfc>)
 8007ba0:	4838      	ldr	r0, [pc, #224]	; (8007c84 <pbuf_free+0x100>)
 8007ba2:	f008 fdcb 	bl	801073c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	e063      	b.n	8007c72 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007baa:	2300      	movs	r3, #0
 8007bac:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007bae:	e05c      	b.n	8007c6a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	7b9b      	ldrb	r3, [r3, #14]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d106      	bne.n	8007bc6 <pbuf_free+0x42>
 8007bb8:	4b30      	ldr	r3, [pc, #192]	; (8007c7c <pbuf_free+0xf8>)
 8007bba:	f240 22f1 	movw	r2, #753	; 0x2f1
 8007bbe:	4932      	ldr	r1, [pc, #200]	; (8007c88 <pbuf_free+0x104>)
 8007bc0:	4830      	ldr	r0, [pc, #192]	; (8007c84 <pbuf_free+0x100>)
 8007bc2:	f008 fdbb 	bl	801073c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	7b9b      	ldrb	r3, [r3, #14]
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	739a      	strb	r2, [r3, #14]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	7b9b      	ldrb	r3, [r3, #14]
 8007bd6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007bd8:	7dbb      	ldrb	r3, [r7, #22]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d143      	bne.n	8007c66 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	7b1b      	ldrb	r3, [r3, #12]
 8007be8:	f003 030f 	and.w	r3, r3, #15
 8007bec:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	7b5b      	ldrb	r3, [r3, #13]
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d011      	beq.n	8007c1e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d106      	bne.n	8007c14 <pbuf_free+0x90>
 8007c06:	4b1d      	ldr	r3, [pc, #116]	; (8007c7c <pbuf_free+0xf8>)
 8007c08:	f240 22ff 	movw	r2, #767	; 0x2ff
 8007c0c:	491f      	ldr	r1, [pc, #124]	; (8007c8c <pbuf_free+0x108>)
 8007c0e:	481d      	ldr	r0, [pc, #116]	; (8007c84 <pbuf_free+0x100>)
 8007c10:	f008 fd94 	bl	801073c <iprintf>
        pc->custom_free_function(p);
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	4798      	blx	r3
 8007c1c:	e01d      	b.n	8007c5a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d104      	bne.n	8007c2e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007c24:	6879      	ldr	r1, [r7, #4]
 8007c26:	2008      	movs	r0, #8
 8007c28:	f7ff f936 	bl	8006e98 <memp_free>
 8007c2c:	e015      	b.n	8007c5a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007c2e:	7bfb      	ldrb	r3, [r7, #15]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d104      	bne.n	8007c3e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8007c34:	6879      	ldr	r1, [r7, #4]
 8007c36:	2007      	movs	r0, #7
 8007c38:	f7ff f92e 	bl	8006e98 <memp_free>
 8007c3c:	e00d      	b.n	8007c5a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007c3e:	7bfb      	ldrb	r3, [r7, #15]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d103      	bne.n	8007c4c <pbuf_free+0xc8>
          mem_free(p);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f7fe fdc1 	bl	80067cc <mem_free>
 8007c4a:	e006      	b.n	8007c5a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007c4c:	4b0b      	ldr	r3, [pc, #44]	; (8007c7c <pbuf_free+0xf8>)
 8007c4e:	f240 320f 	movw	r2, #783	; 0x30f
 8007c52:	490f      	ldr	r1, [pc, #60]	; (8007c90 <pbuf_free+0x10c>)
 8007c54:	480b      	ldr	r0, [pc, #44]	; (8007c84 <pbuf_free+0x100>)
 8007c56:	f008 fd71 	bl	801073c <iprintf>
        }
      }
      count++;
 8007c5a:	7dfb      	ldrb	r3, [r7, #23]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	607b      	str	r3, [r7, #4]
 8007c64:	e001      	b.n	8007c6a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007c66:	2300      	movs	r3, #0
 8007c68:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d19f      	bne.n	8007bb0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3718      	adds	r7, #24
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	08012134 	.word	0x08012134
 8007c80:	08012298 	.word	0x08012298
 8007c84:	08012194 	.word	0x08012194
 8007c88:	080122c4 	.word	0x080122c4
 8007c8c:	080122dc 	.word	0x080122dc
 8007c90:	08012300 	.word	0x08012300

08007c94 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007ca0:	e005      	b.n	8007cae <pbuf_clen+0x1a>
    ++len;
 8007ca2:	89fb      	ldrh	r3, [r7, #14]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1f6      	bne.n	8007ca2 <pbuf_clen+0xe>
  }
  return len;
 8007cb4:	89fb      	ldrh	r3, [r7, #14]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3714      	adds	r7, #20
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
	...

08007cc4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d010      	beq.n	8007cf4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	7b9b      	ldrb	r3, [r3, #14]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	b2da      	uxtb	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	7b9b      	ldrb	r3, [r3, #14]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d106      	bne.n	8007cf4 <pbuf_ref+0x30>
 8007ce6:	4b05      	ldr	r3, [pc, #20]	; (8007cfc <pbuf_ref+0x38>)
 8007ce8:	f240 3242 	movw	r2, #834	; 0x342
 8007cec:	4904      	ldr	r1, [pc, #16]	; (8007d00 <pbuf_ref+0x3c>)
 8007cee:	4805      	ldr	r0, [pc, #20]	; (8007d04 <pbuf_ref+0x40>)
 8007cf0:	f008 fd24 	bl	801073c <iprintf>
  }
}
 8007cf4:	bf00      	nop
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	08012134 	.word	0x08012134
 8007d00:	08012314 	.word	0x08012314
 8007d04:	08012194 	.word	0x08012194

08007d08 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d002      	beq.n	8007d1e <pbuf_cat+0x16>
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d107      	bne.n	8007d2e <pbuf_cat+0x26>
 8007d1e:	4b20      	ldr	r3, [pc, #128]	; (8007da0 <pbuf_cat+0x98>)
 8007d20:	f240 3259 	movw	r2, #857	; 0x359
 8007d24:	491f      	ldr	r1, [pc, #124]	; (8007da4 <pbuf_cat+0x9c>)
 8007d26:	4820      	ldr	r0, [pc, #128]	; (8007da8 <pbuf_cat+0xa0>)
 8007d28:	f008 fd08 	bl	801073c <iprintf>
 8007d2c:	e034      	b.n	8007d98 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	60fb      	str	r3, [r7, #12]
 8007d32:	e00a      	b.n	8007d4a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	891a      	ldrh	r2, [r3, #8]
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	891b      	ldrh	r3, [r3, #8]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	60fb      	str	r3, [r7, #12]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1f0      	bne.n	8007d34 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	891a      	ldrh	r2, [r3, #8]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	895b      	ldrh	r3, [r3, #10]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d006      	beq.n	8007d6c <pbuf_cat+0x64>
 8007d5e:	4b10      	ldr	r3, [pc, #64]	; (8007da0 <pbuf_cat+0x98>)
 8007d60:	f240 3262 	movw	r2, #866	; 0x362
 8007d64:	4911      	ldr	r1, [pc, #68]	; (8007dac <pbuf_cat+0xa4>)
 8007d66:	4810      	ldr	r0, [pc, #64]	; (8007da8 <pbuf_cat+0xa0>)
 8007d68:	f008 fce8 	bl	801073c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d006      	beq.n	8007d82 <pbuf_cat+0x7a>
 8007d74:	4b0a      	ldr	r3, [pc, #40]	; (8007da0 <pbuf_cat+0x98>)
 8007d76:	f240 3263 	movw	r2, #867	; 0x363
 8007d7a:	490d      	ldr	r1, [pc, #52]	; (8007db0 <pbuf_cat+0xa8>)
 8007d7c:	480a      	ldr	r0, [pc, #40]	; (8007da8 <pbuf_cat+0xa0>)
 8007d7e:	f008 fcdd 	bl	801073c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	891a      	ldrh	r2, [r3, #8]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	891b      	ldrh	r3, [r3, #8]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	08012134 	.word	0x08012134
 8007da4:	08012328 	.word	0x08012328
 8007da8:	08012194 	.word	0x08012194
 8007dac:	08012360 	.word	0x08012360
 8007db0:	08012390 	.word	0x08012390

08007db4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8007dbe:	6839      	ldr	r1, [r7, #0]
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f7ff ffa1 	bl	8007d08 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8007dc6:	6838      	ldr	r0, [r7, #0]
 8007dc8:	f7ff ff7c 	bl	8007cc4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8007dcc:	bf00      	nop
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007dde:	2300      	movs	r3, #0
 8007de0:	617b      	str	r3, [r7, #20]
 8007de2:	2300      	movs	r3, #0
 8007de4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d008      	beq.n	8007dfe <pbuf_copy+0x2a>
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d005      	beq.n	8007dfe <pbuf_copy+0x2a>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	891a      	ldrh	r2, [r3, #8]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	891b      	ldrh	r3, [r3, #8]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d209      	bcs.n	8007e12 <pbuf_copy+0x3e>
 8007dfe:	4b57      	ldr	r3, [pc, #348]	; (8007f5c <pbuf_copy+0x188>)
 8007e00:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007e04:	4956      	ldr	r1, [pc, #344]	; (8007f60 <pbuf_copy+0x18c>)
 8007e06:	4857      	ldr	r0, [pc, #348]	; (8007f64 <pbuf_copy+0x190>)
 8007e08:	f008 fc98 	bl	801073c <iprintf>
 8007e0c:	f06f 030f 	mvn.w	r3, #15
 8007e10:	e09f      	b.n	8007f52 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	895b      	ldrh	r3, [r3, #10]
 8007e16:	461a      	mov	r2, r3
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	1ad2      	subs	r2, r2, r3
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	895b      	ldrh	r3, [r3, #10]
 8007e20:	4619      	mov	r1, r3
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	1acb      	subs	r3, r1, r3
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d306      	bcc.n	8007e38 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	895b      	ldrh	r3, [r3, #10]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	60fb      	str	r3, [r7, #12]
 8007e36:	e005      	b.n	8007e44 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	895b      	ldrh	r3, [r3, #10]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685a      	ldr	r2, [r3, #4]
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	18d0      	adds	r0, r2, r3
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	685a      	ldr	r2, [r3, #4]
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	4413      	add	r3, r2
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	4619      	mov	r1, r3
 8007e58:	f008 fe89 	bl	8010b6e <memcpy>
    offset_to += len;
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	4413      	add	r3, r2
 8007e62:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	4413      	add	r3, r2
 8007e6a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	895b      	ldrh	r3, [r3, #10]
 8007e70:	461a      	mov	r2, r3
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d906      	bls.n	8007e86 <pbuf_copy+0xb2>
 8007e78:	4b38      	ldr	r3, [pc, #224]	; (8007f5c <pbuf_copy+0x188>)
 8007e7a:	f240 32d9 	movw	r2, #985	; 0x3d9
 8007e7e:	493a      	ldr	r1, [pc, #232]	; (8007f68 <pbuf_copy+0x194>)
 8007e80:	4838      	ldr	r0, [pc, #224]	; (8007f64 <pbuf_copy+0x190>)
 8007e82:	f008 fc5b 	bl	801073c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	895b      	ldrh	r3, [r3, #10]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d906      	bls.n	8007ea0 <pbuf_copy+0xcc>
 8007e92:	4b32      	ldr	r3, [pc, #200]	; (8007f5c <pbuf_copy+0x188>)
 8007e94:	f240 32da 	movw	r2, #986	; 0x3da
 8007e98:	4934      	ldr	r1, [pc, #208]	; (8007f6c <pbuf_copy+0x198>)
 8007e9a:	4832      	ldr	r0, [pc, #200]	; (8007f64 <pbuf_copy+0x190>)
 8007e9c:	f008 fc4e 	bl	801073c <iprintf>
    if (offset_from >= p_from->len) {
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	895b      	ldrh	r3, [r3, #10]
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d304      	bcc.n	8007eb6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	895b      	ldrh	r3, [r3, #10]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d114      	bne.n	8007eec <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d10c      	bne.n	8007eec <pbuf_copy+0x118>
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d009      	beq.n	8007eec <pbuf_copy+0x118>
 8007ed8:	4b20      	ldr	r3, [pc, #128]	; (8007f5c <pbuf_copy+0x188>)
 8007eda:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8007ede:	4924      	ldr	r1, [pc, #144]	; (8007f70 <pbuf_copy+0x19c>)
 8007ee0:	4820      	ldr	r0, [pc, #128]	; (8007f64 <pbuf_copy+0x190>)
 8007ee2:	f008 fc2b 	bl	801073c <iprintf>
 8007ee6:	f06f 030f 	mvn.w	r3, #15
 8007eea:	e032      	b.n	8007f52 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d013      	beq.n	8007f1a <pbuf_copy+0x146>
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	895a      	ldrh	r2, [r3, #10]
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	891b      	ldrh	r3, [r3, #8]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d10d      	bne.n	8007f1a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d009      	beq.n	8007f1a <pbuf_copy+0x146>
 8007f06:	4b15      	ldr	r3, [pc, #84]	; (8007f5c <pbuf_copy+0x188>)
 8007f08:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8007f0c:	4919      	ldr	r1, [pc, #100]	; (8007f74 <pbuf_copy+0x1a0>)
 8007f0e:	4815      	ldr	r0, [pc, #84]	; (8007f64 <pbuf_copy+0x190>)
 8007f10:	f008 fc14 	bl	801073c <iprintf>
 8007f14:	f06f 0305 	mvn.w	r3, #5
 8007f18:	e01b      	b.n	8007f52 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d013      	beq.n	8007f48 <pbuf_copy+0x174>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	895a      	ldrh	r2, [r3, #10]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	891b      	ldrh	r3, [r3, #8]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d10d      	bne.n	8007f48 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d009      	beq.n	8007f48 <pbuf_copy+0x174>
 8007f34:	4b09      	ldr	r3, [pc, #36]	; (8007f5c <pbuf_copy+0x188>)
 8007f36:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8007f3a:	490e      	ldr	r1, [pc, #56]	; (8007f74 <pbuf_copy+0x1a0>)
 8007f3c:	4809      	ldr	r0, [pc, #36]	; (8007f64 <pbuf_copy+0x190>)
 8007f3e:	f008 fbfd 	bl	801073c <iprintf>
 8007f42:	f06f 0305 	mvn.w	r3, #5
 8007f46:	e004      	b.n	8007f52 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f47f af61 	bne.w	8007e12 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3718      	adds	r7, #24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	08012134 	.word	0x08012134
 8007f60:	080123dc 	.word	0x080123dc
 8007f64:	08012194 	.word	0x08012194
 8007f68:	0801240c 	.word	0x0801240c
 8007f6c:	08012424 	.word	0x08012424
 8007f70:	08012440 	.word	0x08012440
 8007f74:	08012450 	.word	0x08012450

08007f78 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b088      	sub	sp, #32
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	4611      	mov	r1, r2
 8007f84:	461a      	mov	r2, r3
 8007f86:	460b      	mov	r3, r1
 8007f88:	80fb      	strh	r3, [r7, #6]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007f92:	2300      	movs	r3, #0
 8007f94:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d108      	bne.n	8007fae <pbuf_copy_partial+0x36>
 8007f9c:	4b2b      	ldr	r3, [pc, #172]	; (800804c <pbuf_copy_partial+0xd4>)
 8007f9e:	f240 420a 	movw	r2, #1034	; 0x40a
 8007fa2:	492b      	ldr	r1, [pc, #172]	; (8008050 <pbuf_copy_partial+0xd8>)
 8007fa4:	482b      	ldr	r0, [pc, #172]	; (8008054 <pbuf_copy_partial+0xdc>)
 8007fa6:	f008 fbc9 	bl	801073c <iprintf>
 8007faa:	2300      	movs	r3, #0
 8007fac:	e04a      	b.n	8008044 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d108      	bne.n	8007fc6 <pbuf_copy_partial+0x4e>
 8007fb4:	4b25      	ldr	r3, [pc, #148]	; (800804c <pbuf_copy_partial+0xd4>)
 8007fb6:	f240 420b 	movw	r2, #1035	; 0x40b
 8007fba:	4927      	ldr	r1, [pc, #156]	; (8008058 <pbuf_copy_partial+0xe0>)
 8007fbc:	4825      	ldr	r0, [pc, #148]	; (8008054 <pbuf_copy_partial+0xdc>)
 8007fbe:	f008 fbbd 	bl	801073c <iprintf>
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	e03e      	b.n	8008044 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	61fb      	str	r3, [r7, #28]
 8007fca:	e034      	b.n	8008036 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007fcc:	88bb      	ldrh	r3, [r7, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00a      	beq.n	8007fe8 <pbuf_copy_partial+0x70>
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	895b      	ldrh	r3, [r3, #10]
 8007fd6:	88ba      	ldrh	r2, [r7, #4]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d305      	bcc.n	8007fe8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	895b      	ldrh	r3, [r3, #10]
 8007fe0:	88ba      	ldrh	r2, [r7, #4]
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	80bb      	strh	r3, [r7, #4]
 8007fe6:	e023      	b.n	8008030 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	895a      	ldrh	r2, [r3, #10]
 8007fec:	88bb      	ldrh	r3, [r7, #4]
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007ff2:	8b3a      	ldrh	r2, [r7, #24]
 8007ff4:	88fb      	ldrh	r3, [r7, #6]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d901      	bls.n	8007ffe <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007ffa:	88fb      	ldrh	r3, [r7, #6]
 8007ffc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007ffe:	8b7b      	ldrh	r3, [r7, #26]
 8008000:	68ba      	ldr	r2, [r7, #8]
 8008002:	18d0      	adds	r0, r2, r3
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	685a      	ldr	r2, [r3, #4]
 8008008:	88bb      	ldrh	r3, [r7, #4]
 800800a:	4413      	add	r3, r2
 800800c:	8b3a      	ldrh	r2, [r7, #24]
 800800e:	4619      	mov	r1, r3
 8008010:	f008 fdad 	bl	8010b6e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008014:	8afa      	ldrh	r2, [r7, #22]
 8008016:	8b3b      	ldrh	r3, [r7, #24]
 8008018:	4413      	add	r3, r2
 800801a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800801c:	8b7a      	ldrh	r2, [r7, #26]
 800801e:	8b3b      	ldrh	r3, [r7, #24]
 8008020:	4413      	add	r3, r2
 8008022:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008024:	88fa      	ldrh	r2, [r7, #6]
 8008026:	8b3b      	ldrh	r3, [r7, #24]
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800802c:	2300      	movs	r3, #0
 800802e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	61fb      	str	r3, [r7, #28]
 8008036:	88fb      	ldrh	r3, [r7, #6]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d002      	beq.n	8008042 <pbuf_copy_partial+0xca>
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1c4      	bne.n	8007fcc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008042:	8afb      	ldrh	r3, [r7, #22]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3720      	adds	r7, #32
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	08012134 	.word	0x08012134
 8008050:	0801247c 	.word	0x0801247c
 8008054:	08012194 	.word	0x08012194
 8008058:	0801249c 	.word	0x0801249c

0800805c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	4603      	mov	r3, r0
 8008064:	603a      	str	r2, [r7, #0]
 8008066:	71fb      	strb	r3, [r7, #7]
 8008068:	460b      	mov	r3, r1
 800806a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	8919      	ldrh	r1, [r3, #8]
 8008070:	88ba      	ldrh	r2, [r7, #4]
 8008072:	79fb      	ldrb	r3, [r7, #7]
 8008074:	4618      	mov	r0, r3
 8008076:	f7ff faa1 	bl	80075bc <pbuf_alloc>
 800807a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d101      	bne.n	8008086 <pbuf_clone+0x2a>
    return NULL;
 8008082:	2300      	movs	r3, #0
 8008084:	e011      	b.n	80080aa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	f7ff fea3 	bl	8007dd4 <pbuf_copy>
 800808e:	4603      	mov	r3, r0
 8008090:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008092:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d006      	beq.n	80080a8 <pbuf_clone+0x4c>
 800809a:	4b06      	ldr	r3, [pc, #24]	; (80080b4 <pbuf_clone+0x58>)
 800809c:	f240 5224 	movw	r2, #1316	; 0x524
 80080a0:	4905      	ldr	r1, [pc, #20]	; (80080b8 <pbuf_clone+0x5c>)
 80080a2:	4806      	ldr	r0, [pc, #24]	; (80080bc <pbuf_clone+0x60>)
 80080a4:	f008 fb4a 	bl	801073c <iprintf>
  return q;
 80080a8:	68fb      	ldr	r3, [r7, #12]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	08012134 	.word	0x08012134
 80080b8:	080125a8 	.word	0x080125a8
 80080bc:	08012194 	.word	0x08012194

080080c0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80080c4:	f008 fa3a 	bl	801053c <rand>
 80080c8:	4603      	mov	r3, r0
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80080d6:	b29a      	uxth	r2, r3
 80080d8:	4b01      	ldr	r3, [pc, #4]	; (80080e0 <tcp_init+0x20>)
 80080da:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80080dc:	bf00      	nop
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	20000020 	.word	0x20000020

080080e4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	7d1b      	ldrb	r3, [r3, #20]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d105      	bne.n	8008100 <tcp_free+0x1c>
 80080f4:	4b06      	ldr	r3, [pc, #24]	; (8008110 <tcp_free+0x2c>)
 80080f6:	22d4      	movs	r2, #212	; 0xd4
 80080f8:	4906      	ldr	r1, [pc, #24]	; (8008114 <tcp_free+0x30>)
 80080fa:	4807      	ldr	r0, [pc, #28]	; (8008118 <tcp_free+0x34>)
 80080fc:	f008 fb1e 	bl	801073c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008100:	6879      	ldr	r1, [r7, #4]
 8008102:	2001      	movs	r0, #1
 8008104:	f7fe fec8 	bl	8006e98 <memp_free>
}
 8008108:	bf00      	nop
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	08012634 	.word	0x08012634
 8008114:	08012664 	.word	0x08012664
 8008118:	08012678 	.word	0x08012678

0800811c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	7d1b      	ldrb	r3, [r3, #20]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d105      	bne.n	8008138 <tcp_free_listen+0x1c>
 800812c:	4b06      	ldr	r3, [pc, #24]	; (8008148 <tcp_free_listen+0x2c>)
 800812e:	22df      	movs	r2, #223	; 0xdf
 8008130:	4906      	ldr	r1, [pc, #24]	; (800814c <tcp_free_listen+0x30>)
 8008132:	4807      	ldr	r0, [pc, #28]	; (8008150 <tcp_free_listen+0x34>)
 8008134:	f008 fb02 	bl	801073c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008138:	6879      	ldr	r1, [r7, #4]
 800813a:	2002      	movs	r0, #2
 800813c:	f7fe feac 	bl	8006e98 <memp_free>
}
 8008140:	bf00      	nop
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	08012634 	.word	0x08012634
 800814c:	080126a0 	.word	0x080126a0
 8008150:	08012678 	.word	0x08012678

08008154 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008158:	f000 fea2 	bl	8008ea0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800815c:	4b07      	ldr	r3, [pc, #28]	; (800817c <tcp_tmr+0x28>)
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	3301      	adds	r3, #1
 8008162:	b2da      	uxtb	r2, r3
 8008164:	4b05      	ldr	r3, [pc, #20]	; (800817c <tcp_tmr+0x28>)
 8008166:	701a      	strb	r2, [r3, #0]
 8008168:	4b04      	ldr	r3, [pc, #16]	; (800817c <tcp_tmr+0x28>)
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	f003 0301 	and.w	r3, r3, #1
 8008170:	2b00      	cmp	r3, #0
 8008172:	d001      	beq.n	8008178 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008174:	f000 fb54 	bl	8008820 <tcp_slowtmr>
  }
}
 8008178:	bf00      	nop
 800817a:	bd80      	pop	{r7, pc}
 800817c:	200089d5 	.word	0x200089d5

08008180 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d105      	bne.n	800819c <tcp_remove_listener+0x1c>
 8008190:	4b0d      	ldr	r3, [pc, #52]	; (80081c8 <tcp_remove_listener+0x48>)
 8008192:	22ff      	movs	r2, #255	; 0xff
 8008194:	490d      	ldr	r1, [pc, #52]	; (80081cc <tcp_remove_listener+0x4c>)
 8008196:	480e      	ldr	r0, [pc, #56]	; (80081d0 <tcp_remove_listener+0x50>)
 8008198:	f008 fad0 	bl	801073c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	60fb      	str	r3, [r7, #12]
 80081a0:	e00a      	b.n	80081b8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081a6:	683a      	ldr	r2, [r7, #0]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d102      	bne.n	80081b2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	60fb      	str	r3, [r7, #12]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1f1      	bne.n	80081a2 <tcp_remove_listener+0x22>
    }
  }
}
 80081be:	bf00      	nop
 80081c0:	bf00      	nop
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	08012634 	.word	0x08012634
 80081cc:	080126bc 	.word	0x080126bc
 80081d0:	08012678 	.word	0x08012678

080081d4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d106      	bne.n	80081f0 <tcp_listen_closed+0x1c>
 80081e2:	4b14      	ldr	r3, [pc, #80]	; (8008234 <tcp_listen_closed+0x60>)
 80081e4:	f240 1211 	movw	r2, #273	; 0x111
 80081e8:	4913      	ldr	r1, [pc, #76]	; (8008238 <tcp_listen_closed+0x64>)
 80081ea:	4814      	ldr	r0, [pc, #80]	; (800823c <tcp_listen_closed+0x68>)
 80081ec:	f008 faa6 	bl	801073c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	7d1b      	ldrb	r3, [r3, #20]
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d006      	beq.n	8008206 <tcp_listen_closed+0x32>
 80081f8:	4b0e      	ldr	r3, [pc, #56]	; (8008234 <tcp_listen_closed+0x60>)
 80081fa:	f44f 7289 	mov.w	r2, #274	; 0x112
 80081fe:	4910      	ldr	r1, [pc, #64]	; (8008240 <tcp_listen_closed+0x6c>)
 8008200:	480e      	ldr	r0, [pc, #56]	; (800823c <tcp_listen_closed+0x68>)
 8008202:	f008 fa9b 	bl	801073c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008206:	2301      	movs	r3, #1
 8008208:	60fb      	str	r3, [r7, #12]
 800820a:	e00b      	b.n	8008224 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800820c:	4a0d      	ldr	r2, [pc, #52]	; (8008244 <tcp_listen_closed+0x70>)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	6879      	ldr	r1, [r7, #4]
 8008218:	4618      	mov	r0, r3
 800821a:	f7ff ffb1 	bl	8008180 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	3301      	adds	r3, #1
 8008222:	60fb      	str	r3, [r7, #12]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2b03      	cmp	r3, #3
 8008228:	d9f0      	bls.n	800820c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800822a:	bf00      	nop
 800822c:	bf00      	nop
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	08012634 	.word	0x08012634
 8008238:	080126e4 	.word	0x080126e4
 800823c:	08012678 	.word	0x08012678
 8008240:	080126f0 	.word	0x080126f0
 8008244:	08014614 	.word	0x08014614

08008248 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008248:	b5b0      	push	{r4, r5, r7, lr}
 800824a:	b088      	sub	sp, #32
 800824c:	af04      	add	r7, sp, #16
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	460b      	mov	r3, r1
 8008252:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d106      	bne.n	8008268 <tcp_close_shutdown+0x20>
 800825a:	4b63      	ldr	r3, [pc, #396]	; (80083e8 <tcp_close_shutdown+0x1a0>)
 800825c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008260:	4962      	ldr	r1, [pc, #392]	; (80083ec <tcp_close_shutdown+0x1a4>)
 8008262:	4863      	ldr	r0, [pc, #396]	; (80083f0 <tcp_close_shutdown+0x1a8>)
 8008264:	f008 fa6a 	bl	801073c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008268:	78fb      	ldrb	r3, [r7, #3]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d066      	beq.n	800833c <tcp_close_shutdown+0xf4>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	7d1b      	ldrb	r3, [r3, #20]
 8008272:	2b04      	cmp	r3, #4
 8008274:	d003      	beq.n	800827e <tcp_close_shutdown+0x36>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	7d1b      	ldrb	r3, [r3, #20]
 800827a:	2b07      	cmp	r3, #7
 800827c:	d15e      	bne.n	800833c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008282:	2b00      	cmp	r3, #0
 8008284:	d104      	bne.n	8008290 <tcp_close_shutdown+0x48>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800828a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800828e:	d055      	beq.n	800833c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	8b5b      	ldrh	r3, [r3, #26]
 8008294:	f003 0310 	and.w	r3, r3, #16
 8008298:	2b00      	cmp	r3, #0
 800829a:	d106      	bne.n	80082aa <tcp_close_shutdown+0x62>
 800829c:	4b52      	ldr	r3, [pc, #328]	; (80083e8 <tcp_close_shutdown+0x1a0>)
 800829e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80082a2:	4954      	ldr	r1, [pc, #336]	; (80083f4 <tcp_close_shutdown+0x1ac>)
 80082a4:	4852      	ldr	r0, [pc, #328]	; (80083f0 <tcp_close_shutdown+0x1a8>)
 80082a6:	f008 fa49 	bl	801073c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80082b2:	687d      	ldr	r5, [r7, #4]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	3304      	adds	r3, #4
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	8ad2      	ldrh	r2, [r2, #22]
 80082bc:	6879      	ldr	r1, [r7, #4]
 80082be:	8b09      	ldrh	r1, [r1, #24]
 80082c0:	9102      	str	r1, [sp, #8]
 80082c2:	9201      	str	r2, [sp, #4]
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	462b      	mov	r3, r5
 80082c8:	4622      	mov	r2, r4
 80082ca:	4601      	mov	r1, r0
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f004 fe91 	bl	800cff4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f001 f8c6 	bl	8009464 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80082d8:	4b47      	ldr	r3, [pc, #284]	; (80083f8 <tcp_close_shutdown+0x1b0>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d105      	bne.n	80082ee <tcp_close_shutdown+0xa6>
 80082e2:	4b45      	ldr	r3, [pc, #276]	; (80083f8 <tcp_close_shutdown+0x1b0>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	4a43      	ldr	r2, [pc, #268]	; (80083f8 <tcp_close_shutdown+0x1b0>)
 80082ea:	6013      	str	r3, [r2, #0]
 80082ec:	e013      	b.n	8008316 <tcp_close_shutdown+0xce>
 80082ee:	4b42      	ldr	r3, [pc, #264]	; (80083f8 <tcp_close_shutdown+0x1b0>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	60fb      	str	r3, [r7, #12]
 80082f4:	e00c      	b.n	8008310 <tcp_close_shutdown+0xc8>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d104      	bne.n	800830a <tcp_close_shutdown+0xc2>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	68da      	ldr	r2, [r3, #12]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	60da      	str	r2, [r3, #12]
 8008308:	e005      	b.n	8008316 <tcp_close_shutdown+0xce>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	60fb      	str	r3, [r7, #12]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1ef      	bne.n	80082f6 <tcp_close_shutdown+0xae>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	60da      	str	r2, [r3, #12]
 800831c:	4b37      	ldr	r3, [pc, #220]	; (80083fc <tcp_close_shutdown+0x1b4>)
 800831e:	2201      	movs	r2, #1
 8008320:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008322:	4b37      	ldr	r3, [pc, #220]	; (8008400 <tcp_close_shutdown+0x1b8>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	429a      	cmp	r2, r3
 800832a:	d102      	bne.n	8008332 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800832c:	f003 fd5e 	bl	800bdec <tcp_trigger_input_pcb_close>
 8008330:	e002      	b.n	8008338 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f7ff fed6 	bl	80080e4 <tcp_free>
      }
      return ERR_OK;
 8008338:	2300      	movs	r3, #0
 800833a:	e050      	b.n	80083de <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	7d1b      	ldrb	r3, [r3, #20]
 8008340:	2b02      	cmp	r3, #2
 8008342:	d03b      	beq.n	80083bc <tcp_close_shutdown+0x174>
 8008344:	2b02      	cmp	r3, #2
 8008346:	dc44      	bgt.n	80083d2 <tcp_close_shutdown+0x18a>
 8008348:	2b00      	cmp	r3, #0
 800834a:	d002      	beq.n	8008352 <tcp_close_shutdown+0x10a>
 800834c:	2b01      	cmp	r3, #1
 800834e:	d02a      	beq.n	80083a6 <tcp_close_shutdown+0x15e>
 8008350:	e03f      	b.n	80083d2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	8adb      	ldrh	r3, [r3, #22]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d021      	beq.n	800839e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800835a:	4b2a      	ldr	r3, [pc, #168]	; (8008404 <tcp_close_shutdown+0x1bc>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	429a      	cmp	r2, r3
 8008362:	d105      	bne.n	8008370 <tcp_close_shutdown+0x128>
 8008364:	4b27      	ldr	r3, [pc, #156]	; (8008404 <tcp_close_shutdown+0x1bc>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	4a26      	ldr	r2, [pc, #152]	; (8008404 <tcp_close_shutdown+0x1bc>)
 800836c:	6013      	str	r3, [r2, #0]
 800836e:	e013      	b.n	8008398 <tcp_close_shutdown+0x150>
 8008370:	4b24      	ldr	r3, [pc, #144]	; (8008404 <tcp_close_shutdown+0x1bc>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	60bb      	str	r3, [r7, #8]
 8008376:	e00c      	b.n	8008392 <tcp_close_shutdown+0x14a>
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	429a      	cmp	r2, r3
 8008380:	d104      	bne.n	800838c <tcp_close_shutdown+0x144>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	68da      	ldr	r2, [r3, #12]
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	60da      	str	r2, [r3, #12]
 800838a:	e005      	b.n	8008398 <tcp_close_shutdown+0x150>
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	60bb      	str	r3, [r7, #8]
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1ef      	bne.n	8008378 <tcp_close_shutdown+0x130>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f7ff fea0 	bl	80080e4 <tcp_free>
      break;
 80083a4:	e01a      	b.n	80083dc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f7ff ff14 	bl	80081d4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80083ac:	6879      	ldr	r1, [r7, #4]
 80083ae:	4816      	ldr	r0, [pc, #88]	; (8008408 <tcp_close_shutdown+0x1c0>)
 80083b0:	f001 f8a8 	bl	8009504 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f7ff feb1 	bl	800811c <tcp_free_listen>
      break;
 80083ba:	e00f      	b.n	80083dc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80083bc:	6879      	ldr	r1, [r7, #4]
 80083be:	480e      	ldr	r0, [pc, #56]	; (80083f8 <tcp_close_shutdown+0x1b0>)
 80083c0:	f001 f8a0 	bl	8009504 <tcp_pcb_remove>
 80083c4:	4b0d      	ldr	r3, [pc, #52]	; (80083fc <tcp_close_shutdown+0x1b4>)
 80083c6:	2201      	movs	r2, #1
 80083c8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f7ff fe8a 	bl	80080e4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80083d0:	e004      	b.n	80083dc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f81a 	bl	800840c <tcp_close_shutdown_fin>
 80083d8:	4603      	mov	r3, r0
 80083da:	e000      	b.n	80083de <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bdb0      	pop	{r4, r5, r7, pc}
 80083e6:	bf00      	nop
 80083e8:	08012634 	.word	0x08012634
 80083ec:	08012708 	.word	0x08012708
 80083f0:	08012678 	.word	0x08012678
 80083f4:	08012728 	.word	0x08012728
 80083f8:	200089cc 	.word	0x200089cc
 80083fc:	200089d4 	.word	0x200089d4
 8008400:	20008a0c 	.word	0x20008a0c
 8008404:	200089c4 	.word	0x200089c4
 8008408:	200089c8 	.word	0x200089c8

0800840c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d106      	bne.n	8008428 <tcp_close_shutdown_fin+0x1c>
 800841a:	4b2e      	ldr	r3, [pc, #184]	; (80084d4 <tcp_close_shutdown_fin+0xc8>)
 800841c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8008420:	492d      	ldr	r1, [pc, #180]	; (80084d8 <tcp_close_shutdown_fin+0xcc>)
 8008422:	482e      	ldr	r0, [pc, #184]	; (80084dc <tcp_close_shutdown_fin+0xd0>)
 8008424:	f008 f98a 	bl	801073c <iprintf>

  switch (pcb->state) {
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	7d1b      	ldrb	r3, [r3, #20]
 800842c:	2b07      	cmp	r3, #7
 800842e:	d020      	beq.n	8008472 <tcp_close_shutdown_fin+0x66>
 8008430:	2b07      	cmp	r3, #7
 8008432:	dc2b      	bgt.n	800848c <tcp_close_shutdown_fin+0x80>
 8008434:	2b03      	cmp	r3, #3
 8008436:	d002      	beq.n	800843e <tcp_close_shutdown_fin+0x32>
 8008438:	2b04      	cmp	r3, #4
 800843a:	d00d      	beq.n	8008458 <tcp_close_shutdown_fin+0x4c>
 800843c:	e026      	b.n	800848c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f003 fee6 	bl	800c210 <tcp_send_fin>
 8008444:	4603      	mov	r3, r0
 8008446:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008448:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d11f      	bne.n	8008490 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2205      	movs	r2, #5
 8008454:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008456:	e01b      	b.n	8008490 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f003 fed9 	bl	800c210 <tcp_send_fin>
 800845e:	4603      	mov	r3, r0
 8008460:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d114      	bne.n	8008494 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2205      	movs	r2, #5
 800846e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008470:	e010      	b.n	8008494 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f003 fecc 	bl	800c210 <tcp_send_fin>
 8008478:	4603      	mov	r3, r0
 800847a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800847c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d109      	bne.n	8008498 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2209      	movs	r2, #9
 8008488:	751a      	strb	r2, [r3, #20]
      }
      break;
 800848a:	e005      	b.n	8008498 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	e01c      	b.n	80084ca <tcp_close_shutdown_fin+0xbe>
      break;
 8008490:	bf00      	nop
 8008492:	e002      	b.n	800849a <tcp_close_shutdown_fin+0x8e>
      break;
 8008494:	bf00      	nop
 8008496:	e000      	b.n	800849a <tcp_close_shutdown_fin+0x8e>
      break;
 8008498:	bf00      	nop
  }

  if (err == ERR_OK) {
 800849a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d103      	bne.n	80084aa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f003 fff2 	bl	800c48c <tcp_output>
 80084a8:	e00d      	b.n	80084c6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80084aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b2:	d108      	bne.n	80084c6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	8b5b      	ldrh	r3, [r3, #26]
 80084b8:	f043 0308 	orr.w	r3, r3, #8
 80084bc:	b29a      	uxth	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	e001      	b.n	80084ca <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80084c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	08012634 	.word	0x08012634
 80084d8:	080126e4 	.word	0x080126e4
 80084dc:	08012678 	.word	0x08012678

080084e0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d109      	bne.n	8008502 <tcp_close+0x22>
 80084ee:	4b0f      	ldr	r3, [pc, #60]	; (800852c <tcp_close+0x4c>)
 80084f0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80084f4:	490e      	ldr	r1, [pc, #56]	; (8008530 <tcp_close+0x50>)
 80084f6:	480f      	ldr	r0, [pc, #60]	; (8008534 <tcp_close+0x54>)
 80084f8:	f008 f920 	bl	801073c <iprintf>
 80084fc:	f06f 030f 	mvn.w	r3, #15
 8008500:	e00f      	b.n	8008522 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	7d1b      	ldrb	r3, [r3, #20]
 8008506:	2b01      	cmp	r3, #1
 8008508:	d006      	beq.n	8008518 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	8b5b      	ldrh	r3, [r3, #26]
 800850e:	f043 0310 	orr.w	r3, r3, #16
 8008512:	b29a      	uxth	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008518:	2101      	movs	r1, #1
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f7ff fe94 	bl	8008248 <tcp_close_shutdown>
 8008520:	4603      	mov	r3, r0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	08012634 	.word	0x08012634
 8008530:	08012744 	.word	0x08012744
 8008534:	08012678 	.word	0x08012678

08008538 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b08e      	sub	sp, #56	; 0x38
 800853c:	af04      	add	r7, sp, #16
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d107      	bne.n	8008558 <tcp_abandon+0x20>
 8008548:	4b52      	ldr	r3, [pc, #328]	; (8008694 <tcp_abandon+0x15c>)
 800854a:	f240 223d 	movw	r2, #573	; 0x23d
 800854e:	4952      	ldr	r1, [pc, #328]	; (8008698 <tcp_abandon+0x160>)
 8008550:	4852      	ldr	r0, [pc, #328]	; (800869c <tcp_abandon+0x164>)
 8008552:	f008 f8f3 	bl	801073c <iprintf>
 8008556:	e099      	b.n	800868c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	7d1b      	ldrb	r3, [r3, #20]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d106      	bne.n	800856e <tcp_abandon+0x36>
 8008560:	4b4c      	ldr	r3, [pc, #304]	; (8008694 <tcp_abandon+0x15c>)
 8008562:	f44f 7210 	mov.w	r2, #576	; 0x240
 8008566:	494e      	ldr	r1, [pc, #312]	; (80086a0 <tcp_abandon+0x168>)
 8008568:	484c      	ldr	r0, [pc, #304]	; (800869c <tcp_abandon+0x164>)
 800856a:	f008 f8e7 	bl	801073c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	7d1b      	ldrb	r3, [r3, #20]
 8008572:	2b0a      	cmp	r3, #10
 8008574:	d107      	bne.n	8008586 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008576:	6879      	ldr	r1, [r7, #4]
 8008578:	484a      	ldr	r0, [pc, #296]	; (80086a4 <tcp_abandon+0x16c>)
 800857a:	f000 ffc3 	bl	8009504 <tcp_pcb_remove>
    tcp_free(pcb);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f7ff fdb0 	bl	80080e4 <tcp_free>
 8008584:	e082      	b.n	800868c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8008586:	2300      	movs	r3, #0
 8008588:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800858a:	2300      	movs	r3, #0
 800858c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008592:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008598:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085a0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	7d1b      	ldrb	r3, [r3, #20]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d126      	bne.n	80085fe <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	8adb      	ldrh	r3, [r3, #22]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d02e      	beq.n	8008616 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80085b8:	4b3b      	ldr	r3, [pc, #236]	; (80086a8 <tcp_abandon+0x170>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d105      	bne.n	80085ce <tcp_abandon+0x96>
 80085c2:	4b39      	ldr	r3, [pc, #228]	; (80086a8 <tcp_abandon+0x170>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	4a37      	ldr	r2, [pc, #220]	; (80086a8 <tcp_abandon+0x170>)
 80085ca:	6013      	str	r3, [r2, #0]
 80085cc:	e013      	b.n	80085f6 <tcp_abandon+0xbe>
 80085ce:	4b36      	ldr	r3, [pc, #216]	; (80086a8 <tcp_abandon+0x170>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	61fb      	str	r3, [r7, #28]
 80085d4:	e00c      	b.n	80085f0 <tcp_abandon+0xb8>
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d104      	bne.n	80085ea <tcp_abandon+0xb2>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	68da      	ldr	r2, [r3, #12]
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	60da      	str	r2, [r3, #12]
 80085e8:	e005      	b.n	80085f6 <tcp_abandon+0xbe>
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	61fb      	str	r3, [r7, #28]
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1ef      	bne.n	80085d6 <tcp_abandon+0x9e>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	60da      	str	r2, [r3, #12]
 80085fc:	e00b      	b.n	8008616 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	8adb      	ldrh	r3, [r3, #22]
 8008606:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008608:	6879      	ldr	r1, [r7, #4]
 800860a:	4828      	ldr	r0, [pc, #160]	; (80086ac <tcp_abandon+0x174>)
 800860c:	f000 ff7a 	bl	8009504 <tcp_pcb_remove>
 8008610:	4b27      	ldr	r3, [pc, #156]	; (80086b0 <tcp_abandon+0x178>)
 8008612:	2201      	movs	r2, #1
 8008614:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800861a:	2b00      	cmp	r3, #0
 800861c:	d004      	beq.n	8008628 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008622:	4618      	mov	r0, r3
 8008624:	f000 fd1c 	bl	8009060 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800862c:	2b00      	cmp	r3, #0
 800862e:	d004      	beq.n	800863a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008634:	4618      	mov	r0, r3
 8008636:	f000 fd13 	bl	8009060 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800863e:	2b00      	cmp	r3, #0
 8008640:	d004      	beq.n	800864c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008646:	4618      	mov	r0, r3
 8008648:	f000 fd0a 	bl	8009060 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00e      	beq.n	8008670 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008652:	6879      	ldr	r1, [r7, #4]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	3304      	adds	r3, #4
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	8b12      	ldrh	r2, [r2, #24]
 800865c:	9202      	str	r2, [sp, #8]
 800865e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008660:	9201      	str	r2, [sp, #4]
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	460b      	mov	r3, r1
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	69b9      	ldr	r1, [r7, #24]
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f004 fcc2 	bl	800cff4 <tcp_rst>
    }
    last_state = pcb->state;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	7d1b      	ldrb	r3, [r3, #20]
 8008674:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f7ff fd34 	bl	80080e4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d004      	beq.n	800868c <tcp_abandon+0x154>
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	f06f 010c 	mvn.w	r1, #12
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	4798      	blx	r3
  }
}
 800868c:	3728      	adds	r7, #40	; 0x28
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	08012634 	.word	0x08012634
 8008698:	08012778 	.word	0x08012778
 800869c:	08012678 	.word	0x08012678
 80086a0:	08012794 	.word	0x08012794
 80086a4:	200089d0 	.word	0x200089d0
 80086a8:	200089c4 	.word	0x200089c4
 80086ac:	200089cc 	.word	0x200089cc
 80086b0:	200089d4 	.word	0x200089d4

080086b4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80086bc:	2101      	movs	r1, #1
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f7ff ff3a 	bl	8008538 <tcp_abandon>
}
 80086c4:	bf00      	nop
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d106      	bne.n	80086e8 <tcp_update_rcv_ann_wnd+0x1c>
 80086da:	4b25      	ldr	r3, [pc, #148]	; (8008770 <tcp_update_rcv_ann_wnd+0xa4>)
 80086dc:	f240 32a6 	movw	r2, #934	; 0x3a6
 80086e0:	4924      	ldr	r1, [pc, #144]	; (8008774 <tcp_update_rcv_ann_wnd+0xa8>)
 80086e2:	4825      	ldr	r0, [pc, #148]	; (8008778 <tcp_update_rcv_ann_wnd+0xac>)
 80086e4:	f008 f82a 	bl	801073c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80086f0:	4413      	add	r3, r2
 80086f2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80086fc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8008700:	bf28      	it	cs
 8008702:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8008706:	b292      	uxth	r2, r2
 8008708:	4413      	add	r3, r2
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	2b00      	cmp	r3, #0
 8008710:	db08      	blt.n	8008724 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	e020      	b.n	8008766 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	dd03      	ble.n	800873a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008738:	e014      	b.n	8008764 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008742:	1ad3      	subs	r3, r2, r3
 8008744:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800874c:	d306      	bcc.n	800875c <tcp_update_rcv_ann_wnd+0x90>
 800874e:	4b08      	ldr	r3, [pc, #32]	; (8008770 <tcp_update_rcv_ann_wnd+0xa4>)
 8008750:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008754:	4909      	ldr	r1, [pc, #36]	; (800877c <tcp_update_rcv_ann_wnd+0xb0>)
 8008756:	4808      	ldr	r0, [pc, #32]	; (8008778 <tcp_update_rcv_ann_wnd+0xac>)
 8008758:	f007 fff0 	bl	801073c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	b29a      	uxth	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8008764:	2300      	movs	r3, #0
  }
}
 8008766:	4618      	mov	r0, r3
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	08012634 	.word	0x08012634
 8008774:	08012890 	.word	0x08012890
 8008778:	08012678 	.word	0x08012678
 800877c:	080128b4 	.word	0x080128b4

08008780 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	460b      	mov	r3, r1
 800878a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d107      	bne.n	80087a2 <tcp_recved+0x22>
 8008792:	4b1f      	ldr	r3, [pc, #124]	; (8008810 <tcp_recved+0x90>)
 8008794:	f240 32cf 	movw	r2, #975	; 0x3cf
 8008798:	491e      	ldr	r1, [pc, #120]	; (8008814 <tcp_recved+0x94>)
 800879a:	481f      	ldr	r0, [pc, #124]	; (8008818 <tcp_recved+0x98>)
 800879c:	f007 ffce 	bl	801073c <iprintf>
 80087a0:	e032      	b.n	8008808 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	7d1b      	ldrb	r3, [r3, #20]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d106      	bne.n	80087b8 <tcp_recved+0x38>
 80087aa:	4b19      	ldr	r3, [pc, #100]	; (8008810 <tcp_recved+0x90>)
 80087ac:	f240 32d2 	movw	r2, #978	; 0x3d2
 80087b0:	491a      	ldr	r1, [pc, #104]	; (800881c <tcp_recved+0x9c>)
 80087b2:	4819      	ldr	r0, [pc, #100]	; (8008818 <tcp_recved+0x98>)
 80087b4:	f007 ffc2 	bl	801073c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80087bc:	887b      	ldrh	r3, [r7, #2]
 80087be:	4413      	add	r3, r2
 80087c0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80087c2:	89fb      	ldrh	r3, [r7, #14]
 80087c4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80087c8:	d804      	bhi.n	80087d4 <tcp_recved+0x54>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087ce:	89fa      	ldrh	r2, [r7, #14]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d204      	bcs.n	80087de <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80087da:	851a      	strh	r2, [r3, #40]	; 0x28
 80087dc:	e002      	b.n	80087e4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	89fa      	ldrh	r2, [r7, #14]
 80087e2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f7ff ff71 	bl	80086cc <tcp_update_rcv_ann_wnd>
 80087ea:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80087f2:	d309      	bcc.n	8008808 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	8b5b      	ldrh	r3, [r3, #26]
 80087f8:	f043 0302 	orr.w	r3, r3, #2
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f003 fe42 	bl	800c48c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	08012634 	.word	0x08012634
 8008814:	080128d0 	.word	0x080128d0
 8008818:	08012678 	.word	0x08012678
 800881c:	080128e8 	.word	0x080128e8

08008820 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008820:	b5b0      	push	{r4, r5, r7, lr}
 8008822:	b090      	sub	sp, #64	; 0x40
 8008824:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008826:	2300      	movs	r3, #0
 8008828:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800882c:	4b94      	ldr	r3, [pc, #592]	; (8008a80 <tcp_slowtmr+0x260>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3301      	adds	r3, #1
 8008832:	4a93      	ldr	r2, [pc, #588]	; (8008a80 <tcp_slowtmr+0x260>)
 8008834:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008836:	4b93      	ldr	r3, [pc, #588]	; (8008a84 <tcp_slowtmr+0x264>)
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	3301      	adds	r3, #1
 800883c:	b2da      	uxtb	r2, r3
 800883e:	4b91      	ldr	r3, [pc, #580]	; (8008a84 <tcp_slowtmr+0x264>)
 8008840:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8008842:	2300      	movs	r3, #0
 8008844:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8008846:	4b90      	ldr	r3, [pc, #576]	; (8008a88 <tcp_slowtmr+0x268>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800884c:	e29d      	b.n	8008d8a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800884e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008850:	7d1b      	ldrb	r3, [r3, #20]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d106      	bne.n	8008864 <tcp_slowtmr+0x44>
 8008856:	4b8d      	ldr	r3, [pc, #564]	; (8008a8c <tcp_slowtmr+0x26c>)
 8008858:	f240 42be 	movw	r2, #1214	; 0x4be
 800885c:	498c      	ldr	r1, [pc, #560]	; (8008a90 <tcp_slowtmr+0x270>)
 800885e:	488d      	ldr	r0, [pc, #564]	; (8008a94 <tcp_slowtmr+0x274>)
 8008860:	f007 ff6c 	bl	801073c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008866:	7d1b      	ldrb	r3, [r3, #20]
 8008868:	2b01      	cmp	r3, #1
 800886a:	d106      	bne.n	800887a <tcp_slowtmr+0x5a>
 800886c:	4b87      	ldr	r3, [pc, #540]	; (8008a8c <tcp_slowtmr+0x26c>)
 800886e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8008872:	4989      	ldr	r1, [pc, #548]	; (8008a98 <tcp_slowtmr+0x278>)
 8008874:	4887      	ldr	r0, [pc, #540]	; (8008a94 <tcp_slowtmr+0x274>)
 8008876:	f007 ff61 	bl	801073c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800887a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887c:	7d1b      	ldrb	r3, [r3, #20]
 800887e:	2b0a      	cmp	r3, #10
 8008880:	d106      	bne.n	8008890 <tcp_slowtmr+0x70>
 8008882:	4b82      	ldr	r3, [pc, #520]	; (8008a8c <tcp_slowtmr+0x26c>)
 8008884:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8008888:	4984      	ldr	r1, [pc, #528]	; (8008a9c <tcp_slowtmr+0x27c>)
 800888a:	4882      	ldr	r0, [pc, #520]	; (8008a94 <tcp_slowtmr+0x274>)
 800888c:	f007 ff56 	bl	801073c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008892:	7f9a      	ldrb	r2, [r3, #30]
 8008894:	4b7b      	ldr	r3, [pc, #492]	; (8008a84 <tcp_slowtmr+0x264>)
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	429a      	cmp	r2, r3
 800889a:	d105      	bne.n	80088a8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800889c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80088a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80088a6:	e270      	b.n	8008d8a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80088a8:	4b76      	ldr	r3, [pc, #472]	; (8008a84 <tcp_slowtmr+0x264>)
 80088aa:	781a      	ldrb	r2, [r3, #0]
 80088ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ae:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80088b0:	2300      	movs	r3, #0
 80088b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80088b6:	2300      	movs	r3, #0
 80088b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80088bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088be:	7d1b      	ldrb	r3, [r3, #20]
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d10a      	bne.n	80088da <tcp_slowtmr+0xba>
 80088c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80088ca:	2b05      	cmp	r3, #5
 80088cc:	d905      	bls.n	80088da <tcp_slowtmr+0xba>
      ++pcb_remove;
 80088ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088d2:	3301      	adds	r3, #1
 80088d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80088d8:	e11e      	b.n	8008b18 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80088da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80088e0:	2b0b      	cmp	r3, #11
 80088e2:	d905      	bls.n	80088f0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80088e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088e8:	3301      	adds	r3, #1
 80088ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80088ee:	e113      	b.n	8008b18 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80088f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d075      	beq.n	80089e6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80088fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d006      	beq.n	8008910 <tcp_slowtmr+0xf0>
 8008902:	4b62      	ldr	r3, [pc, #392]	; (8008a8c <tcp_slowtmr+0x26c>)
 8008904:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8008908:	4965      	ldr	r1, [pc, #404]	; (8008aa0 <tcp_slowtmr+0x280>)
 800890a:	4862      	ldr	r0, [pc, #392]	; (8008a94 <tcp_slowtmr+0x274>)
 800890c:	f007 ff16 	bl	801073c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008914:	2b00      	cmp	r3, #0
 8008916:	d106      	bne.n	8008926 <tcp_slowtmr+0x106>
 8008918:	4b5c      	ldr	r3, [pc, #368]	; (8008a8c <tcp_slowtmr+0x26c>)
 800891a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800891e:	4961      	ldr	r1, [pc, #388]	; (8008aa4 <tcp_slowtmr+0x284>)
 8008920:	485c      	ldr	r0, [pc, #368]	; (8008a94 <tcp_slowtmr+0x274>)
 8008922:	f007 ff0b 	bl	801073c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008928:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800892c:	2b0b      	cmp	r3, #11
 800892e:	d905      	bls.n	800893c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8008930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008934:	3301      	adds	r3, #1
 8008936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800893a:	e0ed      	b.n	8008b18 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800893c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008942:	3b01      	subs	r3, #1
 8008944:	4a58      	ldr	r2, [pc, #352]	; (8008aa8 <tcp_slowtmr+0x288>)
 8008946:	5cd3      	ldrb	r3, [r2, r3]
 8008948:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800894a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800894c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008950:	7c7a      	ldrb	r2, [r7, #17]
 8008952:	429a      	cmp	r2, r3
 8008954:	d907      	bls.n	8008966 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8008956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008958:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800895c:	3301      	adds	r3, #1
 800895e:	b2da      	uxtb	r2, r3
 8008960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008962:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8008966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008968:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800896c:	7c7a      	ldrb	r2, [r7, #17]
 800896e:	429a      	cmp	r2, r3
 8008970:	f200 80d2 	bhi.w	8008b18 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8008974:	2301      	movs	r3, #1
 8008976:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8008978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800897a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800897e:	2b00      	cmp	r3, #0
 8008980:	d108      	bne.n	8008994 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008982:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008984:	f004 fc2a 	bl	800d1dc <tcp_zero_window_probe>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d014      	beq.n	80089b8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800898e:	2300      	movs	r3, #0
 8008990:	623b      	str	r3, [r7, #32]
 8008992:	e011      	b.n	80089b8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008996:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800899a:	4619      	mov	r1, r3
 800899c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800899e:	f003 faef 	bl	800bf80 <tcp_split_unsent_seg>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d107      	bne.n	80089b8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80089a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089aa:	f003 fd6f 	bl	800c48c <tcp_output>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d101      	bne.n	80089b8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80089b4:	2300      	movs	r3, #0
 80089b6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80089b8:	6a3b      	ldr	r3, [r7, #32]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f000 80ac 	beq.w	8008b18 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80089c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80089c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80089ce:	2b06      	cmp	r3, #6
 80089d0:	f200 80a2 	bhi.w	8008b18 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80089d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80089da:	3301      	adds	r3, #1
 80089dc:	b2da      	uxtb	r2, r3
 80089de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80089e4:	e098      	b.n	8008b18 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80089e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	db0f      	blt.n	8008a10 <tcp_slowtmr+0x1f0>
 80089f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80089f6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d008      	beq.n	8008a10 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80089fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a00:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	3301      	adds	r3, #1
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	b21a      	sxth	r2, r3
 8008a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8008a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a12:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8008a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a18:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	db7b      	blt.n	8008b18 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008a20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a22:	f004 f827 	bl	800ca74 <tcp_rexmit_rto_prepare>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d007      	beq.n	8008a3c <tcp_slowtmr+0x21c>
 8008a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d171      	bne.n	8008b18 <tcp_slowtmr+0x2f8>
 8008a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d06d      	beq.n	8008b18 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8008a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3e:	7d1b      	ldrb	r3, [r3, #20]
 8008a40:	2b02      	cmp	r3, #2
 8008a42:	d03a      	beq.n	8008aba <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a4a:	2b0c      	cmp	r3, #12
 8008a4c:	bf28      	it	cs
 8008a4e:	230c      	movcs	r3, #12
 8008a50:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a54:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008a58:	10db      	asrs	r3, r3, #3
 8008a5a:	b21b      	sxth	r3, r3
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a60:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008a64:	4413      	add	r3, r2
 8008a66:	7efa      	ldrb	r2, [r7, #27]
 8008a68:	4910      	ldr	r1, [pc, #64]	; (8008aac <tcp_slowtmr+0x28c>)
 8008a6a:	5c8a      	ldrb	r2, [r1, r2]
 8008a6c:	4093      	lsls	r3, r2
 8008a6e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008a76:	4293      	cmp	r3, r2
 8008a78:	dc1a      	bgt.n	8008ab0 <tcp_slowtmr+0x290>
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	b21a      	sxth	r2, r3
 8008a7e:	e019      	b.n	8008ab4 <tcp_slowtmr+0x294>
 8008a80:	200089c0 	.word	0x200089c0
 8008a84:	200089d6 	.word	0x200089d6
 8008a88:	200089cc 	.word	0x200089cc
 8008a8c:	08012634 	.word	0x08012634
 8008a90:	08012978 	.word	0x08012978
 8008a94:	08012678 	.word	0x08012678
 8008a98:	080129a4 	.word	0x080129a4
 8008a9c:	080129d0 	.word	0x080129d0
 8008aa0:	08012a00 	.word	0x08012a00
 8008aa4:	08012a34 	.word	0x08012a34
 8008aa8:	0801460c 	.word	0x0801460c
 8008aac:	080145fc 	.word	0x080145fc
 8008ab0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8008aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abc:	2200      	movs	r2, #0
 8008abe:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008acc:	4293      	cmp	r3, r2
 8008ace:	bf28      	it	cs
 8008ad0:	4613      	movcs	r3, r2
 8008ad2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008ad4:	8a7b      	ldrh	r3, [r7, #18]
 8008ad6:	085b      	lsrs	r3, r3, #1
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008adc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008aea:	005b      	lsls	r3, r3, #1
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d206      	bcs.n	8008b00 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008af6:	005b      	lsls	r3, r3, #1
 8008af8:	b29a      	uxth	r2, r3
 8008afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8008b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b02:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8008b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8008b12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b14:	f004 f81e 	bl	800cb54 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8008b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1a:	7d1b      	ldrb	r3, [r3, #20]
 8008b1c:	2b06      	cmp	r3, #6
 8008b1e:	d111      	bne.n	8008b44 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8008b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b22:	8b5b      	ldrh	r3, [r3, #26]
 8008b24:	f003 0310 	and.w	r3, r3, #16
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00b      	beq.n	8008b44 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b2c:	4b9c      	ldr	r3, [pc, #624]	; (8008da0 <tcp_slowtmr+0x580>)
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b32:	6a1b      	ldr	r3, [r3, #32]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	2b28      	cmp	r3, #40	; 0x28
 8008b38:	d904      	bls.n	8008b44 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8008b3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b3e:	3301      	adds	r3, #1
 8008b40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b46:	7a5b      	ldrb	r3, [r3, #9]
 8008b48:	f003 0308 	and.w	r3, r3, #8
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d04a      	beq.n	8008be6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8008b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b52:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008b54:	2b04      	cmp	r3, #4
 8008b56:	d003      	beq.n	8008b60 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8008b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8008b5c:	2b07      	cmp	r3, #7
 8008b5e:	d142      	bne.n	8008be6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b60:	4b8f      	ldr	r3, [pc, #572]	; (8008da0 <tcp_slowtmr+0x580>)
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b66:	6a1b      	ldr	r3, [r3, #32]
 8008b68:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008b70:	4b8c      	ldr	r3, [pc, #560]	; (8008da4 <tcp_slowtmr+0x584>)
 8008b72:	440b      	add	r3, r1
 8008b74:	498c      	ldr	r1, [pc, #560]	; (8008da8 <tcp_slowtmr+0x588>)
 8008b76:	fba1 1303 	umull	r1, r3, r1, r3
 8008b7a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d90a      	bls.n	8008b96 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8008b80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b84:	3301      	adds	r3, #1
 8008b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8008b8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b8e:	3301      	adds	r3, #1
 8008b90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008b94:	e027      	b.n	8008be6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b96:	4b82      	ldr	r3, [pc, #520]	; (8008da0 <tcp_slowtmr+0x580>)
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9c:	6a1b      	ldr	r3, [r3, #32]
 8008b9e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008bac:	4618      	mov	r0, r3
 8008bae:	4b7f      	ldr	r3, [pc, #508]	; (8008dac <tcp_slowtmr+0x58c>)
 8008bb0:	fb00 f303 	mul.w	r3, r0, r3
 8008bb4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008bb6:	497c      	ldr	r1, [pc, #496]	; (8008da8 <tcp_slowtmr+0x588>)
 8008bb8:	fba1 1303 	umull	r1, r3, r1, r3
 8008bbc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d911      	bls.n	8008be6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8008bc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bc4:	f004 faca 	bl	800d15c <tcp_keepalive>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8008bce:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d107      	bne.n	8008be6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8008bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008bdc:	3301      	adds	r3, #1
 8008bde:	b2da      	uxtb	r2, r3
 8008be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d011      	beq.n	8008c12 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8008bee:	4b6c      	ldr	r3, [pc, #432]	; (8008da0 <tcp_slowtmr+0x580>)
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf4:	6a1b      	ldr	r3, [r3, #32]
 8008bf6:	1ad2      	subs	r2, r2, r3
 8008bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008bfe:	4619      	mov	r1, r3
 8008c00:	460b      	mov	r3, r1
 8008c02:	005b      	lsls	r3, r3, #1
 8008c04:	440b      	add	r3, r1
 8008c06:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d302      	bcc.n	8008c12 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8008c0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c0e:	f000 fddd 	bl	80097cc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8008c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c14:	7d1b      	ldrb	r3, [r3, #20]
 8008c16:	2b03      	cmp	r3, #3
 8008c18:	d10b      	bne.n	8008c32 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008c1a:	4b61      	ldr	r3, [pc, #388]	; (8008da0 <tcp_slowtmr+0x580>)
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c20:	6a1b      	ldr	r3, [r3, #32]
 8008c22:	1ad3      	subs	r3, r2, r3
 8008c24:	2b28      	cmp	r3, #40	; 0x28
 8008c26:	d904      	bls.n	8008c32 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8008c28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8008c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c34:	7d1b      	ldrb	r3, [r3, #20]
 8008c36:	2b09      	cmp	r3, #9
 8008c38:	d10b      	bne.n	8008c52 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008c3a:	4b59      	ldr	r3, [pc, #356]	; (8008da0 <tcp_slowtmr+0x580>)
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c40:	6a1b      	ldr	r3, [r3, #32]
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	2bf0      	cmp	r3, #240	; 0xf0
 8008c46:	d904      	bls.n	8008c52 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8008c48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008c52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d060      	beq.n	8008d1c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8008c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c60:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8008c62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c64:	f000 fbfe 	bl	8009464 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8008c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d010      	beq.n	8008c90 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008c6e:	4b50      	ldr	r3, [pc, #320]	; (8008db0 <tcp_slowtmr+0x590>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d106      	bne.n	8008c86 <tcp_slowtmr+0x466>
 8008c78:	4b4e      	ldr	r3, [pc, #312]	; (8008db4 <tcp_slowtmr+0x594>)
 8008c7a:	f240 526d 	movw	r2, #1389	; 0x56d
 8008c7e:	494e      	ldr	r1, [pc, #312]	; (8008db8 <tcp_slowtmr+0x598>)
 8008c80:	484e      	ldr	r0, [pc, #312]	; (8008dbc <tcp_slowtmr+0x59c>)
 8008c82:	f007 fd5b 	bl	801073c <iprintf>
        prev->next = pcb->next;
 8008c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c88:	68da      	ldr	r2, [r3, #12]
 8008c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8c:	60da      	str	r2, [r3, #12]
 8008c8e:	e00f      	b.n	8008cb0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008c90:	4b47      	ldr	r3, [pc, #284]	; (8008db0 <tcp_slowtmr+0x590>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d006      	beq.n	8008ca8 <tcp_slowtmr+0x488>
 8008c9a:	4b46      	ldr	r3, [pc, #280]	; (8008db4 <tcp_slowtmr+0x594>)
 8008c9c:	f240 5271 	movw	r2, #1393	; 0x571
 8008ca0:	4947      	ldr	r1, [pc, #284]	; (8008dc0 <tcp_slowtmr+0x5a0>)
 8008ca2:	4846      	ldr	r0, [pc, #280]	; (8008dbc <tcp_slowtmr+0x59c>)
 8008ca4:	f007 fd4a 	bl	801073c <iprintf>
        tcp_active_pcbs = pcb->next;
 8008ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	4a40      	ldr	r2, [pc, #256]	; (8008db0 <tcp_slowtmr+0x590>)
 8008cae:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8008cb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d013      	beq.n	8008ce0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cba:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cbe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008cc0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8008cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc4:	3304      	adds	r3, #4
 8008cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cc8:	8ad2      	ldrh	r2, [r2, #22]
 8008cca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ccc:	8b09      	ldrh	r1, [r1, #24]
 8008cce:	9102      	str	r1, [sp, #8]
 8008cd0:	9201      	str	r2, [sp, #4]
 8008cd2:	9300      	str	r3, [sp, #0]
 8008cd4:	462b      	mov	r3, r5
 8008cd6:	4622      	mov	r2, r4
 8008cd8:	4601      	mov	r1, r0
 8008cda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008cdc:	f004 f98a 	bl	800cff4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8008ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce8:	7d1b      	ldrb	r3, [r3, #20]
 8008cea:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cee:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008cf6:	6838      	ldr	r0, [r7, #0]
 8008cf8:	f7ff f9f4 	bl	80080e4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8008cfc:	4b31      	ldr	r3, [pc, #196]	; (8008dc4 <tcp_slowtmr+0x5a4>)
 8008cfe:	2200      	movs	r2, #0
 8008d00:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d004      	beq.n	8008d12 <tcp_slowtmr+0x4f2>
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f06f 010c 	mvn.w	r1, #12
 8008d0e:	68b8      	ldr	r0, [r7, #8]
 8008d10:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008d12:	4b2c      	ldr	r3, [pc, #176]	; (8008dc4 <tcp_slowtmr+0x5a4>)
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d037      	beq.n	8008d8a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8008d1a:	e592      	b.n	8008842 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8008d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8008d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d28:	7f1b      	ldrb	r3, [r3, #28]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	b2da      	uxtb	r2, r3
 8008d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d30:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d34:	7f1a      	ldrb	r2, [r3, #28]
 8008d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d38:	7f5b      	ldrb	r3, [r3, #29]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d325      	bcc.n	8008d8a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8008d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d40:	2200      	movs	r2, #0
 8008d42:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8008d44:	4b1f      	ldr	r3, [pc, #124]	; (8008dc4 <tcp_slowtmr+0x5a4>)
 8008d46:	2200      	movs	r2, #0
 8008d48:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00b      	beq.n	8008d6c <tcp_slowtmr+0x54c>
 8008d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d5c:	6912      	ldr	r2, [r2, #16]
 8008d5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d60:	4610      	mov	r0, r2
 8008d62:	4798      	blx	r3
 8008d64:	4603      	mov	r3, r0
 8008d66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008d6a:	e002      	b.n	8008d72 <tcp_slowtmr+0x552>
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8008d72:	4b14      	ldr	r3, [pc, #80]	; (8008dc4 <tcp_slowtmr+0x5a4>)
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d000      	beq.n	8008d7c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8008d7a:	e562      	b.n	8008842 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008d7c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d102      	bne.n	8008d8a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8008d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d86:	f003 fb81 	bl	800c48c <tcp_output>
  while (pcb != NULL) {
 8008d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f47f ad5e 	bne.w	800884e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008d92:	2300      	movs	r3, #0
 8008d94:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8008d96:	4b0c      	ldr	r3, [pc, #48]	; (8008dc8 <tcp_slowtmr+0x5a8>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008d9c:	e069      	b.n	8008e72 <tcp_slowtmr+0x652>
 8008d9e:	bf00      	nop
 8008da0:	200089c0 	.word	0x200089c0
 8008da4:	000a4cb8 	.word	0x000a4cb8
 8008da8:	10624dd3 	.word	0x10624dd3
 8008dac:	000124f8 	.word	0x000124f8
 8008db0:	200089cc 	.word	0x200089cc
 8008db4:	08012634 	.word	0x08012634
 8008db8:	08012a6c 	.word	0x08012a6c
 8008dbc:	08012678 	.word	0x08012678
 8008dc0:	08012a98 	.word	0x08012a98
 8008dc4:	200089d4 	.word	0x200089d4
 8008dc8:	200089d0 	.word	0x200089d0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dce:	7d1b      	ldrb	r3, [r3, #20]
 8008dd0:	2b0a      	cmp	r3, #10
 8008dd2:	d006      	beq.n	8008de2 <tcp_slowtmr+0x5c2>
 8008dd4:	4b2b      	ldr	r3, [pc, #172]	; (8008e84 <tcp_slowtmr+0x664>)
 8008dd6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8008dda:	492b      	ldr	r1, [pc, #172]	; (8008e88 <tcp_slowtmr+0x668>)
 8008ddc:	482b      	ldr	r0, [pc, #172]	; (8008e8c <tcp_slowtmr+0x66c>)
 8008dde:	f007 fcad 	bl	801073c <iprintf>
    pcb_remove = 0;
 8008de2:	2300      	movs	r3, #0
 8008de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008de8:	4b29      	ldr	r3, [pc, #164]	; (8008e90 <tcp_slowtmr+0x670>)
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dee:	6a1b      	ldr	r3, [r3, #32]
 8008df0:	1ad3      	subs	r3, r2, r3
 8008df2:	2bf0      	cmp	r3, #240	; 0xf0
 8008df4:	d904      	bls.n	8008e00 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8008df6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d02f      	beq.n	8008e68 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008e08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e0a:	f000 fb2b 	bl	8009464 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d010      	beq.n	8008e36 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008e14:	4b1f      	ldr	r3, [pc, #124]	; (8008e94 <tcp_slowtmr+0x674>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d106      	bne.n	8008e2c <tcp_slowtmr+0x60c>
 8008e1e:	4b19      	ldr	r3, [pc, #100]	; (8008e84 <tcp_slowtmr+0x664>)
 8008e20:	f240 52af 	movw	r2, #1455	; 0x5af
 8008e24:	491c      	ldr	r1, [pc, #112]	; (8008e98 <tcp_slowtmr+0x678>)
 8008e26:	4819      	ldr	r0, [pc, #100]	; (8008e8c <tcp_slowtmr+0x66c>)
 8008e28:	f007 fc88 	bl	801073c <iprintf>
        prev->next = pcb->next;
 8008e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2e:	68da      	ldr	r2, [r3, #12]
 8008e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e32:	60da      	str	r2, [r3, #12]
 8008e34:	e00f      	b.n	8008e56 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008e36:	4b17      	ldr	r3, [pc, #92]	; (8008e94 <tcp_slowtmr+0x674>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d006      	beq.n	8008e4e <tcp_slowtmr+0x62e>
 8008e40:	4b10      	ldr	r3, [pc, #64]	; (8008e84 <tcp_slowtmr+0x664>)
 8008e42:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8008e46:	4915      	ldr	r1, [pc, #84]	; (8008e9c <tcp_slowtmr+0x67c>)
 8008e48:	4810      	ldr	r0, [pc, #64]	; (8008e8c <tcp_slowtmr+0x66c>)
 8008e4a:	f007 fc77 	bl	801073c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	4a10      	ldr	r2, [pc, #64]	; (8008e94 <tcp_slowtmr+0x674>)
 8008e54:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e58:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008e60:	69f8      	ldr	r0, [r7, #28]
 8008e62:	f7ff f93f 	bl	80080e4 <tcp_free>
 8008e66:	e004      	b.n	8008e72 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8008e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d1a9      	bne.n	8008dcc <tcp_slowtmr+0x5ac>
    }
  }
}
 8008e78:	bf00      	nop
 8008e7a:	bf00      	nop
 8008e7c:	3730      	adds	r7, #48	; 0x30
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bdb0      	pop	{r4, r5, r7, pc}
 8008e82:	bf00      	nop
 8008e84:	08012634 	.word	0x08012634
 8008e88:	08012ac4 	.word	0x08012ac4
 8008e8c:	08012678 	.word	0x08012678
 8008e90:	200089c0 	.word	0x200089c0
 8008e94:	200089d0 	.word	0x200089d0
 8008e98:	08012af4 	.word	0x08012af4
 8008e9c:	08012b1c 	.word	0x08012b1c

08008ea0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008ea6:	4b2d      	ldr	r3, [pc, #180]	; (8008f5c <tcp_fasttmr+0xbc>)
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	b2da      	uxtb	r2, r3
 8008eae:	4b2b      	ldr	r3, [pc, #172]	; (8008f5c <tcp_fasttmr+0xbc>)
 8008eb0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008eb2:	4b2b      	ldr	r3, [pc, #172]	; (8008f60 <tcp_fasttmr+0xc0>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008eb8:	e048      	b.n	8008f4c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	7f9a      	ldrb	r2, [r3, #30]
 8008ebe:	4b27      	ldr	r3, [pc, #156]	; (8008f5c <tcp_fasttmr+0xbc>)
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d03f      	beq.n	8008f46 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008ec6:	4b25      	ldr	r3, [pc, #148]	; (8008f5c <tcp_fasttmr+0xbc>)
 8008ec8:	781a      	ldrb	r2, [r3, #0]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	8b5b      	ldrh	r3, [r3, #26]
 8008ed2:	f003 0301 	and.w	r3, r3, #1
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d010      	beq.n	8008efc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	8b5b      	ldrh	r3, [r3, #26]
 8008ede:	f043 0302 	orr.w	r3, r3, #2
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f003 facf 	bl	800c48c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	8b5b      	ldrh	r3, [r3, #26]
 8008ef2:	f023 0303 	bic.w	r3, r3, #3
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	8b5b      	ldrh	r3, [r3, #26]
 8008f00:	f003 0308 	and.w	r3, r3, #8
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d009      	beq.n	8008f1c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	8b5b      	ldrh	r3, [r3, #26]
 8008f0c:	f023 0308 	bic.w	r3, r3, #8
 8008f10:	b29a      	uxth	r2, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f7ff fa78 	bl	800840c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00a      	beq.n	8008f40 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008f2a:	4b0e      	ldr	r3, [pc, #56]	; (8008f64 <tcp_fasttmr+0xc4>)
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 f819 	bl	8008f68 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008f36:	4b0b      	ldr	r3, [pc, #44]	; (8008f64 <tcp_fasttmr+0xc4>)
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d000      	beq.n	8008f40 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008f3e:	e7b8      	b.n	8008eb2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	607b      	str	r3, [r7, #4]
 8008f44:	e002      	b.n	8008f4c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1b3      	bne.n	8008eba <tcp_fasttmr+0x1a>
    }
  }
}
 8008f52:	bf00      	nop
 8008f54:	bf00      	nop
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	200089d6 	.word	0x200089d6
 8008f60:	200089cc 	.word	0x200089cc
 8008f64:	200089d4 	.word	0x200089d4

08008f68 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008f68:	b590      	push	{r4, r7, lr}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d109      	bne.n	8008f8a <tcp_process_refused_data+0x22>
 8008f76:	4b37      	ldr	r3, [pc, #220]	; (8009054 <tcp_process_refused_data+0xec>)
 8008f78:	f240 6209 	movw	r2, #1545	; 0x609
 8008f7c:	4936      	ldr	r1, [pc, #216]	; (8009058 <tcp_process_refused_data+0xf0>)
 8008f7e:	4837      	ldr	r0, [pc, #220]	; (800905c <tcp_process_refused_data+0xf4>)
 8008f80:	f007 fbdc 	bl	801073c <iprintf>
 8008f84:	f06f 030f 	mvn.w	r3, #15
 8008f88:	e060      	b.n	800904c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f8e:	7b5b      	ldrb	r3, [r3, #13]
 8008f90:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f96:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00b      	beq.n	8008fc0 <tcp_process_refused_data+0x58>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6918      	ldr	r0, [r3, #16]
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	68ba      	ldr	r2, [r7, #8]
 8008fb6:	6879      	ldr	r1, [r7, #4]
 8008fb8:	47a0      	blx	r4
 8008fba:	4603      	mov	r3, r0
 8008fbc:	73fb      	strb	r3, [r7, #15]
 8008fbe:	e007      	b.n	8008fd0 <tcp_process_refused_data+0x68>
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	6879      	ldr	r1, [r7, #4]
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	f000 f8a4 	bl	8009114 <tcp_recv_null>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d12a      	bne.n	800902e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008fd8:	7bbb      	ldrb	r3, [r7, #14]
 8008fda:	f003 0320 	and.w	r3, r3, #32
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d033      	beq.n	800904a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fe6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008fea:	d005      	beq.n	8008ff8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00b      	beq.n	800901a <tcp_process_refused_data+0xb2>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6918      	ldr	r0, [r3, #16]
 800900c:	2300      	movs	r3, #0
 800900e:	2200      	movs	r2, #0
 8009010:	6879      	ldr	r1, [r7, #4]
 8009012:	47a0      	blx	r4
 8009014:	4603      	mov	r3, r0
 8009016:	73fb      	strb	r3, [r7, #15]
 8009018:	e001      	b.n	800901e <tcp_process_refused_data+0xb6>
 800901a:	2300      	movs	r3, #0
 800901c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800901e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009022:	f113 0f0d 	cmn.w	r3, #13
 8009026:	d110      	bne.n	800904a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009028:	f06f 030c 	mvn.w	r3, #12
 800902c:	e00e      	b.n	800904c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800902e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009032:	f113 0f0d 	cmn.w	r3, #13
 8009036:	d102      	bne.n	800903e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009038:	f06f 030c 	mvn.w	r3, #12
 800903c:	e006      	b.n	800904c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8009044:	f06f 0304 	mvn.w	r3, #4
 8009048:	e000      	b.n	800904c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800904a:	2300      	movs	r3, #0
}
 800904c:	4618      	mov	r0, r3
 800904e:	3714      	adds	r7, #20
 8009050:	46bd      	mov	sp, r7
 8009052:	bd90      	pop	{r4, r7, pc}
 8009054:	08012634 	.word	0x08012634
 8009058:	08012b44 	.word	0x08012b44
 800905c:	08012678 	.word	0x08012678

08009060 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009068:	e007      	b.n	800907a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 f80a 	bl	800908a <tcp_seg_free>
    seg = next;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1f4      	bne.n	800906a <tcp_segs_free+0xa>
  }
}
 8009080:	bf00      	nop
 8009082:	bf00      	nop
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b082      	sub	sp, #8
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d00c      	beq.n	80090b2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d004      	beq.n	80090aa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7fe fd6d 	bl	8007b84 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80090aa:	6879      	ldr	r1, [r7, #4]
 80090ac:	2003      	movs	r0, #3
 80090ae:	f7fd fef3 	bl	8006e98 <memp_free>
  }
}
 80090b2:	bf00      	nop
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
	...

080090bc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d106      	bne.n	80090d8 <tcp_seg_copy+0x1c>
 80090ca:	4b0f      	ldr	r3, [pc, #60]	; (8009108 <tcp_seg_copy+0x4c>)
 80090cc:	f240 6282 	movw	r2, #1666	; 0x682
 80090d0:	490e      	ldr	r1, [pc, #56]	; (800910c <tcp_seg_copy+0x50>)
 80090d2:	480f      	ldr	r0, [pc, #60]	; (8009110 <tcp_seg_copy+0x54>)
 80090d4:	f007 fb32 	bl	801073c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80090d8:	2003      	movs	r0, #3
 80090da:	f7fd fe6d 	bl	8006db8 <memp_malloc>
 80090de:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d101      	bne.n	80090ea <tcp_seg_copy+0x2e>
    return NULL;
 80090e6:	2300      	movs	r3, #0
 80090e8:	e00a      	b.n	8009100 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80090ea:	2210      	movs	r2, #16
 80090ec:	6879      	ldr	r1, [r7, #4]
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	f007 fd3d 	bl	8010b6e <memcpy>
  pbuf_ref(cseg->p);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7fe fde3 	bl	8007cc4 <pbuf_ref>
  return cseg;
 80090fe:	68fb      	ldr	r3, [r7, #12]
}
 8009100:	4618      	mov	r0, r3
 8009102:	3710      	adds	r7, #16
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	08012634 	.word	0x08012634
 800910c:	08012b88 	.word	0x08012b88
 8009110:	08012678 	.word	0x08012678

08009114 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
 8009120:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d109      	bne.n	800913c <tcp_recv_null+0x28>
 8009128:	4b12      	ldr	r3, [pc, #72]	; (8009174 <tcp_recv_null+0x60>)
 800912a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800912e:	4912      	ldr	r1, [pc, #72]	; (8009178 <tcp_recv_null+0x64>)
 8009130:	4812      	ldr	r0, [pc, #72]	; (800917c <tcp_recv_null+0x68>)
 8009132:	f007 fb03 	bl	801073c <iprintf>
 8009136:	f06f 030f 	mvn.w	r3, #15
 800913a:	e016      	b.n	800916a <tcp_recv_null+0x56>

  if (p != NULL) {
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d009      	beq.n	8009156 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	891b      	ldrh	r3, [r3, #8]
 8009146:	4619      	mov	r1, r3
 8009148:	68b8      	ldr	r0, [r7, #8]
 800914a:	f7ff fb19 	bl	8008780 <tcp_recved>
    pbuf_free(p);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f7fe fd18 	bl	8007b84 <pbuf_free>
 8009154:	e008      	b.n	8009168 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009156:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d104      	bne.n	8009168 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800915e:	68b8      	ldr	r0, [r7, #8]
 8009160:	f7ff f9be 	bl	80084e0 <tcp_close>
 8009164:	4603      	mov	r3, r0
 8009166:	e000      	b.n	800916a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	08012634 	.word	0x08012634
 8009178:	08012ba4 	.word	0x08012ba4
 800917c:	08012678 	.word	0x08012678

08009180 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b086      	sub	sp, #24
 8009184:	af00      	add	r7, sp, #0
 8009186:	4603      	mov	r3, r0
 8009188:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800918a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800918e:	2b00      	cmp	r3, #0
 8009190:	db01      	blt.n	8009196 <tcp_kill_prio+0x16>
 8009192:	79fb      	ldrb	r3, [r7, #7]
 8009194:	e000      	b.n	8009198 <tcp_kill_prio+0x18>
 8009196:	237f      	movs	r3, #127	; 0x7f
 8009198:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800919a:	7afb      	ldrb	r3, [r7, #11]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d034      	beq.n	800920a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80091a0:	7afb      	ldrb	r3, [r7, #11]
 80091a2:	3b01      	subs	r3, #1
 80091a4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80091a6:	2300      	movs	r3, #0
 80091a8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80091aa:	2300      	movs	r3, #0
 80091ac:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80091ae:	4b19      	ldr	r3, [pc, #100]	; (8009214 <tcp_kill_prio+0x94>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	617b      	str	r3, [r7, #20]
 80091b4:	e01f      	b.n	80091f6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	7d5b      	ldrb	r3, [r3, #21]
 80091ba:	7afa      	ldrb	r2, [r7, #11]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d80c      	bhi.n	80091da <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80091c4:	7afa      	ldrb	r2, [r7, #11]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d112      	bne.n	80091f0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80091ca:	4b13      	ldr	r3, [pc, #76]	; (8009218 <tcp_kill_prio+0x98>)
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	6a1b      	ldr	r3, [r3, #32]
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d80a      	bhi.n	80091f0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80091da:	4b0f      	ldr	r3, [pc, #60]	; (8009218 <tcp_kill_prio+0x98>)
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	6a1b      	ldr	r3, [r3, #32]
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	7d5b      	ldrb	r3, [r3, #21]
 80091ee:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	617b      	str	r3, [r7, #20]
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1dc      	bne.n	80091b6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d004      	beq.n	800920c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009202:	6938      	ldr	r0, [r7, #16]
 8009204:	f7ff fa56 	bl	80086b4 <tcp_abort>
 8009208:	e000      	b.n	800920c <tcp_kill_prio+0x8c>
    return;
 800920a:	bf00      	nop
  }
}
 800920c:	3718      	adds	r7, #24
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	200089cc 	.word	0x200089cc
 8009218:	200089c0 	.word	0x200089c0

0800921c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b086      	sub	sp, #24
 8009220:	af00      	add	r7, sp, #0
 8009222:	4603      	mov	r3, r0
 8009224:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009226:	79fb      	ldrb	r3, [r7, #7]
 8009228:	2b08      	cmp	r3, #8
 800922a:	d009      	beq.n	8009240 <tcp_kill_state+0x24>
 800922c:	79fb      	ldrb	r3, [r7, #7]
 800922e:	2b09      	cmp	r3, #9
 8009230:	d006      	beq.n	8009240 <tcp_kill_state+0x24>
 8009232:	4b1a      	ldr	r3, [pc, #104]	; (800929c <tcp_kill_state+0x80>)
 8009234:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8009238:	4919      	ldr	r1, [pc, #100]	; (80092a0 <tcp_kill_state+0x84>)
 800923a:	481a      	ldr	r0, [pc, #104]	; (80092a4 <tcp_kill_state+0x88>)
 800923c:	f007 fa7e 	bl	801073c <iprintf>

  inactivity = 0;
 8009240:	2300      	movs	r3, #0
 8009242:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009244:	2300      	movs	r3, #0
 8009246:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009248:	4b17      	ldr	r3, [pc, #92]	; (80092a8 <tcp_kill_state+0x8c>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	617b      	str	r3, [r7, #20]
 800924e:	e017      	b.n	8009280 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	7d1b      	ldrb	r3, [r3, #20]
 8009254:	79fa      	ldrb	r2, [r7, #7]
 8009256:	429a      	cmp	r2, r3
 8009258:	d10f      	bne.n	800927a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800925a:	4b14      	ldr	r3, [pc, #80]	; (80092ac <tcp_kill_state+0x90>)
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	6a1b      	ldr	r3, [r3, #32]
 8009262:	1ad3      	subs	r3, r2, r3
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	429a      	cmp	r2, r3
 8009268:	d807      	bhi.n	800927a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800926a:	4b10      	ldr	r3, [pc, #64]	; (80092ac <tcp_kill_state+0x90>)
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	6a1b      	ldr	r3, [r3, #32]
 8009272:	1ad3      	subs	r3, r2, r3
 8009274:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	617b      	str	r3, [r7, #20]
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d1e4      	bne.n	8009250 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d003      	beq.n	8009294 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800928c:	2100      	movs	r1, #0
 800928e:	6938      	ldr	r0, [r7, #16]
 8009290:	f7ff f952 	bl	8008538 <tcp_abandon>
  }
}
 8009294:	bf00      	nop
 8009296:	3718      	adds	r7, #24
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	08012634 	.word	0x08012634
 80092a0:	08012bc0 	.word	0x08012bc0
 80092a4:	08012678 	.word	0x08012678
 80092a8:	200089cc 	.word	0x200089cc
 80092ac:	200089c0 	.word	0x200089c0

080092b0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80092b6:	2300      	movs	r3, #0
 80092b8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80092ba:	2300      	movs	r3, #0
 80092bc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80092be:	4b12      	ldr	r3, [pc, #72]	; (8009308 <tcp_kill_timewait+0x58>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	60fb      	str	r3, [r7, #12]
 80092c4:	e012      	b.n	80092ec <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80092c6:	4b11      	ldr	r3, [pc, #68]	; (800930c <tcp_kill_timewait+0x5c>)
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6a1b      	ldr	r3, [r3, #32]
 80092ce:	1ad3      	subs	r3, r2, r3
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d807      	bhi.n	80092e6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80092d6:	4b0d      	ldr	r3, [pc, #52]	; (800930c <tcp_kill_timewait+0x5c>)
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6a1b      	ldr	r3, [r3, #32]
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	68db      	ldr	r3, [r3, #12]
 80092ea:	60fb      	str	r3, [r7, #12]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1e9      	bne.n	80092c6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d002      	beq.n	80092fe <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80092f8:	68b8      	ldr	r0, [r7, #8]
 80092fa:	f7ff f9db 	bl	80086b4 <tcp_abort>
  }
}
 80092fe:	bf00      	nop
 8009300:	3710      	adds	r7, #16
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	200089d0 	.word	0x200089d0
 800930c:	200089c0 	.word	0x200089c0

08009310 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009316:	4b10      	ldr	r3, [pc, #64]	; (8009358 <tcp_handle_closepend+0x48>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800931c:	e014      	b.n	8009348 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	8b5b      	ldrh	r3, [r3, #26]
 8009328:	f003 0308 	and.w	r3, r3, #8
 800932c:	2b00      	cmp	r3, #0
 800932e:	d009      	beq.n	8009344 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	8b5b      	ldrh	r3, [r3, #26]
 8009334:	f023 0308 	bic.w	r3, r3, #8
 8009338:	b29a      	uxth	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f7ff f864 	bl	800840c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1e7      	bne.n	800931e <tcp_handle_closepend+0xe>
  }
}
 800934e:	bf00      	nop
 8009350:	bf00      	nop
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	200089cc 	.word	0x200089cc

0800935c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	4603      	mov	r3, r0
 8009364:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009366:	2001      	movs	r0, #1
 8009368:	f7fd fd26 	bl	8006db8 <memp_malloc>
 800936c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d126      	bne.n	80093c2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009374:	f7ff ffcc 	bl	8009310 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009378:	f7ff ff9a 	bl	80092b0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800937c:	2001      	movs	r0, #1
 800937e:	f7fd fd1b 	bl	8006db8 <memp_malloc>
 8009382:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d11b      	bne.n	80093c2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800938a:	2009      	movs	r0, #9
 800938c:	f7ff ff46 	bl	800921c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009390:	2001      	movs	r0, #1
 8009392:	f7fd fd11 	bl	8006db8 <memp_malloc>
 8009396:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d111      	bne.n	80093c2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800939e:	2008      	movs	r0, #8
 80093a0:	f7ff ff3c 	bl	800921c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80093a4:	2001      	movs	r0, #1
 80093a6:	f7fd fd07 	bl	8006db8 <memp_malloc>
 80093aa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d107      	bne.n	80093c2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80093b2:	79fb      	ldrb	r3, [r7, #7]
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7ff fee3 	bl	8009180 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80093ba:	2001      	movs	r0, #1
 80093bc:	f7fd fcfc 	bl	8006db8 <memp_malloc>
 80093c0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d03f      	beq.n	8009448 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80093c8:	229c      	movs	r2, #156	; 0x9c
 80093ca:	2100      	movs	r1, #0
 80093cc:	68f8      	ldr	r0, [r7, #12]
 80093ce:	f007 fb45 	bl	8010a5c <memset>
    pcb->prio = prio;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	79fa      	ldrb	r2, [r7, #7]
 80093d6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80093de:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80093e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	22ff      	movs	r2, #255	; 0xff
 80093f6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f44f 7206 	mov.w	r2, #536	; 0x218
 80093fe:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2206      	movs	r2, #6
 8009404:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2206      	movs	r2, #6
 800940c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009414:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2201      	movs	r2, #1
 800941a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800941e:	4b0d      	ldr	r3, [pc, #52]	; (8009454 <tcp_alloc+0xf8>)
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009426:	4b0c      	ldr	r3, [pc, #48]	; (8009458 <tcp_alloc+0xfc>)
 8009428:	781a      	ldrb	r2, [r3, #0]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009434:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	4a08      	ldr	r2, [pc, #32]	; (800945c <tcp_alloc+0x100>)
 800943c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	4a07      	ldr	r2, [pc, #28]	; (8009460 <tcp_alloc+0x104>)
 8009444:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009448:	68fb      	ldr	r3, [r7, #12]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	200089c0 	.word	0x200089c0
 8009458:	200089d6 	.word	0x200089d6
 800945c:	08009115 	.word	0x08009115
 8009460:	006ddd00 	.word	0x006ddd00

08009464 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d107      	bne.n	8009482 <tcp_pcb_purge+0x1e>
 8009472:	4b21      	ldr	r3, [pc, #132]	; (80094f8 <tcp_pcb_purge+0x94>)
 8009474:	f640 0251 	movw	r2, #2129	; 0x851
 8009478:	4920      	ldr	r1, [pc, #128]	; (80094fc <tcp_pcb_purge+0x98>)
 800947a:	4821      	ldr	r0, [pc, #132]	; (8009500 <tcp_pcb_purge+0x9c>)
 800947c:	f007 f95e 	bl	801073c <iprintf>
 8009480:	e037      	b.n	80094f2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	7d1b      	ldrb	r3, [r3, #20]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d033      	beq.n	80094f2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800948e:	2b0a      	cmp	r3, #10
 8009490:	d02f      	beq.n	80094f2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8009496:	2b01      	cmp	r3, #1
 8009498:	d02b      	beq.n	80094f2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d007      	beq.n	80094b2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fe fb6c 	bl	8007b84 <pbuf_free>
      pcb->refused_data = NULL;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d002      	beq.n	80094c0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 f986 	bl	80097cc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094c6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7ff fdc7 	bl	8009060 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7ff fdc2 	bl	8009060 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	66da      	str	r2, [r3, #108]	; 0x6c
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	08012634 	.word	0x08012634
 80094fc:	08012c80 	.word	0x08012c80
 8009500:	08012678 	.word	0x08012678

08009504 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d106      	bne.n	8009522 <tcp_pcb_remove+0x1e>
 8009514:	4b3e      	ldr	r3, [pc, #248]	; (8009610 <tcp_pcb_remove+0x10c>)
 8009516:	f640 0283 	movw	r2, #2179	; 0x883
 800951a:	493e      	ldr	r1, [pc, #248]	; (8009614 <tcp_pcb_remove+0x110>)
 800951c:	483e      	ldr	r0, [pc, #248]	; (8009618 <tcp_pcb_remove+0x114>)
 800951e:	f007 f90d 	bl	801073c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d106      	bne.n	8009536 <tcp_pcb_remove+0x32>
 8009528:	4b39      	ldr	r3, [pc, #228]	; (8009610 <tcp_pcb_remove+0x10c>)
 800952a:	f640 0284 	movw	r2, #2180	; 0x884
 800952e:	493b      	ldr	r1, [pc, #236]	; (800961c <tcp_pcb_remove+0x118>)
 8009530:	4839      	ldr	r0, [pc, #228]	; (8009618 <tcp_pcb_remove+0x114>)
 8009532:	f007 f903 	bl	801073c <iprintf>

  TCP_RMV(pcblist, pcb);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	683a      	ldr	r2, [r7, #0]
 800953c:	429a      	cmp	r2, r3
 800953e:	d105      	bne.n	800954c <tcp_pcb_remove+0x48>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68da      	ldr	r2, [r3, #12]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	601a      	str	r2, [r3, #0]
 800954a:	e013      	b.n	8009574 <tcp_pcb_remove+0x70>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	60fb      	str	r3, [r7, #12]
 8009552:	e00c      	b.n	800956e <tcp_pcb_remove+0x6a>
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	683a      	ldr	r2, [r7, #0]
 800955a:	429a      	cmp	r2, r3
 800955c:	d104      	bne.n	8009568 <tcp_pcb_remove+0x64>
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	68da      	ldr	r2, [r3, #12]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	60da      	str	r2, [r3, #12]
 8009566:	e005      	b.n	8009574 <tcp_pcb_remove+0x70>
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	60fb      	str	r3, [r7, #12]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1ef      	bne.n	8009554 <tcp_pcb_remove+0x50>
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	2200      	movs	r2, #0
 8009578:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800957a:	6838      	ldr	r0, [r7, #0]
 800957c:	f7ff ff72 	bl	8009464 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	7d1b      	ldrb	r3, [r3, #20]
 8009584:	2b0a      	cmp	r3, #10
 8009586:	d013      	beq.n	80095b0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800958c:	2b01      	cmp	r3, #1
 800958e:	d00f      	beq.n	80095b0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	8b5b      	ldrh	r3, [r3, #26]
 8009594:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8009598:	2b00      	cmp	r3, #0
 800959a:	d009      	beq.n	80095b0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	8b5b      	ldrh	r3, [r3, #26]
 80095a0:	f043 0302 	orr.w	r3, r3, #2
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80095aa:	6838      	ldr	r0, [r7, #0]
 80095ac:	f002 ff6e 	bl	800c48c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	7d1b      	ldrb	r3, [r3, #20]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d020      	beq.n	80095fa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d006      	beq.n	80095ce <tcp_pcb_remove+0xca>
 80095c0:	4b13      	ldr	r3, [pc, #76]	; (8009610 <tcp_pcb_remove+0x10c>)
 80095c2:	f640 0293 	movw	r2, #2195	; 0x893
 80095c6:	4916      	ldr	r1, [pc, #88]	; (8009620 <tcp_pcb_remove+0x11c>)
 80095c8:	4813      	ldr	r0, [pc, #76]	; (8009618 <tcp_pcb_remove+0x114>)
 80095ca:	f007 f8b7 	bl	801073c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d006      	beq.n	80095e4 <tcp_pcb_remove+0xe0>
 80095d6:	4b0e      	ldr	r3, [pc, #56]	; (8009610 <tcp_pcb_remove+0x10c>)
 80095d8:	f640 0294 	movw	r2, #2196	; 0x894
 80095dc:	4911      	ldr	r1, [pc, #68]	; (8009624 <tcp_pcb_remove+0x120>)
 80095de:	480e      	ldr	r0, [pc, #56]	; (8009618 <tcp_pcb_remove+0x114>)
 80095e0:	f007 f8ac 	bl	801073c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d006      	beq.n	80095fa <tcp_pcb_remove+0xf6>
 80095ec:	4b08      	ldr	r3, [pc, #32]	; (8009610 <tcp_pcb_remove+0x10c>)
 80095ee:	f640 0296 	movw	r2, #2198	; 0x896
 80095f2:	490d      	ldr	r1, [pc, #52]	; (8009628 <tcp_pcb_remove+0x124>)
 80095f4:	4808      	ldr	r0, [pc, #32]	; (8009618 <tcp_pcb_remove+0x114>)
 80095f6:	f007 f8a1 	bl	801073c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	2200      	movs	r2, #0
 80095fe:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	2200      	movs	r2, #0
 8009604:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009606:	bf00      	nop
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	08012634 	.word	0x08012634
 8009614:	08012c9c 	.word	0x08012c9c
 8009618:	08012678 	.word	0x08012678
 800961c:	08012cb8 	.word	0x08012cb8
 8009620:	08012cd8 	.word	0x08012cd8
 8009624:	08012cf0 	.word	0x08012cf0
 8009628:	08012d0c 	.word	0x08012d0c

0800962c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d106      	bne.n	8009648 <tcp_next_iss+0x1c>
 800963a:	4b0a      	ldr	r3, [pc, #40]	; (8009664 <tcp_next_iss+0x38>)
 800963c:	f640 02af 	movw	r2, #2223	; 0x8af
 8009640:	4909      	ldr	r1, [pc, #36]	; (8009668 <tcp_next_iss+0x3c>)
 8009642:	480a      	ldr	r0, [pc, #40]	; (800966c <tcp_next_iss+0x40>)
 8009644:	f007 f87a 	bl	801073c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009648:	4b09      	ldr	r3, [pc, #36]	; (8009670 <tcp_next_iss+0x44>)
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	4b09      	ldr	r3, [pc, #36]	; (8009674 <tcp_next_iss+0x48>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4413      	add	r3, r2
 8009652:	4a07      	ldr	r2, [pc, #28]	; (8009670 <tcp_next_iss+0x44>)
 8009654:	6013      	str	r3, [r2, #0]
  return iss;
 8009656:	4b06      	ldr	r3, [pc, #24]	; (8009670 <tcp_next_iss+0x44>)
 8009658:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800965a:	4618      	mov	r0, r3
 800965c:	3708      	adds	r7, #8
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	08012634 	.word	0x08012634
 8009668:	08012d24 	.word	0x08012d24
 800966c:	08012678 	.word	0x08012678
 8009670:	20000024 	.word	0x20000024
 8009674:	200089c0 	.word	0x200089c0

08009678 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
 800967e:	4603      	mov	r3, r0
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
 8009684:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d106      	bne.n	800969a <tcp_eff_send_mss_netif+0x22>
 800968c:	4b14      	ldr	r3, [pc, #80]	; (80096e0 <tcp_eff_send_mss_netif+0x68>)
 800968e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8009692:	4914      	ldr	r1, [pc, #80]	; (80096e4 <tcp_eff_send_mss_netif+0x6c>)
 8009694:	4814      	ldr	r0, [pc, #80]	; (80096e8 <tcp_eff_send_mss_netif+0x70>)
 8009696:	f007 f851 	bl	801073c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d101      	bne.n	80096a4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80096a0:	89fb      	ldrh	r3, [r7, #14]
 80096a2:	e019      	b.n	80096d8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80096a8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80096aa:	8afb      	ldrh	r3, [r7, #22]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d012      	beq.n	80096d6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80096b0:	2328      	movs	r3, #40	; 0x28
 80096b2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80096b4:	8afa      	ldrh	r2, [r7, #22]
 80096b6:	8abb      	ldrh	r3, [r7, #20]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d904      	bls.n	80096c6 <tcp_eff_send_mss_netif+0x4e>
 80096bc:	8afa      	ldrh	r2, [r7, #22]
 80096be:	8abb      	ldrh	r3, [r7, #20]
 80096c0:	1ad3      	subs	r3, r2, r3
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	e000      	b.n	80096c8 <tcp_eff_send_mss_netif+0x50>
 80096c6:	2300      	movs	r3, #0
 80096c8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80096ca:	8a7a      	ldrh	r2, [r7, #18]
 80096cc:	89fb      	ldrh	r3, [r7, #14]
 80096ce:	4293      	cmp	r3, r2
 80096d0:	bf28      	it	cs
 80096d2:	4613      	movcs	r3, r2
 80096d4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80096d6:	89fb      	ldrh	r3, [r7, #14]
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3718      	adds	r7, #24
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	08012634 	.word	0x08012634
 80096e4:	08012d40 	.word	0x08012d40
 80096e8:	08012678 	.word	0x08012678

080096ec <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d119      	bne.n	8009734 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009700:	4b10      	ldr	r3, [pc, #64]	; (8009744 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8009702:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8009706:	4910      	ldr	r1, [pc, #64]	; (8009748 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8009708:	4810      	ldr	r0, [pc, #64]	; (800974c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800970a:	f007 f817 	bl	801073c <iprintf>

  while (pcb != NULL) {
 800970e:	e011      	b.n	8009734 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	429a      	cmp	r2, r3
 800971a:	d108      	bne.n	800972e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f7fe ffc6 	bl	80086b4 <tcp_abort>
      pcb = next;
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	60fb      	str	r3, [r7, #12]
 800972c:	e002      	b.n	8009734 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d1ea      	bne.n	8009710 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800973a:	bf00      	nop
 800973c:	bf00      	nop
 800973e:	3710      	adds	r7, #16
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	08012634 	.word	0x08012634
 8009748:	08012d68 	.word	0x08012d68
 800974c:	08012678 	.word	0x08012678

08009750 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d02a      	beq.n	80097b6 <tcp_netif_ip_addr_changed+0x66>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d026      	beq.n	80097b6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009768:	4b15      	ldr	r3, [pc, #84]	; (80097c0 <tcp_netif_ip_addr_changed+0x70>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4619      	mov	r1, r3
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7ff ffbc 	bl	80096ec <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009774:	4b13      	ldr	r3, [pc, #76]	; (80097c4 <tcp_netif_ip_addr_changed+0x74>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4619      	mov	r1, r3
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7ff ffb6 	bl	80096ec <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d017      	beq.n	80097b6 <tcp_netif_ip_addr_changed+0x66>
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d013      	beq.n	80097b6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800978e:	4b0e      	ldr	r3, [pc, #56]	; (80097c8 <tcp_netif_ip_addr_changed+0x78>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	60fb      	str	r3, [r7, #12]
 8009794:	e00c      	b.n	80097b0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	429a      	cmp	r2, r3
 80097a0:	d103      	bne.n	80097aa <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	60fb      	str	r3, [r7, #12]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1ef      	bne.n	8009796 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80097b6:	bf00      	nop
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	200089cc 	.word	0x200089cc
 80097c4:	200089c4 	.word	0x200089c4
 80097c8:	200089c8 	.word	0x200089c8

080097cc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d007      	beq.n	80097ec <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7ff fc3d 	bl	8009060 <tcp_segs_free>
    pcb->ooseq = NULL;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80097ec:	bf00      	nop
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80097f4:	b590      	push	{r4, r7, lr}
 80097f6:	b08d      	sub	sp, #52	; 0x34
 80097f8:	af04      	add	r7, sp, #16
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d105      	bne.n	8009810 <tcp_input+0x1c>
 8009804:	4b9b      	ldr	r3, [pc, #620]	; (8009a74 <tcp_input+0x280>)
 8009806:	2283      	movs	r2, #131	; 0x83
 8009808:	499b      	ldr	r1, [pc, #620]	; (8009a78 <tcp_input+0x284>)
 800980a:	489c      	ldr	r0, [pc, #624]	; (8009a7c <tcp_input+0x288>)
 800980c:	f006 ff96 	bl	801073c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	4a9a      	ldr	r2, [pc, #616]	; (8009a80 <tcp_input+0x28c>)
 8009816:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	895b      	ldrh	r3, [r3, #10]
 800981c:	2b13      	cmp	r3, #19
 800981e:	f240 83d1 	bls.w	8009fc4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009822:	4b98      	ldr	r3, [pc, #608]	; (8009a84 <tcp_input+0x290>)
 8009824:	695b      	ldr	r3, [r3, #20]
 8009826:	4a97      	ldr	r2, [pc, #604]	; (8009a84 <tcp_input+0x290>)
 8009828:	6812      	ldr	r2, [r2, #0]
 800982a:	4611      	mov	r1, r2
 800982c:	4618      	mov	r0, r3
 800982e:	f005 ff2f 	bl	800f690 <ip4_addr_isbroadcast_u32>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	f040 83c7 	bne.w	8009fc8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800983a:	4b92      	ldr	r3, [pc, #584]	; (8009a84 <tcp_input+0x290>)
 800983c:	695b      	ldr	r3, [r3, #20]
 800983e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009842:	2be0      	cmp	r3, #224	; 0xe0
 8009844:	f000 83c0 	beq.w	8009fc8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009848:	4b8d      	ldr	r3, [pc, #564]	; (8009a80 <tcp_input+0x28c>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	899b      	ldrh	r3, [r3, #12]
 800984e:	b29b      	uxth	r3, r3
 8009850:	4618      	mov	r0, r3
 8009852:	f7fc fe39 	bl	80064c8 <lwip_htons>
 8009856:	4603      	mov	r3, r0
 8009858:	0b1b      	lsrs	r3, r3, #12
 800985a:	b29b      	uxth	r3, r3
 800985c:	b2db      	uxtb	r3, r3
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009862:	7cbb      	ldrb	r3, [r7, #18]
 8009864:	2b13      	cmp	r3, #19
 8009866:	f240 83b1 	bls.w	8009fcc <tcp_input+0x7d8>
 800986a:	7cbb      	ldrb	r3, [r7, #18]
 800986c:	b29a      	uxth	r2, r3
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	891b      	ldrh	r3, [r3, #8]
 8009872:	429a      	cmp	r2, r3
 8009874:	f200 83aa 	bhi.w	8009fcc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009878:	7cbb      	ldrb	r3, [r7, #18]
 800987a:	b29b      	uxth	r3, r3
 800987c:	3b14      	subs	r3, #20
 800987e:	b29a      	uxth	r2, r3
 8009880:	4b81      	ldr	r3, [pc, #516]	; (8009a88 <tcp_input+0x294>)
 8009882:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009884:	4b81      	ldr	r3, [pc, #516]	; (8009a8c <tcp_input+0x298>)
 8009886:	2200      	movs	r2, #0
 8009888:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	895a      	ldrh	r2, [r3, #10]
 800988e:	7cbb      	ldrb	r3, [r7, #18]
 8009890:	b29b      	uxth	r3, r3
 8009892:	429a      	cmp	r2, r3
 8009894:	d309      	bcc.n	80098aa <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009896:	4b7c      	ldr	r3, [pc, #496]	; (8009a88 <tcp_input+0x294>)
 8009898:	881a      	ldrh	r2, [r3, #0]
 800989a:	4b7d      	ldr	r3, [pc, #500]	; (8009a90 <tcp_input+0x29c>)
 800989c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800989e:	7cbb      	ldrb	r3, [r7, #18]
 80098a0:	4619      	mov	r1, r3
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f7fe f8e8 	bl	8007a78 <pbuf_remove_header>
 80098a8:	e04e      	b.n	8009948 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d105      	bne.n	80098be <tcp_input+0xca>
 80098b2:	4b70      	ldr	r3, [pc, #448]	; (8009a74 <tcp_input+0x280>)
 80098b4:	22c2      	movs	r2, #194	; 0xc2
 80098b6:	4977      	ldr	r1, [pc, #476]	; (8009a94 <tcp_input+0x2a0>)
 80098b8:	4870      	ldr	r0, [pc, #448]	; (8009a7c <tcp_input+0x288>)
 80098ba:	f006 ff3f 	bl	801073c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80098be:	2114      	movs	r1, #20
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f7fe f8d9 	bl	8007a78 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	895a      	ldrh	r2, [r3, #10]
 80098ca:	4b71      	ldr	r3, [pc, #452]	; (8009a90 <tcp_input+0x29c>)
 80098cc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80098ce:	4b6e      	ldr	r3, [pc, #440]	; (8009a88 <tcp_input+0x294>)
 80098d0:	881a      	ldrh	r2, [r3, #0]
 80098d2:	4b6f      	ldr	r3, [pc, #444]	; (8009a90 <tcp_input+0x29c>)
 80098d4:	881b      	ldrh	r3, [r3, #0]
 80098d6:	1ad3      	subs	r3, r2, r3
 80098d8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80098da:	4b6d      	ldr	r3, [pc, #436]	; (8009a90 <tcp_input+0x29c>)
 80098dc:	881b      	ldrh	r3, [r3, #0]
 80098de:	4619      	mov	r1, r3
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f7fe f8c9 	bl	8007a78 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	895b      	ldrh	r3, [r3, #10]
 80098ec:	8a3a      	ldrh	r2, [r7, #16]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	f200 836e 	bhi.w	8009fd0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	4a64      	ldr	r2, [pc, #400]	; (8009a8c <tcp_input+0x298>)
 80098fc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	8a3a      	ldrh	r2, [r7, #16]
 8009904:	4611      	mov	r1, r2
 8009906:	4618      	mov	r0, r3
 8009908:	f7fe f8b6 	bl	8007a78 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	891a      	ldrh	r2, [r3, #8]
 8009910:	8a3b      	ldrh	r3, [r7, #16]
 8009912:	1ad3      	subs	r3, r2, r3
 8009914:	b29a      	uxth	r2, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	895b      	ldrh	r3, [r3, #10]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d005      	beq.n	800992e <tcp_input+0x13a>
 8009922:	4b54      	ldr	r3, [pc, #336]	; (8009a74 <tcp_input+0x280>)
 8009924:	22df      	movs	r2, #223	; 0xdf
 8009926:	495c      	ldr	r1, [pc, #368]	; (8009a98 <tcp_input+0x2a4>)
 8009928:	4854      	ldr	r0, [pc, #336]	; (8009a7c <tcp_input+0x288>)
 800992a:	f006 ff07 	bl	801073c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	891a      	ldrh	r2, [r3, #8]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	891b      	ldrh	r3, [r3, #8]
 8009938:	429a      	cmp	r2, r3
 800993a:	d005      	beq.n	8009948 <tcp_input+0x154>
 800993c:	4b4d      	ldr	r3, [pc, #308]	; (8009a74 <tcp_input+0x280>)
 800993e:	22e0      	movs	r2, #224	; 0xe0
 8009940:	4956      	ldr	r1, [pc, #344]	; (8009a9c <tcp_input+0x2a8>)
 8009942:	484e      	ldr	r0, [pc, #312]	; (8009a7c <tcp_input+0x288>)
 8009944:	f006 fefa 	bl	801073c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009948:	4b4d      	ldr	r3, [pc, #308]	; (8009a80 <tcp_input+0x28c>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	881b      	ldrh	r3, [r3, #0]
 800994e:	b29b      	uxth	r3, r3
 8009950:	4a4b      	ldr	r2, [pc, #300]	; (8009a80 <tcp_input+0x28c>)
 8009952:	6814      	ldr	r4, [r2, #0]
 8009954:	4618      	mov	r0, r3
 8009956:	f7fc fdb7 	bl	80064c8 <lwip_htons>
 800995a:	4603      	mov	r3, r0
 800995c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800995e:	4b48      	ldr	r3, [pc, #288]	; (8009a80 <tcp_input+0x28c>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	885b      	ldrh	r3, [r3, #2]
 8009964:	b29b      	uxth	r3, r3
 8009966:	4a46      	ldr	r2, [pc, #280]	; (8009a80 <tcp_input+0x28c>)
 8009968:	6814      	ldr	r4, [r2, #0]
 800996a:	4618      	mov	r0, r3
 800996c:	f7fc fdac 	bl	80064c8 <lwip_htons>
 8009970:	4603      	mov	r3, r0
 8009972:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009974:	4b42      	ldr	r3, [pc, #264]	; (8009a80 <tcp_input+0x28c>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	4a41      	ldr	r2, [pc, #260]	; (8009a80 <tcp_input+0x28c>)
 800997c:	6814      	ldr	r4, [r2, #0]
 800997e:	4618      	mov	r0, r3
 8009980:	f7fc fdb7 	bl	80064f2 <lwip_htonl>
 8009984:	4603      	mov	r3, r0
 8009986:	6063      	str	r3, [r4, #4]
 8009988:	6863      	ldr	r3, [r4, #4]
 800998a:	4a45      	ldr	r2, [pc, #276]	; (8009aa0 <tcp_input+0x2ac>)
 800998c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800998e:	4b3c      	ldr	r3, [pc, #240]	; (8009a80 <tcp_input+0x28c>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	4a3a      	ldr	r2, [pc, #232]	; (8009a80 <tcp_input+0x28c>)
 8009996:	6814      	ldr	r4, [r2, #0]
 8009998:	4618      	mov	r0, r3
 800999a:	f7fc fdaa 	bl	80064f2 <lwip_htonl>
 800999e:	4603      	mov	r3, r0
 80099a0:	60a3      	str	r3, [r4, #8]
 80099a2:	68a3      	ldr	r3, [r4, #8]
 80099a4:	4a3f      	ldr	r2, [pc, #252]	; (8009aa4 <tcp_input+0x2b0>)
 80099a6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80099a8:	4b35      	ldr	r3, [pc, #212]	; (8009a80 <tcp_input+0x28c>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	89db      	ldrh	r3, [r3, #14]
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	4a33      	ldr	r2, [pc, #204]	; (8009a80 <tcp_input+0x28c>)
 80099b2:	6814      	ldr	r4, [r2, #0]
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7fc fd87 	bl	80064c8 <lwip_htons>
 80099ba:	4603      	mov	r3, r0
 80099bc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80099be:	4b30      	ldr	r3, [pc, #192]	; (8009a80 <tcp_input+0x28c>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	899b      	ldrh	r3, [r3, #12]
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7fc fd7e 	bl	80064c8 <lwip_htons>
 80099cc:	4603      	mov	r3, r0
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099d4:	b2da      	uxtb	r2, r3
 80099d6:	4b34      	ldr	r3, [pc, #208]	; (8009aa8 <tcp_input+0x2b4>)
 80099d8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	891a      	ldrh	r2, [r3, #8]
 80099de:	4b33      	ldr	r3, [pc, #204]	; (8009aac <tcp_input+0x2b8>)
 80099e0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80099e2:	4b31      	ldr	r3, [pc, #196]	; (8009aa8 <tcp_input+0x2b4>)
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	f003 0303 	and.w	r3, r3, #3
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00c      	beq.n	8009a08 <tcp_input+0x214>
    tcplen++;
 80099ee:	4b2f      	ldr	r3, [pc, #188]	; (8009aac <tcp_input+0x2b8>)
 80099f0:	881b      	ldrh	r3, [r3, #0]
 80099f2:	3301      	adds	r3, #1
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	4b2d      	ldr	r3, [pc, #180]	; (8009aac <tcp_input+0x2b8>)
 80099f8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	891a      	ldrh	r2, [r3, #8]
 80099fe:	4b2b      	ldr	r3, [pc, #172]	; (8009aac <tcp_input+0x2b8>)
 8009a00:	881b      	ldrh	r3, [r3, #0]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	f200 82e6 	bhi.w	8009fd4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a0c:	4b28      	ldr	r3, [pc, #160]	; (8009ab0 <tcp_input+0x2bc>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	61fb      	str	r3, [r7, #28]
 8009a12:	e09d      	b.n	8009b50 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	7d1b      	ldrb	r3, [r3, #20]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d105      	bne.n	8009a28 <tcp_input+0x234>
 8009a1c:	4b15      	ldr	r3, [pc, #84]	; (8009a74 <tcp_input+0x280>)
 8009a1e:	22fb      	movs	r2, #251	; 0xfb
 8009a20:	4924      	ldr	r1, [pc, #144]	; (8009ab4 <tcp_input+0x2c0>)
 8009a22:	4816      	ldr	r0, [pc, #88]	; (8009a7c <tcp_input+0x288>)
 8009a24:	f006 fe8a 	bl	801073c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	7d1b      	ldrb	r3, [r3, #20]
 8009a2c:	2b0a      	cmp	r3, #10
 8009a2e:	d105      	bne.n	8009a3c <tcp_input+0x248>
 8009a30:	4b10      	ldr	r3, [pc, #64]	; (8009a74 <tcp_input+0x280>)
 8009a32:	22fc      	movs	r2, #252	; 0xfc
 8009a34:	4920      	ldr	r1, [pc, #128]	; (8009ab8 <tcp_input+0x2c4>)
 8009a36:	4811      	ldr	r0, [pc, #68]	; (8009a7c <tcp_input+0x288>)
 8009a38:	f006 fe80 	bl	801073c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	7d1b      	ldrb	r3, [r3, #20]
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d105      	bne.n	8009a50 <tcp_input+0x25c>
 8009a44:	4b0b      	ldr	r3, [pc, #44]	; (8009a74 <tcp_input+0x280>)
 8009a46:	22fd      	movs	r2, #253	; 0xfd
 8009a48:	491c      	ldr	r1, [pc, #112]	; (8009abc <tcp_input+0x2c8>)
 8009a4a:	480c      	ldr	r0, [pc, #48]	; (8009a7c <tcp_input+0x288>)
 8009a4c:	f006 fe76 	bl	801073c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009a50:	69fb      	ldr	r3, [r7, #28]
 8009a52:	7a1b      	ldrb	r3, [r3, #8]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d033      	beq.n	8009ac0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	7a1a      	ldrb	r2, [r3, #8]
 8009a5c:	4b09      	ldr	r3, [pc, #36]	; (8009a84 <tcp_input+0x290>)
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009a64:	3301      	adds	r3, #1
 8009a66:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d029      	beq.n	8009ac0 <tcp_input+0x2cc>
      prev = pcb;
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	61bb      	str	r3, [r7, #24]
      continue;
 8009a70:	e06b      	b.n	8009b4a <tcp_input+0x356>
 8009a72:	bf00      	nop
 8009a74:	08012d9c 	.word	0x08012d9c
 8009a78:	08012dd0 	.word	0x08012dd0
 8009a7c:	08012de8 	.word	0x08012de8
 8009a80:	200089e8 	.word	0x200089e8
 8009a84:	20005290 	.word	0x20005290
 8009a88:	200089ec 	.word	0x200089ec
 8009a8c:	200089f0 	.word	0x200089f0
 8009a90:	200089ee 	.word	0x200089ee
 8009a94:	08012e10 	.word	0x08012e10
 8009a98:	08012e20 	.word	0x08012e20
 8009a9c:	08012e2c 	.word	0x08012e2c
 8009aa0:	200089f8 	.word	0x200089f8
 8009aa4:	200089fc 	.word	0x200089fc
 8009aa8:	20008a04 	.word	0x20008a04
 8009aac:	20008a02 	.word	0x20008a02
 8009ab0:	200089cc 	.word	0x200089cc
 8009ab4:	08012e4c 	.word	0x08012e4c
 8009ab8:	08012e74 	.word	0x08012e74
 8009abc:	08012ea0 	.word	0x08012ea0
    }

    if (pcb->remote_port == tcphdr->src &&
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	8b1a      	ldrh	r2, [r3, #24]
 8009ac4:	4b72      	ldr	r3, [pc, #456]	; (8009c90 <tcp_input+0x49c>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	881b      	ldrh	r3, [r3, #0]
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d13a      	bne.n	8009b46 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	8ada      	ldrh	r2, [r3, #22]
 8009ad4:	4b6e      	ldr	r3, [pc, #440]	; (8009c90 <tcp_input+0x49c>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	885b      	ldrh	r3, [r3, #2]
 8009ada:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d132      	bne.n	8009b46 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	685a      	ldr	r2, [r3, #4]
 8009ae4:	4b6b      	ldr	r3, [pc, #428]	; (8009c94 <tcp_input+0x4a0>)
 8009ae6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d12c      	bne.n	8009b46 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	4b68      	ldr	r3, [pc, #416]	; (8009c94 <tcp_input+0x4a0>)
 8009af2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d126      	bne.n	8009b46 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009af8:	69fb      	ldr	r3, [r7, #28]
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	69fa      	ldr	r2, [r7, #28]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d106      	bne.n	8009b10 <tcp_input+0x31c>
 8009b02:	4b65      	ldr	r3, [pc, #404]	; (8009c98 <tcp_input+0x4a4>)
 8009b04:	f240 120d 	movw	r2, #269	; 0x10d
 8009b08:	4964      	ldr	r1, [pc, #400]	; (8009c9c <tcp_input+0x4a8>)
 8009b0a:	4865      	ldr	r0, [pc, #404]	; (8009ca0 <tcp_input+0x4ac>)
 8009b0c:	f006 fe16 	bl	801073c <iprintf>
      if (prev != NULL) {
 8009b10:	69bb      	ldr	r3, [r7, #24]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00a      	beq.n	8009b2c <tcp_input+0x338>
        prev->next = pcb->next;
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	68da      	ldr	r2, [r3, #12]
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009b1e:	4b61      	ldr	r3, [pc, #388]	; (8009ca4 <tcp_input+0x4b0>)
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009b26:	4a5f      	ldr	r2, [pc, #380]	; (8009ca4 <tcp_input+0x4b0>)
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	69fa      	ldr	r2, [r7, #28]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d111      	bne.n	8009b5a <tcp_input+0x366>
 8009b36:	4b58      	ldr	r3, [pc, #352]	; (8009c98 <tcp_input+0x4a4>)
 8009b38:	f240 1215 	movw	r2, #277	; 0x115
 8009b3c:	495a      	ldr	r1, [pc, #360]	; (8009ca8 <tcp_input+0x4b4>)
 8009b3e:	4858      	ldr	r0, [pc, #352]	; (8009ca0 <tcp_input+0x4ac>)
 8009b40:	f006 fdfc 	bl	801073c <iprintf>
      break;
 8009b44:	e009      	b.n	8009b5a <tcp_input+0x366>
    }
    prev = pcb;
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	68db      	ldr	r3, [r3, #12]
 8009b4e:	61fb      	str	r3, [r7, #28]
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	f47f af5e 	bne.w	8009a14 <tcp_input+0x220>
 8009b58:	e000      	b.n	8009b5c <tcp_input+0x368>
      break;
 8009b5a:	bf00      	nop
  }

  if (pcb == NULL) {
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f040 80aa 	bne.w	8009cb8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b64:	4b51      	ldr	r3, [pc, #324]	; (8009cac <tcp_input+0x4b8>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	61fb      	str	r3, [r7, #28]
 8009b6a:	e03f      	b.n	8009bec <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	7d1b      	ldrb	r3, [r3, #20]
 8009b70:	2b0a      	cmp	r3, #10
 8009b72:	d006      	beq.n	8009b82 <tcp_input+0x38e>
 8009b74:	4b48      	ldr	r3, [pc, #288]	; (8009c98 <tcp_input+0x4a4>)
 8009b76:	f240 121f 	movw	r2, #287	; 0x11f
 8009b7a:	494d      	ldr	r1, [pc, #308]	; (8009cb0 <tcp_input+0x4bc>)
 8009b7c:	4848      	ldr	r0, [pc, #288]	; (8009ca0 <tcp_input+0x4ac>)
 8009b7e:	f006 fddd 	bl	801073c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	7a1b      	ldrb	r3, [r3, #8]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d009      	beq.n	8009b9e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	7a1a      	ldrb	r2, [r3, #8]
 8009b8e:	4b41      	ldr	r3, [pc, #260]	; (8009c94 <tcp_input+0x4a0>)
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009b96:	3301      	adds	r3, #1
 8009b98:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d122      	bne.n	8009be4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8009b9e:	69fb      	ldr	r3, [r7, #28]
 8009ba0:	8b1a      	ldrh	r2, [r3, #24]
 8009ba2:	4b3b      	ldr	r3, [pc, #236]	; (8009c90 <tcp_input+0x49c>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	881b      	ldrh	r3, [r3, #0]
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d11b      	bne.n	8009be6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8009bae:	69fb      	ldr	r3, [r7, #28]
 8009bb0:	8ada      	ldrh	r2, [r3, #22]
 8009bb2:	4b37      	ldr	r3, [pc, #220]	; (8009c90 <tcp_input+0x49c>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	885b      	ldrh	r3, [r3, #2]
 8009bb8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d113      	bne.n	8009be6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	685a      	ldr	r2, [r3, #4]
 8009bc2:	4b34      	ldr	r3, [pc, #208]	; (8009c94 <tcp_input+0x4a0>)
 8009bc4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d10d      	bne.n	8009be6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	4b31      	ldr	r3, [pc, #196]	; (8009c94 <tcp_input+0x4a0>)
 8009bd0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d107      	bne.n	8009be6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009bd6:	69f8      	ldr	r0, [r7, #28]
 8009bd8:	f000 fb56 	bl	800a288 <tcp_timewait_input>
        }
        pbuf_free(p);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f7fd ffd1 	bl	8007b84 <pbuf_free>
        return;
 8009be2:	e1fd      	b.n	8009fe0 <tcp_input+0x7ec>
        continue;
 8009be4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	61fb      	str	r3, [r7, #28]
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d1bc      	bne.n	8009b6c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009bf6:	4b2f      	ldr	r3, [pc, #188]	; (8009cb4 <tcp_input+0x4c0>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	617b      	str	r3, [r7, #20]
 8009bfc:	e02a      	b.n	8009c54 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	7a1b      	ldrb	r3, [r3, #8]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00c      	beq.n	8009c20 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	7a1a      	ldrb	r2, [r3, #8]
 8009c0a:	4b22      	ldr	r3, [pc, #136]	; (8009c94 <tcp_input+0x4a0>)
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009c12:	3301      	adds	r3, #1
 8009c14:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d002      	beq.n	8009c20 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	61bb      	str	r3, [r7, #24]
        continue;
 8009c1e:	e016      	b.n	8009c4e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	8ada      	ldrh	r2, [r3, #22]
 8009c24:	4b1a      	ldr	r3, [pc, #104]	; (8009c90 <tcp_input+0x49c>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	885b      	ldrh	r3, [r3, #2]
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d10c      	bne.n	8009c4a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	4b17      	ldr	r3, [pc, #92]	; (8009c94 <tcp_input+0x4a0>)
 8009c36:	695b      	ldr	r3, [r3, #20]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d00f      	beq.n	8009c5c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00d      	beq.n	8009c5e <tcp_input+0x46a>
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d009      	beq.n	8009c5e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	617b      	str	r3, [r7, #20]
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1d1      	bne.n	8009bfe <tcp_input+0x40a>
 8009c5a:	e000      	b.n	8009c5e <tcp_input+0x46a>
            break;
 8009c5c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d029      	beq.n	8009cb8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00a      	beq.n	8009c80 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	68da      	ldr	r2, [r3, #12]
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009c72:	4b10      	ldr	r3, [pc, #64]	; (8009cb4 <tcp_input+0x4c0>)
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009c7a:	4a0e      	ldr	r2, [pc, #56]	; (8009cb4 <tcp_input+0x4c0>)
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8009c80:	6978      	ldr	r0, [r7, #20]
 8009c82:	f000 fa03 	bl	800a08c <tcp_listen_input>
      }
      pbuf_free(p);
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f7fd ff7c 	bl	8007b84 <pbuf_free>
      return;
 8009c8c:	e1a8      	b.n	8009fe0 <tcp_input+0x7ec>
 8009c8e:	bf00      	nop
 8009c90:	200089e8 	.word	0x200089e8
 8009c94:	20005290 	.word	0x20005290
 8009c98:	08012d9c 	.word	0x08012d9c
 8009c9c:	08012ec8 	.word	0x08012ec8
 8009ca0:	08012de8 	.word	0x08012de8
 8009ca4:	200089cc 	.word	0x200089cc
 8009ca8:	08012ef4 	.word	0x08012ef4
 8009cac:	200089d0 	.word	0x200089d0
 8009cb0:	08012f20 	.word	0x08012f20
 8009cb4:	200089c8 	.word	0x200089c8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	f000 8158 	beq.w	8009f70 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009cc0:	4b95      	ldr	r3, [pc, #596]	; (8009f18 <tcp_input+0x724>)
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	891a      	ldrh	r2, [r3, #8]
 8009cca:	4b93      	ldr	r3, [pc, #588]	; (8009f18 <tcp_input+0x724>)
 8009ccc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009cce:	4a92      	ldr	r2, [pc, #584]	; (8009f18 <tcp_input+0x724>)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009cd4:	4b91      	ldr	r3, [pc, #580]	; (8009f1c <tcp_input+0x728>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a8f      	ldr	r2, [pc, #572]	; (8009f18 <tcp_input+0x724>)
 8009cda:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8009cdc:	4b90      	ldr	r3, [pc, #576]	; (8009f20 <tcp_input+0x72c>)
 8009cde:	2200      	movs	r2, #0
 8009ce0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009ce2:	4b90      	ldr	r3, [pc, #576]	; (8009f24 <tcp_input+0x730>)
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009ce8:	4b8f      	ldr	r3, [pc, #572]	; (8009f28 <tcp_input+0x734>)
 8009cea:	2200      	movs	r2, #0
 8009cec:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009cee:	4b8f      	ldr	r3, [pc, #572]	; (8009f2c <tcp_input+0x738>)
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	f003 0308 	and.w	r3, r3, #8
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d006      	beq.n	8009d08 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	7b5b      	ldrb	r3, [r3, #13]
 8009cfe:	f043 0301 	orr.w	r3, r3, #1
 8009d02:	b2da      	uxtb	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d017      	beq.n	8009d40 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009d10:	69f8      	ldr	r0, [r7, #28]
 8009d12:	f7ff f929 	bl	8008f68 <tcp_process_refused_data>
 8009d16:	4603      	mov	r3, r0
 8009d18:	f113 0f0d 	cmn.w	r3, #13
 8009d1c:	d007      	beq.n	8009d2e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d00c      	beq.n	8009d40 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009d26:	4b82      	ldr	r3, [pc, #520]	; (8009f30 <tcp_input+0x73c>)
 8009d28:	881b      	ldrh	r3, [r3, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d008      	beq.n	8009d40 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009d2e:	69fb      	ldr	r3, [r7, #28]
 8009d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f040 80e3 	bne.w	8009efe <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009d38:	69f8      	ldr	r0, [r7, #28]
 8009d3a:	f003 f9ad 	bl	800d098 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009d3e:	e0de      	b.n	8009efe <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8009d40:	4a7c      	ldr	r2, [pc, #496]	; (8009f34 <tcp_input+0x740>)
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009d46:	69f8      	ldr	r0, [r7, #28]
 8009d48:	f000 fb18 	bl	800a37c <tcp_process>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009d50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009d54:	f113 0f0d 	cmn.w	r3, #13
 8009d58:	f000 80d3 	beq.w	8009f02 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8009d5c:	4b71      	ldr	r3, [pc, #452]	; (8009f24 <tcp_input+0x730>)
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	f003 0308 	and.w	r3, r3, #8
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d015      	beq.n	8009d94 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d008      	beq.n	8009d84 <tcp_input+0x590>
 8009d72:	69fb      	ldr	r3, [r7, #28]
 8009d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d78:	69fa      	ldr	r2, [r7, #28]
 8009d7a:	6912      	ldr	r2, [r2, #16]
 8009d7c:	f06f 010d 	mvn.w	r1, #13
 8009d80:	4610      	mov	r0, r2
 8009d82:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009d84:	69f9      	ldr	r1, [r7, #28]
 8009d86:	486c      	ldr	r0, [pc, #432]	; (8009f38 <tcp_input+0x744>)
 8009d88:	f7ff fbbc 	bl	8009504 <tcp_pcb_remove>
        tcp_free(pcb);
 8009d8c:	69f8      	ldr	r0, [r7, #28]
 8009d8e:	f7fe f9a9 	bl	80080e4 <tcp_free>
 8009d92:	e0da      	b.n	8009f4a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8009d94:	2300      	movs	r3, #0
 8009d96:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009d98:	4b63      	ldr	r3, [pc, #396]	; (8009f28 <tcp_input+0x734>)
 8009d9a:	881b      	ldrh	r3, [r3, #0]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d01d      	beq.n	8009ddc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009da0:	4b61      	ldr	r3, [pc, #388]	; (8009f28 <tcp_input+0x734>)
 8009da2:	881b      	ldrh	r3, [r3, #0]
 8009da4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d00a      	beq.n	8009dc6 <tcp_input+0x5d2>
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009db6:	69fa      	ldr	r2, [r7, #28]
 8009db8:	6910      	ldr	r0, [r2, #16]
 8009dba:	89fa      	ldrh	r2, [r7, #14]
 8009dbc:	69f9      	ldr	r1, [r7, #28]
 8009dbe:	4798      	blx	r3
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	74fb      	strb	r3, [r7, #19]
 8009dc4:	e001      	b.n	8009dca <tcp_input+0x5d6>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009dca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009dce:	f113 0f0d 	cmn.w	r3, #13
 8009dd2:	f000 8098 	beq.w	8009f06 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009dd6:	4b54      	ldr	r3, [pc, #336]	; (8009f28 <tcp_input+0x734>)
 8009dd8:	2200      	movs	r2, #0
 8009dda:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009ddc:	69f8      	ldr	r0, [r7, #28]
 8009dde:	f000 f915 	bl	800a00c <tcp_input_delayed_close>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	f040 8090 	bne.w	8009f0a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009dea:	4b4d      	ldr	r3, [pc, #308]	; (8009f20 <tcp_input+0x72c>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d041      	beq.n	8009e76 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d006      	beq.n	8009e08 <tcp_input+0x614>
 8009dfa:	4b50      	ldr	r3, [pc, #320]	; (8009f3c <tcp_input+0x748>)
 8009dfc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009e00:	494f      	ldr	r1, [pc, #316]	; (8009f40 <tcp_input+0x74c>)
 8009e02:	4850      	ldr	r0, [pc, #320]	; (8009f44 <tcp_input+0x750>)
 8009e04:	f006 fc9a 	bl	801073c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	8b5b      	ldrh	r3, [r3, #26]
 8009e0c:	f003 0310 	and.w	r3, r3, #16
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d008      	beq.n	8009e26 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009e14:	4b42      	ldr	r3, [pc, #264]	; (8009f20 <tcp_input+0x72c>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7fd feb3 	bl	8007b84 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009e1e:	69f8      	ldr	r0, [r7, #28]
 8009e20:	f7fe fc48 	bl	80086b4 <tcp_abort>
            goto aborted;
 8009e24:	e091      	b.n	8009f4a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d00c      	beq.n	8009e4a <tcp_input+0x656>
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	6918      	ldr	r0, [r3, #16]
 8009e3a:	4b39      	ldr	r3, [pc, #228]	; (8009f20 <tcp_input+0x72c>)
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	2300      	movs	r3, #0
 8009e40:	69f9      	ldr	r1, [r7, #28]
 8009e42:	47a0      	blx	r4
 8009e44:	4603      	mov	r3, r0
 8009e46:	74fb      	strb	r3, [r7, #19]
 8009e48:	e008      	b.n	8009e5c <tcp_input+0x668>
 8009e4a:	4b35      	ldr	r3, [pc, #212]	; (8009f20 <tcp_input+0x72c>)
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	2300      	movs	r3, #0
 8009e50:	69f9      	ldr	r1, [r7, #28]
 8009e52:	2000      	movs	r0, #0
 8009e54:	f7ff f95e 	bl	8009114 <tcp_recv_null>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009e5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009e60:	f113 0f0d 	cmn.w	r3, #13
 8009e64:	d053      	beq.n	8009f0e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009e66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d003      	beq.n	8009e76 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009e6e:	4b2c      	ldr	r3, [pc, #176]	; (8009f20 <tcp_input+0x72c>)
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009e76:	4b2b      	ldr	r3, [pc, #172]	; (8009f24 <tcp_input+0x730>)
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	f003 0320 	and.w	r3, r3, #32
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d030      	beq.n	8009ee4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d009      	beq.n	8009e9e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009e8a:	69fb      	ldr	r3, [r7, #28]
 8009e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e8e:	7b5a      	ldrb	r2, [r3, #13]
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e94:	f042 0220 	orr.w	r2, r2, #32
 8009e98:	b2d2      	uxtb	r2, r2
 8009e9a:	735a      	strb	r2, [r3, #13]
 8009e9c:	e022      	b.n	8009ee4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ea2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009ea6:	d005      	beq.n	8009eb4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eac:	3301      	adds	r3, #1
 8009eae:	b29a      	uxth	r2, r3
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009eb4:	69fb      	ldr	r3, [r7, #28]
 8009eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d00b      	beq.n	8009ed6 <tcp_input+0x6e2>
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	6918      	ldr	r0, [r3, #16]
 8009ec8:	2300      	movs	r3, #0
 8009eca:	2200      	movs	r2, #0
 8009ecc:	69f9      	ldr	r1, [r7, #28]
 8009ece:	47a0      	blx	r4
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	74fb      	strb	r3, [r7, #19]
 8009ed4:	e001      	b.n	8009eda <tcp_input+0x6e6>
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009eda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ede:	f113 0f0d 	cmn.w	r3, #13
 8009ee2:	d016      	beq.n	8009f12 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009ee4:	4b13      	ldr	r3, [pc, #76]	; (8009f34 <tcp_input+0x740>)
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009eea:	69f8      	ldr	r0, [r7, #28]
 8009eec:	f000 f88e 	bl	800a00c <tcp_input_delayed_close>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d128      	bne.n	8009f48 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009ef6:	69f8      	ldr	r0, [r7, #28]
 8009ef8:	f002 fac8 	bl	800c48c <tcp_output>
 8009efc:	e025      	b.n	8009f4a <tcp_input+0x756>
        goto aborted;
 8009efe:	bf00      	nop
 8009f00:	e023      	b.n	8009f4a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009f02:	bf00      	nop
 8009f04:	e021      	b.n	8009f4a <tcp_input+0x756>
              goto aborted;
 8009f06:	bf00      	nop
 8009f08:	e01f      	b.n	8009f4a <tcp_input+0x756>
          goto aborted;
 8009f0a:	bf00      	nop
 8009f0c:	e01d      	b.n	8009f4a <tcp_input+0x756>
            goto aborted;
 8009f0e:	bf00      	nop
 8009f10:	e01b      	b.n	8009f4a <tcp_input+0x756>
              goto aborted;
 8009f12:	bf00      	nop
 8009f14:	e019      	b.n	8009f4a <tcp_input+0x756>
 8009f16:	bf00      	nop
 8009f18:	200089d8 	.word	0x200089d8
 8009f1c:	200089e8 	.word	0x200089e8
 8009f20:	20008a08 	.word	0x20008a08
 8009f24:	20008a05 	.word	0x20008a05
 8009f28:	20008a00 	.word	0x20008a00
 8009f2c:	20008a04 	.word	0x20008a04
 8009f30:	20008a02 	.word	0x20008a02
 8009f34:	20008a0c 	.word	0x20008a0c
 8009f38:	200089cc 	.word	0x200089cc
 8009f3c:	08012d9c 	.word	0x08012d9c
 8009f40:	08012f50 	.word	0x08012f50
 8009f44:	08012de8 	.word	0x08012de8
          goto aborted;
 8009f48:	bf00      	nop
    tcp_input_pcb = NULL;
 8009f4a:	4b27      	ldr	r3, [pc, #156]	; (8009fe8 <tcp_input+0x7f4>)
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009f50:	4b26      	ldr	r3, [pc, #152]	; (8009fec <tcp_input+0x7f8>)
 8009f52:	2200      	movs	r2, #0
 8009f54:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009f56:	4b26      	ldr	r3, [pc, #152]	; (8009ff0 <tcp_input+0x7fc>)
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d03f      	beq.n	8009fde <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8009f5e:	4b24      	ldr	r3, [pc, #144]	; (8009ff0 <tcp_input+0x7fc>)
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7fd fe0e 	bl	8007b84 <pbuf_free>
      inseg.p = NULL;
 8009f68:	4b21      	ldr	r3, [pc, #132]	; (8009ff0 <tcp_input+0x7fc>)
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009f6e:	e036      	b.n	8009fde <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009f70:	4b20      	ldr	r3, [pc, #128]	; (8009ff4 <tcp_input+0x800>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	899b      	ldrh	r3, [r3, #12]
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7fc faa5 	bl	80064c8 <lwip_htons>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	f003 0304 	and.w	r3, r3, #4
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d118      	bne.n	8009fbc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f8a:	4b1b      	ldr	r3, [pc, #108]	; (8009ff8 <tcp_input+0x804>)
 8009f8c:	6819      	ldr	r1, [r3, #0]
 8009f8e:	4b1b      	ldr	r3, [pc, #108]	; (8009ffc <tcp_input+0x808>)
 8009f90:	881b      	ldrh	r3, [r3, #0]
 8009f92:	461a      	mov	r2, r3
 8009f94:	4b1a      	ldr	r3, [pc, #104]	; (800a000 <tcp_input+0x80c>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009f9a:	4b16      	ldr	r3, [pc, #88]	; (8009ff4 <tcp_input+0x800>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f9e:	885b      	ldrh	r3, [r3, #2]
 8009fa0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009fa2:	4a14      	ldr	r2, [pc, #80]	; (8009ff4 <tcp_input+0x800>)
 8009fa4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009fa6:	8812      	ldrh	r2, [r2, #0]
 8009fa8:	b292      	uxth	r2, r2
 8009faa:	9202      	str	r2, [sp, #8]
 8009fac:	9301      	str	r3, [sp, #4]
 8009fae:	4b15      	ldr	r3, [pc, #84]	; (800a004 <tcp_input+0x810>)
 8009fb0:	9300      	str	r3, [sp, #0]
 8009fb2:	4b15      	ldr	r3, [pc, #84]	; (800a008 <tcp_input+0x814>)
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	2000      	movs	r0, #0
 8009fb8:	f003 f81c 	bl	800cff4 <tcp_rst>
    pbuf_free(p);
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f7fd fde1 	bl	8007b84 <pbuf_free>
  return;
 8009fc2:	e00c      	b.n	8009fde <tcp_input+0x7ea>
    goto dropped;
 8009fc4:	bf00      	nop
 8009fc6:	e006      	b.n	8009fd6 <tcp_input+0x7e2>
    goto dropped;
 8009fc8:	bf00      	nop
 8009fca:	e004      	b.n	8009fd6 <tcp_input+0x7e2>
    goto dropped;
 8009fcc:	bf00      	nop
 8009fce:	e002      	b.n	8009fd6 <tcp_input+0x7e2>
      goto dropped;
 8009fd0:	bf00      	nop
 8009fd2:	e000      	b.n	8009fd6 <tcp_input+0x7e2>
      goto dropped;
 8009fd4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f7fd fdd4 	bl	8007b84 <pbuf_free>
 8009fdc:	e000      	b.n	8009fe0 <tcp_input+0x7ec>
  return;
 8009fde:	bf00      	nop
}
 8009fe0:	3724      	adds	r7, #36	; 0x24
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd90      	pop	{r4, r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	20008a0c 	.word	0x20008a0c
 8009fec:	20008a08 	.word	0x20008a08
 8009ff0:	200089d8 	.word	0x200089d8
 8009ff4:	200089e8 	.word	0x200089e8
 8009ff8:	200089fc 	.word	0x200089fc
 8009ffc:	20008a02 	.word	0x20008a02
 800a000:	200089f8 	.word	0x200089f8
 800a004:	200052a0 	.word	0x200052a0
 800a008:	200052a4 	.word	0x200052a4

0800a00c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d106      	bne.n	800a028 <tcp_input_delayed_close+0x1c>
 800a01a:	4b17      	ldr	r3, [pc, #92]	; (800a078 <tcp_input_delayed_close+0x6c>)
 800a01c:	f240 225a 	movw	r2, #602	; 0x25a
 800a020:	4916      	ldr	r1, [pc, #88]	; (800a07c <tcp_input_delayed_close+0x70>)
 800a022:	4817      	ldr	r0, [pc, #92]	; (800a080 <tcp_input_delayed_close+0x74>)
 800a024:	f006 fb8a 	bl	801073c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a028:	4b16      	ldr	r3, [pc, #88]	; (800a084 <tcp_input_delayed_close+0x78>)
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	f003 0310 	and.w	r3, r3, #16
 800a030:	2b00      	cmp	r3, #0
 800a032:	d01c      	beq.n	800a06e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	8b5b      	ldrh	r3, [r3, #26]
 800a038:	f003 0310 	and.w	r3, r3, #16
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d10d      	bne.n	800a05c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a046:	2b00      	cmp	r3, #0
 800a048:	d008      	beq.n	800a05c <tcp_input_delayed_close+0x50>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	6912      	ldr	r2, [r2, #16]
 800a054:	f06f 010e 	mvn.w	r1, #14
 800a058:	4610      	mov	r0, r2
 800a05a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a05c:	6879      	ldr	r1, [r7, #4]
 800a05e:	480a      	ldr	r0, [pc, #40]	; (800a088 <tcp_input_delayed_close+0x7c>)
 800a060:	f7ff fa50 	bl	8009504 <tcp_pcb_remove>
    tcp_free(pcb);
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f7fe f83d 	bl	80080e4 <tcp_free>
    return 1;
 800a06a:	2301      	movs	r3, #1
 800a06c:	e000      	b.n	800a070 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a06e:	2300      	movs	r3, #0
}
 800a070:	4618      	mov	r0, r3
 800a072:	3708      	adds	r7, #8
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	08012d9c 	.word	0x08012d9c
 800a07c:	08012f6c 	.word	0x08012f6c
 800a080:	08012de8 	.word	0x08012de8
 800a084:	20008a05 	.word	0x20008a05
 800a088:	200089cc 	.word	0x200089cc

0800a08c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a08c:	b590      	push	{r4, r7, lr}
 800a08e:	b08b      	sub	sp, #44	; 0x2c
 800a090:	af04      	add	r7, sp, #16
 800a092:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a094:	4b6f      	ldr	r3, [pc, #444]	; (800a254 <tcp_listen_input+0x1c8>)
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	f003 0304 	and.w	r3, r3, #4
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f040 80d2 	bne.w	800a246 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d106      	bne.n	800a0b6 <tcp_listen_input+0x2a>
 800a0a8:	4b6b      	ldr	r3, [pc, #428]	; (800a258 <tcp_listen_input+0x1cc>)
 800a0aa:	f240 2281 	movw	r2, #641	; 0x281
 800a0ae:	496b      	ldr	r1, [pc, #428]	; (800a25c <tcp_listen_input+0x1d0>)
 800a0b0:	486b      	ldr	r0, [pc, #428]	; (800a260 <tcp_listen_input+0x1d4>)
 800a0b2:	f006 fb43 	bl	801073c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a0b6:	4b67      	ldr	r3, [pc, #412]	; (800a254 <tcp_listen_input+0x1c8>)
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	f003 0310 	and.w	r3, r3, #16
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d019      	beq.n	800a0f6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0c2:	4b68      	ldr	r3, [pc, #416]	; (800a264 <tcp_listen_input+0x1d8>)
 800a0c4:	6819      	ldr	r1, [r3, #0]
 800a0c6:	4b68      	ldr	r3, [pc, #416]	; (800a268 <tcp_listen_input+0x1dc>)
 800a0c8:	881b      	ldrh	r3, [r3, #0]
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	4b67      	ldr	r3, [pc, #412]	; (800a26c <tcp_listen_input+0x1e0>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a0d2:	4b67      	ldr	r3, [pc, #412]	; (800a270 <tcp_listen_input+0x1e4>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0d6:	885b      	ldrh	r3, [r3, #2]
 800a0d8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a0da:	4a65      	ldr	r2, [pc, #404]	; (800a270 <tcp_listen_input+0x1e4>)
 800a0dc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0de:	8812      	ldrh	r2, [r2, #0]
 800a0e0:	b292      	uxth	r2, r2
 800a0e2:	9202      	str	r2, [sp, #8]
 800a0e4:	9301      	str	r3, [sp, #4]
 800a0e6:	4b63      	ldr	r3, [pc, #396]	; (800a274 <tcp_listen_input+0x1e8>)
 800a0e8:	9300      	str	r3, [sp, #0]
 800a0ea:	4b63      	ldr	r3, [pc, #396]	; (800a278 <tcp_listen_input+0x1ec>)
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f002 ff80 	bl	800cff4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a0f4:	e0a9      	b.n	800a24a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a0f6:	4b57      	ldr	r3, [pc, #348]	; (800a254 <tcp_listen_input+0x1c8>)
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	f003 0302 	and.w	r3, r3, #2
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	f000 80a3 	beq.w	800a24a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	7d5b      	ldrb	r3, [r3, #21]
 800a108:	4618      	mov	r0, r3
 800a10a:	f7ff f927 	bl	800935c <tcp_alloc>
 800a10e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d111      	bne.n	800a13a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	699b      	ldr	r3, [r3, #24]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00a      	beq.n	800a134 <tcp_listen_input+0xa8>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	699b      	ldr	r3, [r3, #24]
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	6910      	ldr	r0, [r2, #16]
 800a126:	f04f 32ff 	mov.w	r2, #4294967295
 800a12a:	2100      	movs	r1, #0
 800a12c:	4798      	blx	r3
 800a12e:	4603      	mov	r3, r0
 800a130:	73bb      	strb	r3, [r7, #14]
      return;
 800a132:	e08b      	b.n	800a24c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a134:	23f0      	movs	r3, #240	; 0xf0
 800a136:	73bb      	strb	r3, [r7, #14]
      return;
 800a138:	e088      	b.n	800a24c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a13a:	4b50      	ldr	r3, [pc, #320]	; (800a27c <tcp_listen_input+0x1f0>)
 800a13c:	695a      	ldr	r2, [r3, #20]
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a142:	4b4e      	ldr	r3, [pc, #312]	; (800a27c <tcp_listen_input+0x1f0>)
 800a144:	691a      	ldr	r2, [r3, #16]
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	8ada      	ldrh	r2, [r3, #22]
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a152:	4b47      	ldr	r3, [pc, #284]	; (800a270 <tcp_listen_input+0x1e4>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	881b      	ldrh	r3, [r3, #0]
 800a158:	b29a      	uxth	r2, r3
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	2203      	movs	r2, #3
 800a162:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a164:	4b41      	ldr	r3, [pc, #260]	; (800a26c <tcp_listen_input+0x1e0>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	1c5a      	adds	r2, r3, #1
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800a176:	6978      	ldr	r0, [r7, #20]
 800a178:	f7ff fa58 	bl	800962c <tcp_next_iss>
 800a17c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	693a      	ldr	r2, [r7, #16]
 800a182:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	693a      	ldr	r2, [r7, #16]
 800a188:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	693a      	ldr	r2, [r7, #16]
 800a18e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	693a      	ldr	r2, [r7, #16]
 800a194:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a196:	4b35      	ldr	r3, [pc, #212]	; (800a26c <tcp_listen_input+0x1e0>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	1e5a      	subs	r2, r3, #1
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	691a      	ldr	r2, [r3, #16]
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	7a5b      	ldrb	r3, [r3, #9]
 800a1b2:	f003 030c 	and.w	r3, r3, #12
 800a1b6:	b2da      	uxtb	r2, r3
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	7a1a      	ldrb	r2, [r3, #8]
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a1c4:	4b2e      	ldr	r3, [pc, #184]	; (800a280 <tcp_listen_input+0x1f4>)
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	60da      	str	r2, [r3, #12]
 800a1cc:	4a2c      	ldr	r2, [pc, #176]	; (800a280 <tcp_listen_input+0x1f4>)
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	6013      	str	r3, [r2, #0]
 800a1d2:	f003 f8d1 	bl	800d378 <tcp_timer_needed>
 800a1d6:	4b2b      	ldr	r3, [pc, #172]	; (800a284 <tcp_listen_input+0x1f8>)
 800a1d8:	2201      	movs	r2, #1
 800a1da:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a1dc:	6978      	ldr	r0, [r7, #20]
 800a1de:	f001 fd8f 	bl	800bd00 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a1e2:	4b23      	ldr	r3, [pc, #140]	; (800a270 <tcp_listen_input+0x1e4>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	89db      	ldrh	r3, [r3, #14]
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	3304      	adds	r3, #4
 800a204:	4618      	mov	r0, r3
 800a206:	f004 ffad 	bl	800f164 <ip4_route>
 800a20a:	4601      	mov	r1, r0
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	3304      	adds	r3, #4
 800a210:	461a      	mov	r2, r3
 800a212:	4620      	mov	r0, r4
 800a214:	f7ff fa30 	bl	8009678 <tcp_eff_send_mss_netif>
 800a218:	4603      	mov	r3, r0
 800a21a:	461a      	mov	r2, r3
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a220:	2112      	movs	r1, #18
 800a222:	6978      	ldr	r0, [r7, #20]
 800a224:	f002 f844 	bl	800c2b0 <tcp_enqueue_flags>
 800a228:	4603      	mov	r3, r0
 800a22a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a22c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d004      	beq.n	800a23e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a234:	2100      	movs	r1, #0
 800a236:	6978      	ldr	r0, [r7, #20]
 800a238:	f7fe f97e 	bl	8008538 <tcp_abandon>
      return;
 800a23c:	e006      	b.n	800a24c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a23e:	6978      	ldr	r0, [r7, #20]
 800a240:	f002 f924 	bl	800c48c <tcp_output>
  return;
 800a244:	e001      	b.n	800a24a <tcp_listen_input+0x1be>
    return;
 800a246:	bf00      	nop
 800a248:	e000      	b.n	800a24c <tcp_listen_input+0x1c0>
  return;
 800a24a:	bf00      	nop
}
 800a24c:	371c      	adds	r7, #28
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd90      	pop	{r4, r7, pc}
 800a252:	bf00      	nop
 800a254:	20008a04 	.word	0x20008a04
 800a258:	08012d9c 	.word	0x08012d9c
 800a25c:	08012f94 	.word	0x08012f94
 800a260:	08012de8 	.word	0x08012de8
 800a264:	200089fc 	.word	0x200089fc
 800a268:	20008a02 	.word	0x20008a02
 800a26c:	200089f8 	.word	0x200089f8
 800a270:	200089e8 	.word	0x200089e8
 800a274:	200052a0 	.word	0x200052a0
 800a278:	200052a4 	.word	0x200052a4
 800a27c:	20005290 	.word	0x20005290
 800a280:	200089cc 	.word	0x200089cc
 800a284:	200089d4 	.word	0x200089d4

0800a288 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b086      	sub	sp, #24
 800a28c:	af04      	add	r7, sp, #16
 800a28e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a290:	4b2f      	ldr	r3, [pc, #188]	; (800a350 <tcp_timewait_input+0xc8>)
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	f003 0304 	and.w	r3, r3, #4
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d153      	bne.n	800a344 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d106      	bne.n	800a2b0 <tcp_timewait_input+0x28>
 800a2a2:	4b2c      	ldr	r3, [pc, #176]	; (800a354 <tcp_timewait_input+0xcc>)
 800a2a4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a2a8:	492b      	ldr	r1, [pc, #172]	; (800a358 <tcp_timewait_input+0xd0>)
 800a2aa:	482c      	ldr	r0, [pc, #176]	; (800a35c <tcp_timewait_input+0xd4>)
 800a2ac:	f006 fa46 	bl	801073c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a2b0:	4b27      	ldr	r3, [pc, #156]	; (800a350 <tcp_timewait_input+0xc8>)
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	f003 0302 	and.w	r3, r3, #2
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d02a      	beq.n	800a312 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a2bc:	4b28      	ldr	r3, [pc, #160]	; (800a360 <tcp_timewait_input+0xd8>)
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c4:	1ad3      	subs	r3, r2, r3
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	db2d      	blt.n	800a326 <tcp_timewait_input+0x9e>
 800a2ca:	4b25      	ldr	r3, [pc, #148]	; (800a360 <tcp_timewait_input+0xd8>)
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d2:	6879      	ldr	r1, [r7, #4]
 800a2d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a2d6:	440b      	add	r3, r1
 800a2d8:	1ad3      	subs	r3, r2, r3
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	dc23      	bgt.n	800a326 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a2de:	4b21      	ldr	r3, [pc, #132]	; (800a364 <tcp_timewait_input+0xdc>)
 800a2e0:	6819      	ldr	r1, [r3, #0]
 800a2e2:	4b21      	ldr	r3, [pc, #132]	; (800a368 <tcp_timewait_input+0xe0>)
 800a2e4:	881b      	ldrh	r3, [r3, #0]
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	4b1d      	ldr	r3, [pc, #116]	; (800a360 <tcp_timewait_input+0xd8>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a2ee:	4b1f      	ldr	r3, [pc, #124]	; (800a36c <tcp_timewait_input+0xe4>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a2f2:	885b      	ldrh	r3, [r3, #2]
 800a2f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a2f6:	4a1d      	ldr	r2, [pc, #116]	; (800a36c <tcp_timewait_input+0xe4>)
 800a2f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a2fa:	8812      	ldrh	r2, [r2, #0]
 800a2fc:	b292      	uxth	r2, r2
 800a2fe:	9202      	str	r2, [sp, #8]
 800a300:	9301      	str	r3, [sp, #4]
 800a302:	4b1b      	ldr	r3, [pc, #108]	; (800a370 <tcp_timewait_input+0xe8>)
 800a304:	9300      	str	r3, [sp, #0]
 800a306:	4b1b      	ldr	r3, [pc, #108]	; (800a374 <tcp_timewait_input+0xec>)
 800a308:	4602      	mov	r2, r0
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f002 fe72 	bl	800cff4 <tcp_rst>
      return;
 800a310:	e01b      	b.n	800a34a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a312:	4b0f      	ldr	r3, [pc, #60]	; (800a350 <tcp_timewait_input+0xc8>)
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	f003 0301 	and.w	r3, r3, #1
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d003      	beq.n	800a326 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a31e:	4b16      	ldr	r3, [pc, #88]	; (800a378 <tcp_timewait_input+0xf0>)
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a326:	4b10      	ldr	r3, [pc, #64]	; (800a368 <tcp_timewait_input+0xe0>)
 800a328:	881b      	ldrh	r3, [r3, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d00c      	beq.n	800a348 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	8b5b      	ldrh	r3, [r3, #26]
 800a332:	f043 0302 	orr.w	r3, r3, #2
 800a336:	b29a      	uxth	r2, r3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f002 f8a5 	bl	800c48c <tcp_output>
  }
  return;
 800a342:	e001      	b.n	800a348 <tcp_timewait_input+0xc0>
    return;
 800a344:	bf00      	nop
 800a346:	e000      	b.n	800a34a <tcp_timewait_input+0xc2>
  return;
 800a348:	bf00      	nop
}
 800a34a:	3708      	adds	r7, #8
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	20008a04 	.word	0x20008a04
 800a354:	08012d9c 	.word	0x08012d9c
 800a358:	08012fb4 	.word	0x08012fb4
 800a35c:	08012de8 	.word	0x08012de8
 800a360:	200089f8 	.word	0x200089f8
 800a364:	200089fc 	.word	0x200089fc
 800a368:	20008a02 	.word	0x20008a02
 800a36c:	200089e8 	.word	0x200089e8
 800a370:	200052a0 	.word	0x200052a0
 800a374:	200052a4 	.word	0x200052a4
 800a378:	200089c0 	.word	0x200089c0

0800a37c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a37c:	b590      	push	{r4, r7, lr}
 800a37e:	b08d      	sub	sp, #52	; 0x34
 800a380:	af04      	add	r7, sp, #16
 800a382:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a384:	2300      	movs	r3, #0
 800a386:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a388:	2300      	movs	r3, #0
 800a38a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d106      	bne.n	800a3a0 <tcp_process+0x24>
 800a392:	4b9d      	ldr	r3, [pc, #628]	; (800a608 <tcp_process+0x28c>)
 800a394:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a398:	499c      	ldr	r1, [pc, #624]	; (800a60c <tcp_process+0x290>)
 800a39a:	489d      	ldr	r0, [pc, #628]	; (800a610 <tcp_process+0x294>)
 800a39c:	f006 f9ce 	bl	801073c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a3a0:	4b9c      	ldr	r3, [pc, #624]	; (800a614 <tcp_process+0x298>)
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	f003 0304 	and.w	r3, r3, #4
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d04e      	beq.n	800a44a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	7d1b      	ldrb	r3, [r3, #20]
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d108      	bne.n	800a3c6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a3b8:	4b97      	ldr	r3, [pc, #604]	; (800a618 <tcp_process+0x29c>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d123      	bne.n	800a408 <tcp_process+0x8c>
        acceptable = 1;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	76fb      	strb	r3, [r7, #27]
 800a3c4:	e020      	b.n	800a408 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3ca:	4b94      	ldr	r3, [pc, #592]	; (800a61c <tcp_process+0x2a0>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d102      	bne.n	800a3d8 <tcp_process+0x5c>
        acceptable = 1;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	76fb      	strb	r3, [r7, #27]
 800a3d6:	e017      	b.n	800a408 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a3d8:	4b90      	ldr	r3, [pc, #576]	; (800a61c <tcp_process+0x2a0>)
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e0:	1ad3      	subs	r3, r2, r3
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	db10      	blt.n	800a408 <tcp_process+0x8c>
 800a3e6:	4b8d      	ldr	r3, [pc, #564]	; (800a61c <tcp_process+0x2a0>)
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ee:	6879      	ldr	r1, [r7, #4]
 800a3f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a3f2:	440b      	add	r3, r1
 800a3f4:	1ad3      	subs	r3, r2, r3
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	dc06      	bgt.n	800a408 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	8b5b      	ldrh	r3, [r3, #26]
 800a3fe:	f043 0302 	orr.w	r3, r3, #2
 800a402:	b29a      	uxth	r2, r3
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a408:	7efb      	ldrb	r3, [r7, #27]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d01b      	beq.n	800a446 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	7d1b      	ldrb	r3, [r3, #20]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d106      	bne.n	800a424 <tcp_process+0xa8>
 800a416:	4b7c      	ldr	r3, [pc, #496]	; (800a608 <tcp_process+0x28c>)
 800a418:	f44f 724e 	mov.w	r2, #824	; 0x338
 800a41c:	4980      	ldr	r1, [pc, #512]	; (800a620 <tcp_process+0x2a4>)
 800a41e:	487c      	ldr	r0, [pc, #496]	; (800a610 <tcp_process+0x294>)
 800a420:	f006 f98c 	bl	801073c <iprintf>
      recv_flags |= TF_RESET;
 800a424:	4b7f      	ldr	r3, [pc, #508]	; (800a624 <tcp_process+0x2a8>)
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	f043 0308 	orr.w	r3, r3, #8
 800a42c:	b2da      	uxtb	r2, r3
 800a42e:	4b7d      	ldr	r3, [pc, #500]	; (800a624 <tcp_process+0x2a8>)
 800a430:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	8b5b      	ldrh	r3, [r3, #26]
 800a436:	f023 0301 	bic.w	r3, r3, #1
 800a43a:	b29a      	uxth	r2, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a440:	f06f 030d 	mvn.w	r3, #13
 800a444:	e37a      	b.n	800ab3c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a446:	2300      	movs	r3, #0
 800a448:	e378      	b.n	800ab3c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a44a:	4b72      	ldr	r3, [pc, #456]	; (800a614 <tcp_process+0x298>)
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	f003 0302 	and.w	r3, r3, #2
 800a452:	2b00      	cmp	r3, #0
 800a454:	d010      	beq.n	800a478 <tcp_process+0xfc>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	7d1b      	ldrb	r3, [r3, #20]
 800a45a:	2b02      	cmp	r3, #2
 800a45c:	d00c      	beq.n	800a478 <tcp_process+0xfc>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	7d1b      	ldrb	r3, [r3, #20]
 800a462:	2b03      	cmp	r3, #3
 800a464:	d008      	beq.n	800a478 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	8b5b      	ldrh	r3, [r3, #26]
 800a46a:	f043 0302 	orr.w	r3, r3, #2
 800a46e:	b29a      	uxth	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a474:	2300      	movs	r3, #0
 800a476:	e361      	b.n	800ab3c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	8b5b      	ldrh	r3, [r3, #26]
 800a47c:	f003 0310 	and.w	r3, r3, #16
 800a480:	2b00      	cmp	r3, #0
 800a482:	d103      	bne.n	800a48c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a484:	4b68      	ldr	r3, [pc, #416]	; (800a628 <tcp_process+0x2ac>)
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f001 fc2f 	bl	800bd00 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	7d1b      	ldrb	r3, [r3, #20]
 800a4a6:	3b02      	subs	r3, #2
 800a4a8:	2b07      	cmp	r3, #7
 800a4aa:	f200 8337 	bhi.w	800ab1c <tcp_process+0x7a0>
 800a4ae:	a201      	add	r2, pc, #4	; (adr r2, 800a4b4 <tcp_process+0x138>)
 800a4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b4:	0800a4d5 	.word	0x0800a4d5
 800a4b8:	0800a705 	.word	0x0800a705
 800a4bc:	0800a87d 	.word	0x0800a87d
 800a4c0:	0800a8a7 	.word	0x0800a8a7
 800a4c4:	0800a9cb 	.word	0x0800a9cb
 800a4c8:	0800a87d 	.word	0x0800a87d
 800a4cc:	0800aa57 	.word	0x0800aa57
 800a4d0:	0800aae7 	.word	0x0800aae7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a4d4:	4b4f      	ldr	r3, [pc, #316]	; (800a614 <tcp_process+0x298>)
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	f003 0310 	and.w	r3, r3, #16
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f000 80e4 	beq.w	800a6aa <tcp_process+0x32e>
 800a4e2:	4b4c      	ldr	r3, [pc, #304]	; (800a614 <tcp_process+0x298>)
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	f003 0302 	and.w	r3, r3, #2
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f000 80dd 	beq.w	800a6aa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4f4:	1c5a      	adds	r2, r3, #1
 800a4f6:	4b48      	ldr	r3, [pc, #288]	; (800a618 <tcp_process+0x29c>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	f040 80d5 	bne.w	800a6aa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a500:	4b46      	ldr	r3, [pc, #280]	; (800a61c <tcp_process+0x2a0>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	1c5a      	adds	r2, r3, #1
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800a512:	4b41      	ldr	r3, [pc, #260]	; (800a618 <tcp_process+0x29c>)
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a51a:	4b44      	ldr	r3, [pc, #272]	; (800a62c <tcp_process+0x2b0>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	89db      	ldrh	r3, [r3, #14]
 800a520:	b29a      	uxth	r2, r3
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a534:	4b39      	ldr	r3, [pc, #228]	; (800a61c <tcp_process+0x2a0>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	1e5a      	subs	r2, r3, #1
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2204      	movs	r2, #4
 800a542:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	3304      	adds	r3, #4
 800a54c:	4618      	mov	r0, r3
 800a54e:	f004 fe09 	bl	800f164 <ip4_route>
 800a552:	4601      	mov	r1, r0
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	3304      	adds	r3, #4
 800a558:	461a      	mov	r2, r3
 800a55a:	4620      	mov	r0, r4
 800a55c:	f7ff f88c 	bl	8009678 <tcp_eff_send_mss_netif>
 800a560:	4603      	mov	r3, r0
 800a562:	461a      	mov	r2, r3
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a56c:	009a      	lsls	r2, r3, #2
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a572:	005b      	lsls	r3, r3, #1
 800a574:	f241 111c 	movw	r1, #4380	; 0x111c
 800a578:	428b      	cmp	r3, r1
 800a57a:	bf38      	it	cc
 800a57c:	460b      	movcc	r3, r1
 800a57e:	429a      	cmp	r2, r3
 800a580:	d204      	bcs.n	800a58c <tcp_process+0x210>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	b29b      	uxth	r3, r3
 800a58a:	e00d      	b.n	800a5a8 <tcp_process+0x22c>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a590:	005b      	lsls	r3, r3, #1
 800a592:	f241 121c 	movw	r2, #4380	; 0x111c
 800a596:	4293      	cmp	r3, r2
 800a598:	d904      	bls.n	800a5a4 <tcp_process+0x228>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a59e:	005b      	lsls	r3, r3, #1
 800a5a0:	b29b      	uxth	r3, r3
 800a5a2:	e001      	b.n	800a5a8 <tcp_process+0x22c>
 800a5a4:	f241 131c 	movw	r3, #4380	; 0x111c
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d106      	bne.n	800a5c6 <tcp_process+0x24a>
 800a5b8:	4b13      	ldr	r3, [pc, #76]	; (800a608 <tcp_process+0x28c>)
 800a5ba:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800a5be:	491c      	ldr	r1, [pc, #112]	; (800a630 <tcp_process+0x2b4>)
 800a5c0:	4813      	ldr	r0, [pc, #76]	; (800a610 <tcp_process+0x294>)
 800a5c2:	f006 f8bb 	bl	801073c <iprintf>
        --pcb->snd_queuelen;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	b29a      	uxth	r2, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5da:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d12a      	bne.n	800a638 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5e6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d106      	bne.n	800a5fc <tcp_process+0x280>
 800a5ee:	4b06      	ldr	r3, [pc, #24]	; (800a608 <tcp_process+0x28c>)
 800a5f0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800a5f4:	490f      	ldr	r1, [pc, #60]	; (800a634 <tcp_process+0x2b8>)
 800a5f6:	4806      	ldr	r0, [pc, #24]	; (800a610 <tcp_process+0x294>)
 800a5f8:	f006 f8a0 	bl	801073c <iprintf>
          pcb->unsent = rseg->next;
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	66da      	str	r2, [r3, #108]	; 0x6c
 800a604:	e01c      	b.n	800a640 <tcp_process+0x2c4>
 800a606:	bf00      	nop
 800a608:	08012d9c 	.word	0x08012d9c
 800a60c:	08012fd4 	.word	0x08012fd4
 800a610:	08012de8 	.word	0x08012de8
 800a614:	20008a04 	.word	0x20008a04
 800a618:	200089fc 	.word	0x200089fc
 800a61c:	200089f8 	.word	0x200089f8
 800a620:	08012ff0 	.word	0x08012ff0
 800a624:	20008a05 	.word	0x20008a05
 800a628:	200089c0 	.word	0x200089c0
 800a62c:	200089e8 	.word	0x200089e8
 800a630:	08013010 	.word	0x08013010
 800a634:	08013028 	.word	0x08013028
        } else {
          pcb->unacked = rseg->next;
 800a638:	69fb      	ldr	r3, [r7, #28]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800a640:	69f8      	ldr	r0, [r7, #28]
 800a642:	f7fe fd22 	bl	800908a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d104      	bne.n	800a658 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a654:	861a      	strh	r2, [r3, #48]	; 0x30
 800a656:	e006      	b.n	800a666 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2200      	movs	r2, #0
 800a662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d00a      	beq.n	800a686 <tcp_process+0x30a>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	6910      	ldr	r0, [r2, #16]
 800a67a:	2200      	movs	r2, #0
 800a67c:	6879      	ldr	r1, [r7, #4]
 800a67e:	4798      	blx	r3
 800a680:	4603      	mov	r3, r0
 800a682:	76bb      	strb	r3, [r7, #26]
 800a684:	e001      	b.n	800a68a <tcp_process+0x30e>
 800a686:	2300      	movs	r3, #0
 800a688:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800a68a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a68e:	f113 0f0d 	cmn.w	r3, #13
 800a692:	d102      	bne.n	800a69a <tcp_process+0x31e>
          return ERR_ABRT;
 800a694:	f06f 030c 	mvn.w	r3, #12
 800a698:	e250      	b.n	800ab3c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	8b5b      	ldrh	r3, [r3, #26]
 800a69e:	f043 0302 	orr.w	r3, r3, #2
 800a6a2:	b29a      	uxth	r2, r3
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a6a8:	e23a      	b.n	800ab20 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800a6aa:	4b98      	ldr	r3, [pc, #608]	; (800a90c <tcp_process+0x590>)
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	f003 0310 	and.w	r3, r3, #16
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f000 8234 	beq.w	800ab20 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6b8:	4b95      	ldr	r3, [pc, #596]	; (800a910 <tcp_process+0x594>)
 800a6ba:	6819      	ldr	r1, [r3, #0]
 800a6bc:	4b95      	ldr	r3, [pc, #596]	; (800a914 <tcp_process+0x598>)
 800a6be:	881b      	ldrh	r3, [r3, #0]
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	4b95      	ldr	r3, [pc, #596]	; (800a918 <tcp_process+0x59c>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a6c8:	4b94      	ldr	r3, [pc, #592]	; (800a91c <tcp_process+0x5a0>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6cc:	885b      	ldrh	r3, [r3, #2]
 800a6ce:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a6d0:	4a92      	ldr	r2, [pc, #584]	; (800a91c <tcp_process+0x5a0>)
 800a6d2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6d4:	8812      	ldrh	r2, [r2, #0]
 800a6d6:	b292      	uxth	r2, r2
 800a6d8:	9202      	str	r2, [sp, #8]
 800a6da:	9301      	str	r3, [sp, #4]
 800a6dc:	4b90      	ldr	r3, [pc, #576]	; (800a920 <tcp_process+0x5a4>)
 800a6de:	9300      	str	r3, [sp, #0]
 800a6e0:	4b90      	ldr	r3, [pc, #576]	; (800a924 <tcp_process+0x5a8>)
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f002 fc85 	bl	800cff4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a6f0:	2b05      	cmp	r3, #5
 800a6f2:	f200 8215 	bhi.w	800ab20 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f002 fa51 	bl	800cba4 <tcp_rexmit_rto>
      break;
 800a702:	e20d      	b.n	800ab20 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800a704:	4b81      	ldr	r3, [pc, #516]	; (800a90c <tcp_process+0x590>)
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	f003 0310 	and.w	r3, r3, #16
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	f000 80a1 	beq.w	800a854 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a712:	4b7f      	ldr	r3, [pc, #508]	; (800a910 <tcp_process+0x594>)
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a71a:	1ad3      	subs	r3, r2, r3
 800a71c:	3b01      	subs	r3, #1
 800a71e:	2b00      	cmp	r3, #0
 800a720:	db7e      	blt.n	800a820 <tcp_process+0x4a4>
 800a722:	4b7b      	ldr	r3, [pc, #492]	; (800a910 <tcp_process+0x594>)
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a72a:	1ad3      	subs	r3, r2, r3
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	dc77      	bgt.n	800a820 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2204      	movs	r2, #4
 800a734:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d102      	bne.n	800a744 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800a73e:	23fa      	movs	r3, #250	; 0xfa
 800a740:	76bb      	strb	r3, [r7, #26]
 800a742:	e01d      	b.n	800a780 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a748:	699b      	ldr	r3, [r3, #24]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d106      	bne.n	800a75c <tcp_process+0x3e0>
 800a74e:	4b76      	ldr	r3, [pc, #472]	; (800a928 <tcp_process+0x5ac>)
 800a750:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800a754:	4975      	ldr	r1, [pc, #468]	; (800a92c <tcp_process+0x5b0>)
 800a756:	4876      	ldr	r0, [pc, #472]	; (800a930 <tcp_process+0x5b4>)
 800a758:	f005 fff0 	bl	801073c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a760:	699b      	ldr	r3, [r3, #24]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00a      	beq.n	800a77c <tcp_process+0x400>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a76a:	699b      	ldr	r3, [r3, #24]
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	6910      	ldr	r0, [r2, #16]
 800a770:	2200      	movs	r2, #0
 800a772:	6879      	ldr	r1, [r7, #4]
 800a774:	4798      	blx	r3
 800a776:	4603      	mov	r3, r0
 800a778:	76bb      	strb	r3, [r7, #26]
 800a77a:	e001      	b.n	800a780 <tcp_process+0x404>
 800a77c:	23f0      	movs	r3, #240	; 0xf0
 800a77e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800a780:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d00a      	beq.n	800a79e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800a788:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a78c:	f113 0f0d 	cmn.w	r3, #13
 800a790:	d002      	beq.n	800a798 <tcp_process+0x41c>
              tcp_abort(pcb);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f7fd ff8e 	bl	80086b4 <tcp_abort>
            }
            return ERR_ABRT;
 800a798:	f06f 030c 	mvn.w	r3, #12
 800a79c:	e1ce      	b.n	800ab3c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 fae0 	bl	800ad64 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800a7a4:	4b63      	ldr	r3, [pc, #396]	; (800a934 <tcp_process+0x5b8>)
 800a7a6:	881b      	ldrh	r3, [r3, #0]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d005      	beq.n	800a7b8 <tcp_process+0x43c>
            recv_acked--;
 800a7ac:	4b61      	ldr	r3, [pc, #388]	; (800a934 <tcp_process+0x5b8>)
 800a7ae:	881b      	ldrh	r3, [r3, #0]
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	b29a      	uxth	r2, r3
 800a7b4:	4b5f      	ldr	r3, [pc, #380]	; (800a934 <tcp_process+0x5b8>)
 800a7b6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a7bc:	009a      	lsls	r2, r3, #2
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a7c2:	005b      	lsls	r3, r3, #1
 800a7c4:	f241 111c 	movw	r1, #4380	; 0x111c
 800a7c8:	428b      	cmp	r3, r1
 800a7ca:	bf38      	it	cc
 800a7cc:	460b      	movcc	r3, r1
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d204      	bcs.n	800a7dc <tcp_process+0x460>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	e00d      	b.n	800a7f8 <tcp_process+0x47c>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a7e0:	005b      	lsls	r3, r3, #1
 800a7e2:	f241 121c 	movw	r2, #4380	; 0x111c
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d904      	bls.n	800a7f4 <tcp_process+0x478>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a7ee:	005b      	lsls	r3, r3, #1
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	e001      	b.n	800a7f8 <tcp_process+0x47c>
 800a7f4:	f241 131c 	movw	r3, #4380	; 0x111c
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800a7fe:	4b4e      	ldr	r3, [pc, #312]	; (800a938 <tcp_process+0x5bc>)
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	f003 0320 	and.w	r3, r3, #32
 800a806:	2b00      	cmp	r3, #0
 800a808:	d037      	beq.n	800a87a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	8b5b      	ldrh	r3, [r3, #26]
 800a80e:	f043 0302 	orr.w	r3, r3, #2
 800a812:	b29a      	uxth	r2, r3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2207      	movs	r2, #7
 800a81c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800a81e:	e02c      	b.n	800a87a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a820:	4b3b      	ldr	r3, [pc, #236]	; (800a910 <tcp_process+0x594>)
 800a822:	6819      	ldr	r1, [r3, #0]
 800a824:	4b3b      	ldr	r3, [pc, #236]	; (800a914 <tcp_process+0x598>)
 800a826:	881b      	ldrh	r3, [r3, #0]
 800a828:	461a      	mov	r2, r3
 800a82a:	4b3b      	ldr	r3, [pc, #236]	; (800a918 <tcp_process+0x59c>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a830:	4b3a      	ldr	r3, [pc, #232]	; (800a91c <tcp_process+0x5a0>)
 800a832:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a834:	885b      	ldrh	r3, [r3, #2]
 800a836:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a838:	4a38      	ldr	r2, [pc, #224]	; (800a91c <tcp_process+0x5a0>)
 800a83a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a83c:	8812      	ldrh	r2, [r2, #0]
 800a83e:	b292      	uxth	r2, r2
 800a840:	9202      	str	r2, [sp, #8]
 800a842:	9301      	str	r3, [sp, #4]
 800a844:	4b36      	ldr	r3, [pc, #216]	; (800a920 <tcp_process+0x5a4>)
 800a846:	9300      	str	r3, [sp, #0]
 800a848:	4b36      	ldr	r3, [pc, #216]	; (800a924 <tcp_process+0x5a8>)
 800a84a:	4602      	mov	r2, r0
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f002 fbd1 	bl	800cff4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800a852:	e167      	b.n	800ab24 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a854:	4b2d      	ldr	r3, [pc, #180]	; (800a90c <tcp_process+0x590>)
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	f003 0302 	and.w	r3, r3, #2
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	f000 8161 	beq.w	800ab24 <tcp_process+0x7a8>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a866:	1e5a      	subs	r2, r3, #1
 800a868:	4b2b      	ldr	r3, [pc, #172]	; (800a918 <tcp_process+0x59c>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	f040 8159 	bne.w	800ab24 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f002 f9b8 	bl	800cbe8 <tcp_rexmit>
      break;
 800a878:	e154      	b.n	800ab24 <tcp_process+0x7a8>
 800a87a:	e153      	b.n	800ab24 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 fa71 	bl	800ad64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a882:	4b2d      	ldr	r3, [pc, #180]	; (800a938 <tcp_process+0x5bc>)
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	f003 0320 	and.w	r3, r3, #32
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	f000 814c 	beq.w	800ab28 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	8b5b      	ldrh	r3, [r3, #26]
 800a894:	f043 0302 	orr.w	r3, r3, #2
 800a898:	b29a      	uxth	r2, r3
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2207      	movs	r2, #7
 800a8a2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a8a4:	e140      	b.n	800ab28 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 fa5c 	bl	800ad64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a8ac:	4b22      	ldr	r3, [pc, #136]	; (800a938 <tcp_process+0x5bc>)
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	f003 0320 	and.w	r3, r3, #32
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d071      	beq.n	800a99c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a8b8:	4b14      	ldr	r3, [pc, #80]	; (800a90c <tcp_process+0x590>)
 800a8ba:	781b      	ldrb	r3, [r3, #0]
 800a8bc:	f003 0310 	and.w	r3, r3, #16
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d060      	beq.n	800a986 <tcp_process+0x60a>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a8c8:	4b11      	ldr	r3, [pc, #68]	; (800a910 <tcp_process+0x594>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d15a      	bne.n	800a986 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d156      	bne.n	800a986 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	8b5b      	ldrh	r3, [r3, #26]
 800a8dc:	f043 0302 	orr.w	r3, r3, #2
 800a8e0:	b29a      	uxth	r2, r3
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f7fe fdbc 	bl	8009464 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a8ec:	4b13      	ldr	r3, [pc, #76]	; (800a93c <tcp_process+0x5c0>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d105      	bne.n	800a902 <tcp_process+0x586>
 800a8f6:	4b11      	ldr	r3, [pc, #68]	; (800a93c <tcp_process+0x5c0>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	4a0f      	ldr	r2, [pc, #60]	; (800a93c <tcp_process+0x5c0>)
 800a8fe:	6013      	str	r3, [r2, #0]
 800a900:	e02e      	b.n	800a960 <tcp_process+0x5e4>
 800a902:	4b0e      	ldr	r3, [pc, #56]	; (800a93c <tcp_process+0x5c0>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	617b      	str	r3, [r7, #20]
 800a908:	e027      	b.n	800a95a <tcp_process+0x5de>
 800a90a:	bf00      	nop
 800a90c:	20008a04 	.word	0x20008a04
 800a910:	200089fc 	.word	0x200089fc
 800a914:	20008a02 	.word	0x20008a02
 800a918:	200089f8 	.word	0x200089f8
 800a91c:	200089e8 	.word	0x200089e8
 800a920:	200052a0 	.word	0x200052a0
 800a924:	200052a4 	.word	0x200052a4
 800a928:	08012d9c 	.word	0x08012d9c
 800a92c:	0801303c 	.word	0x0801303c
 800a930:	08012de8 	.word	0x08012de8
 800a934:	20008a00 	.word	0x20008a00
 800a938:	20008a05 	.word	0x20008a05
 800a93c:	200089cc 	.word	0x200089cc
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	68db      	ldr	r3, [r3, #12]
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	429a      	cmp	r2, r3
 800a948:	d104      	bne.n	800a954 <tcp_process+0x5d8>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	68da      	ldr	r2, [r3, #12]
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	60da      	str	r2, [r3, #12]
 800a952:	e005      	b.n	800a960 <tcp_process+0x5e4>
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	617b      	str	r3, [r7, #20]
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d1ef      	bne.n	800a940 <tcp_process+0x5c4>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2200      	movs	r2, #0
 800a964:	60da      	str	r2, [r3, #12]
 800a966:	4b77      	ldr	r3, [pc, #476]	; (800ab44 <tcp_process+0x7c8>)
 800a968:	2201      	movs	r2, #1
 800a96a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	220a      	movs	r2, #10
 800a970:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800a972:	4b75      	ldr	r3, [pc, #468]	; (800ab48 <tcp_process+0x7cc>)
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	60da      	str	r2, [r3, #12]
 800a97a:	4a73      	ldr	r2, [pc, #460]	; (800ab48 <tcp_process+0x7cc>)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6013      	str	r3, [r2, #0]
 800a980:	f002 fcfa 	bl	800d378 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800a984:	e0d2      	b.n	800ab2c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	8b5b      	ldrh	r3, [r3, #26]
 800a98a:	f043 0302 	orr.w	r3, r3, #2
 800a98e:	b29a      	uxth	r2, r3
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2208      	movs	r2, #8
 800a998:	751a      	strb	r2, [r3, #20]
      break;
 800a99a:	e0c7      	b.n	800ab2c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a99c:	4b6b      	ldr	r3, [pc, #428]	; (800ab4c <tcp_process+0x7d0>)
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	f003 0310 	and.w	r3, r3, #16
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	f000 80c1 	beq.w	800ab2c <tcp_process+0x7b0>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a9ae:	4b68      	ldr	r3, [pc, #416]	; (800ab50 <tcp_process+0x7d4>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	f040 80ba 	bne.w	800ab2c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	f040 80b5 	bne.w	800ab2c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2206      	movs	r2, #6
 800a9c6:	751a      	strb	r2, [r3, #20]
      break;
 800a9c8:	e0b0      	b.n	800ab2c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 f9ca 	bl	800ad64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a9d0:	4b60      	ldr	r3, [pc, #384]	; (800ab54 <tcp_process+0x7d8>)
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	f003 0320 	and.w	r3, r3, #32
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	f000 80a9 	beq.w	800ab30 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	8b5b      	ldrh	r3, [r3, #26]
 800a9e2:	f043 0302 	orr.w	r3, r3, #2
 800a9e6:	b29a      	uxth	r2, r3
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f7fe fd39 	bl	8009464 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a9f2:	4b59      	ldr	r3, [pc, #356]	; (800ab58 <tcp_process+0x7dc>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d105      	bne.n	800aa08 <tcp_process+0x68c>
 800a9fc:	4b56      	ldr	r3, [pc, #344]	; (800ab58 <tcp_process+0x7dc>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	68db      	ldr	r3, [r3, #12]
 800aa02:	4a55      	ldr	r2, [pc, #340]	; (800ab58 <tcp_process+0x7dc>)
 800aa04:	6013      	str	r3, [r2, #0]
 800aa06:	e013      	b.n	800aa30 <tcp_process+0x6b4>
 800aa08:	4b53      	ldr	r3, [pc, #332]	; (800ab58 <tcp_process+0x7dc>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	613b      	str	r3, [r7, #16]
 800aa0e:	e00c      	b.n	800aa2a <tcp_process+0x6ae>
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d104      	bne.n	800aa24 <tcp_process+0x6a8>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	68da      	ldr	r2, [r3, #12]
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	60da      	str	r2, [r3, #12]
 800aa22:	e005      	b.n	800aa30 <tcp_process+0x6b4>
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	613b      	str	r3, [r7, #16]
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d1ef      	bne.n	800aa10 <tcp_process+0x694>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	60da      	str	r2, [r3, #12]
 800aa36:	4b43      	ldr	r3, [pc, #268]	; (800ab44 <tcp_process+0x7c8>)
 800aa38:	2201      	movs	r2, #1
 800aa3a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	220a      	movs	r2, #10
 800aa40:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800aa42:	4b41      	ldr	r3, [pc, #260]	; (800ab48 <tcp_process+0x7cc>)
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	60da      	str	r2, [r3, #12]
 800aa4a:	4a3f      	ldr	r2, [pc, #252]	; (800ab48 <tcp_process+0x7cc>)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6013      	str	r3, [r2, #0]
 800aa50:	f002 fc92 	bl	800d378 <tcp_timer_needed>
      }
      break;
 800aa54:	e06c      	b.n	800ab30 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 f984 	bl	800ad64 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800aa5c:	4b3b      	ldr	r3, [pc, #236]	; (800ab4c <tcp_process+0x7d0>)
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	f003 0310 	and.w	r3, r3, #16
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d065      	beq.n	800ab34 <tcp_process+0x7b8>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa6c:	4b38      	ldr	r3, [pc, #224]	; (800ab50 <tcp_process+0x7d4>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d15f      	bne.n	800ab34 <tcp_process+0x7b8>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d15b      	bne.n	800ab34 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f7fe fcf1 	bl	8009464 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800aa82:	4b35      	ldr	r3, [pc, #212]	; (800ab58 <tcp_process+0x7dc>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d105      	bne.n	800aa98 <tcp_process+0x71c>
 800aa8c:	4b32      	ldr	r3, [pc, #200]	; (800ab58 <tcp_process+0x7dc>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	4a31      	ldr	r2, [pc, #196]	; (800ab58 <tcp_process+0x7dc>)
 800aa94:	6013      	str	r3, [r2, #0]
 800aa96:	e013      	b.n	800aac0 <tcp_process+0x744>
 800aa98:	4b2f      	ldr	r3, [pc, #188]	; (800ab58 <tcp_process+0x7dc>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	60fb      	str	r3, [r7, #12]
 800aa9e:	e00c      	b.n	800aaba <tcp_process+0x73e>
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d104      	bne.n	800aab4 <tcp_process+0x738>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	68da      	ldr	r2, [r3, #12]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	60da      	str	r2, [r3, #12]
 800aab2:	e005      	b.n	800aac0 <tcp_process+0x744>
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	68db      	ldr	r3, [r3, #12]
 800aab8:	60fb      	str	r3, [r7, #12]
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d1ef      	bne.n	800aaa0 <tcp_process+0x724>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2200      	movs	r2, #0
 800aac4:	60da      	str	r2, [r3, #12]
 800aac6:	4b1f      	ldr	r3, [pc, #124]	; (800ab44 <tcp_process+0x7c8>)
 800aac8:	2201      	movs	r2, #1
 800aaca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	220a      	movs	r2, #10
 800aad0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800aad2:	4b1d      	ldr	r3, [pc, #116]	; (800ab48 <tcp_process+0x7cc>)
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	60da      	str	r2, [r3, #12]
 800aada:	4a1b      	ldr	r2, [pc, #108]	; (800ab48 <tcp_process+0x7cc>)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6013      	str	r3, [r2, #0]
 800aae0:	f002 fc4a 	bl	800d378 <tcp_timer_needed>
      }
      break;
 800aae4:	e026      	b.n	800ab34 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 f93c 	bl	800ad64 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800aaec:	4b17      	ldr	r3, [pc, #92]	; (800ab4c <tcp_process+0x7d0>)
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	f003 0310 	and.w	r3, r3, #16
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d01f      	beq.n	800ab38 <tcp_process+0x7bc>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aafc:	4b14      	ldr	r3, [pc, #80]	; (800ab50 <tcp_process+0x7d4>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d119      	bne.n	800ab38 <tcp_process+0x7bc>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d115      	bne.n	800ab38 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ab0c:	4b11      	ldr	r3, [pc, #68]	; (800ab54 <tcp_process+0x7d8>)
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	f043 0310 	orr.w	r3, r3, #16
 800ab14:	b2da      	uxtb	r2, r3
 800ab16:	4b0f      	ldr	r3, [pc, #60]	; (800ab54 <tcp_process+0x7d8>)
 800ab18:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ab1a:	e00d      	b.n	800ab38 <tcp_process+0x7bc>
    default:
      break;
 800ab1c:	bf00      	nop
 800ab1e:	e00c      	b.n	800ab3a <tcp_process+0x7be>
      break;
 800ab20:	bf00      	nop
 800ab22:	e00a      	b.n	800ab3a <tcp_process+0x7be>
      break;
 800ab24:	bf00      	nop
 800ab26:	e008      	b.n	800ab3a <tcp_process+0x7be>
      break;
 800ab28:	bf00      	nop
 800ab2a:	e006      	b.n	800ab3a <tcp_process+0x7be>
      break;
 800ab2c:	bf00      	nop
 800ab2e:	e004      	b.n	800ab3a <tcp_process+0x7be>
      break;
 800ab30:	bf00      	nop
 800ab32:	e002      	b.n	800ab3a <tcp_process+0x7be>
      break;
 800ab34:	bf00      	nop
 800ab36:	e000      	b.n	800ab3a <tcp_process+0x7be>
      break;
 800ab38:	bf00      	nop
  }
  return ERR_OK;
 800ab3a:	2300      	movs	r3, #0
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3724      	adds	r7, #36	; 0x24
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd90      	pop	{r4, r7, pc}
 800ab44:	200089d4 	.word	0x200089d4
 800ab48:	200089d0 	.word	0x200089d0
 800ab4c:	20008a04 	.word	0x20008a04
 800ab50:	200089fc 	.word	0x200089fc
 800ab54:	20008a05 	.word	0x20008a05
 800ab58:	200089cc 	.word	0x200089cc

0800ab5c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ab5c:	b590      	push	{r4, r7, lr}
 800ab5e:	b085      	sub	sp, #20
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d106      	bne.n	800ab7a <tcp_oos_insert_segment+0x1e>
 800ab6c:	4b3b      	ldr	r3, [pc, #236]	; (800ac5c <tcp_oos_insert_segment+0x100>)
 800ab6e:	f240 421f 	movw	r2, #1055	; 0x41f
 800ab72:	493b      	ldr	r1, [pc, #236]	; (800ac60 <tcp_oos_insert_segment+0x104>)
 800ab74:	483b      	ldr	r0, [pc, #236]	; (800ac64 <tcp_oos_insert_segment+0x108>)
 800ab76:	f005 fde1 	bl	801073c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	68db      	ldr	r3, [r3, #12]
 800ab7e:	899b      	ldrh	r3, [r3, #12]
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	4618      	mov	r0, r3
 800ab84:	f7fb fca0 	bl	80064c8 <lwip_htons>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	f003 0301 	and.w	r3, r3, #1
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d028      	beq.n	800abe6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ab94:	6838      	ldr	r0, [r7, #0]
 800ab96:	f7fe fa63 	bl	8009060 <tcp_segs_free>
    next = NULL;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	603b      	str	r3, [r7, #0]
 800ab9e:	e056      	b.n	800ac4e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	899b      	ldrh	r3, [r3, #12]
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7fb fc8d 	bl	80064c8 <lwip_htons>
 800abae:	4603      	mov	r3, r0
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	f003 0301 	and.w	r3, r3, #1
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00d      	beq.n	800abd6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	899b      	ldrh	r3, [r3, #12]
 800abc0:	b29c      	uxth	r4, r3
 800abc2:	2001      	movs	r0, #1
 800abc4:	f7fb fc80 	bl	80064c8 <lwip_htons>
 800abc8:	4603      	mov	r3, r0
 800abca:	461a      	mov	r2, r3
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	4322      	orrs	r2, r4
 800abd2:	b292      	uxth	r2, r2
 800abd4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f7fe fa52 	bl	800908a <tcp_seg_free>
    while (next &&
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d00e      	beq.n	800ac0a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	891b      	ldrh	r3, [r3, #8]
 800abf0:	461a      	mov	r2, r3
 800abf2:	4b1d      	ldr	r3, [pc, #116]	; (800ac68 <tcp_oos_insert_segment+0x10c>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	441a      	add	r2, r3
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	6839      	ldr	r1, [r7, #0]
 800ac00:	8909      	ldrh	r1, [r1, #8]
 800ac02:	440b      	add	r3, r1
 800ac04:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	daca      	bge.n	800aba0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d01e      	beq.n	800ac4e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	891b      	ldrh	r3, [r3, #8]
 800ac14:	461a      	mov	r2, r3
 800ac16:	4b14      	ldr	r3, [pc, #80]	; (800ac68 <tcp_oos_insert_segment+0x10c>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	441a      	add	r2, r3
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	dd12      	ble.n	800ac4e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	b29a      	uxth	r2, r3
 800ac30:	4b0d      	ldr	r3, [pc, #52]	; (800ac68 <tcp_oos_insert_segment+0x10c>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	1ad3      	subs	r3, r2, r3
 800ac38:	b29a      	uxth	r2, r3
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	685a      	ldr	r2, [r3, #4]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	891b      	ldrh	r3, [r3, #8]
 800ac46:	4619      	mov	r1, r3
 800ac48:	4610      	mov	r0, r2
 800ac4a:	f7fc fe15 	bl	8007878 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	683a      	ldr	r2, [r7, #0]
 800ac52:	601a      	str	r2, [r3, #0]
}
 800ac54:	bf00      	nop
 800ac56:	3714      	adds	r7, #20
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd90      	pop	{r4, r7, pc}
 800ac5c:	08012d9c 	.word	0x08012d9c
 800ac60:	0801305c 	.word	0x0801305c
 800ac64:	08012de8 	.word	0x08012de8
 800ac68:	200089f8 	.word	0x200089f8

0800ac6c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ac6c:	b5b0      	push	{r4, r5, r7, lr}
 800ac6e:	b086      	sub	sp, #24
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	60b9      	str	r1, [r7, #8]
 800ac76:	607a      	str	r2, [r7, #4]
 800ac78:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ac7a:	e03e      	b.n	800acfa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7fd f802 	bl	8007c94 <pbuf_clen>
 800ac90:	4603      	mov	r3, r0
 800ac92:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ac9a:	8a7a      	ldrh	r2, [r7, #18]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d906      	bls.n	800acae <tcp_free_acked_segments+0x42>
 800aca0:	4b2a      	ldr	r3, [pc, #168]	; (800ad4c <tcp_free_acked_segments+0xe0>)
 800aca2:	f240 4257 	movw	r2, #1111	; 0x457
 800aca6:	492a      	ldr	r1, [pc, #168]	; (800ad50 <tcp_free_acked_segments+0xe4>)
 800aca8:	482a      	ldr	r0, [pc, #168]	; (800ad54 <tcp_free_acked_segments+0xe8>)
 800acaa:	f005 fd47 	bl	801073c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800acb4:	8a7b      	ldrh	r3, [r7, #18]
 800acb6:	1ad3      	subs	r3, r2, r3
 800acb8:	b29a      	uxth	r2, r3
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	891a      	ldrh	r2, [r3, #8]
 800acc4:	4b24      	ldr	r3, [pc, #144]	; (800ad58 <tcp_free_acked_segments+0xec>)
 800acc6:	881b      	ldrh	r3, [r3, #0]
 800acc8:	4413      	add	r3, r2
 800acca:	b29a      	uxth	r2, r3
 800accc:	4b22      	ldr	r3, [pc, #136]	; (800ad58 <tcp_free_acked_segments+0xec>)
 800acce:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800acd0:	6978      	ldr	r0, [r7, #20]
 800acd2:	f7fe f9da 	bl	800908a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d00c      	beq.n	800acfa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d109      	bne.n	800acfa <tcp_free_acked_segments+0x8e>
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d106      	bne.n	800acfa <tcp_free_acked_segments+0x8e>
 800acec:	4b17      	ldr	r3, [pc, #92]	; (800ad4c <tcp_free_acked_segments+0xe0>)
 800acee:	f240 4261 	movw	r2, #1121	; 0x461
 800acf2:	491a      	ldr	r1, [pc, #104]	; (800ad5c <tcp_free_acked_segments+0xf0>)
 800acf4:	4817      	ldr	r0, [pc, #92]	; (800ad54 <tcp_free_acked_segments+0xe8>)
 800acf6:	f005 fd21 	bl	801073c <iprintf>
  while (seg_list != NULL &&
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d020      	beq.n	800ad42 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7fb fbf3 	bl	80064f2 <lwip_htonl>
 800ad0c:	4604      	mov	r4, r0
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	891b      	ldrh	r3, [r3, #8]
 800ad12:	461d      	mov	r5, r3
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	899b      	ldrh	r3, [r3, #12]
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f7fb fbd3 	bl	80064c8 <lwip_htons>
 800ad22:	4603      	mov	r3, r0
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	f003 0303 	and.w	r3, r3, #3
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d001      	beq.n	800ad32 <tcp_free_acked_segments+0xc6>
 800ad2e:	2301      	movs	r3, #1
 800ad30:	e000      	b.n	800ad34 <tcp_free_acked_segments+0xc8>
 800ad32:	2300      	movs	r3, #0
 800ad34:	442b      	add	r3, r5
 800ad36:	18e2      	adds	r2, r4, r3
 800ad38:	4b09      	ldr	r3, [pc, #36]	; (800ad60 <tcp_free_acked_segments+0xf4>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	dd9c      	ble.n	800ac7c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ad42:	68bb      	ldr	r3, [r7, #8]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3718      	adds	r7, #24
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bdb0      	pop	{r4, r5, r7, pc}
 800ad4c:	08012d9c 	.word	0x08012d9c
 800ad50:	08013084 	.word	0x08013084
 800ad54:	08012de8 	.word	0x08012de8
 800ad58:	20008a00 	.word	0x20008a00
 800ad5c:	080130ac 	.word	0x080130ac
 800ad60:	200089fc 	.word	0x200089fc

0800ad64 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ad64:	b5b0      	push	{r4, r5, r7, lr}
 800ad66:	b094      	sub	sp, #80	; 0x50
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d106      	bne.n	800ad84 <tcp_receive+0x20>
 800ad76:	4b91      	ldr	r3, [pc, #580]	; (800afbc <tcp_receive+0x258>)
 800ad78:	f240 427b 	movw	r2, #1147	; 0x47b
 800ad7c:	4990      	ldr	r1, [pc, #576]	; (800afc0 <tcp_receive+0x25c>)
 800ad7e:	4891      	ldr	r0, [pc, #580]	; (800afc4 <tcp_receive+0x260>)
 800ad80:	f005 fcdc 	bl	801073c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	7d1b      	ldrb	r3, [r3, #20]
 800ad88:	2b03      	cmp	r3, #3
 800ad8a:	d806      	bhi.n	800ad9a <tcp_receive+0x36>
 800ad8c:	4b8b      	ldr	r3, [pc, #556]	; (800afbc <tcp_receive+0x258>)
 800ad8e:	f240 427c 	movw	r2, #1148	; 0x47c
 800ad92:	498d      	ldr	r1, [pc, #564]	; (800afc8 <tcp_receive+0x264>)
 800ad94:	488b      	ldr	r0, [pc, #556]	; (800afc4 <tcp_receive+0x260>)
 800ad96:	f005 fcd1 	bl	801073c <iprintf>

  if (flags & TCP_ACK) {
 800ad9a:	4b8c      	ldr	r3, [pc, #560]	; (800afcc <tcp_receive+0x268>)
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	f003 0310 	and.w	r3, r3, #16
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	f000 8264 	beq.w	800b270 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800adae:	461a      	mov	r2, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adb4:	4413      	add	r3, r2
 800adb6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800adbc:	4b84      	ldr	r3, [pc, #528]	; (800afd0 <tcp_receive+0x26c>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	1ad3      	subs	r3, r2, r3
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	db1b      	blt.n	800adfe <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800adca:	4b81      	ldr	r3, [pc, #516]	; (800afd0 <tcp_receive+0x26c>)
 800adcc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800adce:	429a      	cmp	r2, r3
 800add0:	d106      	bne.n	800ade0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800add6:	4b7f      	ldr	r3, [pc, #508]	; (800afd4 <tcp_receive+0x270>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	1ad3      	subs	r3, r2, r3
 800addc:	2b00      	cmp	r3, #0
 800adde:	db0e      	blt.n	800adfe <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ade4:	4b7b      	ldr	r3, [pc, #492]	; (800afd4 <tcp_receive+0x270>)
 800ade6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ade8:	429a      	cmp	r2, r3
 800adea:	d125      	bne.n	800ae38 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800adec:	4b7a      	ldr	r3, [pc, #488]	; (800afd8 <tcp_receive+0x274>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	89db      	ldrh	r3, [r3, #14]
 800adf2:	b29a      	uxth	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d91c      	bls.n	800ae38 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800adfe:	4b76      	ldr	r3, [pc, #472]	; (800afd8 <tcp_receive+0x274>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	89db      	ldrh	r3, [r3, #14]
 800ae04:	b29a      	uxth	r2, r3
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d205      	bcs.n	800ae28 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800ae28:	4b69      	ldr	r3, [pc, #420]	; (800afd0 <tcp_receive+0x26c>)
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800ae30:	4b68      	ldr	r3, [pc, #416]	; (800afd4 <tcp_receive+0x270>)
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ae38:	4b66      	ldr	r3, [pc, #408]	; (800afd4 <tcp_receive+0x270>)
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae40:	1ad3      	subs	r3, r2, r3
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	dc58      	bgt.n	800aef8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ae46:	4b65      	ldr	r3, [pc, #404]	; (800afdc <tcp_receive+0x278>)
 800ae48:	881b      	ldrh	r3, [r3, #0]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d14b      	bne.n	800aee6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800ae58:	4413      	add	r3, r2
 800ae5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d142      	bne.n	800aee6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	db3d      	blt.n	800aee6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae6e:	4b59      	ldr	r3, [pc, #356]	; (800afd4 <tcp_receive+0x270>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d137      	bne.n	800aee6 <tcp_receive+0x182>
              found_dupack = 1;
 800ae76:	2301      	movs	r3, #1
 800ae78:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ae80:	2bff      	cmp	r3, #255	; 0xff
 800ae82:	d007      	beq.n	800ae94 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	b2da      	uxtb	r2, r3
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ae9a:	2b03      	cmp	r3, #3
 800ae9c:	d91b      	bls.n	800aed6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aea8:	4413      	add	r3, r2
 800aeaa:	b29a      	uxth	r2, r3
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d30a      	bcc.n	800aecc <tcp_receive+0x168>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aec0:	4413      	add	r3, r2
 800aec2:	b29a      	uxth	r2, r3
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800aeca:	e004      	b.n	800aed6 <tcp_receive+0x172>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aed2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aedc:	2b02      	cmp	r3, #2
 800aede:	d902      	bls.n	800aee6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f001 feed 	bl	800ccc0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800aee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	f040 8161 	bne.w	800b1b0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aef6:	e15b      	b.n	800b1b0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800aef8:	4b36      	ldr	r3, [pc, #216]	; (800afd4 <tcp_receive+0x270>)
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af00:	1ad3      	subs	r3, r2, r3
 800af02:	3b01      	subs	r3, #1
 800af04:	2b00      	cmp	r3, #0
 800af06:	f2c0 814e 	blt.w	800b1a6 <tcp_receive+0x442>
 800af0a:	4b32      	ldr	r3, [pc, #200]	; (800afd4 <tcp_receive+0x270>)
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af12:	1ad3      	subs	r3, r2, r3
 800af14:	2b00      	cmp	r3, #0
 800af16:	f300 8146 	bgt.w	800b1a6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	8b5b      	ldrh	r3, [r3, #26]
 800af1e:	f003 0304 	and.w	r3, r3, #4
 800af22:	2b00      	cmp	r3, #0
 800af24:	d010      	beq.n	800af48 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	8b5b      	ldrh	r3, [r3, #26]
 800af2a:	f023 0304 	bic.w	r3, r3, #4
 800af2e:	b29a      	uxth	r2, r3
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2200      	movs	r2, #0
 800af44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2200      	movs	r2, #0
 800af4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800af56:	10db      	asrs	r3, r3, #3
 800af58:	b21b      	sxth	r3, r3
 800af5a:	b29a      	uxth	r2, r3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800af62:	b29b      	uxth	r3, r3
 800af64:	4413      	add	r3, r2
 800af66:	b29b      	uxth	r3, r3
 800af68:	b21a      	sxth	r2, r3
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800af70:	4b18      	ldr	r3, [pc, #96]	; (800afd4 <tcp_receive+0x270>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	b29a      	uxth	r2, r3
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af7a:	b29b      	uxth	r3, r3
 800af7c:	1ad3      	subs	r3, r2, r3
 800af7e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2200      	movs	r2, #0
 800af84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800af88:	4b12      	ldr	r3, [pc, #72]	; (800afd4 <tcp_receive+0x270>)
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	7d1b      	ldrb	r3, [r3, #20]
 800af94:	2b03      	cmp	r3, #3
 800af96:	f240 8097 	bls.w	800b0c8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d245      	bcs.n	800b036 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	8b5b      	ldrh	r3, [r3, #26]
 800afae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d014      	beq.n	800afe0 <tcp_receive+0x27c>
 800afb6:	2301      	movs	r3, #1
 800afb8:	e013      	b.n	800afe2 <tcp_receive+0x27e>
 800afba:	bf00      	nop
 800afbc:	08012d9c 	.word	0x08012d9c
 800afc0:	080130cc 	.word	0x080130cc
 800afc4:	08012de8 	.word	0x08012de8
 800afc8:	080130e8 	.word	0x080130e8
 800afcc:	20008a04 	.word	0x20008a04
 800afd0:	200089f8 	.word	0x200089f8
 800afd4:	200089fc 	.word	0x200089fc
 800afd8:	200089e8 	.word	0x200089e8
 800afdc:	20008a02 	.word	0x20008a02
 800afe0:	2302      	movs	r3, #2
 800afe2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800afe6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800afea:	b29a      	uxth	r2, r3
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aff0:	fb12 f303 	smulbb	r3, r2, r3
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800aff8:	4293      	cmp	r3, r2
 800affa:	bf28      	it	cs
 800affc:	4613      	movcs	r3, r2
 800affe:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b006:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b008:	4413      	add	r3, r2
 800b00a:	b29a      	uxth	r2, r3
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b012:	429a      	cmp	r2, r3
 800b014:	d309      	bcc.n	800b02a <tcp_receive+0x2c6>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b01c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b01e:	4413      	add	r3, r2
 800b020:	b29a      	uxth	r2, r3
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b028:	e04e      	b.n	800b0c8 <tcp_receive+0x364>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b030:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b034:	e048      	b.n	800b0c8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b03c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b03e:	4413      	add	r3, r2
 800b040:	b29a      	uxth	r2, r3
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b048:	429a      	cmp	r2, r3
 800b04a:	d309      	bcc.n	800b060 <tcp_receive+0x2fc>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b052:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b054:	4413      	add	r3, r2
 800b056:	b29a      	uxth	r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b05e:	e004      	b.n	800b06a <tcp_receive+0x306>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b066:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b076:	429a      	cmp	r2, r3
 800b078:	d326      	bcc.n	800b0c8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b086:	1ad3      	subs	r3, r2, r3
 800b088:	b29a      	uxth	r2, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b09a:	4413      	add	r3, r2
 800b09c:	b29a      	uxth	r2, r3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d30a      	bcc.n	800b0be <tcp_receive+0x35a>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b0b2:	4413      	add	r3, r2
 800b0b4:	b29a      	uxth	r2, r3
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b0bc:	e004      	b.n	800b0c8 <tcp_receive+0x364>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0d0:	4a98      	ldr	r2, [pc, #608]	; (800b334 <tcp_receive+0x5d0>)
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f7ff fdca 	bl	800ac6c <tcp_free_acked_segments>
 800b0d8:	4602      	mov	r2, r0
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0e6:	4a94      	ldr	r2, [pc, #592]	; (800b338 <tcp_receive+0x5d4>)
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f7ff fdbf 	bl	800ac6c <tcp_free_acked_segments>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d104      	bne.n	800b106 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b102:	861a      	strh	r2, [r3, #48]	; 0x30
 800b104:	e002      	b.n	800b10c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2200      	movs	r2, #0
 800b10a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2200      	movs	r2, #0
 800b110:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b116:	2b00      	cmp	r3, #0
 800b118:	d103      	bne.n	800b122 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b128:	4b84      	ldr	r3, [pc, #528]	; (800b33c <tcp_receive+0x5d8>)
 800b12a:	881b      	ldrh	r3, [r3, #0]
 800b12c:	4413      	add	r3, r2
 800b12e:	b29a      	uxth	r2, r3
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	8b5b      	ldrh	r3, [r3, #26]
 800b13a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d035      	beq.n	800b1ae <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b146:	2b00      	cmp	r3, #0
 800b148:	d118      	bne.n	800b17c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d00c      	beq.n	800b16c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b15a:	68db      	ldr	r3, [r3, #12]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	4618      	mov	r0, r3
 800b160:	f7fb f9c7 	bl	80064f2 <lwip_htonl>
 800b164:	4603      	mov	r3, r0
 800b166:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b168:	2b00      	cmp	r3, #0
 800b16a:	dc20      	bgt.n	800b1ae <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	8b5b      	ldrh	r3, [r3, #26]
 800b170:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b174:	b29a      	uxth	r2, r3
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b17a:	e018      	b.n	800b1ae <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b184:	68db      	ldr	r3, [r3, #12]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	4618      	mov	r0, r3
 800b18a:	f7fb f9b2 	bl	80064f2 <lwip_htonl>
 800b18e:	4603      	mov	r3, r0
 800b190:	1ae3      	subs	r3, r4, r3
 800b192:	2b00      	cmp	r3, #0
 800b194:	dc0b      	bgt.n	800b1ae <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	8b5b      	ldrh	r3, [r3, #26]
 800b19a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b19e:	b29a      	uxth	r2, r3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b1a4:	e003      	b.n	800b1ae <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f001 ff76 	bl	800d098 <tcp_send_empty_ack>
 800b1ac:	e000      	b.n	800b1b0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b1ae:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d05b      	beq.n	800b270 <tcp_receive+0x50c>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1bc:	4b60      	ldr	r3, [pc, #384]	; (800b340 <tcp_receive+0x5dc>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	1ad3      	subs	r3, r2, r3
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	da54      	bge.n	800b270 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b1c6:	4b5f      	ldr	r3, [pc, #380]	; (800b344 <tcp_receive+0x5e0>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	b29a      	uxth	r2, r3
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	1ad3      	subs	r3, r2, r3
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b1da:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b1e4:	10db      	asrs	r3, r3, #3
 800b1e6:	b21b      	sxth	r3, r3
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	1ad3      	subs	r3, r2, r3
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b1f8:	b29a      	uxth	r2, r3
 800b1fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b1fe:	4413      	add	r3, r2
 800b200:	b29b      	uxth	r3, r3
 800b202:	b21a      	sxth	r2, r3
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800b208:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	da05      	bge.n	800b21c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800b210:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b214:	425b      	negs	r3, r3
 800b216:	b29b      	uxth	r3, r3
 800b218:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b21c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b226:	109b      	asrs	r3, r3, #2
 800b228:	b21b      	sxth	r3, r3
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	1ad3      	subs	r3, r2, r3
 800b22e:	b29b      	uxth	r3, r3
 800b230:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b23a:	b29a      	uxth	r2, r3
 800b23c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b240:	4413      	add	r3, r2
 800b242:	b29b      	uxth	r3, r3
 800b244:	b21a      	sxth	r2, r3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b250:	10db      	asrs	r3, r3, #3
 800b252:	b21b      	sxth	r3, r3
 800b254:	b29a      	uxth	r2, r3
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	4413      	add	r3, r2
 800b260:	b29b      	uxth	r3, r3
 800b262:	b21a      	sxth	r2, r3
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b270:	4b35      	ldr	r3, [pc, #212]	; (800b348 <tcp_receive+0x5e4>)
 800b272:	881b      	ldrh	r3, [r3, #0]
 800b274:	2b00      	cmp	r3, #0
 800b276:	f000 84e2 	beq.w	800bc3e <tcp_receive+0xeda>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	7d1b      	ldrb	r3, [r3, #20]
 800b27e:	2b06      	cmp	r3, #6
 800b280:	f200 84dd 	bhi.w	800bc3e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b288:	4b30      	ldr	r3, [pc, #192]	; (800b34c <tcp_receive+0x5e8>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	1ad3      	subs	r3, r2, r3
 800b28e:	3b01      	subs	r3, #1
 800b290:	2b00      	cmp	r3, #0
 800b292:	f2c0 808f 	blt.w	800b3b4 <tcp_receive+0x650>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b29a:	4b2b      	ldr	r3, [pc, #172]	; (800b348 <tcp_receive+0x5e4>)
 800b29c:	881b      	ldrh	r3, [r3, #0]
 800b29e:	4619      	mov	r1, r3
 800b2a0:	4b2a      	ldr	r3, [pc, #168]	; (800b34c <tcp_receive+0x5e8>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	440b      	add	r3, r1
 800b2a6:	1ad3      	subs	r3, r2, r3
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	f300 8082 	bgt.w	800b3b4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b2b0:	4b27      	ldr	r3, [pc, #156]	; (800b350 <tcp_receive+0x5ec>)
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2ba:	4b24      	ldr	r3, [pc, #144]	; (800b34c <tcp_receive+0x5e8>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	1ad3      	subs	r3, r2, r3
 800b2c0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b2c2:	4b23      	ldr	r3, [pc, #140]	; (800b350 <tcp_receive+0x5ec>)
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d106      	bne.n	800b2d8 <tcp_receive+0x574>
 800b2ca:	4b22      	ldr	r3, [pc, #136]	; (800b354 <tcp_receive+0x5f0>)
 800b2cc:	f240 5294 	movw	r2, #1428	; 0x594
 800b2d0:	4921      	ldr	r1, [pc, #132]	; (800b358 <tcp_receive+0x5f4>)
 800b2d2:	4822      	ldr	r0, [pc, #136]	; (800b35c <tcp_receive+0x5f8>)
 800b2d4:	f005 fa32 	bl	801073c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d906      	bls.n	800b2f0 <tcp_receive+0x58c>
 800b2e2:	4b1c      	ldr	r3, [pc, #112]	; (800b354 <tcp_receive+0x5f0>)
 800b2e4:	f240 5295 	movw	r2, #1429	; 0x595
 800b2e8:	491d      	ldr	r1, [pc, #116]	; (800b360 <tcp_receive+0x5fc>)
 800b2ea:	481c      	ldr	r0, [pc, #112]	; (800b35c <tcp_receive+0x5f8>)
 800b2ec:	f005 fa26 	bl	801073c <iprintf>
      off = (u16_t)off32;
 800b2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b2f6:	4b16      	ldr	r3, [pc, #88]	; (800b350 <tcp_receive+0x5ec>)
 800b2f8:	685b      	ldr	r3, [r3, #4]
 800b2fa:	891b      	ldrh	r3, [r3, #8]
 800b2fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b300:	429a      	cmp	r2, r3
 800b302:	d906      	bls.n	800b312 <tcp_receive+0x5ae>
 800b304:	4b13      	ldr	r3, [pc, #76]	; (800b354 <tcp_receive+0x5f0>)
 800b306:	f240 5297 	movw	r2, #1431	; 0x597
 800b30a:	4916      	ldr	r1, [pc, #88]	; (800b364 <tcp_receive+0x600>)
 800b30c:	4813      	ldr	r0, [pc, #76]	; (800b35c <tcp_receive+0x5f8>)
 800b30e:	f005 fa15 	bl	801073c <iprintf>
      inseg.len -= off;
 800b312:	4b0f      	ldr	r3, [pc, #60]	; (800b350 <tcp_receive+0x5ec>)
 800b314:	891a      	ldrh	r2, [r3, #8]
 800b316:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b31a:	1ad3      	subs	r3, r2, r3
 800b31c:	b29a      	uxth	r2, r3
 800b31e:	4b0c      	ldr	r3, [pc, #48]	; (800b350 <tcp_receive+0x5ec>)
 800b320:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b322:	4b0b      	ldr	r3, [pc, #44]	; (800b350 <tcp_receive+0x5ec>)
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	891a      	ldrh	r2, [r3, #8]
 800b328:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b32c:	1ad3      	subs	r3, r2, r3
 800b32e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800b330:	e02a      	b.n	800b388 <tcp_receive+0x624>
 800b332:	bf00      	nop
 800b334:	08013104 	.word	0x08013104
 800b338:	0801310c 	.word	0x0801310c
 800b33c:	20008a00 	.word	0x20008a00
 800b340:	200089fc 	.word	0x200089fc
 800b344:	200089c0 	.word	0x200089c0
 800b348:	20008a02 	.word	0x20008a02
 800b34c:	200089f8 	.word	0x200089f8
 800b350:	200089d8 	.word	0x200089d8
 800b354:	08012d9c 	.word	0x08012d9c
 800b358:	08013114 	.word	0x08013114
 800b35c:	08012de8 	.word	0x08012de8
 800b360:	08013124 	.word	0x08013124
 800b364:	08013134 	.word	0x08013134
        off -= p->len;
 800b368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b36a:	895b      	ldrh	r3, [r3, #10]
 800b36c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b370:	1ad3      	subs	r3, r2, r3
 800b372:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b378:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b37a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b37c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b37e:	2200      	movs	r2, #0
 800b380:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800b388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b38a:	895b      	ldrh	r3, [r3, #10]
 800b38c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b390:	429a      	cmp	r2, r3
 800b392:	d8e9      	bhi.n	800b368 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b394:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b398:	4619      	mov	r1, r3
 800b39a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b39c:	f7fc fb6c 	bl	8007a78 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a4:	4a91      	ldr	r2, [pc, #580]	; (800b5ec <tcp_receive+0x888>)
 800b3a6:	6013      	str	r3, [r2, #0]
 800b3a8:	4b91      	ldr	r3, [pc, #580]	; (800b5f0 <tcp_receive+0x88c>)
 800b3aa:	68db      	ldr	r3, [r3, #12]
 800b3ac:	4a8f      	ldr	r2, [pc, #572]	; (800b5ec <tcp_receive+0x888>)
 800b3ae:	6812      	ldr	r2, [r2, #0]
 800b3b0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b3b2:	e00d      	b.n	800b3d0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b3b4:	4b8d      	ldr	r3, [pc, #564]	; (800b5ec <tcp_receive+0x888>)
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3bc:	1ad3      	subs	r3, r2, r3
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	da06      	bge.n	800b3d0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	8b5b      	ldrh	r3, [r3, #26]
 800b3c6:	f043 0302 	orr.w	r3, r3, #2
 800b3ca:	b29a      	uxth	r2, r3
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b3d0:	4b86      	ldr	r3, [pc, #536]	; (800b5ec <tcp_receive+0x888>)
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d8:	1ad3      	subs	r3, r2, r3
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	f2c0 842a 	blt.w	800bc34 <tcp_receive+0xed0>
 800b3e0:	4b82      	ldr	r3, [pc, #520]	; (800b5ec <tcp_receive+0x888>)
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e8:	6879      	ldr	r1, [r7, #4]
 800b3ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b3ec:	440b      	add	r3, r1
 800b3ee:	1ad3      	subs	r3, r2, r3
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	f300 841e 	bgt.w	800bc34 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3fc:	4b7b      	ldr	r3, [pc, #492]	; (800b5ec <tcp_receive+0x888>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	429a      	cmp	r2, r3
 800b402:	f040 829a 	bne.w	800b93a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b406:	4b7a      	ldr	r3, [pc, #488]	; (800b5f0 <tcp_receive+0x88c>)
 800b408:	891c      	ldrh	r4, [r3, #8]
 800b40a:	4b79      	ldr	r3, [pc, #484]	; (800b5f0 <tcp_receive+0x88c>)
 800b40c:	68db      	ldr	r3, [r3, #12]
 800b40e:	899b      	ldrh	r3, [r3, #12]
 800b410:	b29b      	uxth	r3, r3
 800b412:	4618      	mov	r0, r3
 800b414:	f7fb f858 	bl	80064c8 <lwip_htons>
 800b418:	4603      	mov	r3, r0
 800b41a:	b2db      	uxtb	r3, r3
 800b41c:	f003 0303 	and.w	r3, r3, #3
 800b420:	2b00      	cmp	r3, #0
 800b422:	d001      	beq.n	800b428 <tcp_receive+0x6c4>
 800b424:	2301      	movs	r3, #1
 800b426:	e000      	b.n	800b42a <tcp_receive+0x6c6>
 800b428:	2300      	movs	r3, #0
 800b42a:	4423      	add	r3, r4
 800b42c:	b29a      	uxth	r2, r3
 800b42e:	4b71      	ldr	r3, [pc, #452]	; (800b5f4 <tcp_receive+0x890>)
 800b430:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b436:	4b6f      	ldr	r3, [pc, #444]	; (800b5f4 <tcp_receive+0x890>)
 800b438:	881b      	ldrh	r3, [r3, #0]
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d275      	bcs.n	800b52a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b43e:	4b6c      	ldr	r3, [pc, #432]	; (800b5f0 <tcp_receive+0x88c>)
 800b440:	68db      	ldr	r3, [r3, #12]
 800b442:	899b      	ldrh	r3, [r3, #12]
 800b444:	b29b      	uxth	r3, r3
 800b446:	4618      	mov	r0, r3
 800b448:	f7fb f83e 	bl	80064c8 <lwip_htons>
 800b44c:	4603      	mov	r3, r0
 800b44e:	b2db      	uxtb	r3, r3
 800b450:	f003 0301 	and.w	r3, r3, #1
 800b454:	2b00      	cmp	r3, #0
 800b456:	d01f      	beq.n	800b498 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b458:	4b65      	ldr	r3, [pc, #404]	; (800b5f0 <tcp_receive+0x88c>)
 800b45a:	68db      	ldr	r3, [r3, #12]
 800b45c:	899b      	ldrh	r3, [r3, #12]
 800b45e:	b29b      	uxth	r3, r3
 800b460:	b21b      	sxth	r3, r3
 800b462:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b466:	b21c      	sxth	r4, r3
 800b468:	4b61      	ldr	r3, [pc, #388]	; (800b5f0 <tcp_receive+0x88c>)
 800b46a:	68db      	ldr	r3, [r3, #12]
 800b46c:	899b      	ldrh	r3, [r3, #12]
 800b46e:	b29b      	uxth	r3, r3
 800b470:	4618      	mov	r0, r3
 800b472:	f7fb f829 	bl	80064c8 <lwip_htons>
 800b476:	4603      	mov	r3, r0
 800b478:	b2db      	uxtb	r3, r3
 800b47a:	b29b      	uxth	r3, r3
 800b47c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b480:	b29b      	uxth	r3, r3
 800b482:	4618      	mov	r0, r3
 800b484:	f7fb f820 	bl	80064c8 <lwip_htons>
 800b488:	4603      	mov	r3, r0
 800b48a:	b21b      	sxth	r3, r3
 800b48c:	4323      	orrs	r3, r4
 800b48e:	b21a      	sxth	r2, r3
 800b490:	4b57      	ldr	r3, [pc, #348]	; (800b5f0 <tcp_receive+0x88c>)
 800b492:	68db      	ldr	r3, [r3, #12]
 800b494:	b292      	uxth	r2, r2
 800b496:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b49c:	4b54      	ldr	r3, [pc, #336]	; (800b5f0 <tcp_receive+0x88c>)
 800b49e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b4a0:	4b53      	ldr	r3, [pc, #332]	; (800b5f0 <tcp_receive+0x88c>)
 800b4a2:	68db      	ldr	r3, [r3, #12]
 800b4a4:	899b      	ldrh	r3, [r3, #12]
 800b4a6:	b29b      	uxth	r3, r3
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f7fb f80d 	bl	80064c8 <lwip_htons>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	f003 0302 	and.w	r3, r3, #2
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d005      	beq.n	800b4c6 <tcp_receive+0x762>
            inseg.len -= 1;
 800b4ba:	4b4d      	ldr	r3, [pc, #308]	; (800b5f0 <tcp_receive+0x88c>)
 800b4bc:	891b      	ldrh	r3, [r3, #8]
 800b4be:	3b01      	subs	r3, #1
 800b4c0:	b29a      	uxth	r2, r3
 800b4c2:	4b4b      	ldr	r3, [pc, #300]	; (800b5f0 <tcp_receive+0x88c>)
 800b4c4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b4c6:	4b4a      	ldr	r3, [pc, #296]	; (800b5f0 <tcp_receive+0x88c>)
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	4a49      	ldr	r2, [pc, #292]	; (800b5f0 <tcp_receive+0x88c>)
 800b4cc:	8912      	ldrh	r2, [r2, #8]
 800b4ce:	4611      	mov	r1, r2
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7fc f9d1 	bl	8007878 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b4d6:	4b46      	ldr	r3, [pc, #280]	; (800b5f0 <tcp_receive+0x88c>)
 800b4d8:	891c      	ldrh	r4, [r3, #8]
 800b4da:	4b45      	ldr	r3, [pc, #276]	; (800b5f0 <tcp_receive+0x88c>)
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	899b      	ldrh	r3, [r3, #12]
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7fa fff0 	bl	80064c8 <lwip_htons>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	f003 0303 	and.w	r3, r3, #3
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d001      	beq.n	800b4f8 <tcp_receive+0x794>
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	e000      	b.n	800b4fa <tcp_receive+0x796>
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	4423      	add	r3, r4
 800b4fc:	b29a      	uxth	r2, r3
 800b4fe:	4b3d      	ldr	r3, [pc, #244]	; (800b5f4 <tcp_receive+0x890>)
 800b500:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b502:	4b3c      	ldr	r3, [pc, #240]	; (800b5f4 <tcp_receive+0x890>)
 800b504:	881b      	ldrh	r3, [r3, #0]
 800b506:	461a      	mov	r2, r3
 800b508:	4b38      	ldr	r3, [pc, #224]	; (800b5ec <tcp_receive+0x888>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	441a      	add	r2, r3
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b512:	6879      	ldr	r1, [r7, #4]
 800b514:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b516:	440b      	add	r3, r1
 800b518:	429a      	cmp	r2, r3
 800b51a:	d006      	beq.n	800b52a <tcp_receive+0x7c6>
 800b51c:	4b36      	ldr	r3, [pc, #216]	; (800b5f8 <tcp_receive+0x894>)
 800b51e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800b522:	4936      	ldr	r1, [pc, #216]	; (800b5fc <tcp_receive+0x898>)
 800b524:	4836      	ldr	r0, [pc, #216]	; (800b600 <tcp_receive+0x89c>)
 800b526:	f005 f909 	bl	801073c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b52e:	2b00      	cmp	r3, #0
 800b530:	f000 80e7 	beq.w	800b702 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b534:	4b2e      	ldr	r3, [pc, #184]	; (800b5f0 <tcp_receive+0x88c>)
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	899b      	ldrh	r3, [r3, #12]
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7fa ffc3 	bl	80064c8 <lwip_htons>
 800b542:	4603      	mov	r3, r0
 800b544:	b2db      	uxtb	r3, r3
 800b546:	f003 0301 	and.w	r3, r3, #1
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d010      	beq.n	800b570 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b54e:	e00a      	b.n	800b566 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b554:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b55a:	681a      	ldr	r2, [r3, #0]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800b560:	68f8      	ldr	r0, [r7, #12]
 800b562:	f7fd fd92 	bl	800908a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d1f0      	bne.n	800b550 <tcp_receive+0x7ec>
 800b56e:	e0c8      	b.n	800b702 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b574:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b576:	e052      	b.n	800b61e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b57a:	68db      	ldr	r3, [r3, #12]
 800b57c:	899b      	ldrh	r3, [r3, #12]
 800b57e:	b29b      	uxth	r3, r3
 800b580:	4618      	mov	r0, r3
 800b582:	f7fa ffa1 	bl	80064c8 <lwip_htons>
 800b586:	4603      	mov	r3, r0
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	f003 0301 	and.w	r3, r3, #1
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d03d      	beq.n	800b60e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b592:	4b17      	ldr	r3, [pc, #92]	; (800b5f0 <tcp_receive+0x88c>)
 800b594:	68db      	ldr	r3, [r3, #12]
 800b596:	899b      	ldrh	r3, [r3, #12]
 800b598:	b29b      	uxth	r3, r3
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7fa ff94 	bl	80064c8 <lwip_htons>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d130      	bne.n	800b60e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b5ac:	4b10      	ldr	r3, [pc, #64]	; (800b5f0 <tcp_receive+0x88c>)
 800b5ae:	68db      	ldr	r3, [r3, #12]
 800b5b0:	899b      	ldrh	r3, [r3, #12]
 800b5b2:	b29c      	uxth	r4, r3
 800b5b4:	2001      	movs	r0, #1
 800b5b6:	f7fa ff87 	bl	80064c8 <lwip_htons>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	461a      	mov	r2, r3
 800b5be:	4b0c      	ldr	r3, [pc, #48]	; (800b5f0 <tcp_receive+0x88c>)
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	4322      	orrs	r2, r4
 800b5c4:	b292      	uxth	r2, r2
 800b5c6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b5c8:	4b09      	ldr	r3, [pc, #36]	; (800b5f0 <tcp_receive+0x88c>)
 800b5ca:	891c      	ldrh	r4, [r3, #8]
 800b5cc:	4b08      	ldr	r3, [pc, #32]	; (800b5f0 <tcp_receive+0x88c>)
 800b5ce:	68db      	ldr	r3, [r3, #12]
 800b5d0:	899b      	ldrh	r3, [r3, #12]
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7fa ff77 	bl	80064c8 <lwip_htons>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	b2db      	uxtb	r3, r3
 800b5de:	f003 0303 	and.w	r3, r3, #3
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d00e      	beq.n	800b604 <tcp_receive+0x8a0>
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e00d      	b.n	800b606 <tcp_receive+0x8a2>
 800b5ea:	bf00      	nop
 800b5ec:	200089f8 	.word	0x200089f8
 800b5f0:	200089d8 	.word	0x200089d8
 800b5f4:	20008a02 	.word	0x20008a02
 800b5f8:	08012d9c 	.word	0x08012d9c
 800b5fc:	08013144 	.word	0x08013144
 800b600:	08012de8 	.word	0x08012de8
 800b604:	2300      	movs	r3, #0
 800b606:	4423      	add	r3, r4
 800b608:	b29a      	uxth	r2, r3
 800b60a:	4b98      	ldr	r3, [pc, #608]	; (800b86c <tcp_receive+0xb08>)
 800b60c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b60e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b610:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800b618:	6938      	ldr	r0, [r7, #16]
 800b61a:	f7fd fd36 	bl	800908a <tcp_seg_free>
            while (next &&
 800b61e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b620:	2b00      	cmp	r3, #0
 800b622:	d00e      	beq.n	800b642 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b624:	4b91      	ldr	r3, [pc, #580]	; (800b86c <tcp_receive+0xb08>)
 800b626:	881b      	ldrh	r3, [r3, #0]
 800b628:	461a      	mov	r2, r3
 800b62a:	4b91      	ldr	r3, [pc, #580]	; (800b870 <tcp_receive+0xb0c>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	441a      	add	r2, r3
 800b630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b632:	68db      	ldr	r3, [r3, #12]
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b638:	8909      	ldrh	r1, [r1, #8]
 800b63a:	440b      	add	r3, r1
 800b63c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b63e:	2b00      	cmp	r3, #0
 800b640:	da9a      	bge.n	800b578 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b644:	2b00      	cmp	r3, #0
 800b646:	d059      	beq.n	800b6fc <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800b648:	4b88      	ldr	r3, [pc, #544]	; (800b86c <tcp_receive+0xb08>)
 800b64a:	881b      	ldrh	r3, [r3, #0]
 800b64c:	461a      	mov	r2, r3
 800b64e:	4b88      	ldr	r3, [pc, #544]	; (800b870 <tcp_receive+0xb0c>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	441a      	add	r2, r3
 800b654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	dd4d      	ble.n	800b6fc <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b662:	68db      	ldr	r3, [r3, #12]
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	b29a      	uxth	r2, r3
 800b668:	4b81      	ldr	r3, [pc, #516]	; (800b870 <tcp_receive+0xb0c>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	b29b      	uxth	r3, r3
 800b66e:	1ad3      	subs	r3, r2, r3
 800b670:	b29a      	uxth	r2, r3
 800b672:	4b80      	ldr	r3, [pc, #512]	; (800b874 <tcp_receive+0xb10>)
 800b674:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b676:	4b7f      	ldr	r3, [pc, #508]	; (800b874 <tcp_receive+0xb10>)
 800b678:	68db      	ldr	r3, [r3, #12]
 800b67a:	899b      	ldrh	r3, [r3, #12]
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	4618      	mov	r0, r3
 800b680:	f7fa ff22 	bl	80064c8 <lwip_htons>
 800b684:	4603      	mov	r3, r0
 800b686:	b2db      	uxtb	r3, r3
 800b688:	f003 0302 	and.w	r3, r3, #2
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d005      	beq.n	800b69c <tcp_receive+0x938>
                inseg.len -= 1;
 800b690:	4b78      	ldr	r3, [pc, #480]	; (800b874 <tcp_receive+0xb10>)
 800b692:	891b      	ldrh	r3, [r3, #8]
 800b694:	3b01      	subs	r3, #1
 800b696:	b29a      	uxth	r2, r3
 800b698:	4b76      	ldr	r3, [pc, #472]	; (800b874 <tcp_receive+0xb10>)
 800b69a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b69c:	4b75      	ldr	r3, [pc, #468]	; (800b874 <tcp_receive+0xb10>)
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	4a74      	ldr	r2, [pc, #464]	; (800b874 <tcp_receive+0xb10>)
 800b6a2:	8912      	ldrh	r2, [r2, #8]
 800b6a4:	4611      	mov	r1, r2
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7fc f8e6 	bl	8007878 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b6ac:	4b71      	ldr	r3, [pc, #452]	; (800b874 <tcp_receive+0xb10>)
 800b6ae:	891c      	ldrh	r4, [r3, #8]
 800b6b0:	4b70      	ldr	r3, [pc, #448]	; (800b874 <tcp_receive+0xb10>)
 800b6b2:	68db      	ldr	r3, [r3, #12]
 800b6b4:	899b      	ldrh	r3, [r3, #12]
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7fa ff05 	bl	80064c8 <lwip_htons>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	f003 0303 	and.w	r3, r3, #3
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d001      	beq.n	800b6ce <tcp_receive+0x96a>
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	e000      	b.n	800b6d0 <tcp_receive+0x96c>
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	4423      	add	r3, r4
 800b6d2:	b29a      	uxth	r2, r3
 800b6d4:	4b65      	ldr	r3, [pc, #404]	; (800b86c <tcp_receive+0xb08>)
 800b6d6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b6d8:	4b64      	ldr	r3, [pc, #400]	; (800b86c <tcp_receive+0xb08>)
 800b6da:	881b      	ldrh	r3, [r3, #0]
 800b6dc:	461a      	mov	r2, r3
 800b6de:	4b64      	ldr	r3, [pc, #400]	; (800b870 <tcp_receive+0xb0c>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	441a      	add	r2, r3
 800b6e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d006      	beq.n	800b6fc <tcp_receive+0x998>
 800b6ee:	4b62      	ldr	r3, [pc, #392]	; (800b878 <tcp_receive+0xb14>)
 800b6f0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800b6f4:	4961      	ldr	r1, [pc, #388]	; (800b87c <tcp_receive+0xb18>)
 800b6f6:	4862      	ldr	r0, [pc, #392]	; (800b880 <tcp_receive+0xb1c>)
 800b6f8:	f005 f820 	bl	801073c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b700:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b702:	4b5a      	ldr	r3, [pc, #360]	; (800b86c <tcp_receive+0xb08>)
 800b704:	881b      	ldrh	r3, [r3, #0]
 800b706:	461a      	mov	r2, r3
 800b708:	4b59      	ldr	r3, [pc, #356]	; (800b870 <tcp_receive+0xb0c>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	441a      	add	r2, r3
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b716:	4b55      	ldr	r3, [pc, #340]	; (800b86c <tcp_receive+0xb08>)
 800b718:	881b      	ldrh	r3, [r3, #0]
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d206      	bcs.n	800b72c <tcp_receive+0x9c8>
 800b71e:	4b56      	ldr	r3, [pc, #344]	; (800b878 <tcp_receive+0xb14>)
 800b720:	f240 6207 	movw	r2, #1543	; 0x607
 800b724:	4957      	ldr	r1, [pc, #348]	; (800b884 <tcp_receive+0xb20>)
 800b726:	4856      	ldr	r0, [pc, #344]	; (800b880 <tcp_receive+0xb1c>)
 800b728:	f005 f808 	bl	801073c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b730:	4b4e      	ldr	r3, [pc, #312]	; (800b86c <tcp_receive+0xb08>)
 800b732:	881b      	ldrh	r3, [r3, #0]
 800b734:	1ad3      	subs	r3, r2, r3
 800b736:	b29a      	uxth	r2, r3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f7fc ffc5 	bl	80086cc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b742:	4b4c      	ldr	r3, [pc, #304]	; (800b874 <tcp_receive+0xb10>)
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	891b      	ldrh	r3, [r3, #8]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d006      	beq.n	800b75a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800b74c:	4b49      	ldr	r3, [pc, #292]	; (800b874 <tcp_receive+0xb10>)
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	4a4d      	ldr	r2, [pc, #308]	; (800b888 <tcp_receive+0xb24>)
 800b752:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b754:	4b47      	ldr	r3, [pc, #284]	; (800b874 <tcp_receive+0xb10>)
 800b756:	2200      	movs	r2, #0
 800b758:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b75a:	4b46      	ldr	r3, [pc, #280]	; (800b874 <tcp_receive+0xb10>)
 800b75c:	68db      	ldr	r3, [r3, #12]
 800b75e:	899b      	ldrh	r3, [r3, #12]
 800b760:	b29b      	uxth	r3, r3
 800b762:	4618      	mov	r0, r3
 800b764:	f7fa feb0 	bl	80064c8 <lwip_htons>
 800b768:	4603      	mov	r3, r0
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	f003 0301 	and.w	r3, r3, #1
 800b770:	2b00      	cmp	r3, #0
 800b772:	f000 80b8 	beq.w	800b8e6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b776:	4b45      	ldr	r3, [pc, #276]	; (800b88c <tcp_receive+0xb28>)
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	f043 0320 	orr.w	r3, r3, #32
 800b77e:	b2da      	uxtb	r2, r3
 800b780:	4b42      	ldr	r3, [pc, #264]	; (800b88c <tcp_receive+0xb28>)
 800b782:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b784:	e0af      	b.n	800b8e6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b78a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b790:	68db      	ldr	r3, [r3, #12]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	4a36      	ldr	r2, [pc, #216]	; (800b870 <tcp_receive+0xb0c>)
 800b796:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	891b      	ldrh	r3, [r3, #8]
 800b79c:	461c      	mov	r4, r3
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	68db      	ldr	r3, [r3, #12]
 800b7a2:	899b      	ldrh	r3, [r3, #12]
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7fa fe8e 	bl	80064c8 <lwip_htons>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	b2db      	uxtb	r3, r3
 800b7b0:	f003 0303 	and.w	r3, r3, #3
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d001      	beq.n	800b7bc <tcp_receive+0xa58>
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	e000      	b.n	800b7be <tcp_receive+0xa5a>
 800b7bc:	2300      	movs	r3, #0
 800b7be:	191a      	adds	r2, r3, r4
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c4:	441a      	add	r2, r3
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7ce:	461c      	mov	r4, r3
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	891b      	ldrh	r3, [r3, #8]
 800b7d4:	461d      	mov	r5, r3
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	68db      	ldr	r3, [r3, #12]
 800b7da:	899b      	ldrh	r3, [r3, #12]
 800b7dc:	b29b      	uxth	r3, r3
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f7fa fe72 	bl	80064c8 <lwip_htons>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	b2db      	uxtb	r3, r3
 800b7e8:	f003 0303 	and.w	r3, r3, #3
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d001      	beq.n	800b7f4 <tcp_receive+0xa90>
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	e000      	b.n	800b7f6 <tcp_receive+0xa92>
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	442b      	add	r3, r5
 800b7f8:	429c      	cmp	r4, r3
 800b7fa:	d206      	bcs.n	800b80a <tcp_receive+0xaa6>
 800b7fc:	4b1e      	ldr	r3, [pc, #120]	; (800b878 <tcp_receive+0xb14>)
 800b7fe:	f240 622b 	movw	r2, #1579	; 0x62b
 800b802:	4923      	ldr	r1, [pc, #140]	; (800b890 <tcp_receive+0xb2c>)
 800b804:	481e      	ldr	r0, [pc, #120]	; (800b880 <tcp_receive+0xb1c>)
 800b806:	f004 ff99 	bl	801073c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	891b      	ldrh	r3, [r3, #8]
 800b80e:	461c      	mov	r4, r3
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	899b      	ldrh	r3, [r3, #12]
 800b816:	b29b      	uxth	r3, r3
 800b818:	4618      	mov	r0, r3
 800b81a:	f7fa fe55 	bl	80064c8 <lwip_htons>
 800b81e:	4603      	mov	r3, r0
 800b820:	b2db      	uxtb	r3, r3
 800b822:	f003 0303 	and.w	r3, r3, #3
 800b826:	2b00      	cmp	r3, #0
 800b828:	d001      	beq.n	800b82e <tcp_receive+0xaca>
 800b82a:	2301      	movs	r3, #1
 800b82c:	e000      	b.n	800b830 <tcp_receive+0xacc>
 800b82e:	2300      	movs	r3, #0
 800b830:	1919      	adds	r1, r3, r4
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b836:	b28b      	uxth	r3, r1
 800b838:	1ad3      	subs	r3, r2, r3
 800b83a:	b29a      	uxth	r2, r3
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f7fc ff43 	bl	80086cc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	891b      	ldrh	r3, [r3, #8]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d028      	beq.n	800b8a2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b850:	4b0d      	ldr	r3, [pc, #52]	; (800b888 <tcp_receive+0xb24>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d01d      	beq.n	800b894 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800b858:	4b0b      	ldr	r3, [pc, #44]	; (800b888 <tcp_receive+0xb24>)
 800b85a:	681a      	ldr	r2, [r3, #0]
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	4619      	mov	r1, r3
 800b862:	4610      	mov	r0, r2
 800b864:	f7fc fa50 	bl	8007d08 <pbuf_cat>
 800b868:	e018      	b.n	800b89c <tcp_receive+0xb38>
 800b86a:	bf00      	nop
 800b86c:	20008a02 	.word	0x20008a02
 800b870:	200089f8 	.word	0x200089f8
 800b874:	200089d8 	.word	0x200089d8
 800b878:	08012d9c 	.word	0x08012d9c
 800b87c:	0801317c 	.word	0x0801317c
 800b880:	08012de8 	.word	0x08012de8
 800b884:	080131b8 	.word	0x080131b8
 800b888:	20008a08 	.word	0x20008a08
 800b88c:	20008a05 	.word	0x20008a05
 800b890:	080131d8 	.word	0x080131d8
            } else {
              recv_data = cseg->p;
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	4a70      	ldr	r2, [pc, #448]	; (800ba5c <tcp_receive+0xcf8>)
 800b89a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	68db      	ldr	r3, [r3, #12]
 800b8a6:	899b      	ldrh	r3, [r3, #12]
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7fa fe0c 	bl	80064c8 <lwip_htons>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	f003 0301 	and.w	r3, r3, #1
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d00d      	beq.n	800b8d8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b8bc:	4b68      	ldr	r3, [pc, #416]	; (800ba60 <tcp_receive+0xcfc>)
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	f043 0320 	orr.w	r3, r3, #32
 800b8c4:	b2da      	uxtb	r2, r3
 800b8c6:	4b66      	ldr	r3, [pc, #408]	; (800ba60 <tcp_receive+0xcfc>)
 800b8c8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	7d1b      	ldrb	r3, [r3, #20]
 800b8ce:	2b04      	cmp	r3, #4
 800b8d0:	d102      	bne.n	800b8d8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2207      	movs	r2, #7
 800b8d6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800b8e0:	68b8      	ldr	r0, [r7, #8]
 800b8e2:	f7fd fbd2 	bl	800908a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d008      	beq.n	800b900 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8f2:	68db      	ldr	r3, [r3, #12]
 800b8f4:	685a      	ldr	r2, [r3, #4]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	f43f af43 	beq.w	800b786 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	8b5b      	ldrh	r3, [r3, #26]
 800b904:	f003 0301 	and.w	r3, r3, #1
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d00e      	beq.n	800b92a <tcp_receive+0xbc6>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	8b5b      	ldrh	r3, [r3, #26]
 800b910:	f023 0301 	bic.w	r3, r3, #1
 800b914:	b29a      	uxth	r2, r3
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	835a      	strh	r2, [r3, #26]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	8b5b      	ldrh	r3, [r3, #26]
 800b91e:	f043 0302 	orr.w	r3, r3, #2
 800b922:	b29a      	uxth	r2, r3
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b928:	e188      	b.n	800bc3c <tcp_receive+0xed8>
        tcp_ack(pcb);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	8b5b      	ldrh	r3, [r3, #26]
 800b92e:	f043 0301 	orr.w	r3, r3, #1
 800b932:	b29a      	uxth	r2, r3
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b938:	e180      	b.n	800bc3c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d106      	bne.n	800b950 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b942:	4848      	ldr	r0, [pc, #288]	; (800ba64 <tcp_receive+0xd00>)
 800b944:	f7fd fbba 	bl	80090bc <tcp_seg_copy>
 800b948:	4602      	mov	r2, r0
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	675a      	str	r2, [r3, #116]	; 0x74
 800b94e:	e16d      	b.n	800bc2c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800b950:	2300      	movs	r3, #0
 800b952:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b958:	63bb      	str	r3, [r7, #56]	; 0x38
 800b95a:	e157      	b.n	800bc0c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800b95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	685a      	ldr	r2, [r3, #4]
 800b962:	4b41      	ldr	r3, [pc, #260]	; (800ba68 <tcp_receive+0xd04>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	429a      	cmp	r2, r3
 800b968:	d11d      	bne.n	800b9a6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b96a:	4b3e      	ldr	r3, [pc, #248]	; (800ba64 <tcp_receive+0xd00>)
 800b96c:	891a      	ldrh	r2, [r3, #8]
 800b96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b970:	891b      	ldrh	r3, [r3, #8]
 800b972:	429a      	cmp	r2, r3
 800b974:	f240 814f 	bls.w	800bc16 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b978:	483a      	ldr	r0, [pc, #232]	; (800ba64 <tcp_receive+0xd00>)
 800b97a:	f7fd fb9f 	bl	80090bc <tcp_seg_copy>
 800b97e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	2b00      	cmp	r3, #0
 800b984:	f000 8149 	beq.w	800bc1a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800b988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d003      	beq.n	800b996 <tcp_receive+0xc32>
                    prev->next = cseg;
 800b98e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b990:	697a      	ldr	r2, [r7, #20]
 800b992:	601a      	str	r2, [r3, #0]
 800b994:	e002      	b.n	800b99c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	697a      	ldr	r2, [r7, #20]
 800b99a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800b99c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b99e:	6978      	ldr	r0, [r7, #20]
 800b9a0:	f7ff f8dc 	bl	800ab5c <tcp_oos_insert_segment>
                }
                break;
 800b9a4:	e139      	b.n	800bc1a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800b9a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d117      	bne.n	800b9dc <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b9ac:	4b2e      	ldr	r3, [pc, #184]	; (800ba68 <tcp_receive+0xd04>)
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b2:	68db      	ldr	r3, [r3, #12]
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	1ad3      	subs	r3, r2, r3
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	da57      	bge.n	800ba6c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b9bc:	4829      	ldr	r0, [pc, #164]	; (800ba64 <tcp_receive+0xd00>)
 800b9be:	f7fd fb7d 	bl	80090bc <tcp_seg_copy>
 800b9c2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800b9c4:	69bb      	ldr	r3, [r7, #24]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	f000 8129 	beq.w	800bc1e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	69ba      	ldr	r2, [r7, #24]
 800b9d0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800b9d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b9d4:	69b8      	ldr	r0, [r7, #24]
 800b9d6:	f7ff f8c1 	bl	800ab5c <tcp_oos_insert_segment>
                  }
                  break;
 800b9da:	e120      	b.n	800bc1e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b9dc:	4b22      	ldr	r3, [pc, #136]	; (800ba68 <tcp_receive+0xd04>)
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	685b      	ldr	r3, [r3, #4]
 800b9e6:	1ad3      	subs	r3, r2, r3
 800b9e8:	3b01      	subs	r3, #1
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	db3e      	blt.n	800ba6c <tcp_receive+0xd08>
 800b9ee:	4b1e      	ldr	r3, [pc, #120]	; (800ba68 <tcp_receive+0xd04>)
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f4:	68db      	ldr	r3, [r3, #12]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	1ad3      	subs	r3, r2, r3
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	dc35      	bgt.n	800ba6c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ba00:	4818      	ldr	r0, [pc, #96]	; (800ba64 <tcp_receive+0xd00>)
 800ba02:	f7fd fb5b 	bl	80090bc <tcp_seg_copy>
 800ba06:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ba08:	69fb      	ldr	r3, [r7, #28]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	f000 8109 	beq.w	800bc22 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ba10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba18:	8912      	ldrh	r2, [r2, #8]
 800ba1a:	441a      	add	r2, r3
 800ba1c:	4b12      	ldr	r3, [pc, #72]	; (800ba68 <tcp_receive+0xd04>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	1ad3      	subs	r3, r2, r3
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	dd12      	ble.n	800ba4c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ba26:	4b10      	ldr	r3, [pc, #64]	; (800ba68 <tcp_receive+0xd04>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	b29a      	uxth	r2, r3
 800ba2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba2e:	68db      	ldr	r3, [r3, #12]
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	b29b      	uxth	r3, r3
 800ba34:	1ad3      	subs	r3, r2, r3
 800ba36:	b29a      	uxth	r2, r3
 800ba38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba3a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ba3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba3e:	685a      	ldr	r2, [r3, #4]
 800ba40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba42:	891b      	ldrh	r3, [r3, #8]
 800ba44:	4619      	mov	r1, r3
 800ba46:	4610      	mov	r0, r2
 800ba48:	f7fb ff16 	bl	8007878 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ba4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba4e:	69fa      	ldr	r2, [r7, #28]
 800ba50:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ba52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ba54:	69f8      	ldr	r0, [r7, #28]
 800ba56:	f7ff f881 	bl	800ab5c <tcp_oos_insert_segment>
                  }
                  break;
 800ba5a:	e0e2      	b.n	800bc22 <tcp_receive+0xebe>
 800ba5c:	20008a08 	.word	0x20008a08
 800ba60:	20008a05 	.word	0x20008a05
 800ba64:	200089d8 	.word	0x200089d8
 800ba68:	200089f8 	.word	0x200089f8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ba6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba6e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ba70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	f040 80c6 	bne.w	800bc06 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ba7a:	4b80      	ldr	r3, [pc, #512]	; (800bc7c <tcp_receive+0xf18>)
 800ba7c:	681a      	ldr	r2, [r3, #0]
 800ba7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba80:	68db      	ldr	r3, [r3, #12]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	f340 80bd 	ble.w	800bc06 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ba8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8e:	68db      	ldr	r3, [r3, #12]
 800ba90:	899b      	ldrh	r3, [r3, #12]
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7fa fd17 	bl	80064c8 <lwip_htons>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	f003 0301 	and.w	r3, r3, #1
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	f040 80bf 	bne.w	800bc26 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800baa8:	4875      	ldr	r0, [pc, #468]	; (800bc80 <tcp_receive+0xf1c>)
 800baaa:	f7fd fb07 	bl	80090bc <tcp_seg_copy>
 800baae:	4602      	mov	r2, r0
 800bab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800bab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	f000 80b6 	beq.w	800bc2a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800babe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bac6:	8912      	ldrh	r2, [r2, #8]
 800bac8:	441a      	add	r2, r3
 800baca:	4b6c      	ldr	r3, [pc, #432]	; (800bc7c <tcp_receive+0xf18>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	1ad3      	subs	r3, r2, r3
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	dd12      	ble.n	800bafa <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800bad4:	4b69      	ldr	r3, [pc, #420]	; (800bc7c <tcp_receive+0xf18>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	b29a      	uxth	r2, r3
 800bada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800badc:	68db      	ldr	r3, [r3, #12]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	1ad3      	subs	r3, r2, r3
 800bae4:	b29a      	uxth	r2, r3
 800bae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800baea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baec:	685a      	ldr	r2, [r3, #4]
 800baee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf0:	891b      	ldrh	r3, [r3, #8]
 800baf2:	4619      	mov	r1, r3
 800baf4:	4610      	mov	r0, r2
 800baf6:	f7fb febf 	bl	8007878 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800bafa:	4b62      	ldr	r3, [pc, #392]	; (800bc84 <tcp_receive+0xf20>)
 800bafc:	881b      	ldrh	r3, [r3, #0]
 800bafe:	461a      	mov	r2, r3
 800bb00:	4b5e      	ldr	r3, [pc, #376]	; (800bc7c <tcp_receive+0xf18>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	441a      	add	r2, r3
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb0a:	6879      	ldr	r1, [r7, #4]
 800bb0c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bb0e:	440b      	add	r3, r1
 800bb10:	1ad3      	subs	r3, r2, r3
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	f340 8089 	ble.w	800bc2a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800bb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	68db      	ldr	r3, [r3, #12]
 800bb1e:	899b      	ldrh	r3, [r3, #12]
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7fa fcd0 	bl	80064c8 <lwip_htons>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	b2db      	uxtb	r3, r3
 800bb2c:	f003 0301 	and.w	r3, r3, #1
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d022      	beq.n	800bb7a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800bb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	899b      	ldrh	r3, [r3, #12]
 800bb3c:	b29b      	uxth	r3, r3
 800bb3e:	b21b      	sxth	r3, r3
 800bb40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bb44:	b21c      	sxth	r4, r3
 800bb46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	68db      	ldr	r3, [r3, #12]
 800bb4c:	899b      	ldrh	r3, [r3, #12]
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7fa fcb9 	bl	80064c8 <lwip_htons>
 800bb56:	4603      	mov	r3, r0
 800bb58:	b2db      	uxtb	r3, r3
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800bb60:	b29b      	uxth	r3, r3
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7fa fcb0 	bl	80064c8 <lwip_htons>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	b21b      	sxth	r3, r3
 800bb6c:	4323      	orrs	r3, r4
 800bb6e:	b21a      	sxth	r2, r3
 800bb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	68db      	ldr	r3, [r3, #12]
 800bb76:	b292      	uxth	r2, r2
 800bb78:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb7e:	b29a      	uxth	r2, r3
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb84:	4413      	add	r3, r2
 800bb86:	b299      	uxth	r1, r3
 800bb88:	4b3c      	ldr	r3, [pc, #240]	; (800bc7c <tcp_receive+0xf18>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	b29a      	uxth	r2, r3
 800bb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	1a8a      	subs	r2, r1, r2
 800bb94:	b292      	uxth	r2, r2
 800bb96:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800bb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	685a      	ldr	r2, [r3, #4]
 800bb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	891b      	ldrh	r3, [r3, #8]
 800bba4:	4619      	mov	r1, r3
 800bba6:	4610      	mov	r0, r2
 800bba8:	f7fb fe66 	bl	8007878 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800bbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	891c      	ldrh	r4, [r3, #8]
 800bbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	899b      	ldrh	r3, [r3, #12]
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7fa fc83 	bl	80064c8 <lwip_htons>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	f003 0303 	and.w	r3, r3, #3
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d001      	beq.n	800bbd2 <tcp_receive+0xe6e>
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e000      	b.n	800bbd4 <tcp_receive+0xe70>
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	4423      	add	r3, r4
 800bbd6:	b29a      	uxth	r2, r3
 800bbd8:	4b2a      	ldr	r3, [pc, #168]	; (800bc84 <tcp_receive+0xf20>)
 800bbda:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bbdc:	4b29      	ldr	r3, [pc, #164]	; (800bc84 <tcp_receive+0xf20>)
 800bbde:	881b      	ldrh	r3, [r3, #0]
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	4b26      	ldr	r3, [pc, #152]	; (800bc7c <tcp_receive+0xf18>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	441a      	add	r2, r3
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbec:	6879      	ldr	r1, [r7, #4]
 800bbee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bbf0:	440b      	add	r3, r1
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d019      	beq.n	800bc2a <tcp_receive+0xec6>
 800bbf6:	4b24      	ldr	r3, [pc, #144]	; (800bc88 <tcp_receive+0xf24>)
 800bbf8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800bbfc:	4923      	ldr	r1, [pc, #140]	; (800bc8c <tcp_receive+0xf28>)
 800bbfe:	4824      	ldr	r0, [pc, #144]	; (800bc90 <tcp_receive+0xf2c>)
 800bc00:	f004 fd9c 	bl	801073c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800bc04:	e011      	b.n	800bc2a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	f47f aea4 	bne.w	800b95c <tcp_receive+0xbf8>
 800bc14:	e00a      	b.n	800bc2c <tcp_receive+0xec8>
                break;
 800bc16:	bf00      	nop
 800bc18:	e008      	b.n	800bc2c <tcp_receive+0xec8>
                break;
 800bc1a:	bf00      	nop
 800bc1c:	e006      	b.n	800bc2c <tcp_receive+0xec8>
                  break;
 800bc1e:	bf00      	nop
 800bc20:	e004      	b.n	800bc2c <tcp_receive+0xec8>
                  break;
 800bc22:	bf00      	nop
 800bc24:	e002      	b.n	800bc2c <tcp_receive+0xec8>
                  break;
 800bc26:	bf00      	nop
 800bc28:	e000      	b.n	800bc2c <tcp_receive+0xec8>
                break;
 800bc2a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f001 fa33 	bl	800d098 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800bc32:	e003      	b.n	800bc3c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f001 fa2f 	bl	800d098 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bc3a:	e01a      	b.n	800bc72 <tcp_receive+0xf0e>
 800bc3c:	e019      	b.n	800bc72 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800bc3e:	4b0f      	ldr	r3, [pc, #60]	; (800bc7c <tcp_receive+0xf18>)
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc46:	1ad3      	subs	r3, r2, r3
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	db0a      	blt.n	800bc62 <tcp_receive+0xefe>
 800bc4c:	4b0b      	ldr	r3, [pc, #44]	; (800bc7c <tcp_receive+0xf18>)
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc54:	6879      	ldr	r1, [r7, #4]
 800bc56:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bc58:	440b      	add	r3, r1
 800bc5a:	1ad3      	subs	r3, r2, r3
 800bc5c:	3301      	adds	r3, #1
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	dd07      	ble.n	800bc72 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	8b5b      	ldrh	r3, [r3, #26]
 800bc66:	f043 0302 	orr.w	r3, r3, #2
 800bc6a:	b29a      	uxth	r2, r3
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800bc70:	e7ff      	b.n	800bc72 <tcp_receive+0xf0e>
 800bc72:	bf00      	nop
 800bc74:	3750      	adds	r7, #80	; 0x50
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bdb0      	pop	{r4, r5, r7, pc}
 800bc7a:	bf00      	nop
 800bc7c:	200089f8 	.word	0x200089f8
 800bc80:	200089d8 	.word	0x200089d8
 800bc84:	20008a02 	.word	0x20008a02
 800bc88:	08012d9c 	.word	0x08012d9c
 800bc8c:	08013144 	.word	0x08013144
 800bc90:	08012de8 	.word	0x08012de8

0800bc94 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800bc9a:	4b15      	ldr	r3, [pc, #84]	; (800bcf0 <tcp_get_next_optbyte+0x5c>)
 800bc9c:	881b      	ldrh	r3, [r3, #0]
 800bc9e:	1c5a      	adds	r2, r3, #1
 800bca0:	b291      	uxth	r1, r2
 800bca2:	4a13      	ldr	r2, [pc, #76]	; (800bcf0 <tcp_get_next_optbyte+0x5c>)
 800bca4:	8011      	strh	r1, [r2, #0]
 800bca6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800bca8:	4b12      	ldr	r3, [pc, #72]	; (800bcf4 <tcp_get_next_optbyte+0x60>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d004      	beq.n	800bcba <tcp_get_next_optbyte+0x26>
 800bcb0:	4b11      	ldr	r3, [pc, #68]	; (800bcf8 <tcp_get_next_optbyte+0x64>)
 800bcb2:	881b      	ldrh	r3, [r3, #0]
 800bcb4:	88fa      	ldrh	r2, [r7, #6]
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d208      	bcs.n	800bccc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800bcba:	4b10      	ldr	r3, [pc, #64]	; (800bcfc <tcp_get_next_optbyte+0x68>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	3314      	adds	r3, #20
 800bcc0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800bcc2:	88fb      	ldrh	r3, [r7, #6]
 800bcc4:	683a      	ldr	r2, [r7, #0]
 800bcc6:	4413      	add	r3, r2
 800bcc8:	781b      	ldrb	r3, [r3, #0]
 800bcca:	e00b      	b.n	800bce4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800bccc:	88fb      	ldrh	r3, [r7, #6]
 800bcce:	b2da      	uxtb	r2, r3
 800bcd0:	4b09      	ldr	r3, [pc, #36]	; (800bcf8 <tcp_get_next_optbyte+0x64>)
 800bcd2:	881b      	ldrh	r3, [r3, #0]
 800bcd4:	b2db      	uxtb	r3, r3
 800bcd6:	1ad3      	subs	r3, r2, r3
 800bcd8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800bcda:	4b06      	ldr	r3, [pc, #24]	; (800bcf4 <tcp_get_next_optbyte+0x60>)
 800bcdc:	681a      	ldr	r2, [r3, #0]
 800bcde:	797b      	ldrb	r3, [r7, #5]
 800bce0:	4413      	add	r3, r2
 800bce2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	370c      	adds	r7, #12
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr
 800bcf0:	200089f4 	.word	0x200089f4
 800bcf4:	200089f0 	.word	0x200089f0
 800bcf8:	200089ee 	.word	0x200089ee
 800bcfc:	200089e8 	.word	0x200089e8

0800bd00 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b084      	sub	sp, #16
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d106      	bne.n	800bd1c <tcp_parseopt+0x1c>
 800bd0e:	4b32      	ldr	r3, [pc, #200]	; (800bdd8 <tcp_parseopt+0xd8>)
 800bd10:	f240 727d 	movw	r2, #1917	; 0x77d
 800bd14:	4931      	ldr	r1, [pc, #196]	; (800bddc <tcp_parseopt+0xdc>)
 800bd16:	4832      	ldr	r0, [pc, #200]	; (800bde0 <tcp_parseopt+0xe0>)
 800bd18:	f004 fd10 	bl	801073c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800bd1c:	4b31      	ldr	r3, [pc, #196]	; (800bde4 <tcp_parseopt+0xe4>)
 800bd1e:	881b      	ldrh	r3, [r3, #0]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d055      	beq.n	800bdd0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bd24:	4b30      	ldr	r3, [pc, #192]	; (800bde8 <tcp_parseopt+0xe8>)
 800bd26:	2200      	movs	r2, #0
 800bd28:	801a      	strh	r2, [r3, #0]
 800bd2a:	e045      	b.n	800bdb8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800bd2c:	f7ff ffb2 	bl	800bc94 <tcp_get_next_optbyte>
 800bd30:	4603      	mov	r3, r0
 800bd32:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800bd34:	7bfb      	ldrb	r3, [r7, #15]
 800bd36:	2b02      	cmp	r3, #2
 800bd38:	d006      	beq.n	800bd48 <tcp_parseopt+0x48>
 800bd3a:	2b02      	cmp	r3, #2
 800bd3c:	dc2b      	bgt.n	800bd96 <tcp_parseopt+0x96>
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d041      	beq.n	800bdc6 <tcp_parseopt+0xc6>
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	d127      	bne.n	800bd96 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800bd46:	e037      	b.n	800bdb8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800bd48:	f7ff ffa4 	bl	800bc94 <tcp_get_next_optbyte>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	2b04      	cmp	r3, #4
 800bd50:	d13b      	bne.n	800bdca <tcp_parseopt+0xca>
 800bd52:	4b25      	ldr	r3, [pc, #148]	; (800bde8 <tcp_parseopt+0xe8>)
 800bd54:	881b      	ldrh	r3, [r3, #0]
 800bd56:	3301      	adds	r3, #1
 800bd58:	4a22      	ldr	r2, [pc, #136]	; (800bde4 <tcp_parseopt+0xe4>)
 800bd5a:	8812      	ldrh	r2, [r2, #0]
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	da34      	bge.n	800bdca <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800bd60:	f7ff ff98 	bl	800bc94 <tcp_get_next_optbyte>
 800bd64:	4603      	mov	r3, r0
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	021b      	lsls	r3, r3, #8
 800bd6a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800bd6c:	f7ff ff92 	bl	800bc94 <tcp_get_next_optbyte>
 800bd70:	4603      	mov	r3, r0
 800bd72:	b29a      	uxth	r2, r3
 800bd74:	89bb      	ldrh	r3, [r7, #12]
 800bd76:	4313      	orrs	r3, r2
 800bd78:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800bd7a:	89bb      	ldrh	r3, [r7, #12]
 800bd7c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800bd80:	d804      	bhi.n	800bd8c <tcp_parseopt+0x8c>
 800bd82:	89bb      	ldrh	r3, [r7, #12]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d001      	beq.n	800bd8c <tcp_parseopt+0x8c>
 800bd88:	89ba      	ldrh	r2, [r7, #12]
 800bd8a:	e001      	b.n	800bd90 <tcp_parseopt+0x90>
 800bd8c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800bd94:	e010      	b.n	800bdb8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800bd96:	f7ff ff7d 	bl	800bc94 <tcp_get_next_optbyte>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800bd9e:	7afb      	ldrb	r3, [r7, #11]
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d914      	bls.n	800bdce <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800bda4:	7afb      	ldrb	r3, [r7, #11]
 800bda6:	b29a      	uxth	r2, r3
 800bda8:	4b0f      	ldr	r3, [pc, #60]	; (800bde8 <tcp_parseopt+0xe8>)
 800bdaa:	881b      	ldrh	r3, [r3, #0]
 800bdac:	4413      	add	r3, r2
 800bdae:	b29b      	uxth	r3, r3
 800bdb0:	3b02      	subs	r3, #2
 800bdb2:	b29a      	uxth	r2, r3
 800bdb4:	4b0c      	ldr	r3, [pc, #48]	; (800bde8 <tcp_parseopt+0xe8>)
 800bdb6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bdb8:	4b0b      	ldr	r3, [pc, #44]	; (800bde8 <tcp_parseopt+0xe8>)
 800bdba:	881a      	ldrh	r2, [r3, #0]
 800bdbc:	4b09      	ldr	r3, [pc, #36]	; (800bde4 <tcp_parseopt+0xe4>)
 800bdbe:	881b      	ldrh	r3, [r3, #0]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d3b3      	bcc.n	800bd2c <tcp_parseopt+0x2c>
 800bdc4:	e004      	b.n	800bdd0 <tcp_parseopt+0xd0>
          return;
 800bdc6:	bf00      	nop
 800bdc8:	e002      	b.n	800bdd0 <tcp_parseopt+0xd0>
            return;
 800bdca:	bf00      	nop
 800bdcc:	e000      	b.n	800bdd0 <tcp_parseopt+0xd0>
            return;
 800bdce:	bf00      	nop
      }
    }
  }
}
 800bdd0:	3710      	adds	r7, #16
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	08012d9c 	.word	0x08012d9c
 800bddc:	08013200 	.word	0x08013200
 800bde0:	08012de8 	.word	0x08012de8
 800bde4:	200089ec 	.word	0x200089ec
 800bde8:	200089f4 	.word	0x200089f4

0800bdec <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800bdec:	b480      	push	{r7}
 800bdee:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800bdf0:	4b05      	ldr	r3, [pc, #20]	; (800be08 <tcp_trigger_input_pcb_close+0x1c>)
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	f043 0310 	orr.w	r3, r3, #16
 800bdf8:	b2da      	uxtb	r2, r3
 800bdfa:	4b03      	ldr	r3, [pc, #12]	; (800be08 <tcp_trigger_input_pcb_close+0x1c>)
 800bdfc:	701a      	strb	r2, [r3, #0]
}
 800bdfe:	bf00      	nop
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr
 800be08:	20008a05 	.word	0x20008a05

0800be0c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
 800be12:	60f8      	str	r0, [r7, #12]
 800be14:	60b9      	str	r1, [r7, #8]
 800be16:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d00a      	beq.n	800be34 <tcp_route+0x28>
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	7a1b      	ldrb	r3, [r3, #8]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d006      	beq.n	800be34 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	7a1b      	ldrb	r3, [r3, #8]
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7fb fb4a 	bl	80074c4 <netif_get_by_index>
 800be30:	4603      	mov	r3, r0
 800be32:	e003      	b.n	800be3c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f003 f995 	bl	800f164 <ip4_route>
 800be3a:	4603      	mov	r3, r0
  }
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3710      	adds	r7, #16
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}

0800be44 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800be44:	b590      	push	{r4, r7, lr}
 800be46:	b087      	sub	sp, #28
 800be48:	af00      	add	r7, sp, #0
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	60b9      	str	r1, [r7, #8]
 800be4e:	603b      	str	r3, [r7, #0]
 800be50:	4613      	mov	r3, r2
 800be52:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d105      	bne.n	800be66 <tcp_create_segment+0x22>
 800be5a:	4b44      	ldr	r3, [pc, #272]	; (800bf6c <tcp_create_segment+0x128>)
 800be5c:	22a3      	movs	r2, #163	; 0xa3
 800be5e:	4944      	ldr	r1, [pc, #272]	; (800bf70 <tcp_create_segment+0x12c>)
 800be60:	4844      	ldr	r0, [pc, #272]	; (800bf74 <tcp_create_segment+0x130>)
 800be62:	f004 fc6b 	bl	801073c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d105      	bne.n	800be78 <tcp_create_segment+0x34>
 800be6c:	4b3f      	ldr	r3, [pc, #252]	; (800bf6c <tcp_create_segment+0x128>)
 800be6e:	22a4      	movs	r2, #164	; 0xa4
 800be70:	4941      	ldr	r1, [pc, #260]	; (800bf78 <tcp_create_segment+0x134>)
 800be72:	4840      	ldr	r0, [pc, #256]	; (800bf74 <tcp_create_segment+0x130>)
 800be74:	f004 fc62 	bl	801073c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800be78:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	b2db      	uxtb	r3, r3
 800be80:	f003 0304 	and.w	r3, r3, #4
 800be84:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800be86:	2003      	movs	r0, #3
 800be88:	f7fa ff96 	bl	8006db8 <memp_malloc>
 800be8c:	6138      	str	r0, [r7, #16]
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d104      	bne.n	800be9e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800be94:	68b8      	ldr	r0, [r7, #8]
 800be96:	f7fb fe75 	bl	8007b84 <pbuf_free>
    return NULL;
 800be9a:	2300      	movs	r3, #0
 800be9c:	e061      	b.n	800bf62 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800bea4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	2200      	movs	r2, #0
 800beaa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	68ba      	ldr	r2, [r7, #8]
 800beb0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	891a      	ldrh	r2, [r3, #8]
 800beb6:	7dfb      	ldrb	r3, [r7, #23]
 800beb8:	b29b      	uxth	r3, r3
 800beba:	429a      	cmp	r2, r3
 800bebc:	d205      	bcs.n	800beca <tcp_create_segment+0x86>
 800bebe:	4b2b      	ldr	r3, [pc, #172]	; (800bf6c <tcp_create_segment+0x128>)
 800bec0:	22b0      	movs	r2, #176	; 0xb0
 800bec2:	492e      	ldr	r1, [pc, #184]	; (800bf7c <tcp_create_segment+0x138>)
 800bec4:	482b      	ldr	r0, [pc, #172]	; (800bf74 <tcp_create_segment+0x130>)
 800bec6:	f004 fc39 	bl	801073c <iprintf>
  seg->len = p->tot_len - optlen;
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	891a      	ldrh	r2, [r3, #8]
 800bece:	7dfb      	ldrb	r3, [r7, #23]
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	1ad3      	subs	r3, r2, r3
 800bed4:	b29a      	uxth	r2, r3
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800beda:	2114      	movs	r1, #20
 800bedc:	68b8      	ldr	r0, [r7, #8]
 800bede:	f7fb fdbb 	bl	8007a58 <pbuf_add_header>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d004      	beq.n	800bef2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800bee8:	6938      	ldr	r0, [r7, #16]
 800beea:	f7fd f8ce 	bl	800908a <tcp_seg_free>
    return NULL;
 800beee:	2300      	movs	r3, #0
 800bef0:	e037      	b.n	800bf62 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	685a      	ldr	r2, [r3, #4]
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	8ada      	ldrh	r2, [r3, #22]
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	68dc      	ldr	r4, [r3, #12]
 800bf04:	4610      	mov	r0, r2
 800bf06:	f7fa fadf 	bl	80064c8 <lwip_htons>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	8b1a      	ldrh	r2, [r3, #24]
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	68dc      	ldr	r4, [r3, #12]
 800bf16:	4610      	mov	r0, r2
 800bf18:	f7fa fad6 	bl	80064c8 <lwip_htons>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	68dc      	ldr	r4, [r3, #12]
 800bf24:	6838      	ldr	r0, [r7, #0]
 800bf26:	f7fa fae4 	bl	80064f2 <lwip_htonl>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800bf2e:	7dfb      	ldrb	r3, [r7, #23]
 800bf30:	089b      	lsrs	r3, r3, #2
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	3305      	adds	r3, #5
 800bf38:	b29b      	uxth	r3, r3
 800bf3a:	031b      	lsls	r3, r3, #12
 800bf3c:	b29a      	uxth	r2, r3
 800bf3e:	79fb      	ldrb	r3, [r7, #7]
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	4313      	orrs	r3, r2
 800bf44:	b29a      	uxth	r2, r3
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	68dc      	ldr	r4, [r3, #12]
 800bf4a:	4610      	mov	r0, r2
 800bf4c:	f7fa fabc 	bl	80064c8 <lwip_htons>
 800bf50:	4603      	mov	r3, r0
 800bf52:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	68db      	ldr	r3, [r3, #12]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	749a      	strb	r2, [r3, #18]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	74da      	strb	r2, [r3, #19]
  return seg;
 800bf60:	693b      	ldr	r3, [r7, #16]
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	371c      	adds	r7, #28
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd90      	pop	{r4, r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	0801321c 	.word	0x0801321c
 800bf70:	08013250 	.word	0x08013250
 800bf74:	08013270 	.word	0x08013270
 800bf78:	08013298 	.word	0x08013298
 800bf7c:	080132bc 	.word	0x080132bc

0800bf80 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800bf80:	b590      	push	{r4, r7, lr}
 800bf82:	b08b      	sub	sp, #44	; 0x2c
 800bf84:	af02      	add	r7, sp, #8
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	460b      	mov	r3, r1
 800bf8a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	61fb      	str	r3, [r7, #28]
 800bf90:	2300      	movs	r3, #0
 800bf92:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800bf94:	2300      	movs	r3, #0
 800bf96:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d106      	bne.n	800bfac <tcp_split_unsent_seg+0x2c>
 800bf9e:	4b95      	ldr	r3, [pc, #596]	; (800c1f4 <tcp_split_unsent_seg+0x274>)
 800bfa0:	f240 324b 	movw	r2, #843	; 0x34b
 800bfa4:	4994      	ldr	r1, [pc, #592]	; (800c1f8 <tcp_split_unsent_seg+0x278>)
 800bfa6:	4895      	ldr	r0, [pc, #596]	; (800c1fc <tcp_split_unsent_seg+0x27c>)
 800bfa8:	f004 fbc8 	bl	801073c <iprintf>

  useg = pcb->unsent;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfb0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d102      	bne.n	800bfbe <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800bfb8:	f04f 33ff 	mov.w	r3, #4294967295
 800bfbc:	e116      	b.n	800c1ec <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800bfbe:	887b      	ldrh	r3, [r7, #2]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d109      	bne.n	800bfd8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800bfc4:	4b8b      	ldr	r3, [pc, #556]	; (800c1f4 <tcp_split_unsent_seg+0x274>)
 800bfc6:	f240 3253 	movw	r2, #851	; 0x353
 800bfca:	498d      	ldr	r1, [pc, #564]	; (800c200 <tcp_split_unsent_seg+0x280>)
 800bfcc:	488b      	ldr	r0, [pc, #556]	; (800c1fc <tcp_split_unsent_seg+0x27c>)
 800bfce:	f004 fbb5 	bl	801073c <iprintf>
    return ERR_VAL;
 800bfd2:	f06f 0305 	mvn.w	r3, #5
 800bfd6:	e109      	b.n	800c1ec <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	891b      	ldrh	r3, [r3, #8]
 800bfdc:	887a      	ldrh	r2, [r7, #2]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d301      	bcc.n	800bfe6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	e102      	b.n	800c1ec <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bfea:	887a      	ldrh	r2, [r7, #2]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d906      	bls.n	800bffe <tcp_split_unsent_seg+0x7e>
 800bff0:	4b80      	ldr	r3, [pc, #512]	; (800c1f4 <tcp_split_unsent_seg+0x274>)
 800bff2:	f240 325b 	movw	r2, #859	; 0x35b
 800bff6:	4983      	ldr	r1, [pc, #524]	; (800c204 <tcp_split_unsent_seg+0x284>)
 800bff8:	4880      	ldr	r0, [pc, #512]	; (800c1fc <tcp_split_unsent_seg+0x27c>)
 800bffa:	f004 fb9f 	bl	801073c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	891b      	ldrh	r3, [r3, #8]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d106      	bne.n	800c014 <tcp_split_unsent_seg+0x94>
 800c006:	4b7b      	ldr	r3, [pc, #492]	; (800c1f4 <tcp_split_unsent_seg+0x274>)
 800c008:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800c00c:	497e      	ldr	r1, [pc, #504]	; (800c208 <tcp_split_unsent_seg+0x288>)
 800c00e:	487b      	ldr	r0, [pc, #492]	; (800c1fc <tcp_split_unsent_seg+0x27c>)
 800c010:	f004 fb94 	bl	801073c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	7a9b      	ldrb	r3, [r3, #10]
 800c018:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c01a:	7bfb      	ldrb	r3, [r7, #15]
 800c01c:	009b      	lsls	r3, r3, #2
 800c01e:	b2db      	uxtb	r3, r3
 800c020:	f003 0304 	and.w	r3, r3, #4
 800c024:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	891a      	ldrh	r2, [r3, #8]
 800c02a:	887b      	ldrh	r3, [r7, #2]
 800c02c:	1ad3      	subs	r3, r2, r3
 800c02e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c030:	7bbb      	ldrb	r3, [r7, #14]
 800c032:	b29a      	uxth	r2, r3
 800c034:	89bb      	ldrh	r3, [r7, #12]
 800c036:	4413      	add	r3, r2
 800c038:	b29b      	uxth	r3, r3
 800c03a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c03e:	4619      	mov	r1, r3
 800c040:	2036      	movs	r0, #54	; 0x36
 800c042:	f7fb fabb 	bl	80075bc <pbuf_alloc>
 800c046:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	f000 80b7 	beq.w	800c1be <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	891a      	ldrh	r2, [r3, #8]
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	891b      	ldrh	r3, [r3, #8]
 800c05a:	1ad3      	subs	r3, r2, r3
 800c05c:	b29a      	uxth	r2, r3
 800c05e:	887b      	ldrh	r3, [r7, #2]
 800c060:	4413      	add	r3, r2
 800c062:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	6858      	ldr	r0, [r3, #4]
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	685a      	ldr	r2, [r3, #4]
 800c06c:	7bbb      	ldrb	r3, [r7, #14]
 800c06e:	18d1      	adds	r1, r2, r3
 800c070:	897b      	ldrh	r3, [r7, #10]
 800c072:	89ba      	ldrh	r2, [r7, #12]
 800c074:	f7fb ff80 	bl	8007f78 <pbuf_copy_partial>
 800c078:	4603      	mov	r3, r0
 800c07a:	461a      	mov	r2, r3
 800c07c:	89bb      	ldrh	r3, [r7, #12]
 800c07e:	4293      	cmp	r3, r2
 800c080:	f040 809f 	bne.w	800c1c2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	899b      	ldrh	r3, [r3, #12]
 800c08a:	b29b      	uxth	r3, r3
 800c08c:	4618      	mov	r0, r3
 800c08e:	f7fa fa1b 	bl	80064c8 <lwip_htons>
 800c092:	4603      	mov	r3, r0
 800c094:	b2db      	uxtb	r3, r3
 800c096:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c09a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c09c:	2300      	movs	r3, #0
 800c09e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800c0a0:	7efb      	ldrb	r3, [r7, #27]
 800c0a2:	f003 0308 	and.w	r3, r3, #8
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d007      	beq.n	800c0ba <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c0aa:	7efb      	ldrb	r3, [r7, #27]
 800c0ac:	f023 0308 	bic.w	r3, r3, #8
 800c0b0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800c0b2:	7ebb      	ldrb	r3, [r7, #26]
 800c0b4:	f043 0308 	orr.w	r3, r3, #8
 800c0b8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800c0ba:	7efb      	ldrb	r3, [r7, #27]
 800c0bc:	f003 0301 	and.w	r3, r3, #1
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d007      	beq.n	800c0d4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800c0c4:	7efb      	ldrb	r3, [r7, #27]
 800c0c6:	f023 0301 	bic.w	r3, r3, #1
 800c0ca:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800c0cc:	7ebb      	ldrb	r3, [r7, #26]
 800c0ce:	f043 0301 	orr.w	r3, r3, #1
 800c0d2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	68db      	ldr	r3, [r3, #12]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7fa fa09 	bl	80064f2 <lwip_htonl>
 800c0e0:	4602      	mov	r2, r0
 800c0e2:	887b      	ldrh	r3, [r7, #2]
 800c0e4:	18d1      	adds	r1, r2, r3
 800c0e6:	7eba      	ldrb	r2, [r7, #26]
 800c0e8:	7bfb      	ldrb	r3, [r7, #15]
 800c0ea:	9300      	str	r3, [sp, #0]
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	6939      	ldr	r1, [r7, #16]
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f7ff fea7 	bl	800be44 <tcp_create_segment>
 800c0f6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d063      	beq.n	800c1c6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	4618      	mov	r0, r3
 800c104:	f7fb fdc6 	bl	8007c94 <pbuf_clen>
 800c108:	4603      	mov	r3, r0
 800c10a:	461a      	mov	r2, r3
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c112:	1a9b      	subs	r3, r3, r2
 800c114:	b29a      	uxth	r2, r3
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	6858      	ldr	r0, [r3, #4]
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	891a      	ldrh	r2, [r3, #8]
 800c126:	89bb      	ldrh	r3, [r7, #12]
 800c128:	1ad3      	subs	r3, r2, r3
 800c12a:	b29b      	uxth	r3, r3
 800c12c:	4619      	mov	r1, r3
 800c12e:	f7fb fba3 	bl	8007878 <pbuf_realloc>
  useg->len -= remainder;
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	891a      	ldrh	r2, [r3, #8]
 800c136:	89bb      	ldrh	r3, [r7, #12]
 800c138:	1ad3      	subs	r3, r2, r3
 800c13a:	b29a      	uxth	r2, r3
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	68db      	ldr	r3, [r3, #12]
 800c144:	899b      	ldrh	r3, [r3, #12]
 800c146:	b29c      	uxth	r4, r3
 800c148:	7efb      	ldrb	r3, [r7, #27]
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7fa f9bb 	bl	80064c8 <lwip_htons>
 800c152:	4603      	mov	r3, r0
 800c154:	461a      	mov	r2, r3
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	68db      	ldr	r3, [r3, #12]
 800c15a:	4322      	orrs	r2, r4
 800c15c:	b292      	uxth	r2, r2
 800c15e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	4618      	mov	r0, r3
 800c166:	f7fb fd95 	bl	8007c94 <pbuf_clen>
 800c16a:	4603      	mov	r3, r0
 800c16c:	461a      	mov	r2, r3
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c174:	4413      	add	r3, r2
 800c176:	b29a      	uxth	r2, r3
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c17e:	69fb      	ldr	r3, [r7, #28]
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	4618      	mov	r0, r3
 800c184:	f7fb fd86 	bl	8007c94 <pbuf_clen>
 800c188:	4603      	mov	r3, r0
 800c18a:	461a      	mov	r2, r3
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c192:	4413      	add	r3, r2
 800c194:	b29a      	uxth	r2, r3
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800c19c:	697b      	ldr	r3, [r7, #20]
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	69fb      	ldr	r3, [r7, #28]
 800c1a2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	69fa      	ldr	r2, [r7, #28]
 800c1a8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800c1aa:	69fb      	ldr	r3, [r7, #28]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d103      	bne.n	800c1ba <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	e016      	b.n	800c1ec <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800c1be:	bf00      	nop
 800c1c0:	e002      	b.n	800c1c8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c1c2:	bf00      	nop
 800c1c4:	e000      	b.n	800c1c8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c1c6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800c1c8:	69fb      	ldr	r3, [r7, #28]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d006      	beq.n	800c1dc <tcp_split_unsent_seg+0x25c>
 800c1ce:	4b09      	ldr	r3, [pc, #36]	; (800c1f4 <tcp_split_unsent_seg+0x274>)
 800c1d0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800c1d4:	490d      	ldr	r1, [pc, #52]	; (800c20c <tcp_split_unsent_seg+0x28c>)
 800c1d6:	4809      	ldr	r0, [pc, #36]	; (800c1fc <tcp_split_unsent_seg+0x27c>)
 800c1d8:	f004 fab0 	bl	801073c <iprintf>
  if (p != NULL) {
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d002      	beq.n	800c1e8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800c1e2:	6938      	ldr	r0, [r7, #16]
 800c1e4:	f7fb fcce 	bl	8007b84 <pbuf_free>
  }

  return ERR_MEM;
 800c1e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3724      	adds	r7, #36	; 0x24
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd90      	pop	{r4, r7, pc}
 800c1f4:	0801321c 	.word	0x0801321c
 800c1f8:	080135b0 	.word	0x080135b0
 800c1fc:	08013270 	.word	0x08013270
 800c200:	080135d4 	.word	0x080135d4
 800c204:	080135f8 	.word	0x080135f8
 800c208:	08013608 	.word	0x08013608
 800c20c:	08013618 	.word	0x08013618

0800c210 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c210:	b590      	push	{r4, r7, lr}
 800c212:	b085      	sub	sp, #20
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d106      	bne.n	800c22c <tcp_send_fin+0x1c>
 800c21e:	4b21      	ldr	r3, [pc, #132]	; (800c2a4 <tcp_send_fin+0x94>)
 800c220:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800c224:	4920      	ldr	r1, [pc, #128]	; (800c2a8 <tcp_send_fin+0x98>)
 800c226:	4821      	ldr	r0, [pc, #132]	; (800c2ac <tcp_send_fin+0x9c>)
 800c228:	f004 fa88 	bl	801073c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c230:	2b00      	cmp	r3, #0
 800c232:	d02e      	beq.n	800c292 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c238:	60fb      	str	r3, [r7, #12]
 800c23a:	e002      	b.n	800c242 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d1f8      	bne.n	800c23c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	68db      	ldr	r3, [r3, #12]
 800c24e:	899b      	ldrh	r3, [r3, #12]
 800c250:	b29b      	uxth	r3, r3
 800c252:	4618      	mov	r0, r3
 800c254:	f7fa f938 	bl	80064c8 <lwip_htons>
 800c258:	4603      	mov	r3, r0
 800c25a:	b2db      	uxtb	r3, r3
 800c25c:	f003 0307 	and.w	r3, r3, #7
 800c260:	2b00      	cmp	r3, #0
 800c262:	d116      	bne.n	800c292 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	68db      	ldr	r3, [r3, #12]
 800c268:	899b      	ldrh	r3, [r3, #12]
 800c26a:	b29c      	uxth	r4, r3
 800c26c:	2001      	movs	r0, #1
 800c26e:	f7fa f92b 	bl	80064c8 <lwip_htons>
 800c272:	4603      	mov	r3, r0
 800c274:	461a      	mov	r2, r3
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	68db      	ldr	r3, [r3, #12]
 800c27a:	4322      	orrs	r2, r4
 800c27c:	b292      	uxth	r2, r2
 800c27e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	8b5b      	ldrh	r3, [r3, #26]
 800c284:	f043 0320 	orr.w	r3, r3, #32
 800c288:	b29a      	uxth	r2, r3
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c28e:	2300      	movs	r3, #0
 800c290:	e004      	b.n	800c29c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c292:	2101      	movs	r1, #1
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f000 f80b 	bl	800c2b0 <tcp_enqueue_flags>
 800c29a:	4603      	mov	r3, r0
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3714      	adds	r7, #20
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd90      	pop	{r4, r7, pc}
 800c2a4:	0801321c 	.word	0x0801321c
 800c2a8:	08013624 	.word	0x08013624
 800c2ac:	08013270 	.word	0x08013270

0800c2b0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b08a      	sub	sp, #40	; 0x28
 800c2b4:	af02      	add	r7, sp, #8
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c2c4:	78fb      	ldrb	r3, [r7, #3]
 800c2c6:	f003 0303 	and.w	r3, r3, #3
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d106      	bne.n	800c2dc <tcp_enqueue_flags+0x2c>
 800c2ce:	4b67      	ldr	r3, [pc, #412]	; (800c46c <tcp_enqueue_flags+0x1bc>)
 800c2d0:	f240 4211 	movw	r2, #1041	; 0x411
 800c2d4:	4966      	ldr	r1, [pc, #408]	; (800c470 <tcp_enqueue_flags+0x1c0>)
 800c2d6:	4867      	ldr	r0, [pc, #412]	; (800c474 <tcp_enqueue_flags+0x1c4>)
 800c2d8:	f004 fa30 	bl	801073c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d106      	bne.n	800c2f0 <tcp_enqueue_flags+0x40>
 800c2e2:	4b62      	ldr	r3, [pc, #392]	; (800c46c <tcp_enqueue_flags+0x1bc>)
 800c2e4:	f240 4213 	movw	r2, #1043	; 0x413
 800c2e8:	4963      	ldr	r1, [pc, #396]	; (800c478 <tcp_enqueue_flags+0x1c8>)
 800c2ea:	4862      	ldr	r0, [pc, #392]	; (800c474 <tcp_enqueue_flags+0x1c4>)
 800c2ec:	f004 fa26 	bl	801073c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c2f0:	78fb      	ldrb	r3, [r7, #3]
 800c2f2:	f003 0302 	and.w	r3, r3, #2
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d001      	beq.n	800c2fe <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c2fe:	7ffb      	ldrb	r3, [r7, #31]
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	b2db      	uxtb	r3, r3
 800c304:	f003 0304 	and.w	r3, r3, #4
 800c308:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c30a:	7dfb      	ldrb	r3, [r7, #23]
 800c30c:	b29b      	uxth	r3, r3
 800c30e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c312:	4619      	mov	r1, r3
 800c314:	2036      	movs	r0, #54	; 0x36
 800c316:	f7fb f951 	bl	80075bc <pbuf_alloc>
 800c31a:	6138      	str	r0, [r7, #16]
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d109      	bne.n	800c336 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	8b5b      	ldrh	r3, [r3, #26]
 800c326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c32a:	b29a      	uxth	r2, r3
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c330:	f04f 33ff 	mov.w	r3, #4294967295
 800c334:	e095      	b.n	800c462 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	895a      	ldrh	r2, [r3, #10]
 800c33a:	7dfb      	ldrb	r3, [r7, #23]
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	429a      	cmp	r2, r3
 800c340:	d206      	bcs.n	800c350 <tcp_enqueue_flags+0xa0>
 800c342:	4b4a      	ldr	r3, [pc, #296]	; (800c46c <tcp_enqueue_flags+0x1bc>)
 800c344:	f240 4239 	movw	r2, #1081	; 0x439
 800c348:	494c      	ldr	r1, [pc, #304]	; (800c47c <tcp_enqueue_flags+0x1cc>)
 800c34a:	484a      	ldr	r0, [pc, #296]	; (800c474 <tcp_enqueue_flags+0x1c4>)
 800c34c:	f004 f9f6 	bl	801073c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800c354:	78fa      	ldrb	r2, [r7, #3]
 800c356:	7ffb      	ldrb	r3, [r7, #31]
 800c358:	9300      	str	r3, [sp, #0]
 800c35a:	460b      	mov	r3, r1
 800c35c:	6939      	ldr	r1, [r7, #16]
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f7ff fd70 	bl	800be44 <tcp_create_segment>
 800c364:	60f8      	str	r0, [r7, #12]
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d109      	bne.n	800c380 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	8b5b      	ldrh	r3, [r3, #26]
 800c370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c374:	b29a      	uxth	r2, r3
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c37a:	f04f 33ff 	mov.w	r3, #4294967295
 800c37e:	e070      	b.n	800c462 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	68db      	ldr	r3, [r3, #12]
 800c384:	f003 0303 	and.w	r3, r3, #3
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d006      	beq.n	800c39a <tcp_enqueue_flags+0xea>
 800c38c:	4b37      	ldr	r3, [pc, #220]	; (800c46c <tcp_enqueue_flags+0x1bc>)
 800c38e:	f240 4242 	movw	r2, #1090	; 0x442
 800c392:	493b      	ldr	r1, [pc, #236]	; (800c480 <tcp_enqueue_flags+0x1d0>)
 800c394:	4837      	ldr	r0, [pc, #220]	; (800c474 <tcp_enqueue_flags+0x1c4>)
 800c396:	f004 f9d1 	bl	801073c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	891b      	ldrh	r3, [r3, #8]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d006      	beq.n	800c3b0 <tcp_enqueue_flags+0x100>
 800c3a2:	4b32      	ldr	r3, [pc, #200]	; (800c46c <tcp_enqueue_flags+0x1bc>)
 800c3a4:	f240 4243 	movw	r2, #1091	; 0x443
 800c3a8:	4936      	ldr	r1, [pc, #216]	; (800c484 <tcp_enqueue_flags+0x1d4>)
 800c3aa:	4832      	ldr	r0, [pc, #200]	; (800c474 <tcp_enqueue_flags+0x1c4>)
 800c3ac:	f004 f9c6 	bl	801073c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d103      	bne.n	800c3c0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	68fa      	ldr	r2, [r7, #12]
 800c3bc:	66da      	str	r2, [r3, #108]	; 0x6c
 800c3be:	e00d      	b.n	800c3dc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3c4:	61bb      	str	r3, [r7, #24]
 800c3c6:	e002      	b.n	800c3ce <tcp_enqueue_flags+0x11e>
 800c3c8:	69bb      	ldr	r3, [r7, #24]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	61bb      	str	r3, [r7, #24]
 800c3ce:	69bb      	ldr	r3, [r7, #24]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d1f8      	bne.n	800c3c8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800c3d6:	69bb      	ldr	r3, [r7, #24]
 800c3d8:	68fa      	ldr	r2, [r7, #12]
 800c3da:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c3e4:	78fb      	ldrb	r3, [r7, #3]
 800c3e6:	f003 0302 	and.w	r3, r3, #2
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d104      	bne.n	800c3f8 <tcp_enqueue_flags+0x148>
 800c3ee:	78fb      	ldrb	r3, [r7, #3]
 800c3f0:	f003 0301 	and.w	r3, r3, #1
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d004      	beq.n	800c402 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c3fc:	1c5a      	adds	r2, r3, #1
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c402:	78fb      	ldrb	r3, [r7, #3]
 800c404:	f003 0301 	and.w	r3, r3, #1
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d006      	beq.n	800c41a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	8b5b      	ldrh	r3, [r3, #26]
 800c410:	f043 0320 	orr.w	r3, r3, #32
 800c414:	b29a      	uxth	r2, r3
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	4618      	mov	r0, r3
 800c420:	f7fb fc38 	bl	8007c94 <pbuf_clen>
 800c424:	4603      	mov	r3, r0
 800c426:	461a      	mov	r2, r3
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c42e:	4413      	add	r3, r2
 800c430:	b29a      	uxth	r2, r3
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d00e      	beq.n	800c460 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c446:	2b00      	cmp	r3, #0
 800c448:	d10a      	bne.n	800c460 <tcp_enqueue_flags+0x1b0>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d106      	bne.n	800c460 <tcp_enqueue_flags+0x1b0>
 800c452:	4b06      	ldr	r3, [pc, #24]	; (800c46c <tcp_enqueue_flags+0x1bc>)
 800c454:	f240 4265 	movw	r2, #1125	; 0x465
 800c458:	490b      	ldr	r1, [pc, #44]	; (800c488 <tcp_enqueue_flags+0x1d8>)
 800c45a:	4806      	ldr	r0, [pc, #24]	; (800c474 <tcp_enqueue_flags+0x1c4>)
 800c45c:	f004 f96e 	bl	801073c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c460:	2300      	movs	r3, #0
}
 800c462:	4618      	mov	r0, r3
 800c464:	3720      	adds	r7, #32
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop
 800c46c:	0801321c 	.word	0x0801321c
 800c470:	08013640 	.word	0x08013640
 800c474:	08013270 	.word	0x08013270
 800c478:	08013698 	.word	0x08013698
 800c47c:	080136b8 	.word	0x080136b8
 800c480:	080136f4 	.word	0x080136f4
 800c484:	0801370c 	.word	0x0801370c
 800c488:	08013738 	.word	0x08013738

0800c48c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c48c:	b5b0      	push	{r4, r5, r7, lr}
 800c48e:	b08a      	sub	sp, #40	; 0x28
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d106      	bne.n	800c4a8 <tcp_output+0x1c>
 800c49a:	4b8a      	ldr	r3, [pc, #552]	; (800c6c4 <tcp_output+0x238>)
 800c49c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c4a0:	4989      	ldr	r1, [pc, #548]	; (800c6c8 <tcp_output+0x23c>)
 800c4a2:	488a      	ldr	r0, [pc, #552]	; (800c6cc <tcp_output+0x240>)
 800c4a4:	f004 f94a 	bl	801073c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	7d1b      	ldrb	r3, [r3, #20]
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	d106      	bne.n	800c4be <tcp_output+0x32>
 800c4b0:	4b84      	ldr	r3, [pc, #528]	; (800c6c4 <tcp_output+0x238>)
 800c4b2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800c4b6:	4986      	ldr	r1, [pc, #536]	; (800c6d0 <tcp_output+0x244>)
 800c4b8:	4884      	ldr	r0, [pc, #528]	; (800c6cc <tcp_output+0x240>)
 800c4ba:	f004 f93f 	bl	801073c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c4be:	4b85      	ldr	r3, [pc, #532]	; (800c6d4 <tcp_output+0x248>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d101      	bne.n	800c4cc <tcp_output+0x40>
    return ERR_OK;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	e1ce      	b.n	800c86a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	bf28      	it	cs
 800c4dc:	4613      	movcs	r3, r2
 800c4de:	b29b      	uxth	r3, r3
 800c4e0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800c4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d10b      	bne.n	800c506 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	8b5b      	ldrh	r3, [r3, #26]
 800c4f2:	f003 0302 	and.w	r3, r3, #2
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	f000 81aa 	beq.w	800c850 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f000 fdcb 	bl	800d098 <tcp_send_empty_ack>
 800c502:	4603      	mov	r3, r0
 800c504:	e1b1      	b.n	800c86a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c506:	6879      	ldr	r1, [r7, #4]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	3304      	adds	r3, #4
 800c50c:	461a      	mov	r2, r3
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f7ff fc7c 	bl	800be0c <tcp_route>
 800c514:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d102      	bne.n	800c522 <tcp_output+0x96>
    return ERR_RTE;
 800c51c:	f06f 0303 	mvn.w	r3, #3
 800c520:	e1a3      	b.n	800c86a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d003      	beq.n	800c530 <tcp_output+0xa4>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d111      	bne.n	800c554 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d002      	beq.n	800c53c <tcp_output+0xb0>
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	3304      	adds	r3, #4
 800c53a:	e000      	b.n	800c53e <tcp_output+0xb2>
 800c53c:	2300      	movs	r3, #0
 800c53e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d102      	bne.n	800c54c <tcp_output+0xc0>
      return ERR_RTE;
 800c546:	f06f 0303 	mvn.w	r3, #3
 800c54a:	e18e      	b.n	800c86a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c556:	68db      	ldr	r3, [r3, #12]
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7f9 ffc9 	bl	80064f2 <lwip_htonl>
 800c560:	4602      	mov	r2, r0
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c566:	1ad3      	subs	r3, r2, r3
 800c568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c56a:	8912      	ldrh	r2, [r2, #8]
 800c56c:	4413      	add	r3, r2
 800c56e:	69ba      	ldr	r2, [r7, #24]
 800c570:	429a      	cmp	r2, r3
 800c572:	d227      	bcs.n	800c5c4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c57a:	461a      	mov	r2, r3
 800c57c:	69bb      	ldr	r3, [r7, #24]
 800c57e:	4293      	cmp	r3, r2
 800c580:	d114      	bne.n	800c5ac <tcp_output+0x120>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c586:	2b00      	cmp	r3, #0
 800c588:	d110      	bne.n	800c5ac <tcp_output+0x120>
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c590:	2b00      	cmp	r3, #0
 800c592:	d10b      	bne.n	800c5ac <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2200      	movs	r2, #0
 800c598:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2201      	movs	r2, #1
 800c5a0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	8b5b      	ldrh	r3, [r3, #26]
 800c5b0:	f003 0302 	and.w	r3, r3, #2
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	f000 814d 	beq.w	800c854 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 fd6c 	bl	800d098 <tcp_send_empty_ack>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	e152      	b.n	800c86a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5d0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c5d2:	6a3b      	ldr	r3, [r7, #32]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	f000 811c 	beq.w	800c812 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800c5da:	e002      	b.n	800c5e2 <tcp_output+0x156>
 800c5dc:	6a3b      	ldr	r3, [r7, #32]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	623b      	str	r3, [r7, #32]
 800c5e2:	6a3b      	ldr	r3, [r7, #32]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d1f8      	bne.n	800c5dc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c5ea:	e112      	b.n	800c812 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ee:	68db      	ldr	r3, [r3, #12]
 800c5f0:	899b      	ldrh	r3, [r3, #12]
 800c5f2:	b29b      	uxth	r3, r3
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f7f9 ff67 	bl	80064c8 <lwip_htons>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	f003 0304 	and.w	r3, r3, #4
 800c602:	2b00      	cmp	r3, #0
 800c604:	d006      	beq.n	800c614 <tcp_output+0x188>
 800c606:	4b2f      	ldr	r3, [pc, #188]	; (800c6c4 <tcp_output+0x238>)
 800c608:	f240 5236 	movw	r2, #1334	; 0x536
 800c60c:	4932      	ldr	r1, [pc, #200]	; (800c6d8 <tcp_output+0x24c>)
 800c60e:	482f      	ldr	r0, [pc, #188]	; (800c6cc <tcp_output+0x240>)
 800c610:	f004 f894 	bl	801073c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d01f      	beq.n	800c65c <tcp_output+0x1d0>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	8b5b      	ldrh	r3, [r3, #26]
 800c620:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c624:	2b00      	cmp	r3, #0
 800c626:	d119      	bne.n	800c65c <tcp_output+0x1d0>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d00b      	beq.n	800c648 <tcp_output+0x1bc>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d110      	bne.n	800c65c <tcp_output+0x1d0>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c63e:	891a      	ldrh	r2, [r3, #8]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c644:	429a      	cmp	r2, r3
 800c646:	d209      	bcs.n	800c65c <tcp_output+0x1d0>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d004      	beq.n	800c65c <tcp_output+0x1d0>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c658:	2b08      	cmp	r3, #8
 800c65a:	d901      	bls.n	800c660 <tcp_output+0x1d4>
 800c65c:	2301      	movs	r3, #1
 800c65e:	e000      	b.n	800c662 <tcp_output+0x1d6>
 800c660:	2300      	movs	r3, #0
 800c662:	2b00      	cmp	r3, #0
 800c664:	d106      	bne.n	800c674 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	8b5b      	ldrh	r3, [r3, #26]
 800c66a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c66e:	2b00      	cmp	r3, #0
 800c670:	f000 80e4 	beq.w	800c83c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	7d1b      	ldrb	r3, [r3, #20]
 800c678:	2b02      	cmp	r3, #2
 800c67a:	d00d      	beq.n	800c698 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67e:	68db      	ldr	r3, [r3, #12]
 800c680:	899b      	ldrh	r3, [r3, #12]
 800c682:	b29c      	uxth	r4, r3
 800c684:	2010      	movs	r0, #16
 800c686:	f7f9 ff1f 	bl	80064c8 <lwip_htons>
 800c68a:	4603      	mov	r3, r0
 800c68c:	461a      	mov	r2, r3
 800c68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c690:	68db      	ldr	r3, [r3, #12]
 800c692:	4322      	orrs	r2, r4
 800c694:	b292      	uxth	r2, r2
 800c696:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c698:	697a      	ldr	r2, [r7, #20]
 800c69a:	6879      	ldr	r1, [r7, #4]
 800c69c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c69e:	f000 f909 	bl	800c8b4 <tcp_output_segment>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c6a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d016      	beq.n	800c6dc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	8b5b      	ldrh	r3, [r3, #26]
 800c6b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6b6:	b29a      	uxth	r2, r3
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	835a      	strh	r2, [r3, #26]
      return err;
 800c6bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6c0:	e0d3      	b.n	800c86a <tcp_output+0x3de>
 800c6c2:	bf00      	nop
 800c6c4:	0801321c 	.word	0x0801321c
 800c6c8:	08013760 	.word	0x08013760
 800c6cc:	08013270 	.word	0x08013270
 800c6d0:	08013778 	.word	0x08013778
 800c6d4:	20008a0c 	.word	0x20008a0c
 800c6d8:	080137a0 	.word	0x080137a0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6de:	681a      	ldr	r2, [r3, #0]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	7d1b      	ldrb	r3, [r3, #20]
 800c6e8:	2b02      	cmp	r3, #2
 800c6ea:	d006      	beq.n	800c6fa <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	8b5b      	ldrh	r3, [r3, #26]
 800c6f0:	f023 0303 	bic.w	r3, r3, #3
 800c6f4:	b29a      	uxth	r2, r3
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6fc:	68db      	ldr	r3, [r3, #12]
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	4618      	mov	r0, r3
 800c702:	f7f9 fef6 	bl	80064f2 <lwip_htonl>
 800c706:	4604      	mov	r4, r0
 800c708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c70a:	891b      	ldrh	r3, [r3, #8]
 800c70c:	461d      	mov	r5, r3
 800c70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	899b      	ldrh	r3, [r3, #12]
 800c714:	b29b      	uxth	r3, r3
 800c716:	4618      	mov	r0, r3
 800c718:	f7f9 fed6 	bl	80064c8 <lwip_htons>
 800c71c:	4603      	mov	r3, r0
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	f003 0303 	and.w	r3, r3, #3
 800c724:	2b00      	cmp	r3, #0
 800c726:	d001      	beq.n	800c72c <tcp_output+0x2a0>
 800c728:	2301      	movs	r3, #1
 800c72a:	e000      	b.n	800c72e <tcp_output+0x2a2>
 800c72c:	2300      	movs	r3, #0
 800c72e:	442b      	add	r3, r5
 800c730:	4423      	add	r3, r4
 800c732:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	1ad3      	subs	r3, r2, r3
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	da02      	bge.n	800c746 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	68ba      	ldr	r2, [r7, #8]
 800c744:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c748:	891b      	ldrh	r3, [r3, #8]
 800c74a:	461c      	mov	r4, r3
 800c74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c74e:	68db      	ldr	r3, [r3, #12]
 800c750:	899b      	ldrh	r3, [r3, #12]
 800c752:	b29b      	uxth	r3, r3
 800c754:	4618      	mov	r0, r3
 800c756:	f7f9 feb7 	bl	80064c8 <lwip_htons>
 800c75a:	4603      	mov	r3, r0
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	f003 0303 	and.w	r3, r3, #3
 800c762:	2b00      	cmp	r3, #0
 800c764:	d001      	beq.n	800c76a <tcp_output+0x2de>
 800c766:	2301      	movs	r3, #1
 800c768:	e000      	b.n	800c76c <tcp_output+0x2e0>
 800c76a:	2300      	movs	r3, #0
 800c76c:	4423      	add	r3, r4
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d049      	beq.n	800c806 <tcp_output+0x37a>
      seg->next = NULL;
 800c772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c774:	2200      	movs	r2, #0
 800c776:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d105      	bne.n	800c78c <tcp_output+0x300>
        pcb->unacked = seg;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c784:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800c786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c788:	623b      	str	r3, [r7, #32]
 800c78a:	e03f      	b.n	800c80c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c78e:	68db      	ldr	r3, [r3, #12]
 800c790:	685b      	ldr	r3, [r3, #4]
 800c792:	4618      	mov	r0, r3
 800c794:	f7f9 fead 	bl	80064f2 <lwip_htonl>
 800c798:	4604      	mov	r4, r0
 800c79a:	6a3b      	ldr	r3, [r7, #32]
 800c79c:	68db      	ldr	r3, [r3, #12]
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f7f9 fea6 	bl	80064f2 <lwip_htonl>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	1ae3      	subs	r3, r4, r3
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	da24      	bge.n	800c7f8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	3370      	adds	r3, #112	; 0x70
 800c7b2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c7b4:	e002      	b.n	800c7bc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c7b6:	69fb      	ldr	r3, [r7, #28]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c7bc:	69fb      	ldr	r3, [r7, #28]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d011      	beq.n	800c7e8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	68db      	ldr	r3, [r3, #12]
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f7f9 fe90 	bl	80064f2 <lwip_htonl>
 800c7d2:	4604      	mov	r4, r0
 800c7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d6:	68db      	ldr	r3, [r3, #12]
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7f9 fe89 	bl	80064f2 <lwip_htonl>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	dbe6      	blt.n	800c7b6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800c7e8:	69fb      	ldr	r3, [r7, #28]
 800c7ea:	681a      	ldr	r2, [r3, #0]
 800c7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ee:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7f4:	601a      	str	r2, [r3, #0]
 800c7f6:	e009      	b.n	800c80c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c7f8:	6a3b      	ldr	r3, [r7, #32]
 800c7fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7fc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c7fe:	6a3b      	ldr	r3, [r7, #32]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	623b      	str	r3, [r7, #32]
 800c804:	e002      	b.n	800c80c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c806:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c808:	f7fc fc3f 	bl	800908a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c810:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c814:	2b00      	cmp	r3, #0
 800c816:	d012      	beq.n	800c83e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c81a:	68db      	ldr	r3, [r3, #12]
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	4618      	mov	r0, r3
 800c820:	f7f9 fe67 	bl	80064f2 <lwip_htonl>
 800c824:	4602      	mov	r2, r0
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c82a:	1ad3      	subs	r3, r2, r3
 800c82c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c82e:	8912      	ldrh	r2, [r2, #8]
 800c830:	4413      	add	r3, r2
  while (seg != NULL &&
 800c832:	69ba      	ldr	r2, [r7, #24]
 800c834:	429a      	cmp	r2, r3
 800c836:	f4bf aed9 	bcs.w	800c5ec <tcp_output+0x160>
 800c83a:	e000      	b.n	800c83e <tcp_output+0x3b2>
      break;
 800c83c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c842:	2b00      	cmp	r3, #0
 800c844:	d108      	bne.n	800c858 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2200      	movs	r2, #0
 800c84a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800c84e:	e004      	b.n	800c85a <tcp_output+0x3ce>
    goto output_done;
 800c850:	bf00      	nop
 800c852:	e002      	b.n	800c85a <tcp_output+0x3ce>
    goto output_done;
 800c854:	bf00      	nop
 800c856:	e000      	b.n	800c85a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800c858:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	8b5b      	ldrh	r3, [r3, #26]
 800c85e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c862:	b29a      	uxth	r2, r3
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c868:	2300      	movs	r3, #0
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3728      	adds	r7, #40	; 0x28
 800c86e:	46bd      	mov	sp, r7
 800c870:	bdb0      	pop	{r4, r5, r7, pc}
 800c872:	bf00      	nop

0800c874 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d106      	bne.n	800c890 <tcp_output_segment_busy+0x1c>
 800c882:	4b09      	ldr	r3, [pc, #36]	; (800c8a8 <tcp_output_segment_busy+0x34>)
 800c884:	f240 529a 	movw	r2, #1434	; 0x59a
 800c888:	4908      	ldr	r1, [pc, #32]	; (800c8ac <tcp_output_segment_busy+0x38>)
 800c88a:	4809      	ldr	r0, [pc, #36]	; (800c8b0 <tcp_output_segment_busy+0x3c>)
 800c88c:	f003 ff56 	bl	801073c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	7b9b      	ldrb	r3, [r3, #14]
 800c896:	2b01      	cmp	r3, #1
 800c898:	d001      	beq.n	800c89e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800c89a:	2301      	movs	r3, #1
 800c89c:	e000      	b.n	800c8a0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800c89e:	2300      	movs	r3, #0
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3708      	adds	r7, #8
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	0801321c 	.word	0x0801321c
 800c8ac:	080137b8 	.word	0x080137b8
 800c8b0:	08013270 	.word	0x08013270

0800c8b4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c8b4:	b5b0      	push	{r4, r5, r7, lr}
 800c8b6:	b08c      	sub	sp, #48	; 0x30
 800c8b8:	af04      	add	r7, sp, #16
 800c8ba:	60f8      	str	r0, [r7, #12]
 800c8bc:	60b9      	str	r1, [r7, #8]
 800c8be:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d106      	bne.n	800c8d4 <tcp_output_segment+0x20>
 800c8c6:	4b64      	ldr	r3, [pc, #400]	; (800ca58 <tcp_output_segment+0x1a4>)
 800c8c8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800c8cc:	4963      	ldr	r1, [pc, #396]	; (800ca5c <tcp_output_segment+0x1a8>)
 800c8ce:	4864      	ldr	r0, [pc, #400]	; (800ca60 <tcp_output_segment+0x1ac>)
 800c8d0:	f003 ff34 	bl	801073c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d106      	bne.n	800c8e8 <tcp_output_segment+0x34>
 800c8da:	4b5f      	ldr	r3, [pc, #380]	; (800ca58 <tcp_output_segment+0x1a4>)
 800c8dc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800c8e0:	4960      	ldr	r1, [pc, #384]	; (800ca64 <tcp_output_segment+0x1b0>)
 800c8e2:	485f      	ldr	r0, [pc, #380]	; (800ca60 <tcp_output_segment+0x1ac>)
 800c8e4:	f003 ff2a 	bl	801073c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d106      	bne.n	800c8fc <tcp_output_segment+0x48>
 800c8ee:	4b5a      	ldr	r3, [pc, #360]	; (800ca58 <tcp_output_segment+0x1a4>)
 800c8f0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800c8f4:	495c      	ldr	r1, [pc, #368]	; (800ca68 <tcp_output_segment+0x1b4>)
 800c8f6:	485a      	ldr	r0, [pc, #360]	; (800ca60 <tcp_output_segment+0x1ac>)
 800c8f8:	f003 ff20 	bl	801073c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800c8fc:	68f8      	ldr	r0, [r7, #12]
 800c8fe:	f7ff ffb9 	bl	800c874 <tcp_output_segment_busy>
 800c902:	4603      	mov	r3, r0
 800c904:	2b00      	cmp	r3, #0
 800c906:	d001      	beq.n	800c90c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800c908:	2300      	movs	r3, #0
 800c90a:	e0a1      	b.n	800ca50 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	68dc      	ldr	r4, [r3, #12]
 800c914:	4610      	mov	r0, r2
 800c916:	f7f9 fdec 	bl	80064f2 <lwip_htonl>
 800c91a:	4603      	mov	r3, r0
 800c91c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	68dc      	ldr	r4, [r3, #12]
 800c926:	4610      	mov	r0, r2
 800c928:	f7f9 fdce 	bl	80064c8 <lwip_htons>
 800c92c:	4603      	mov	r3, r0
 800c92e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c934:	68ba      	ldr	r2, [r7, #8]
 800c936:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c938:	441a      	add	r2, r3
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	68db      	ldr	r3, [r3, #12]
 800c942:	3314      	adds	r3, #20
 800c944:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	7a9b      	ldrb	r3, [r3, #10]
 800c94a:	f003 0301 	and.w	r3, r3, #1
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d015      	beq.n	800c97e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	3304      	adds	r3, #4
 800c956:	461a      	mov	r2, r3
 800c958:	6879      	ldr	r1, [r7, #4]
 800c95a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c95e:	f7fc fe8b 	bl	8009678 <tcp_eff_send_mss_netif>
 800c962:	4603      	mov	r3, r0
 800c964:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c966:	8b7b      	ldrh	r3, [r7, #26]
 800c968:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7f9 fdc0 	bl	80064f2 <lwip_htonl>
 800c972:	4602      	mov	r2, r0
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c978:	69fb      	ldr	r3, [r7, #28]
 800c97a:	3304      	adds	r3, #4
 800c97c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c984:	2b00      	cmp	r3, #0
 800c986:	da02      	bge.n	800c98e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	2200      	movs	r2, #0
 800c98c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c992:	2b00      	cmp	r3, #0
 800c994:	d10c      	bne.n	800c9b0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800c996:	4b35      	ldr	r3, [pc, #212]	; (800ca6c <tcp_output_segment+0x1b8>)
 800c998:	681a      	ldr	r2, [r3, #0]
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	68db      	ldr	r3, [r3, #12]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f7f9 fda4 	bl	80064f2 <lwip_htonl>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	68da      	ldr	r2, [r3, #12]
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	685b      	ldr	r3, [r3, #4]
 800c9ba:	1ad3      	subs	r3, r2, r3
 800c9bc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	8959      	ldrh	r1, [r3, #10]
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	8b3a      	ldrh	r2, [r7, #24]
 800c9ca:	1a8a      	subs	r2, r1, r2
 800c9cc:	b292      	uxth	r2, r2
 800c9ce:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	685b      	ldr	r3, [r3, #4]
 800c9d4:	8919      	ldrh	r1, [r3, #8]
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	685b      	ldr	r3, [r3, #4]
 800c9da:	8b3a      	ldrh	r2, [r7, #24]
 800c9dc:	1a8a      	subs	r2, r1, r2
 800c9de:	b292      	uxth	r2, r2
 800c9e0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	685b      	ldr	r3, [r3, #4]
 800c9e6:	68fa      	ldr	r2, [r7, #12]
 800c9e8:	68d2      	ldr	r2, [r2, #12]
 800c9ea:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	68db      	ldr	r3, [r3, #12]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	741a      	strb	r2, [r3, #16]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	68da      	ldr	r2, [r3, #12]
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	7a9b      	ldrb	r3, [r3, #10]
 800ca00:	f003 0301 	and.w	r3, r3, #1
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d001      	beq.n	800ca0c <tcp_output_segment+0x158>
 800ca08:	2318      	movs	r3, #24
 800ca0a:	e000      	b.n	800ca0e <tcp_output_segment+0x15a>
 800ca0c:	2314      	movs	r3, #20
 800ca0e:	4413      	add	r3, r2
 800ca10:	69fa      	ldr	r2, [r7, #28]
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d006      	beq.n	800ca24 <tcp_output_segment+0x170>
 800ca16:	4b10      	ldr	r3, [pc, #64]	; (800ca58 <tcp_output_segment+0x1a4>)
 800ca18:	f240 621c 	movw	r2, #1564	; 0x61c
 800ca1c:	4914      	ldr	r1, [pc, #80]	; (800ca70 <tcp_output_segment+0x1bc>)
 800ca1e:	4810      	ldr	r0, [pc, #64]	; (800ca60 <tcp_output_segment+0x1ac>)
 800ca20:	f003 fe8c 	bl	801073c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	6858      	ldr	r0, [r3, #4]
 800ca28:	68b9      	ldr	r1, [r7, #8]
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	1d1c      	adds	r4, r3, #4
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	7add      	ldrb	r5, [r3, #11]
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	7a9b      	ldrb	r3, [r3, #10]
 800ca36:	687a      	ldr	r2, [r7, #4]
 800ca38:	9202      	str	r2, [sp, #8]
 800ca3a:	2206      	movs	r2, #6
 800ca3c:	9201      	str	r2, [sp, #4]
 800ca3e:	9300      	str	r3, [sp, #0]
 800ca40:	462b      	mov	r3, r5
 800ca42:	4622      	mov	r2, r4
 800ca44:	f002 fd4c 	bl	800f4e0 <ip4_output_if>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ca4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3720      	adds	r7, #32
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bdb0      	pop	{r4, r5, r7, pc}
 800ca58:	0801321c 	.word	0x0801321c
 800ca5c:	080137e0 	.word	0x080137e0
 800ca60:	08013270 	.word	0x08013270
 800ca64:	08013800 	.word	0x08013800
 800ca68:	08013820 	.word	0x08013820
 800ca6c:	200089c0 	.word	0x200089c0
 800ca70:	08013844 	.word	0x08013844

0800ca74 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800ca74:	b5b0      	push	{r4, r5, r7, lr}
 800ca76:	b084      	sub	sp, #16
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d106      	bne.n	800ca90 <tcp_rexmit_rto_prepare+0x1c>
 800ca82:	4b31      	ldr	r3, [pc, #196]	; (800cb48 <tcp_rexmit_rto_prepare+0xd4>)
 800ca84:	f240 6263 	movw	r2, #1635	; 0x663
 800ca88:	4930      	ldr	r1, [pc, #192]	; (800cb4c <tcp_rexmit_rto_prepare+0xd8>)
 800ca8a:	4831      	ldr	r0, [pc, #196]	; (800cb50 <tcp_rexmit_rto_prepare+0xdc>)
 800ca8c:	f003 fe56 	bl	801073c <iprintf>

  if (pcb->unacked == NULL) {
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d102      	bne.n	800ca9e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800ca98:	f06f 0305 	mvn.w	r3, #5
 800ca9c:	e050      	b.n	800cb40 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caa2:	60fb      	str	r3, [r7, #12]
 800caa4:	e00b      	b.n	800cabe <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800caa6:	68f8      	ldr	r0, [r7, #12]
 800caa8:	f7ff fee4 	bl	800c874 <tcp_output_segment_busy>
 800caac:	4603      	mov	r3, r0
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d002      	beq.n	800cab8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800cab2:	f06f 0305 	mvn.w	r3, #5
 800cab6:	e043      	b.n	800cb40 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	60fb      	str	r3, [r7, #12]
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d1ef      	bne.n	800caa6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800cac6:	68f8      	ldr	r0, [r7, #12]
 800cac8:	f7ff fed4 	bl	800c874 <tcp_output_segment_busy>
 800cacc:	4603      	mov	r3, r0
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d002      	beq.n	800cad8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800cad2:	f06f 0305 	mvn.w	r3, #5
 800cad6:	e033      	b.n	800cb40 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2200      	movs	r2, #0
 800caec:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	8b5b      	ldrh	r3, [r3, #26]
 800caf2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800caf6:	b29a      	uxth	r2, r3
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	68db      	ldr	r3, [r3, #12]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7f9 fcf5 	bl	80064f2 <lwip_htonl>
 800cb08:	4604      	mov	r4, r0
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	891b      	ldrh	r3, [r3, #8]
 800cb0e:	461d      	mov	r5, r3
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	68db      	ldr	r3, [r3, #12]
 800cb14:	899b      	ldrh	r3, [r3, #12]
 800cb16:	b29b      	uxth	r3, r3
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7f9 fcd5 	bl	80064c8 <lwip_htons>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	b2db      	uxtb	r3, r3
 800cb22:	f003 0303 	and.w	r3, r3, #3
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d001      	beq.n	800cb2e <tcp_rexmit_rto_prepare+0xba>
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	e000      	b.n	800cb30 <tcp_rexmit_rto_prepare+0xbc>
 800cb2e:	2300      	movs	r3, #0
 800cb30:	442b      	add	r3, r5
 800cb32:	18e2      	adds	r2, r4, r3
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800cb3e:	2300      	movs	r3, #0
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3710      	adds	r7, #16
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bdb0      	pop	{r4, r5, r7, pc}
 800cb48:	0801321c 	.word	0x0801321c
 800cb4c:	08013858 	.word	0x08013858
 800cb50:	08013270 	.word	0x08013270

0800cb54 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b082      	sub	sp, #8
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d106      	bne.n	800cb70 <tcp_rexmit_rto_commit+0x1c>
 800cb62:	4b0d      	ldr	r3, [pc, #52]	; (800cb98 <tcp_rexmit_rto_commit+0x44>)
 800cb64:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cb68:	490c      	ldr	r1, [pc, #48]	; (800cb9c <tcp_rexmit_rto_commit+0x48>)
 800cb6a:	480d      	ldr	r0, [pc, #52]	; (800cba0 <tcp_rexmit_rto_commit+0x4c>)
 800cb6c:	f003 fde6 	bl	801073c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cb76:	2bff      	cmp	r3, #255	; 0xff
 800cb78:	d007      	beq.n	800cb8a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cb80:	3301      	adds	r3, #1
 800cb82:	b2da      	uxtb	r2, r3
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f7ff fc7e 	bl	800c48c <tcp_output>
}
 800cb90:	bf00      	nop
 800cb92:	3708      	adds	r7, #8
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}
 800cb98:	0801321c 	.word	0x0801321c
 800cb9c:	0801387c 	.word	0x0801387c
 800cba0:	08013270 	.word	0x08013270

0800cba4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b082      	sub	sp, #8
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d106      	bne.n	800cbc0 <tcp_rexmit_rto+0x1c>
 800cbb2:	4b0a      	ldr	r3, [pc, #40]	; (800cbdc <tcp_rexmit_rto+0x38>)
 800cbb4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800cbb8:	4909      	ldr	r1, [pc, #36]	; (800cbe0 <tcp_rexmit_rto+0x3c>)
 800cbba:	480a      	ldr	r0, [pc, #40]	; (800cbe4 <tcp_rexmit_rto+0x40>)
 800cbbc:	f003 fdbe 	bl	801073c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f7ff ff57 	bl	800ca74 <tcp_rexmit_rto_prepare>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d102      	bne.n	800cbd2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f7ff ffc1 	bl	800cb54 <tcp_rexmit_rto_commit>
  }
}
 800cbd2:	bf00      	nop
 800cbd4:	3708      	adds	r7, #8
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	0801321c 	.word	0x0801321c
 800cbe0:	080138a0 	.word	0x080138a0
 800cbe4:	08013270 	.word	0x08013270

0800cbe8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800cbe8:	b590      	push	{r4, r7, lr}
 800cbea:	b085      	sub	sp, #20
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d106      	bne.n	800cc04 <tcp_rexmit+0x1c>
 800cbf6:	4b2f      	ldr	r3, [pc, #188]	; (800ccb4 <tcp_rexmit+0xcc>)
 800cbf8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800cbfc:	492e      	ldr	r1, [pc, #184]	; (800ccb8 <tcp_rexmit+0xd0>)
 800cbfe:	482f      	ldr	r0, [pc, #188]	; (800ccbc <tcp_rexmit+0xd4>)
 800cc00:	f003 fd9c 	bl	801073c <iprintf>

  if (pcb->unacked == NULL) {
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d102      	bne.n	800cc12 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800cc0c:	f06f 0305 	mvn.w	r3, #5
 800cc10:	e04c      	b.n	800ccac <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc16:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800cc18:	68b8      	ldr	r0, [r7, #8]
 800cc1a:	f7ff fe2b 	bl	800c874 <tcp_output_segment_busy>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d002      	beq.n	800cc2a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800cc24:	f06f 0305 	mvn.w	r3, #5
 800cc28:	e040      	b.n	800ccac <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	681a      	ldr	r2, [r3, #0]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	336c      	adds	r3, #108	; 0x6c
 800cc36:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cc38:	e002      	b.n	800cc40 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d011      	beq.n	800cc6c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	68db      	ldr	r3, [r3, #12]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	4618      	mov	r0, r3
 800cc52:	f7f9 fc4e 	bl	80064f2 <lwip_htonl>
 800cc56:	4604      	mov	r4, r0
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	68db      	ldr	r3, [r3, #12]
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7f9 fc47 	bl	80064f2 <lwip_htonl>
 800cc64:	4603      	mov	r3, r0
 800cc66:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	dbe6      	blt.n	800cc3a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	68ba      	ldr	r2, [r7, #8]
 800cc78:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d103      	bne.n	800cc8a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2200      	movs	r2, #0
 800cc86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cc90:	2bff      	cmp	r3, #255	; 0xff
 800cc92:	d007      	beq.n	800cca4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	b2da      	uxtb	r2, r3
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2200      	movs	r2, #0
 800cca8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ccaa:	2300      	movs	r3, #0
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3714      	adds	r7, #20
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd90      	pop	{r4, r7, pc}
 800ccb4:	0801321c 	.word	0x0801321c
 800ccb8:	080138bc 	.word	0x080138bc
 800ccbc:	08013270 	.word	0x08013270

0800ccc0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b082      	sub	sp, #8
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d106      	bne.n	800ccdc <tcp_rexmit_fast+0x1c>
 800ccce:	4b2a      	ldr	r3, [pc, #168]	; (800cd78 <tcp_rexmit_fast+0xb8>)
 800ccd0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800ccd4:	4929      	ldr	r1, [pc, #164]	; (800cd7c <tcp_rexmit_fast+0xbc>)
 800ccd6:	482a      	ldr	r0, [pc, #168]	; (800cd80 <tcp_rexmit_fast+0xc0>)
 800ccd8:	f003 fd30 	bl	801073c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d045      	beq.n	800cd70 <tcp_rexmit_fast+0xb0>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	8b5b      	ldrh	r3, [r3, #26]
 800cce8:	f003 0304 	and.w	r3, r3, #4
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d13f      	bne.n	800cd70 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f7ff ff79 	bl	800cbe8 <tcp_rexmit>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d139      	bne.n	800cd70 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	bf28      	it	cs
 800cd0c:	4613      	movcs	r3, r2
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	da00      	bge.n	800cd16 <tcp_rexmit_fast+0x56>
 800cd14:	3301      	adds	r3, #1
 800cd16:	105b      	asrs	r3, r3, #1
 800cd18:	b29a      	uxth	r2, r3
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cd26:	461a      	mov	r2, r3
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd2c:	005b      	lsls	r3, r3, #1
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	d206      	bcs.n	800cd40 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd36:	005b      	lsls	r3, r3, #1
 800cd38:	b29a      	uxth	r2, r3
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd4a:	4619      	mov	r1, r3
 800cd4c:	0049      	lsls	r1, r1, #1
 800cd4e:	440b      	add	r3, r1
 800cd50:	b29b      	uxth	r3, r3
 800cd52:	4413      	add	r3, r2
 800cd54:	b29a      	uxth	r2, r3
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	8b5b      	ldrh	r3, [r3, #26]
 800cd60:	f043 0304 	orr.w	r3, r3, #4
 800cd64:	b29a      	uxth	r2, r3
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800cd70:	bf00      	nop
 800cd72:	3708      	adds	r7, #8
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}
 800cd78:	0801321c 	.word	0x0801321c
 800cd7c:	080138d4 	.word	0x080138d4
 800cd80:	08013270 	.word	0x08013270

0800cd84 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b086      	sub	sp, #24
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	607b      	str	r3, [r7, #4]
 800cd8e:	460b      	mov	r3, r1
 800cd90:	817b      	strh	r3, [r7, #10]
 800cd92:	4613      	mov	r3, r2
 800cd94:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800cd96:	897a      	ldrh	r2, [r7, #10]
 800cd98:	893b      	ldrh	r3, [r7, #8]
 800cd9a:	4413      	add	r3, r2
 800cd9c:	b29b      	uxth	r3, r3
 800cd9e:	3314      	adds	r3, #20
 800cda0:	b29b      	uxth	r3, r3
 800cda2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cda6:	4619      	mov	r1, r3
 800cda8:	2022      	movs	r0, #34	; 0x22
 800cdaa:	f7fa fc07 	bl	80075bc <pbuf_alloc>
 800cdae:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d04d      	beq.n	800ce52 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800cdb6:	897b      	ldrh	r3, [r7, #10]
 800cdb8:	3313      	adds	r3, #19
 800cdba:	697a      	ldr	r2, [r7, #20]
 800cdbc:	8952      	ldrh	r2, [r2, #10]
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	db06      	blt.n	800cdd0 <tcp_output_alloc_header_common+0x4c>
 800cdc2:	4b26      	ldr	r3, [pc, #152]	; (800ce5c <tcp_output_alloc_header_common+0xd8>)
 800cdc4:	f240 7223 	movw	r2, #1827	; 0x723
 800cdc8:	4925      	ldr	r1, [pc, #148]	; (800ce60 <tcp_output_alloc_header_common+0xdc>)
 800cdca:	4826      	ldr	r0, [pc, #152]	; (800ce64 <tcp_output_alloc_header_common+0xe0>)
 800cdcc:	f003 fcb6 	bl	801073c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	685b      	ldr	r3, [r3, #4]
 800cdd4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800cdd6:	8c3b      	ldrh	r3, [r7, #32]
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7f9 fb75 	bl	80064c8 <lwip_htons>
 800cdde:	4603      	mov	r3, r0
 800cde0:	461a      	mov	r2, r3
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800cde6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cde8:	4618      	mov	r0, r3
 800cdea:	f7f9 fb6d 	bl	80064c8 <lwip_htons>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	687a      	ldr	r2, [r7, #4]
 800cdfa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800cdfc:	68f8      	ldr	r0, [r7, #12]
 800cdfe:	f7f9 fb78 	bl	80064f2 <lwip_htonl>
 800ce02:	4602      	mov	r2, r0
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ce08:	897b      	ldrh	r3, [r7, #10]
 800ce0a:	089b      	lsrs	r3, r3, #2
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	3305      	adds	r3, #5
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	031b      	lsls	r3, r3, #12
 800ce14:	b29a      	uxth	r2, r3
 800ce16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ce1a:	b29b      	uxth	r3, r3
 800ce1c:	4313      	orrs	r3, r2
 800ce1e:	b29b      	uxth	r3, r3
 800ce20:	4618      	mov	r0, r3
 800ce22:	f7f9 fb51 	bl	80064c8 <lwip_htons>
 800ce26:	4603      	mov	r3, r0
 800ce28:	461a      	mov	r2, r3
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ce2e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7f9 fb49 	bl	80064c8 <lwip_htons>
 800ce36:	4603      	mov	r3, r0
 800ce38:	461a      	mov	r2, r3
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	2200      	movs	r2, #0
 800ce42:	741a      	strb	r2, [r3, #16]
 800ce44:	2200      	movs	r2, #0
 800ce46:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	749a      	strb	r2, [r3, #18]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ce52:	697b      	ldr	r3, [r7, #20]
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	3718      	adds	r7, #24
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	0801321c 	.word	0x0801321c
 800ce60:	080138f4 	.word	0x080138f4
 800ce64:	08013270 	.word	0x08013270

0800ce68 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ce68:	b5b0      	push	{r4, r5, r7, lr}
 800ce6a:	b08a      	sub	sp, #40	; 0x28
 800ce6c:	af04      	add	r7, sp, #16
 800ce6e:	60f8      	str	r0, [r7, #12]
 800ce70:	607b      	str	r3, [r7, #4]
 800ce72:	460b      	mov	r3, r1
 800ce74:	817b      	strh	r3, [r7, #10]
 800ce76:	4613      	mov	r3, r2
 800ce78:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d106      	bne.n	800ce8e <tcp_output_alloc_header+0x26>
 800ce80:	4b15      	ldr	r3, [pc, #84]	; (800ced8 <tcp_output_alloc_header+0x70>)
 800ce82:	f240 7242 	movw	r2, #1858	; 0x742
 800ce86:	4915      	ldr	r1, [pc, #84]	; (800cedc <tcp_output_alloc_header+0x74>)
 800ce88:	4815      	ldr	r0, [pc, #84]	; (800cee0 <tcp_output_alloc_header+0x78>)
 800ce8a:	f003 fc57 	bl	801073c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	8adb      	ldrh	r3, [r3, #22]
 800ce96:	68fa      	ldr	r2, [r7, #12]
 800ce98:	8b12      	ldrh	r2, [r2, #24]
 800ce9a:	68f9      	ldr	r1, [r7, #12]
 800ce9c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800ce9e:	893d      	ldrh	r5, [r7, #8]
 800cea0:	897c      	ldrh	r4, [r7, #10]
 800cea2:	9103      	str	r1, [sp, #12]
 800cea4:	2110      	movs	r1, #16
 800cea6:	9102      	str	r1, [sp, #8]
 800cea8:	9201      	str	r2, [sp, #4]
 800ceaa:	9300      	str	r3, [sp, #0]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	462a      	mov	r2, r5
 800ceb0:	4621      	mov	r1, r4
 800ceb2:	f7ff ff67 	bl	800cd84 <tcp_output_alloc_header_common>
 800ceb6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d006      	beq.n	800cecc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cec2:	68fa      	ldr	r2, [r7, #12]
 800cec4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cec6:	441a      	add	r2, r3
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800cecc:	697b      	ldr	r3, [r7, #20]
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3718      	adds	r7, #24
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bdb0      	pop	{r4, r5, r7, pc}
 800ced6:	bf00      	nop
 800ced8:	0801321c 	.word	0x0801321c
 800cedc:	08013924 	.word	0x08013924
 800cee0:	08013270 	.word	0x08013270

0800cee4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b088      	sub	sp, #32
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	4611      	mov	r1, r2
 800cef0:	461a      	mov	r2, r3
 800cef2:	460b      	mov	r3, r1
 800cef4:	71fb      	strb	r3, [r7, #7]
 800cef6:	4613      	mov	r3, r2
 800cef8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800cefa:	2300      	movs	r3, #0
 800cefc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d106      	bne.n	800cf12 <tcp_output_fill_options+0x2e>
 800cf04:	4b12      	ldr	r3, [pc, #72]	; (800cf50 <tcp_output_fill_options+0x6c>)
 800cf06:	f240 7256 	movw	r2, #1878	; 0x756
 800cf0a:	4912      	ldr	r1, [pc, #72]	; (800cf54 <tcp_output_fill_options+0x70>)
 800cf0c:	4812      	ldr	r0, [pc, #72]	; (800cf58 <tcp_output_fill_options+0x74>)
 800cf0e:	f003 fc15 	bl	801073c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	3314      	adds	r3, #20
 800cf1c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800cf1e:	8bfb      	ldrh	r3, [r7, #30]
 800cf20:	009b      	lsls	r3, r3, #2
 800cf22:	461a      	mov	r2, r3
 800cf24:	79fb      	ldrb	r3, [r7, #7]
 800cf26:	009b      	lsls	r3, r3, #2
 800cf28:	f003 0304 	and.w	r3, r3, #4
 800cf2c:	4413      	add	r3, r2
 800cf2e:	3314      	adds	r3, #20
 800cf30:	69ba      	ldr	r2, [r7, #24]
 800cf32:	4413      	add	r3, r2
 800cf34:	697a      	ldr	r2, [r7, #20]
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d006      	beq.n	800cf48 <tcp_output_fill_options+0x64>
 800cf3a:	4b05      	ldr	r3, [pc, #20]	; (800cf50 <tcp_output_fill_options+0x6c>)
 800cf3c:	f240 7275 	movw	r2, #1909	; 0x775
 800cf40:	4906      	ldr	r1, [pc, #24]	; (800cf5c <tcp_output_fill_options+0x78>)
 800cf42:	4805      	ldr	r0, [pc, #20]	; (800cf58 <tcp_output_fill_options+0x74>)
 800cf44:	f003 fbfa 	bl	801073c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800cf48:	bf00      	nop
 800cf4a:	3720      	adds	r7, #32
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}
 800cf50:	0801321c 	.word	0x0801321c
 800cf54:	0801394c 	.word	0x0801394c
 800cf58:	08013270 	.word	0x08013270
 800cf5c:	08013844 	.word	0x08013844

0800cf60 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b08a      	sub	sp, #40	; 0x28
 800cf64:	af04      	add	r7, sp, #16
 800cf66:	60f8      	str	r0, [r7, #12]
 800cf68:	60b9      	str	r1, [r7, #8]
 800cf6a:	607a      	str	r2, [r7, #4]
 800cf6c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d106      	bne.n	800cf82 <tcp_output_control_segment+0x22>
 800cf74:	4b1c      	ldr	r3, [pc, #112]	; (800cfe8 <tcp_output_control_segment+0x88>)
 800cf76:	f240 7287 	movw	r2, #1927	; 0x787
 800cf7a:	491c      	ldr	r1, [pc, #112]	; (800cfec <tcp_output_control_segment+0x8c>)
 800cf7c:	481c      	ldr	r0, [pc, #112]	; (800cff0 <tcp_output_control_segment+0x90>)
 800cf7e:	f003 fbdd 	bl	801073c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800cf82:	683a      	ldr	r2, [r7, #0]
 800cf84:	6879      	ldr	r1, [r7, #4]
 800cf86:	68f8      	ldr	r0, [r7, #12]
 800cf88:	f7fe ff40 	bl	800be0c <tcp_route>
 800cf8c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d102      	bne.n	800cf9a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800cf94:	23fc      	movs	r3, #252	; 0xfc
 800cf96:	75fb      	strb	r3, [r7, #23]
 800cf98:	e01c      	b.n	800cfd4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d006      	beq.n	800cfae <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	7adb      	ldrb	r3, [r3, #11]
 800cfa4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	7a9b      	ldrb	r3, [r3, #10]
 800cfaa:	757b      	strb	r3, [r7, #21]
 800cfac:	e003      	b.n	800cfb6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800cfae:	23ff      	movs	r3, #255	; 0xff
 800cfb0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800cfb6:	7dba      	ldrb	r2, [r7, #22]
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	9302      	str	r3, [sp, #8]
 800cfbc:	2306      	movs	r3, #6
 800cfbe:	9301      	str	r3, [sp, #4]
 800cfc0:	7d7b      	ldrb	r3, [r7, #21]
 800cfc2:	9300      	str	r3, [sp, #0]
 800cfc4:	4613      	mov	r3, r2
 800cfc6:	683a      	ldr	r2, [r7, #0]
 800cfc8:	6879      	ldr	r1, [r7, #4]
 800cfca:	68b8      	ldr	r0, [r7, #8]
 800cfcc:	f002 fa88 	bl	800f4e0 <ip4_output_if>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800cfd4:	68b8      	ldr	r0, [r7, #8]
 800cfd6:	f7fa fdd5 	bl	8007b84 <pbuf_free>
  return err;
 800cfda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3718      	adds	r7, #24
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	0801321c 	.word	0x0801321c
 800cfec:	08013974 	.word	0x08013974
 800cff0:	08013270 	.word	0x08013270

0800cff4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800cff4:	b590      	push	{r4, r7, lr}
 800cff6:	b08b      	sub	sp, #44	; 0x2c
 800cff8:	af04      	add	r7, sp, #16
 800cffa:	60f8      	str	r0, [r7, #12]
 800cffc:	60b9      	str	r1, [r7, #8]
 800cffe:	607a      	str	r2, [r7, #4]
 800d000:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d106      	bne.n	800d016 <tcp_rst+0x22>
 800d008:	4b1f      	ldr	r3, [pc, #124]	; (800d088 <tcp_rst+0x94>)
 800d00a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800d00e:	491f      	ldr	r1, [pc, #124]	; (800d08c <tcp_rst+0x98>)
 800d010:	481f      	ldr	r0, [pc, #124]	; (800d090 <tcp_rst+0x9c>)
 800d012:	f003 fb93 	bl	801073c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d106      	bne.n	800d02a <tcp_rst+0x36>
 800d01c:	4b1a      	ldr	r3, [pc, #104]	; (800d088 <tcp_rst+0x94>)
 800d01e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800d022:	491c      	ldr	r1, [pc, #112]	; (800d094 <tcp_rst+0xa0>)
 800d024:	481a      	ldr	r0, [pc, #104]	; (800d090 <tcp_rst+0x9c>)
 800d026:	f003 fb89 	bl	801073c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d02a:	2300      	movs	r3, #0
 800d02c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d02e:	f246 0308 	movw	r3, #24584	; 0x6008
 800d032:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d034:	7dfb      	ldrb	r3, [r7, #23]
 800d036:	b29c      	uxth	r4, r3
 800d038:	68b8      	ldr	r0, [r7, #8]
 800d03a:	f7f9 fa5a 	bl	80064f2 <lwip_htonl>
 800d03e:	4602      	mov	r2, r0
 800d040:	8abb      	ldrh	r3, [r7, #20]
 800d042:	9303      	str	r3, [sp, #12]
 800d044:	2314      	movs	r3, #20
 800d046:	9302      	str	r3, [sp, #8]
 800d048:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d04a:	9301      	str	r3, [sp, #4]
 800d04c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d04e:	9300      	str	r3, [sp, #0]
 800d050:	4613      	mov	r3, r2
 800d052:	2200      	movs	r2, #0
 800d054:	4621      	mov	r1, r4
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f7ff fe94 	bl	800cd84 <tcp_output_alloc_header_common>
 800d05c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d00c      	beq.n	800d07e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d064:	7dfb      	ldrb	r3, [r7, #23]
 800d066:	2200      	movs	r2, #0
 800d068:	6939      	ldr	r1, [r7, #16]
 800d06a:	68f8      	ldr	r0, [r7, #12]
 800d06c:	f7ff ff3a 	bl	800cee4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d072:	683a      	ldr	r2, [r7, #0]
 800d074:	6939      	ldr	r1, [r7, #16]
 800d076:	68f8      	ldr	r0, [r7, #12]
 800d078:	f7ff ff72 	bl	800cf60 <tcp_output_control_segment>
 800d07c:	e000      	b.n	800d080 <tcp_rst+0x8c>
    return;
 800d07e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d080:	371c      	adds	r7, #28
 800d082:	46bd      	mov	sp, r7
 800d084:	bd90      	pop	{r4, r7, pc}
 800d086:	bf00      	nop
 800d088:	0801321c 	.word	0x0801321c
 800d08c:	080139a0 	.word	0x080139a0
 800d090:	08013270 	.word	0x08013270
 800d094:	080139bc 	.word	0x080139bc

0800d098 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d098:	b590      	push	{r4, r7, lr}
 800d09a:	b087      	sub	sp, #28
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d106      	bne.n	800d0bc <tcp_send_empty_ack+0x24>
 800d0ae:	4b28      	ldr	r3, [pc, #160]	; (800d150 <tcp_send_empty_ack+0xb8>)
 800d0b0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800d0b4:	4927      	ldr	r1, [pc, #156]	; (800d154 <tcp_send_empty_ack+0xbc>)
 800d0b6:	4828      	ldr	r0, [pc, #160]	; (800d158 <tcp_send_empty_ack+0xc0>)
 800d0b8:	f003 fb40 	bl	801073c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d0bc:	7dfb      	ldrb	r3, [r7, #23]
 800d0be:	009b      	lsls	r3, r3, #2
 800d0c0:	b2db      	uxtb	r3, r3
 800d0c2:	f003 0304 	and.w	r3, r3, #4
 800d0c6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d0c8:	7d7b      	ldrb	r3, [r7, #21]
 800d0ca:	b29c      	uxth	r4, r3
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f7f9 fa0e 	bl	80064f2 <lwip_htonl>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	2200      	movs	r2, #0
 800d0da:	4621      	mov	r1, r4
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f7ff fec3 	bl	800ce68 <tcp_output_alloc_header>
 800d0e2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d109      	bne.n	800d0fe <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	8b5b      	ldrh	r3, [r3, #26]
 800d0ee:	f043 0303 	orr.w	r3, r3, #3
 800d0f2:	b29a      	uxth	r2, r3
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d0f8:	f06f 0301 	mvn.w	r3, #1
 800d0fc:	e023      	b.n	800d146 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d0fe:	7dbb      	ldrb	r3, [r7, #22]
 800d100:	7dfa      	ldrb	r2, [r7, #23]
 800d102:	6939      	ldr	r1, [r7, #16]
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f7ff feed 	bl	800cee4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d10a:	687a      	ldr	r2, [r7, #4]
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	3304      	adds	r3, #4
 800d110:	6939      	ldr	r1, [r7, #16]
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f7ff ff24 	bl	800cf60 <tcp_output_control_segment>
 800d118:	4603      	mov	r3, r0
 800d11a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d11c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d007      	beq.n	800d134 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	8b5b      	ldrh	r3, [r3, #26]
 800d128:	f043 0303 	orr.w	r3, r3, #3
 800d12c:	b29a      	uxth	r2, r3
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	835a      	strh	r2, [r3, #26]
 800d132:	e006      	b.n	800d142 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	8b5b      	ldrh	r3, [r3, #26]
 800d138:	f023 0303 	bic.w	r3, r3, #3
 800d13c:	b29a      	uxth	r2, r3
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d142:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d146:	4618      	mov	r0, r3
 800d148:	371c      	adds	r7, #28
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd90      	pop	{r4, r7, pc}
 800d14e:	bf00      	nop
 800d150:	0801321c 	.word	0x0801321c
 800d154:	080139d8 	.word	0x080139d8
 800d158:	08013270 	.word	0x08013270

0800d15c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d15c:	b590      	push	{r4, r7, lr}
 800d15e:	b087      	sub	sp, #28
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d164:	2300      	movs	r3, #0
 800d166:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d106      	bne.n	800d17c <tcp_keepalive+0x20>
 800d16e:	4b18      	ldr	r3, [pc, #96]	; (800d1d0 <tcp_keepalive+0x74>)
 800d170:	f640 0224 	movw	r2, #2084	; 0x824
 800d174:	4917      	ldr	r1, [pc, #92]	; (800d1d4 <tcp_keepalive+0x78>)
 800d176:	4818      	ldr	r0, [pc, #96]	; (800d1d8 <tcp_keepalive+0x7c>)
 800d178:	f003 fae0 	bl	801073c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d17c:	7dfb      	ldrb	r3, [r7, #23]
 800d17e:	b29c      	uxth	r4, r3
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d184:	3b01      	subs	r3, #1
 800d186:	4618      	mov	r0, r3
 800d188:	f7f9 f9b3 	bl	80064f2 <lwip_htonl>
 800d18c:	4603      	mov	r3, r0
 800d18e:	2200      	movs	r2, #0
 800d190:	4621      	mov	r1, r4
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f7ff fe68 	bl	800ce68 <tcp_output_alloc_header>
 800d198:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d102      	bne.n	800d1a6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d1a0:	f04f 33ff 	mov.w	r3, #4294967295
 800d1a4:	e010      	b.n	800d1c8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d1a6:	7dfb      	ldrb	r3, [r7, #23]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	6939      	ldr	r1, [r7, #16]
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f7ff fe99 	bl	800cee4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d1b2:	687a      	ldr	r2, [r7, #4]
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	3304      	adds	r3, #4
 800d1b8:	6939      	ldr	r1, [r7, #16]
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f7ff fed0 	bl	800cf60 <tcp_output_control_segment>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d1c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	371c      	adds	r7, #28
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd90      	pop	{r4, r7, pc}
 800d1d0:	0801321c 	.word	0x0801321c
 800d1d4:	080139f8 	.word	0x080139f8
 800d1d8:	08013270 	.word	0x08013270

0800d1dc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d1dc:	b590      	push	{r4, r7, lr}
 800d1de:	b08b      	sub	sp, #44	; 0x2c
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d106      	bne.n	800d1fe <tcp_zero_window_probe+0x22>
 800d1f0:	4b4c      	ldr	r3, [pc, #304]	; (800d324 <tcp_zero_window_probe+0x148>)
 800d1f2:	f640 024f 	movw	r2, #2127	; 0x84f
 800d1f6:	494c      	ldr	r1, [pc, #304]	; (800d328 <tcp_zero_window_probe+0x14c>)
 800d1f8:	484c      	ldr	r0, [pc, #304]	; (800d32c <tcp_zero_window_probe+0x150>)
 800d1fa:	f003 fa9f 	bl	801073c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d202:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d204:	6a3b      	ldr	r3, [r7, #32]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d101      	bne.n	800d20e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d20a:	2300      	movs	r3, #0
 800d20c:	e086      	b.n	800d31c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d214:	2bff      	cmp	r3, #255	; 0xff
 800d216:	d007      	beq.n	800d228 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d21e:	3301      	adds	r3, #1
 800d220:	b2da      	uxtb	r2, r3
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d228:	6a3b      	ldr	r3, [r7, #32]
 800d22a:	68db      	ldr	r3, [r3, #12]
 800d22c:	899b      	ldrh	r3, [r3, #12]
 800d22e:	b29b      	uxth	r3, r3
 800d230:	4618      	mov	r0, r3
 800d232:	f7f9 f949 	bl	80064c8 <lwip_htons>
 800d236:	4603      	mov	r3, r0
 800d238:	b2db      	uxtb	r3, r3
 800d23a:	f003 0301 	and.w	r3, r3, #1
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d005      	beq.n	800d24e <tcp_zero_window_probe+0x72>
 800d242:	6a3b      	ldr	r3, [r7, #32]
 800d244:	891b      	ldrh	r3, [r3, #8]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d101      	bne.n	800d24e <tcp_zero_window_probe+0x72>
 800d24a:	2301      	movs	r3, #1
 800d24c:	e000      	b.n	800d250 <tcp_zero_window_probe+0x74>
 800d24e:	2300      	movs	r3, #0
 800d250:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d252:	7ffb      	ldrb	r3, [r7, #31]
 800d254:	2b00      	cmp	r3, #0
 800d256:	bf0c      	ite	eq
 800d258:	2301      	moveq	r3, #1
 800d25a:	2300      	movne	r3, #0
 800d25c:	b2db      	uxtb	r3, r3
 800d25e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d264:	b299      	uxth	r1, r3
 800d266:	6a3b      	ldr	r3, [r7, #32]
 800d268:	68db      	ldr	r3, [r3, #12]
 800d26a:	685b      	ldr	r3, [r3, #4]
 800d26c:	8bba      	ldrh	r2, [r7, #28]
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f7ff fdfa 	bl	800ce68 <tcp_output_alloc_header>
 800d274:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d276:	69bb      	ldr	r3, [r7, #24]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d102      	bne.n	800d282 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d27c:	f04f 33ff 	mov.w	r3, #4294967295
 800d280:	e04c      	b.n	800d31c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d282:	69bb      	ldr	r3, [r7, #24]
 800d284:	685b      	ldr	r3, [r3, #4]
 800d286:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d288:	7ffb      	ldrb	r3, [r7, #31]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d011      	beq.n	800d2b2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	899b      	ldrh	r3, [r3, #12]
 800d292:	b29b      	uxth	r3, r3
 800d294:	b21b      	sxth	r3, r3
 800d296:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d29a:	b21c      	sxth	r4, r3
 800d29c:	2011      	movs	r0, #17
 800d29e:	f7f9 f913 	bl	80064c8 <lwip_htons>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	b21b      	sxth	r3, r3
 800d2a6:	4323      	orrs	r3, r4
 800d2a8:	b21b      	sxth	r3, r3
 800d2aa:	b29a      	uxth	r2, r3
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	819a      	strh	r2, [r3, #12]
 800d2b0:	e010      	b.n	800d2d4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d2b2:	69bb      	ldr	r3, [r7, #24]
 800d2b4:	685b      	ldr	r3, [r3, #4]
 800d2b6:	3314      	adds	r3, #20
 800d2b8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d2ba:	6a3b      	ldr	r3, [r7, #32]
 800d2bc:	6858      	ldr	r0, [r3, #4]
 800d2be:	6a3b      	ldr	r3, [r7, #32]
 800d2c0:	685b      	ldr	r3, [r3, #4]
 800d2c2:	891a      	ldrh	r2, [r3, #8]
 800d2c4:	6a3b      	ldr	r3, [r7, #32]
 800d2c6:	891b      	ldrh	r3, [r3, #8]
 800d2c8:	1ad3      	subs	r3, r2, r3
 800d2ca:	b29b      	uxth	r3, r3
 800d2cc:	2201      	movs	r2, #1
 800d2ce:	6939      	ldr	r1, [r7, #16]
 800d2d0:	f7fa fe52 	bl	8007f78 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d2d4:	6a3b      	ldr	r3, [r7, #32]
 800d2d6:	68db      	ldr	r3, [r3, #12]
 800d2d8:	685b      	ldr	r3, [r3, #4]
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f7f9 f909 	bl	80064f2 <lwip_htonl>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	1ad3      	subs	r3, r2, r3
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	da02      	bge.n	800d2f8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	68fa      	ldr	r2, [r7, #12]
 800d2f6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d2f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	69b9      	ldr	r1, [r7, #24]
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f7ff fdef 	bl	800cee4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d306:	687a      	ldr	r2, [r7, #4]
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	3304      	adds	r3, #4
 800d30c:	69b9      	ldr	r1, [r7, #24]
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f7ff fe26 	bl	800cf60 <tcp_output_control_segment>
 800d314:	4603      	mov	r3, r0
 800d316:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d318:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	372c      	adds	r7, #44	; 0x2c
 800d320:	46bd      	mov	sp, r7
 800d322:	bd90      	pop	{r4, r7, pc}
 800d324:	0801321c 	.word	0x0801321c
 800d328:	08013a14 	.word	0x08013a14
 800d32c:	08013270 	.word	0x08013270

0800d330 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b082      	sub	sp, #8
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d338:	f7fa ff0c 	bl	8008154 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d33c:	4b0a      	ldr	r3, [pc, #40]	; (800d368 <tcpip_tcp_timer+0x38>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d103      	bne.n	800d34c <tcpip_tcp_timer+0x1c>
 800d344:	4b09      	ldr	r3, [pc, #36]	; (800d36c <tcpip_tcp_timer+0x3c>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d005      	beq.n	800d358 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d34c:	2200      	movs	r2, #0
 800d34e:	4908      	ldr	r1, [pc, #32]	; (800d370 <tcpip_tcp_timer+0x40>)
 800d350:	20fa      	movs	r0, #250	; 0xfa
 800d352:	f000 f8f3 	bl	800d53c <sys_timeout>
 800d356:	e003      	b.n	800d360 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d358:	4b06      	ldr	r3, [pc, #24]	; (800d374 <tcpip_tcp_timer+0x44>)
 800d35a:	2200      	movs	r2, #0
 800d35c:	601a      	str	r2, [r3, #0]
  }
}
 800d35e:	bf00      	nop
 800d360:	bf00      	nop
 800d362:	3708      	adds	r7, #8
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}
 800d368:	200089cc 	.word	0x200089cc
 800d36c:	200089d0 	.word	0x200089d0
 800d370:	0800d331 	.word	0x0800d331
 800d374:	20008a18 	.word	0x20008a18

0800d378 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d37c:	4b0a      	ldr	r3, [pc, #40]	; (800d3a8 <tcp_timer_needed+0x30>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d10f      	bne.n	800d3a4 <tcp_timer_needed+0x2c>
 800d384:	4b09      	ldr	r3, [pc, #36]	; (800d3ac <tcp_timer_needed+0x34>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d103      	bne.n	800d394 <tcp_timer_needed+0x1c>
 800d38c:	4b08      	ldr	r3, [pc, #32]	; (800d3b0 <tcp_timer_needed+0x38>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d007      	beq.n	800d3a4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d394:	4b04      	ldr	r3, [pc, #16]	; (800d3a8 <tcp_timer_needed+0x30>)
 800d396:	2201      	movs	r2, #1
 800d398:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d39a:	2200      	movs	r2, #0
 800d39c:	4905      	ldr	r1, [pc, #20]	; (800d3b4 <tcp_timer_needed+0x3c>)
 800d39e:	20fa      	movs	r0, #250	; 0xfa
 800d3a0:	f000 f8cc 	bl	800d53c <sys_timeout>
  }
}
 800d3a4:	bf00      	nop
 800d3a6:	bd80      	pop	{r7, pc}
 800d3a8:	20008a18 	.word	0x20008a18
 800d3ac:	200089cc 	.word	0x200089cc
 800d3b0:	200089d0 	.word	0x200089d0
 800d3b4:	0800d331 	.word	0x0800d331

0800d3b8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b086      	sub	sp, #24
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	60b9      	str	r1, [r7, #8]
 800d3c2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d3c4:	2006      	movs	r0, #6
 800d3c6:	f7f9 fcf7 	bl	8006db8 <memp_malloc>
 800d3ca:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d109      	bne.n	800d3e6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d151      	bne.n	800d47c <sys_timeout_abs+0xc4>
 800d3d8:	4b2a      	ldr	r3, [pc, #168]	; (800d484 <sys_timeout_abs+0xcc>)
 800d3da:	22be      	movs	r2, #190	; 0xbe
 800d3dc:	492a      	ldr	r1, [pc, #168]	; (800d488 <sys_timeout_abs+0xd0>)
 800d3de:	482b      	ldr	r0, [pc, #172]	; (800d48c <sys_timeout_abs+0xd4>)
 800d3e0:	f003 f9ac 	bl	801073c <iprintf>
    return;
 800d3e4:	e04a      	b.n	800d47c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	68ba      	ldr	r2, [r7, #8]
 800d3f0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	687a      	ldr	r2, [r7, #4]
 800d3f6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	68fa      	ldr	r2, [r7, #12]
 800d3fc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d3fe:	4b24      	ldr	r3, [pc, #144]	; (800d490 <sys_timeout_abs+0xd8>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d103      	bne.n	800d40e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800d406:	4a22      	ldr	r2, [pc, #136]	; (800d490 <sys_timeout_abs+0xd8>)
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	6013      	str	r3, [r2, #0]
    return;
 800d40c:	e037      	b.n	800d47e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	685a      	ldr	r2, [r3, #4]
 800d412:	4b1f      	ldr	r3, [pc, #124]	; (800d490 <sys_timeout_abs+0xd8>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	1ad3      	subs	r3, r2, r3
 800d41a:	0fdb      	lsrs	r3, r3, #31
 800d41c:	f003 0301 	and.w	r3, r3, #1
 800d420:	b2db      	uxtb	r3, r3
 800d422:	2b00      	cmp	r3, #0
 800d424:	d007      	beq.n	800d436 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d426:	4b1a      	ldr	r3, [pc, #104]	; (800d490 <sys_timeout_abs+0xd8>)
 800d428:	681a      	ldr	r2, [r3, #0]
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d42e:	4a18      	ldr	r2, [pc, #96]	; (800d490 <sys_timeout_abs+0xd8>)
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	6013      	str	r3, [r2, #0]
 800d434:	e023      	b.n	800d47e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d436:	4b16      	ldr	r3, [pc, #88]	; (800d490 <sys_timeout_abs+0xd8>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	617b      	str	r3, [r7, #20]
 800d43c:	e01a      	b.n	800d474 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d00b      	beq.n	800d45e <sys_timeout_abs+0xa6>
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	685a      	ldr	r2, [r3, #4]
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	685b      	ldr	r3, [r3, #4]
 800d450:	1ad3      	subs	r3, r2, r3
 800d452:	0fdb      	lsrs	r3, r3, #31
 800d454:	f003 0301 	and.w	r3, r3, #1
 800d458:	b2db      	uxtb	r3, r3
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d007      	beq.n	800d46e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	681a      	ldr	r2, [r3, #0]
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	693a      	ldr	r2, [r7, #16]
 800d46a:	601a      	str	r2, [r3, #0]
        break;
 800d46c:	e007      	b.n	800d47e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	617b      	str	r3, [r7, #20]
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d1e1      	bne.n	800d43e <sys_timeout_abs+0x86>
 800d47a:	e000      	b.n	800d47e <sys_timeout_abs+0xc6>
    return;
 800d47c:	bf00      	nop
      }
    }
  }
}
 800d47e:	3718      	adds	r7, #24
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}
 800d484:	08013a38 	.word	0x08013a38
 800d488:	08013a6c 	.word	0x08013a6c
 800d48c:	08013aac 	.word	0x08013aac
 800d490:	20008a10 	.word	0x20008a10

0800d494 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b086      	sub	sp, #24
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	4798      	blx	r3

  now = sys_now();
 800d4a6:	f7f8 fe03 	bl	80060b0 <sys_now>
 800d4aa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	681a      	ldr	r2, [r3, #0]
 800d4b0:	4b0f      	ldr	r3, [pc, #60]	; (800d4f0 <lwip_cyclic_timer+0x5c>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	4413      	add	r3, r2
 800d4b6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d4b8:	68fa      	ldr	r2, [r7, #12]
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	1ad3      	subs	r3, r2, r3
 800d4be:	0fdb      	lsrs	r3, r3, #31
 800d4c0:	f003 0301 	and.w	r3, r3, #1
 800d4c4:	b2db      	uxtb	r3, r3
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d009      	beq.n	800d4de <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	681a      	ldr	r2, [r3, #0]
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	4413      	add	r3, r2
 800d4d2:	687a      	ldr	r2, [r7, #4]
 800d4d4:	4907      	ldr	r1, [pc, #28]	; (800d4f4 <lwip_cyclic_timer+0x60>)
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f7ff ff6e 	bl	800d3b8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d4dc:	e004      	b.n	800d4e8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	4904      	ldr	r1, [pc, #16]	; (800d4f4 <lwip_cyclic_timer+0x60>)
 800d4e2:	68f8      	ldr	r0, [r7, #12]
 800d4e4:	f7ff ff68 	bl	800d3b8 <sys_timeout_abs>
}
 800d4e8:	bf00      	nop
 800d4ea:	3718      	adds	r7, #24
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}
 800d4f0:	20008a14 	.word	0x20008a14
 800d4f4:	0800d495 	.word	0x0800d495

0800d4f8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b082      	sub	sp, #8
 800d4fc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d4fe:	2301      	movs	r3, #1
 800d500:	607b      	str	r3, [r7, #4]
 800d502:	e00e      	b.n	800d522 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d504:	4a0b      	ldr	r2, [pc, #44]	; (800d534 <sys_timeouts_init+0x3c>)
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	00db      	lsls	r3, r3, #3
 800d510:	4a08      	ldr	r2, [pc, #32]	; (800d534 <sys_timeouts_init+0x3c>)
 800d512:	4413      	add	r3, r2
 800d514:	461a      	mov	r2, r3
 800d516:	4908      	ldr	r1, [pc, #32]	; (800d538 <sys_timeouts_init+0x40>)
 800d518:	f000 f810 	bl	800d53c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	3301      	adds	r3, #1
 800d520:	607b      	str	r3, [r7, #4]
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2b02      	cmp	r3, #2
 800d526:	d9ed      	bls.n	800d504 <sys_timeouts_init+0xc>
  }
}
 800d528:	bf00      	nop
 800d52a:	bf00      	nop
 800d52c:	3708      	adds	r7, #8
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}
 800d532:	bf00      	nop
 800d534:	08014624 	.word	0x08014624
 800d538:	0800d495 	.word	0x0800d495

0800d53c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b086      	sub	sp, #24
 800d540:	af00      	add	r7, sp, #0
 800d542:	60f8      	str	r0, [r7, #12]
 800d544:	60b9      	str	r1, [r7, #8]
 800d546:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d54e:	d306      	bcc.n	800d55e <sys_timeout+0x22>
 800d550:	4b0a      	ldr	r3, [pc, #40]	; (800d57c <sys_timeout+0x40>)
 800d552:	f240 1229 	movw	r2, #297	; 0x129
 800d556:	490a      	ldr	r1, [pc, #40]	; (800d580 <sys_timeout+0x44>)
 800d558:	480a      	ldr	r0, [pc, #40]	; (800d584 <sys_timeout+0x48>)
 800d55a:	f003 f8ef 	bl	801073c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d55e:	f7f8 fda7 	bl	80060b0 <sys_now>
 800d562:	4602      	mov	r2, r0
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	4413      	add	r3, r2
 800d568:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d56a:	687a      	ldr	r2, [r7, #4]
 800d56c:	68b9      	ldr	r1, [r7, #8]
 800d56e:	6978      	ldr	r0, [r7, #20]
 800d570:	f7ff ff22 	bl	800d3b8 <sys_timeout_abs>
#endif
}
 800d574:	bf00      	nop
 800d576:	3718      	adds	r7, #24
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}
 800d57c:	08013a38 	.word	0x08013a38
 800d580:	08013ad4 	.word	0x08013ad4
 800d584:	08013aac 	.word	0x08013aac

0800d588 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b084      	sub	sp, #16
 800d58c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d58e:	f7f8 fd8f 	bl	80060b0 <sys_now>
 800d592:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800d594:	4b1a      	ldr	r3, [pc, #104]	; (800d600 <sys_check_timeouts+0x78>)
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	b2db      	uxtb	r3, r3
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d001      	beq.n	800d5a2 <sys_check_timeouts+0x1a>
 800d59e:	f7f9 ffb7 	bl	8007510 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800d5a2:	4b18      	ldr	r3, [pc, #96]	; (800d604 <sys_check_timeouts+0x7c>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d022      	beq.n	800d5f4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	685b      	ldr	r3, [r3, #4]
 800d5b2:	68fa      	ldr	r2, [r7, #12]
 800d5b4:	1ad3      	subs	r3, r2, r3
 800d5b6:	0fdb      	lsrs	r3, r3, #31
 800d5b8:	f003 0301 	and.w	r3, r3, #1
 800d5bc:	b2db      	uxtb	r3, r3
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d11a      	bne.n	800d5f8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	4a0f      	ldr	r2, [pc, #60]	; (800d604 <sys_check_timeouts+0x7c>)
 800d5c8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	689b      	ldr	r3, [r3, #8]
 800d5ce:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	68db      	ldr	r3, [r3, #12]
 800d5d4:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	685b      	ldr	r3, [r3, #4]
 800d5da:	4a0b      	ldr	r2, [pc, #44]	; (800d608 <sys_check_timeouts+0x80>)
 800d5dc:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d5de:	68b9      	ldr	r1, [r7, #8]
 800d5e0:	2006      	movs	r0, #6
 800d5e2:	f7f9 fc59 	bl	8006e98 <memp_free>
    if (handler != NULL) {
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d0d3      	beq.n	800d594 <sys_check_timeouts+0xc>
      handler(arg);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	6838      	ldr	r0, [r7, #0]
 800d5f0:	4798      	blx	r3
  do {
 800d5f2:	e7cf      	b.n	800d594 <sys_check_timeouts+0xc>
      return;
 800d5f4:	bf00      	nop
 800d5f6:	e000      	b.n	800d5fa <sys_check_timeouts+0x72>
      return;
 800d5f8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d5fa:	3710      	adds	r7, #16
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}
 800d600:	200089bd 	.word	0x200089bd
 800d604:	20008a10 	.word	0x20008a10
 800d608:	20008a14 	.word	0x20008a14

0800d60c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d610:	f002 ff94 	bl	801053c <rand>
 800d614:	4603      	mov	r3, r0
 800d616:	b29b      	uxth	r3, r3
 800d618:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d622:	b29a      	uxth	r2, r3
 800d624:	4b01      	ldr	r3, [pc, #4]	; (800d62c <udp_init+0x20>)
 800d626:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d628:	bf00      	nop
 800d62a:	bd80      	pop	{r7, pc}
 800d62c:	20000028 	.word	0x20000028

0800d630 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800d630:	b480      	push	{r7}
 800d632:	b083      	sub	sp, #12
 800d634:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800d636:	2300      	movs	r3, #0
 800d638:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d63a:	4b17      	ldr	r3, [pc, #92]	; (800d698 <udp_new_port+0x68>)
 800d63c:	881b      	ldrh	r3, [r3, #0]
 800d63e:	1c5a      	adds	r2, r3, #1
 800d640:	b291      	uxth	r1, r2
 800d642:	4a15      	ldr	r2, [pc, #84]	; (800d698 <udp_new_port+0x68>)
 800d644:	8011      	strh	r1, [r2, #0]
 800d646:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d103      	bne.n	800d656 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d64e:	4b12      	ldr	r3, [pc, #72]	; (800d698 <udp_new_port+0x68>)
 800d650:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d654:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d656:	4b11      	ldr	r3, [pc, #68]	; (800d69c <udp_new_port+0x6c>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	603b      	str	r3, [r7, #0]
 800d65c:	e011      	b.n	800d682 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	8a5a      	ldrh	r2, [r3, #18]
 800d662:	4b0d      	ldr	r3, [pc, #52]	; (800d698 <udp_new_port+0x68>)
 800d664:	881b      	ldrh	r3, [r3, #0]
 800d666:	429a      	cmp	r2, r3
 800d668:	d108      	bne.n	800d67c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d66a:	88fb      	ldrh	r3, [r7, #6]
 800d66c:	3301      	adds	r3, #1
 800d66e:	80fb      	strh	r3, [r7, #6]
 800d670:	88fb      	ldrh	r3, [r7, #6]
 800d672:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d676:	d3e0      	bcc.n	800d63a <udp_new_port+0xa>
        return 0;
 800d678:	2300      	movs	r3, #0
 800d67a:	e007      	b.n	800d68c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	68db      	ldr	r3, [r3, #12]
 800d680:	603b      	str	r3, [r7, #0]
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d1ea      	bne.n	800d65e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800d688:	4b03      	ldr	r3, [pc, #12]	; (800d698 <udp_new_port+0x68>)
 800d68a:	881b      	ldrh	r3, [r3, #0]
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	370c      	adds	r7, #12
 800d690:	46bd      	mov	sp, r7
 800d692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d696:	4770      	bx	lr
 800d698:	20000028 	.word	0x20000028
 800d69c:	20008a1c 	.word	0x20008a1c

0800d6a0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b084      	sub	sp, #16
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	60f8      	str	r0, [r7, #12]
 800d6a8:	60b9      	str	r1, [r7, #8]
 800d6aa:	4613      	mov	r3, r2
 800d6ac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d105      	bne.n	800d6c0 <udp_input_local_match+0x20>
 800d6b4:	4b27      	ldr	r3, [pc, #156]	; (800d754 <udp_input_local_match+0xb4>)
 800d6b6:	2287      	movs	r2, #135	; 0x87
 800d6b8:	4927      	ldr	r1, [pc, #156]	; (800d758 <udp_input_local_match+0xb8>)
 800d6ba:	4828      	ldr	r0, [pc, #160]	; (800d75c <udp_input_local_match+0xbc>)
 800d6bc:	f003 f83e 	bl	801073c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d105      	bne.n	800d6d2 <udp_input_local_match+0x32>
 800d6c6:	4b23      	ldr	r3, [pc, #140]	; (800d754 <udp_input_local_match+0xb4>)
 800d6c8:	2288      	movs	r2, #136	; 0x88
 800d6ca:	4925      	ldr	r1, [pc, #148]	; (800d760 <udp_input_local_match+0xc0>)
 800d6cc:	4823      	ldr	r0, [pc, #140]	; (800d75c <udp_input_local_match+0xbc>)
 800d6ce:	f003 f835 	bl	801073c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	7a1b      	ldrb	r3, [r3, #8]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d00b      	beq.n	800d6f2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	7a1a      	ldrb	r2, [r3, #8]
 800d6de:	4b21      	ldr	r3, [pc, #132]	; (800d764 <udp_input_local_match+0xc4>)
 800d6e0:	685b      	ldr	r3, [r3, #4]
 800d6e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d001      	beq.n	800d6f2 <udp_input_local_match+0x52>
    return 0;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	e02b      	b.n	800d74a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d6f2:	79fb      	ldrb	r3, [r7, #7]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d018      	beq.n	800d72a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d013      	beq.n	800d726 <udp_input_local_match+0x86>
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d00f      	beq.n	800d726 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d706:	4b17      	ldr	r3, [pc, #92]	; (800d764 <udp_input_local_match+0xc4>)
 800d708:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d70e:	d00a      	beq.n	800d726 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	681a      	ldr	r2, [r3, #0]
 800d714:	4b13      	ldr	r3, [pc, #76]	; (800d764 <udp_input_local_match+0xc4>)
 800d716:	695b      	ldr	r3, [r3, #20]
 800d718:	405a      	eors	r2, r3
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	3308      	adds	r3, #8
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d722:	2b00      	cmp	r3, #0
 800d724:	d110      	bne.n	800d748 <udp_input_local_match+0xa8>
          return 1;
 800d726:	2301      	movs	r3, #1
 800d728:	e00f      	b.n	800d74a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d009      	beq.n	800d744 <udp_input_local_match+0xa4>
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d005      	beq.n	800d744 <udp_input_local_match+0xa4>
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	681a      	ldr	r2, [r3, #0]
 800d73c:	4b09      	ldr	r3, [pc, #36]	; (800d764 <udp_input_local_match+0xc4>)
 800d73e:	695b      	ldr	r3, [r3, #20]
 800d740:	429a      	cmp	r2, r3
 800d742:	d101      	bne.n	800d748 <udp_input_local_match+0xa8>
        return 1;
 800d744:	2301      	movs	r3, #1
 800d746:	e000      	b.n	800d74a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800d748:	2300      	movs	r3, #0
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3710      	adds	r7, #16
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
 800d752:	bf00      	nop
 800d754:	08013b20 	.word	0x08013b20
 800d758:	08013b50 	.word	0x08013b50
 800d75c:	08013b74 	.word	0x08013b74
 800d760:	08013b9c 	.word	0x08013b9c
 800d764:	20005290 	.word	0x20005290

0800d768 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d768:	b590      	push	{r4, r7, lr}
 800d76a:	b08d      	sub	sp, #52	; 0x34
 800d76c:	af02      	add	r7, sp, #8
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d772:	2300      	movs	r3, #0
 800d774:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d105      	bne.n	800d788 <udp_input+0x20>
 800d77c:	4b7c      	ldr	r3, [pc, #496]	; (800d970 <udp_input+0x208>)
 800d77e:	22cf      	movs	r2, #207	; 0xcf
 800d780:	497c      	ldr	r1, [pc, #496]	; (800d974 <udp_input+0x20c>)
 800d782:	487d      	ldr	r0, [pc, #500]	; (800d978 <udp_input+0x210>)
 800d784:	f002 ffda 	bl	801073c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d105      	bne.n	800d79a <udp_input+0x32>
 800d78e:	4b78      	ldr	r3, [pc, #480]	; (800d970 <udp_input+0x208>)
 800d790:	22d0      	movs	r2, #208	; 0xd0
 800d792:	497a      	ldr	r1, [pc, #488]	; (800d97c <udp_input+0x214>)
 800d794:	4878      	ldr	r0, [pc, #480]	; (800d978 <udp_input+0x210>)
 800d796:	f002 ffd1 	bl	801073c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	895b      	ldrh	r3, [r3, #10]
 800d79e:	2b07      	cmp	r3, #7
 800d7a0:	d803      	bhi.n	800d7aa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f7fa f9ee 	bl	8007b84 <pbuf_free>
    goto end;
 800d7a8:	e0de      	b.n	800d968 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	685b      	ldr	r3, [r3, #4]
 800d7ae:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d7b0:	4b73      	ldr	r3, [pc, #460]	; (800d980 <udp_input+0x218>)
 800d7b2:	695b      	ldr	r3, [r3, #20]
 800d7b4:	4a72      	ldr	r2, [pc, #456]	; (800d980 <udp_input+0x218>)
 800d7b6:	6812      	ldr	r2, [r2, #0]
 800d7b8:	4611      	mov	r1, r2
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f001 ff68 	bl	800f690 <ip4_addr_isbroadcast_u32>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	881b      	ldrh	r3, [r3, #0]
 800d7c8:	b29b      	uxth	r3, r3
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7f8 fe7c 	bl	80064c8 <lwip_htons>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	885b      	ldrh	r3, [r3, #2]
 800d7d8:	b29b      	uxth	r3, r3
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7f8 fe74 	bl	80064c8 <lwip_htons>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d7f0:	4b64      	ldr	r3, [pc, #400]	; (800d984 <udp_input+0x21c>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	627b      	str	r3, [r7, #36]	; 0x24
 800d7f6:	e054      	b.n	800d8a2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fa:	8a5b      	ldrh	r3, [r3, #18]
 800d7fc:	89fa      	ldrh	r2, [r7, #14]
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d14a      	bne.n	800d898 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d802:	7cfb      	ldrb	r3, [r7, #19]
 800d804:	461a      	mov	r2, r3
 800d806:	6839      	ldr	r1, [r7, #0]
 800d808:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d80a:	f7ff ff49 	bl	800d6a0 <udp_input_local_match>
 800d80e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800d810:	2b00      	cmp	r3, #0
 800d812:	d041      	beq.n	800d898 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d816:	7c1b      	ldrb	r3, [r3, #16]
 800d818:	f003 0304 	and.w	r3, r3, #4
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d11d      	bne.n	800d85c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800d820:	69fb      	ldr	r3, [r7, #28]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d102      	bne.n	800d82c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800d826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d828:	61fb      	str	r3, [r7, #28]
 800d82a:	e017      	b.n	800d85c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d82c:	7cfb      	ldrb	r3, [r7, #19]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d014      	beq.n	800d85c <udp_input+0xf4>
 800d832:	4b53      	ldr	r3, [pc, #332]	; (800d980 <udp_input+0x218>)
 800d834:	695b      	ldr	r3, [r3, #20]
 800d836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d83a:	d10f      	bne.n	800d85c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d83c:	69fb      	ldr	r3, [r7, #28]
 800d83e:	681a      	ldr	r2, [r3, #0]
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	3304      	adds	r3, #4
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	429a      	cmp	r2, r3
 800d848:	d008      	beq.n	800d85c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84c:	681a      	ldr	r2, [r3, #0]
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	3304      	adds	r3, #4
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	429a      	cmp	r2, r3
 800d856:	d101      	bne.n	800d85c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800d858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85e:	8a9b      	ldrh	r3, [r3, #20]
 800d860:	8a3a      	ldrh	r2, [r7, #16]
 800d862:	429a      	cmp	r2, r3
 800d864:	d118      	bne.n	800d898 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d868:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d005      	beq.n	800d87a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d870:	685a      	ldr	r2, [r3, #4]
 800d872:	4b43      	ldr	r3, [pc, #268]	; (800d980 <udp_input+0x218>)
 800d874:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d876:	429a      	cmp	r2, r3
 800d878:	d10e      	bne.n	800d898 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d87a:	6a3b      	ldr	r3, [r7, #32]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d014      	beq.n	800d8aa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d882:	68da      	ldr	r2, [r3, #12]
 800d884:	6a3b      	ldr	r3, [r7, #32]
 800d886:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d888:	4b3e      	ldr	r3, [pc, #248]	; (800d984 <udp_input+0x21c>)
 800d88a:	681a      	ldr	r2, [r3, #0]
 800d88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d890:	4a3c      	ldr	r2, [pc, #240]	; (800d984 <udp_input+0x21c>)
 800d892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d894:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d896:	e008      	b.n	800d8aa <udp_input+0x142>
      }
    }

    prev = pcb;
 800d898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89e:	68db      	ldr	r3, [r3, #12]
 800d8a0:	627b      	str	r3, [r7, #36]	; 0x24
 800d8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d1a7      	bne.n	800d7f8 <udp_input+0x90>
 800d8a8:	e000      	b.n	800d8ac <udp_input+0x144>
        break;
 800d8aa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800d8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d101      	bne.n	800d8b6 <udp_input+0x14e>
    pcb = uncon_pcb;
 800d8b2:	69fb      	ldr	r3, [r7, #28]
 800d8b4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d002      	beq.n	800d8c2 <udp_input+0x15a>
    for_us = 1;
 800d8bc:	2301      	movs	r3, #1
 800d8be:	76fb      	strb	r3, [r7, #27]
 800d8c0:	e00a      	b.n	800d8d8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	3304      	adds	r3, #4
 800d8c6:	681a      	ldr	r2, [r3, #0]
 800d8c8:	4b2d      	ldr	r3, [pc, #180]	; (800d980 <udp_input+0x218>)
 800d8ca:	695b      	ldr	r3, [r3, #20]
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	bf0c      	ite	eq
 800d8d0:	2301      	moveq	r3, #1
 800d8d2:	2300      	movne	r3, #0
 800d8d4:	b2db      	uxtb	r3, r3
 800d8d6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800d8d8:	7efb      	ldrb	r3, [r7, #27]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d041      	beq.n	800d962 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d8de:	2108      	movs	r1, #8
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f7fa f8c9 	bl	8007a78 <pbuf_remove_header>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d00a      	beq.n	800d902 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d8ec:	4b20      	ldr	r3, [pc, #128]	; (800d970 <udp_input+0x208>)
 800d8ee:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800d8f2:	4925      	ldr	r1, [pc, #148]	; (800d988 <udp_input+0x220>)
 800d8f4:	4820      	ldr	r0, [pc, #128]	; (800d978 <udp_input+0x210>)
 800d8f6:	f002 ff21 	bl	801073c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f7fa f942 	bl	8007b84 <pbuf_free>
      goto end;
 800d900:	e032      	b.n	800d968 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800d902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d904:	2b00      	cmp	r3, #0
 800d906:	d012      	beq.n	800d92e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90a:	699b      	ldr	r3, [r3, #24]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d00a      	beq.n	800d926 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d912:	699c      	ldr	r4, [r3, #24]
 800d914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d916:	69d8      	ldr	r0, [r3, #28]
 800d918:	8a3b      	ldrh	r3, [r7, #16]
 800d91a:	9300      	str	r3, [sp, #0]
 800d91c:	4b1b      	ldr	r3, [pc, #108]	; (800d98c <udp_input+0x224>)
 800d91e:	687a      	ldr	r2, [r7, #4]
 800d920:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d922:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800d924:	e021      	b.n	800d96a <udp_input+0x202>
        pbuf_free(p);
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f7fa f92c 	bl	8007b84 <pbuf_free>
        goto end;
 800d92c:	e01c      	b.n	800d968 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d92e:	7cfb      	ldrb	r3, [r7, #19]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d112      	bne.n	800d95a <udp_input+0x1f2>
 800d934:	4b12      	ldr	r3, [pc, #72]	; (800d980 <udp_input+0x218>)
 800d936:	695b      	ldr	r3, [r3, #20]
 800d938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d93c:	2be0      	cmp	r3, #224	; 0xe0
 800d93e:	d00c      	beq.n	800d95a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d940:	4b0f      	ldr	r3, [pc, #60]	; (800d980 <udp_input+0x218>)
 800d942:	899b      	ldrh	r3, [r3, #12]
 800d944:	3308      	adds	r3, #8
 800d946:	b29b      	uxth	r3, r3
 800d948:	b21b      	sxth	r3, r3
 800d94a:	4619      	mov	r1, r3
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f7fa f906 	bl	8007b5e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d952:	2103      	movs	r1, #3
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f001 fb7b 	bl	800f050 <icmp_dest_unreach>
      pbuf_free(p);
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f7fa f912 	bl	8007b84 <pbuf_free>
  return;
 800d960:	e003      	b.n	800d96a <udp_input+0x202>
    pbuf_free(p);
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f7fa f90e 	bl	8007b84 <pbuf_free>
  return;
 800d968:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d96a:	372c      	adds	r7, #44	; 0x2c
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd90      	pop	{r4, r7, pc}
 800d970:	08013b20 	.word	0x08013b20
 800d974:	08013bc4 	.word	0x08013bc4
 800d978:	08013b74 	.word	0x08013b74
 800d97c:	08013bdc 	.word	0x08013bdc
 800d980:	20005290 	.word	0x20005290
 800d984:	20008a1c 	.word	0x20008a1c
 800d988:	08013bf8 	.word	0x08013bf8
 800d98c:	200052a0 	.word	0x200052a0

0800d990 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b088      	sub	sp, #32
 800d994:	af02      	add	r7, sp, #8
 800d996:	60f8      	str	r0, [r7, #12]
 800d998:	60b9      	str	r1, [r7, #8]
 800d99a:	607a      	str	r2, [r7, #4]
 800d99c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d109      	bne.n	800d9b8 <udp_sendto+0x28>
 800d9a4:	4b23      	ldr	r3, [pc, #140]	; (800da34 <udp_sendto+0xa4>)
 800d9a6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d9aa:	4923      	ldr	r1, [pc, #140]	; (800da38 <udp_sendto+0xa8>)
 800d9ac:	4823      	ldr	r0, [pc, #140]	; (800da3c <udp_sendto+0xac>)
 800d9ae:	f002 fec5 	bl	801073c <iprintf>
 800d9b2:	f06f 030f 	mvn.w	r3, #15
 800d9b6:	e038      	b.n	800da2a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d109      	bne.n	800d9d2 <udp_sendto+0x42>
 800d9be:	4b1d      	ldr	r3, [pc, #116]	; (800da34 <udp_sendto+0xa4>)
 800d9c0:	f240 2219 	movw	r2, #537	; 0x219
 800d9c4:	491e      	ldr	r1, [pc, #120]	; (800da40 <udp_sendto+0xb0>)
 800d9c6:	481d      	ldr	r0, [pc, #116]	; (800da3c <udp_sendto+0xac>)
 800d9c8:	f002 feb8 	bl	801073c <iprintf>
 800d9cc:	f06f 030f 	mvn.w	r3, #15
 800d9d0:	e02b      	b.n	800da2a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d109      	bne.n	800d9ec <udp_sendto+0x5c>
 800d9d8:	4b16      	ldr	r3, [pc, #88]	; (800da34 <udp_sendto+0xa4>)
 800d9da:	f240 221a 	movw	r2, #538	; 0x21a
 800d9de:	4919      	ldr	r1, [pc, #100]	; (800da44 <udp_sendto+0xb4>)
 800d9e0:	4816      	ldr	r0, [pc, #88]	; (800da3c <udp_sendto+0xac>)
 800d9e2:	f002 feab 	bl	801073c <iprintf>
 800d9e6:	f06f 030f 	mvn.w	r3, #15
 800d9ea:	e01e      	b.n	800da2a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	7a1b      	ldrb	r3, [r3, #8]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d006      	beq.n	800da02 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	7a1b      	ldrb	r3, [r3, #8]
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f7f9 fd63 	bl	80074c4 <netif_get_by_index>
 800d9fe:	6178      	str	r0, [r7, #20]
 800da00:	e003      	b.n	800da0a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f001 fbae 	bl	800f164 <ip4_route>
 800da08:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d102      	bne.n	800da16 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800da10:	f06f 0303 	mvn.w	r3, #3
 800da14:	e009      	b.n	800da2a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800da16:	887a      	ldrh	r2, [r7, #2]
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	9300      	str	r3, [sp, #0]
 800da1c:	4613      	mov	r3, r2
 800da1e:	687a      	ldr	r2, [r7, #4]
 800da20:	68b9      	ldr	r1, [r7, #8]
 800da22:	68f8      	ldr	r0, [r7, #12]
 800da24:	f000 f810 	bl	800da48 <udp_sendto_if>
 800da28:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	3718      	adds	r7, #24
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}
 800da32:	bf00      	nop
 800da34:	08013b20 	.word	0x08013b20
 800da38:	08013c44 	.word	0x08013c44
 800da3c:	08013b74 	.word	0x08013b74
 800da40:	08013c5c 	.word	0x08013c5c
 800da44:	08013c78 	.word	0x08013c78

0800da48 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b088      	sub	sp, #32
 800da4c:	af02      	add	r7, sp, #8
 800da4e:	60f8      	str	r0, [r7, #12]
 800da50:	60b9      	str	r1, [r7, #8]
 800da52:	607a      	str	r2, [r7, #4]
 800da54:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d109      	bne.n	800da70 <udp_sendto_if+0x28>
 800da5c:	4b2e      	ldr	r3, [pc, #184]	; (800db18 <udp_sendto_if+0xd0>)
 800da5e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800da62:	492e      	ldr	r1, [pc, #184]	; (800db1c <udp_sendto_if+0xd4>)
 800da64:	482e      	ldr	r0, [pc, #184]	; (800db20 <udp_sendto_if+0xd8>)
 800da66:	f002 fe69 	bl	801073c <iprintf>
 800da6a:	f06f 030f 	mvn.w	r3, #15
 800da6e:	e04f      	b.n	800db10 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d109      	bne.n	800da8a <udp_sendto_if+0x42>
 800da76:	4b28      	ldr	r3, [pc, #160]	; (800db18 <udp_sendto_if+0xd0>)
 800da78:	f240 2281 	movw	r2, #641	; 0x281
 800da7c:	4929      	ldr	r1, [pc, #164]	; (800db24 <udp_sendto_if+0xdc>)
 800da7e:	4828      	ldr	r0, [pc, #160]	; (800db20 <udp_sendto_if+0xd8>)
 800da80:	f002 fe5c 	bl	801073c <iprintf>
 800da84:	f06f 030f 	mvn.w	r3, #15
 800da88:	e042      	b.n	800db10 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d109      	bne.n	800daa4 <udp_sendto_if+0x5c>
 800da90:	4b21      	ldr	r3, [pc, #132]	; (800db18 <udp_sendto_if+0xd0>)
 800da92:	f240 2282 	movw	r2, #642	; 0x282
 800da96:	4924      	ldr	r1, [pc, #144]	; (800db28 <udp_sendto_if+0xe0>)
 800da98:	4821      	ldr	r0, [pc, #132]	; (800db20 <udp_sendto_if+0xd8>)
 800da9a:	f002 fe4f 	bl	801073c <iprintf>
 800da9e:	f06f 030f 	mvn.w	r3, #15
 800daa2:	e035      	b.n	800db10 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800daa4:	6a3b      	ldr	r3, [r7, #32]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d109      	bne.n	800dabe <udp_sendto_if+0x76>
 800daaa:	4b1b      	ldr	r3, [pc, #108]	; (800db18 <udp_sendto_if+0xd0>)
 800daac:	f240 2283 	movw	r2, #643	; 0x283
 800dab0:	491e      	ldr	r1, [pc, #120]	; (800db2c <udp_sendto_if+0xe4>)
 800dab2:	481b      	ldr	r0, [pc, #108]	; (800db20 <udp_sendto_if+0xd8>)
 800dab4:	f002 fe42 	bl	801073c <iprintf>
 800dab8:	f06f 030f 	mvn.w	r3, #15
 800dabc:	e028      	b.n	800db10 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d009      	beq.n	800dad8 <udp_sendto_if+0x90>
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d005      	beq.n	800dad8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dad4:	2be0      	cmp	r3, #224	; 0xe0
 800dad6:	d103      	bne.n	800dae0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800dad8:	6a3b      	ldr	r3, [r7, #32]
 800dada:	3304      	adds	r3, #4
 800dadc:	617b      	str	r3, [r7, #20]
 800dade:	e00b      	b.n	800daf8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	681a      	ldr	r2, [r3, #0]
 800dae4:	6a3b      	ldr	r3, [r7, #32]
 800dae6:	3304      	adds	r3, #4
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	429a      	cmp	r2, r3
 800daec:	d002      	beq.n	800daf4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800daee:	f06f 0303 	mvn.w	r3, #3
 800daf2:	e00d      	b.n	800db10 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800daf8:	887a      	ldrh	r2, [r7, #2]
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	9301      	str	r3, [sp, #4]
 800dafe:	6a3b      	ldr	r3, [r7, #32]
 800db00:	9300      	str	r3, [sp, #0]
 800db02:	4613      	mov	r3, r2
 800db04:	687a      	ldr	r2, [r7, #4]
 800db06:	68b9      	ldr	r1, [r7, #8]
 800db08:	68f8      	ldr	r0, [r7, #12]
 800db0a:	f000 f811 	bl	800db30 <udp_sendto_if_src>
 800db0e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800db10:	4618      	mov	r0, r3
 800db12:	3718      	adds	r7, #24
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}
 800db18:	08013b20 	.word	0x08013b20
 800db1c:	08013c94 	.word	0x08013c94
 800db20:	08013b74 	.word	0x08013b74
 800db24:	08013cb0 	.word	0x08013cb0
 800db28:	08013ccc 	.word	0x08013ccc
 800db2c:	08013cec 	.word	0x08013cec

0800db30 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b08c      	sub	sp, #48	; 0x30
 800db34:	af04      	add	r7, sp, #16
 800db36:	60f8      	str	r0, [r7, #12]
 800db38:	60b9      	str	r1, [r7, #8]
 800db3a:	607a      	str	r2, [r7, #4]
 800db3c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d109      	bne.n	800db58 <udp_sendto_if_src+0x28>
 800db44:	4b65      	ldr	r3, [pc, #404]	; (800dcdc <udp_sendto_if_src+0x1ac>)
 800db46:	f240 22d1 	movw	r2, #721	; 0x2d1
 800db4a:	4965      	ldr	r1, [pc, #404]	; (800dce0 <udp_sendto_if_src+0x1b0>)
 800db4c:	4865      	ldr	r0, [pc, #404]	; (800dce4 <udp_sendto_if_src+0x1b4>)
 800db4e:	f002 fdf5 	bl	801073c <iprintf>
 800db52:	f06f 030f 	mvn.w	r3, #15
 800db56:	e0bc      	b.n	800dcd2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d109      	bne.n	800db72 <udp_sendto_if_src+0x42>
 800db5e:	4b5f      	ldr	r3, [pc, #380]	; (800dcdc <udp_sendto_if_src+0x1ac>)
 800db60:	f240 22d2 	movw	r2, #722	; 0x2d2
 800db64:	4960      	ldr	r1, [pc, #384]	; (800dce8 <udp_sendto_if_src+0x1b8>)
 800db66:	485f      	ldr	r0, [pc, #380]	; (800dce4 <udp_sendto_if_src+0x1b4>)
 800db68:	f002 fde8 	bl	801073c <iprintf>
 800db6c:	f06f 030f 	mvn.w	r3, #15
 800db70:	e0af      	b.n	800dcd2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d109      	bne.n	800db8c <udp_sendto_if_src+0x5c>
 800db78:	4b58      	ldr	r3, [pc, #352]	; (800dcdc <udp_sendto_if_src+0x1ac>)
 800db7a:	f240 22d3 	movw	r2, #723	; 0x2d3
 800db7e:	495b      	ldr	r1, [pc, #364]	; (800dcec <udp_sendto_if_src+0x1bc>)
 800db80:	4858      	ldr	r0, [pc, #352]	; (800dce4 <udp_sendto_if_src+0x1b4>)
 800db82:	f002 fddb 	bl	801073c <iprintf>
 800db86:	f06f 030f 	mvn.w	r3, #15
 800db8a:	e0a2      	b.n	800dcd2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800db8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d109      	bne.n	800dba6 <udp_sendto_if_src+0x76>
 800db92:	4b52      	ldr	r3, [pc, #328]	; (800dcdc <udp_sendto_if_src+0x1ac>)
 800db94:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800db98:	4955      	ldr	r1, [pc, #340]	; (800dcf0 <udp_sendto_if_src+0x1c0>)
 800db9a:	4852      	ldr	r0, [pc, #328]	; (800dce4 <udp_sendto_if_src+0x1b4>)
 800db9c:	f002 fdce 	bl	801073c <iprintf>
 800dba0:	f06f 030f 	mvn.w	r3, #15
 800dba4:	e095      	b.n	800dcd2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800dba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d109      	bne.n	800dbc0 <udp_sendto_if_src+0x90>
 800dbac:	4b4b      	ldr	r3, [pc, #300]	; (800dcdc <udp_sendto_if_src+0x1ac>)
 800dbae:	f240 22d5 	movw	r2, #725	; 0x2d5
 800dbb2:	4950      	ldr	r1, [pc, #320]	; (800dcf4 <udp_sendto_if_src+0x1c4>)
 800dbb4:	484b      	ldr	r0, [pc, #300]	; (800dce4 <udp_sendto_if_src+0x1b4>)
 800dbb6:	f002 fdc1 	bl	801073c <iprintf>
 800dbba:	f06f 030f 	mvn.w	r3, #15
 800dbbe:	e088      	b.n	800dcd2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	8a5b      	ldrh	r3, [r3, #18]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d10f      	bne.n	800dbe8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800dbc8:	68f9      	ldr	r1, [r7, #12]
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	8a5b      	ldrh	r3, [r3, #18]
 800dbce:	461a      	mov	r2, r3
 800dbd0:	68f8      	ldr	r0, [r7, #12]
 800dbd2:	f000 f893 	bl	800dcfc <udp_bind>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800dbda:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d002      	beq.n	800dbe8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800dbe2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800dbe6:	e074      	b.n	800dcd2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	891b      	ldrh	r3, [r3, #8]
 800dbec:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800dbf0:	4293      	cmp	r3, r2
 800dbf2:	d902      	bls.n	800dbfa <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800dbf4:	f04f 33ff 	mov.w	r3, #4294967295
 800dbf8:	e06b      	b.n	800dcd2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800dbfa:	2108      	movs	r1, #8
 800dbfc:	68b8      	ldr	r0, [r7, #8]
 800dbfe:	f7f9 ff2b 	bl	8007a58 <pbuf_add_header>
 800dc02:	4603      	mov	r3, r0
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d015      	beq.n	800dc34 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800dc08:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dc0c:	2108      	movs	r1, #8
 800dc0e:	2022      	movs	r0, #34	; 0x22
 800dc10:	f7f9 fcd4 	bl	80075bc <pbuf_alloc>
 800dc14:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800dc16:	69fb      	ldr	r3, [r7, #28]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d102      	bne.n	800dc22 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800dc1c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc20:	e057      	b.n	800dcd2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	891b      	ldrh	r3, [r3, #8]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d006      	beq.n	800dc38 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800dc2a:	68b9      	ldr	r1, [r7, #8]
 800dc2c:	69f8      	ldr	r0, [r7, #28]
 800dc2e:	f7fa f8c1 	bl	8007db4 <pbuf_chain>
 800dc32:	e001      	b.n	800dc38 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800dc38:	69fb      	ldr	r3, [r7, #28]
 800dc3a:	895b      	ldrh	r3, [r3, #10]
 800dc3c:	2b07      	cmp	r3, #7
 800dc3e:	d806      	bhi.n	800dc4e <udp_sendto_if_src+0x11e>
 800dc40:	4b26      	ldr	r3, [pc, #152]	; (800dcdc <udp_sendto_if_src+0x1ac>)
 800dc42:	f240 320d 	movw	r2, #781	; 0x30d
 800dc46:	492c      	ldr	r1, [pc, #176]	; (800dcf8 <udp_sendto_if_src+0x1c8>)
 800dc48:	4826      	ldr	r0, [pc, #152]	; (800dce4 <udp_sendto_if_src+0x1b4>)
 800dc4a:	f002 fd77 	bl	801073c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800dc4e:	69fb      	ldr	r3, [r7, #28]
 800dc50:	685b      	ldr	r3, [r3, #4]
 800dc52:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	8a5b      	ldrh	r3, [r3, #18]
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f7f8 fc35 	bl	80064c8 <lwip_htons>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	461a      	mov	r2, r3
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800dc66:	887b      	ldrh	r3, [r7, #2]
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7f8 fc2d 	bl	80064c8 <lwip_htons>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	461a      	mov	r2, r3
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	719a      	strb	r2, [r3, #6]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800dc80:	69fb      	ldr	r3, [r7, #28]
 800dc82:	891b      	ldrh	r3, [r3, #8]
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7f8 fc1f 	bl	80064c8 <lwip_htons>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800dc92:	2311      	movs	r3, #17
 800dc94:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	7adb      	ldrb	r3, [r3, #11]
 800dc9a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	7a9b      	ldrb	r3, [r3, #10]
 800dca0:	7cb9      	ldrb	r1, [r7, #18]
 800dca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dca4:	9202      	str	r2, [sp, #8]
 800dca6:	7cfa      	ldrb	r2, [r7, #19]
 800dca8:	9201      	str	r2, [sp, #4]
 800dcaa:	9300      	str	r3, [sp, #0]
 800dcac:	460b      	mov	r3, r1
 800dcae:	687a      	ldr	r2, [r7, #4]
 800dcb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dcb2:	69f8      	ldr	r0, [r7, #28]
 800dcb4:	f001 fc3e 	bl	800f534 <ip4_output_if_src>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800dcbc:	69fa      	ldr	r2, [r7, #28]
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d004      	beq.n	800dcce <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800dcc4:	69f8      	ldr	r0, [r7, #28]
 800dcc6:	f7f9 ff5d 	bl	8007b84 <pbuf_free>
    q = NULL;
 800dcca:	2300      	movs	r3, #0
 800dccc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800dcce:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3720      	adds	r7, #32
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}
 800dcda:	bf00      	nop
 800dcdc:	08013b20 	.word	0x08013b20
 800dce0:	08013d0c 	.word	0x08013d0c
 800dce4:	08013b74 	.word	0x08013b74
 800dce8:	08013d2c 	.word	0x08013d2c
 800dcec:	08013d4c 	.word	0x08013d4c
 800dcf0:	08013d70 	.word	0x08013d70
 800dcf4:	08013d94 	.word	0x08013d94
 800dcf8:	08013db8 	.word	0x08013db8

0800dcfc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b086      	sub	sp, #24
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	60f8      	str	r0, [r7, #12]
 800dd04:	60b9      	str	r1, [r7, #8]
 800dd06:	4613      	mov	r3, r2
 800dd08:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d101      	bne.n	800dd14 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800dd10:	4b39      	ldr	r3, [pc, #228]	; (800ddf8 <udp_bind+0xfc>)
 800dd12:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d109      	bne.n	800dd2e <udp_bind+0x32>
 800dd1a:	4b38      	ldr	r3, [pc, #224]	; (800ddfc <udp_bind+0x100>)
 800dd1c:	f240 32b7 	movw	r2, #951	; 0x3b7
 800dd20:	4937      	ldr	r1, [pc, #220]	; (800de00 <udp_bind+0x104>)
 800dd22:	4838      	ldr	r0, [pc, #224]	; (800de04 <udp_bind+0x108>)
 800dd24:	f002 fd0a 	bl	801073c <iprintf>
 800dd28:	f06f 030f 	mvn.w	r3, #15
 800dd2c:	e060      	b.n	800ddf0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dd32:	4b35      	ldr	r3, [pc, #212]	; (800de08 <udp_bind+0x10c>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	617b      	str	r3, [r7, #20]
 800dd38:	e009      	b.n	800dd4e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800dd3a:	68fa      	ldr	r2, [r7, #12]
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d102      	bne.n	800dd48 <udp_bind+0x4c>
      rebind = 1;
 800dd42:	2301      	movs	r3, #1
 800dd44:	74fb      	strb	r3, [r7, #19]
      break;
 800dd46:	e005      	b.n	800dd54 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	68db      	ldr	r3, [r3, #12]
 800dd4c:	617b      	str	r3, [r7, #20]
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d1f2      	bne.n	800dd3a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800dd54:	88fb      	ldrh	r3, [r7, #6]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d109      	bne.n	800dd6e <udp_bind+0x72>
    port = udp_new_port();
 800dd5a:	f7ff fc69 	bl	800d630 <udp_new_port>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800dd62:	88fb      	ldrh	r3, [r7, #6]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d12c      	bne.n	800ddc2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800dd68:	f06f 0307 	mvn.w	r3, #7
 800dd6c:	e040      	b.n	800ddf0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dd6e:	4b26      	ldr	r3, [pc, #152]	; (800de08 <udp_bind+0x10c>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	617b      	str	r3, [r7, #20]
 800dd74:	e022      	b.n	800ddbc <udp_bind+0xc0>
      if (pcb != ipcb) {
 800dd76:	68fa      	ldr	r2, [r7, #12]
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d01b      	beq.n	800ddb6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	8a5b      	ldrh	r3, [r3, #18]
 800dd82:	88fa      	ldrh	r2, [r7, #6]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d116      	bne.n	800ddb6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	681a      	ldr	r2, [r3, #0]
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d00d      	beq.n	800ddb0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d00a      	beq.n	800ddb0 <udp_bind+0xb4>
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d006      	beq.n	800ddb0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800dda2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d003      	beq.n	800ddb0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d102      	bne.n	800ddb6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800ddb0:	f06f 0307 	mvn.w	r3, #7
 800ddb4:	e01c      	b.n	800ddf0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	68db      	ldr	r3, [r3, #12]
 800ddba:	617b      	str	r3, [r7, #20]
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d1d9      	bne.n	800dd76 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d002      	beq.n	800ddce <udp_bind+0xd2>
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	e000      	b.n	800ddd0 <udp_bind+0xd4>
 800ddce:	2300      	movs	r3, #0
 800ddd0:	68fa      	ldr	r2, [r7, #12]
 800ddd2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	88fa      	ldrh	r2, [r7, #6]
 800ddd8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800ddda:	7cfb      	ldrb	r3, [r7, #19]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d106      	bne.n	800ddee <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800dde0:	4b09      	ldr	r3, [pc, #36]	; (800de08 <udp_bind+0x10c>)
 800dde2:	681a      	ldr	r2, [r3, #0]
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800dde8:	4a07      	ldr	r2, [pc, #28]	; (800de08 <udp_bind+0x10c>)
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800ddee:	2300      	movs	r3, #0
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3718      	adds	r7, #24
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}
 800ddf8:	0801463c 	.word	0x0801463c
 800ddfc:	08013b20 	.word	0x08013b20
 800de00:	08013de8 	.word	0x08013de8
 800de04:	08013b74 	.word	0x08013b74
 800de08:	20008a1c 	.word	0x20008a1c

0800de0c <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b082      	sub	sp, #8
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d107      	bne.n	800de2a <udp_disconnect+0x1e>
 800de1a:	4b0d      	ldr	r3, [pc, #52]	; (800de50 <udp_disconnect+0x44>)
 800de1c:	f240 426a 	movw	r2, #1130	; 0x46a
 800de20:	490c      	ldr	r1, [pc, #48]	; (800de54 <udp_disconnect+0x48>)
 800de22:	480d      	ldr	r0, [pc, #52]	; (800de58 <udp_disconnect+0x4c>)
 800de24:	f002 fc8a 	bl	801073c <iprintf>
 800de28:	e00f      	b.n	800de4a <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2200      	movs	r2, #0
 800de2e:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2200      	movs	r2, #0
 800de34:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2200      	movs	r2, #0
 800de3a:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	7c1b      	ldrb	r3, [r3, #16]
 800de40:	f023 0304 	bic.w	r3, r3, #4
 800de44:	b2da      	uxtb	r2, r3
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	741a      	strb	r2, [r3, #16]
}
 800de4a:	3708      	adds	r7, #8
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}
 800de50:	08013b20 	.word	0x08013b20
 800de54:	08013e38 	.word	0x08013e38
 800de58:	08013b74 	.word	0x08013b74

0800de5c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b084      	sub	sp, #16
 800de60:	af00      	add	r7, sp, #0
 800de62:	60f8      	str	r0, [r7, #12]
 800de64:	60b9      	str	r1, [r7, #8]
 800de66:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d107      	bne.n	800de7e <udp_recv+0x22>
 800de6e:	4b08      	ldr	r3, [pc, #32]	; (800de90 <udp_recv+0x34>)
 800de70:	f240 428a 	movw	r2, #1162	; 0x48a
 800de74:	4907      	ldr	r1, [pc, #28]	; (800de94 <udp_recv+0x38>)
 800de76:	4808      	ldr	r0, [pc, #32]	; (800de98 <udp_recv+0x3c>)
 800de78:	f002 fc60 	bl	801073c <iprintf>
 800de7c:	e005      	b.n	800de8a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	68ba      	ldr	r2, [r7, #8]
 800de82:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	687a      	ldr	r2, [r7, #4]
 800de88:	61da      	str	r2, [r3, #28]
}
 800de8a:	3710      	adds	r7, #16
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	08013b20 	.word	0x08013b20
 800de94:	08013e54 	.word	0x08013e54
 800de98:	08013b74 	.word	0x08013b74

0800de9c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b084      	sub	sp, #16
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d107      	bne.n	800deba <udp_remove+0x1e>
 800deaa:	4b19      	ldr	r3, [pc, #100]	; (800df10 <udp_remove+0x74>)
 800deac:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800deb0:	4918      	ldr	r1, [pc, #96]	; (800df14 <udp_remove+0x78>)
 800deb2:	4819      	ldr	r0, [pc, #100]	; (800df18 <udp_remove+0x7c>)
 800deb4:	f002 fc42 	bl	801073c <iprintf>
 800deb8:	e026      	b.n	800df08 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800deba:	4b18      	ldr	r3, [pc, #96]	; (800df1c <udp_remove+0x80>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	687a      	ldr	r2, [r7, #4]
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d105      	bne.n	800ded0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800dec4:	4b15      	ldr	r3, [pc, #84]	; (800df1c <udp_remove+0x80>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	4a14      	ldr	r2, [pc, #80]	; (800df1c <udp_remove+0x80>)
 800decc:	6013      	str	r3, [r2, #0]
 800dece:	e017      	b.n	800df00 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800ded0:	4b12      	ldr	r3, [pc, #72]	; (800df1c <udp_remove+0x80>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	60fb      	str	r3, [r7, #12]
 800ded6:	e010      	b.n	800defa <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	68db      	ldr	r3, [r3, #12]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d009      	beq.n	800def4 <udp_remove+0x58>
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	68db      	ldr	r3, [r3, #12]
 800dee4:	687a      	ldr	r2, [r7, #4]
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d104      	bne.n	800def4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	68da      	ldr	r2, [r3, #12]
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	60da      	str	r2, [r3, #12]
        break;
 800def2:	e005      	b.n	800df00 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	68db      	ldr	r3, [r3, #12]
 800def8:	60fb      	str	r3, [r7, #12]
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d1eb      	bne.n	800ded8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800df00:	6879      	ldr	r1, [r7, #4]
 800df02:	2000      	movs	r0, #0
 800df04:	f7f8 ffc8 	bl	8006e98 <memp_free>
}
 800df08:	3710      	adds	r7, #16
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
 800df0e:	bf00      	nop
 800df10:	08013b20 	.word	0x08013b20
 800df14:	08013e6c 	.word	0x08013e6c
 800df18:	08013b74 	.word	0x08013b74
 800df1c:	20008a1c 	.word	0x20008a1c

0800df20 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b082      	sub	sp, #8
 800df24:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800df26:	2000      	movs	r0, #0
 800df28:	f7f8 ff46 	bl	8006db8 <memp_malloc>
 800df2c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d007      	beq.n	800df44 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800df34:	2220      	movs	r2, #32
 800df36:	2100      	movs	r1, #0
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	f002 fd8f 	bl	8010a5c <memset>
    pcb->ttl = UDP_TTL;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	22ff      	movs	r2, #255	; 0xff
 800df42:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800df44:	687b      	ldr	r3, [r7, #4]
}
 800df46:	4618      	mov	r0, r3
 800df48:	3708      	adds	r7, #8
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
	...

0800df50 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800df50:	b480      	push	{r7}
 800df52:	b085      	sub	sp, #20
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
 800df58:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d01e      	beq.n	800df9e <udp_netif_ip_addr_changed+0x4e>
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d01a      	beq.n	800df9e <udp_netif_ip_addr_changed+0x4e>
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d017      	beq.n	800df9e <udp_netif_ip_addr_changed+0x4e>
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d013      	beq.n	800df9e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800df76:	4b0d      	ldr	r3, [pc, #52]	; (800dfac <udp_netif_ip_addr_changed+0x5c>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	60fb      	str	r3, [r7, #12]
 800df7c:	e00c      	b.n	800df98 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	681a      	ldr	r2, [r3, #0]
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	429a      	cmp	r2, r3
 800df88:	d103      	bne.n	800df92 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	681a      	ldr	r2, [r3, #0]
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	68db      	ldr	r3, [r3, #12]
 800df96:	60fb      	str	r3, [r7, #12]
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d1ef      	bne.n	800df7e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800df9e:	bf00      	nop
 800dfa0:	3714      	adds	r7, #20
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa8:	4770      	bx	lr
 800dfaa:	bf00      	nop
 800dfac:	20008a1c 	.word	0x20008a1c

0800dfb0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b082      	sub	sp, #8
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800dfb8:	4915      	ldr	r1, [pc, #84]	; (800e010 <etharp_free_entry+0x60>)
 800dfba:	687a      	ldr	r2, [r7, #4]
 800dfbc:	4613      	mov	r3, r2
 800dfbe:	005b      	lsls	r3, r3, #1
 800dfc0:	4413      	add	r3, r2
 800dfc2:	00db      	lsls	r3, r3, #3
 800dfc4:	440b      	add	r3, r1
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d013      	beq.n	800dff4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800dfcc:	4910      	ldr	r1, [pc, #64]	; (800e010 <etharp_free_entry+0x60>)
 800dfce:	687a      	ldr	r2, [r7, #4]
 800dfd0:	4613      	mov	r3, r2
 800dfd2:	005b      	lsls	r3, r3, #1
 800dfd4:	4413      	add	r3, r2
 800dfd6:	00db      	lsls	r3, r3, #3
 800dfd8:	440b      	add	r3, r1
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f7f9 fdd1 	bl	8007b84 <pbuf_free>
    arp_table[i].q = NULL;
 800dfe2:	490b      	ldr	r1, [pc, #44]	; (800e010 <etharp_free_entry+0x60>)
 800dfe4:	687a      	ldr	r2, [r7, #4]
 800dfe6:	4613      	mov	r3, r2
 800dfe8:	005b      	lsls	r3, r3, #1
 800dfea:	4413      	add	r3, r2
 800dfec:	00db      	lsls	r3, r3, #3
 800dfee:	440b      	add	r3, r1
 800dff0:	2200      	movs	r2, #0
 800dff2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800dff4:	4906      	ldr	r1, [pc, #24]	; (800e010 <etharp_free_entry+0x60>)
 800dff6:	687a      	ldr	r2, [r7, #4]
 800dff8:	4613      	mov	r3, r2
 800dffa:	005b      	lsls	r3, r3, #1
 800dffc:	4413      	add	r3, r2
 800dffe:	00db      	lsls	r3, r3, #3
 800e000:	440b      	add	r3, r1
 800e002:	3314      	adds	r3, #20
 800e004:	2200      	movs	r2, #0
 800e006:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e008:	bf00      	nop
 800e00a:	3708      	adds	r7, #8
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}
 800e010:	20008a20 	.word	0x20008a20

0800e014 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b082      	sub	sp, #8
 800e018:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e01a:	2300      	movs	r3, #0
 800e01c:	607b      	str	r3, [r7, #4]
 800e01e:	e096      	b.n	800e14e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e020:	494f      	ldr	r1, [pc, #316]	; (800e160 <etharp_tmr+0x14c>)
 800e022:	687a      	ldr	r2, [r7, #4]
 800e024:	4613      	mov	r3, r2
 800e026:	005b      	lsls	r3, r3, #1
 800e028:	4413      	add	r3, r2
 800e02a:	00db      	lsls	r3, r3, #3
 800e02c:	440b      	add	r3, r1
 800e02e:	3314      	adds	r3, #20
 800e030:	781b      	ldrb	r3, [r3, #0]
 800e032:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e034:	78fb      	ldrb	r3, [r7, #3]
 800e036:	2b00      	cmp	r3, #0
 800e038:	f000 8086 	beq.w	800e148 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800e03c:	4948      	ldr	r1, [pc, #288]	; (800e160 <etharp_tmr+0x14c>)
 800e03e:	687a      	ldr	r2, [r7, #4]
 800e040:	4613      	mov	r3, r2
 800e042:	005b      	lsls	r3, r3, #1
 800e044:	4413      	add	r3, r2
 800e046:	00db      	lsls	r3, r3, #3
 800e048:	440b      	add	r3, r1
 800e04a:	3312      	adds	r3, #18
 800e04c:	881b      	ldrh	r3, [r3, #0]
 800e04e:	3301      	adds	r3, #1
 800e050:	b298      	uxth	r0, r3
 800e052:	4943      	ldr	r1, [pc, #268]	; (800e160 <etharp_tmr+0x14c>)
 800e054:	687a      	ldr	r2, [r7, #4]
 800e056:	4613      	mov	r3, r2
 800e058:	005b      	lsls	r3, r3, #1
 800e05a:	4413      	add	r3, r2
 800e05c:	00db      	lsls	r3, r3, #3
 800e05e:	440b      	add	r3, r1
 800e060:	3312      	adds	r3, #18
 800e062:	4602      	mov	r2, r0
 800e064:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e066:	493e      	ldr	r1, [pc, #248]	; (800e160 <etharp_tmr+0x14c>)
 800e068:	687a      	ldr	r2, [r7, #4]
 800e06a:	4613      	mov	r3, r2
 800e06c:	005b      	lsls	r3, r3, #1
 800e06e:	4413      	add	r3, r2
 800e070:	00db      	lsls	r3, r3, #3
 800e072:	440b      	add	r3, r1
 800e074:	3312      	adds	r3, #18
 800e076:	881b      	ldrh	r3, [r3, #0]
 800e078:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e07c:	d215      	bcs.n	800e0aa <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e07e:	4938      	ldr	r1, [pc, #224]	; (800e160 <etharp_tmr+0x14c>)
 800e080:	687a      	ldr	r2, [r7, #4]
 800e082:	4613      	mov	r3, r2
 800e084:	005b      	lsls	r3, r3, #1
 800e086:	4413      	add	r3, r2
 800e088:	00db      	lsls	r3, r3, #3
 800e08a:	440b      	add	r3, r1
 800e08c:	3314      	adds	r3, #20
 800e08e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e090:	2b01      	cmp	r3, #1
 800e092:	d10e      	bne.n	800e0b2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e094:	4932      	ldr	r1, [pc, #200]	; (800e160 <etharp_tmr+0x14c>)
 800e096:	687a      	ldr	r2, [r7, #4]
 800e098:	4613      	mov	r3, r2
 800e09a:	005b      	lsls	r3, r3, #1
 800e09c:	4413      	add	r3, r2
 800e09e:	00db      	lsls	r3, r3, #3
 800e0a0:	440b      	add	r3, r1
 800e0a2:	3312      	adds	r3, #18
 800e0a4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e0a6:	2b04      	cmp	r3, #4
 800e0a8:	d903      	bls.n	800e0b2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f7ff ff80 	bl	800dfb0 <etharp_free_entry>
 800e0b0:	e04a      	b.n	800e148 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e0b2:	492b      	ldr	r1, [pc, #172]	; (800e160 <etharp_tmr+0x14c>)
 800e0b4:	687a      	ldr	r2, [r7, #4]
 800e0b6:	4613      	mov	r3, r2
 800e0b8:	005b      	lsls	r3, r3, #1
 800e0ba:	4413      	add	r3, r2
 800e0bc:	00db      	lsls	r3, r3, #3
 800e0be:	440b      	add	r3, r1
 800e0c0:	3314      	adds	r3, #20
 800e0c2:	781b      	ldrb	r3, [r3, #0]
 800e0c4:	2b03      	cmp	r3, #3
 800e0c6:	d10a      	bne.n	800e0de <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e0c8:	4925      	ldr	r1, [pc, #148]	; (800e160 <etharp_tmr+0x14c>)
 800e0ca:	687a      	ldr	r2, [r7, #4]
 800e0cc:	4613      	mov	r3, r2
 800e0ce:	005b      	lsls	r3, r3, #1
 800e0d0:	4413      	add	r3, r2
 800e0d2:	00db      	lsls	r3, r3, #3
 800e0d4:	440b      	add	r3, r1
 800e0d6:	3314      	adds	r3, #20
 800e0d8:	2204      	movs	r2, #4
 800e0da:	701a      	strb	r2, [r3, #0]
 800e0dc:	e034      	b.n	800e148 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e0de:	4920      	ldr	r1, [pc, #128]	; (800e160 <etharp_tmr+0x14c>)
 800e0e0:	687a      	ldr	r2, [r7, #4]
 800e0e2:	4613      	mov	r3, r2
 800e0e4:	005b      	lsls	r3, r3, #1
 800e0e6:	4413      	add	r3, r2
 800e0e8:	00db      	lsls	r3, r3, #3
 800e0ea:	440b      	add	r3, r1
 800e0ec:	3314      	adds	r3, #20
 800e0ee:	781b      	ldrb	r3, [r3, #0]
 800e0f0:	2b04      	cmp	r3, #4
 800e0f2:	d10a      	bne.n	800e10a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e0f4:	491a      	ldr	r1, [pc, #104]	; (800e160 <etharp_tmr+0x14c>)
 800e0f6:	687a      	ldr	r2, [r7, #4]
 800e0f8:	4613      	mov	r3, r2
 800e0fa:	005b      	lsls	r3, r3, #1
 800e0fc:	4413      	add	r3, r2
 800e0fe:	00db      	lsls	r3, r3, #3
 800e100:	440b      	add	r3, r1
 800e102:	3314      	adds	r3, #20
 800e104:	2202      	movs	r2, #2
 800e106:	701a      	strb	r2, [r3, #0]
 800e108:	e01e      	b.n	800e148 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e10a:	4915      	ldr	r1, [pc, #84]	; (800e160 <etharp_tmr+0x14c>)
 800e10c:	687a      	ldr	r2, [r7, #4]
 800e10e:	4613      	mov	r3, r2
 800e110:	005b      	lsls	r3, r3, #1
 800e112:	4413      	add	r3, r2
 800e114:	00db      	lsls	r3, r3, #3
 800e116:	440b      	add	r3, r1
 800e118:	3314      	adds	r3, #20
 800e11a:	781b      	ldrb	r3, [r3, #0]
 800e11c:	2b01      	cmp	r3, #1
 800e11e:	d113      	bne.n	800e148 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e120:	490f      	ldr	r1, [pc, #60]	; (800e160 <etharp_tmr+0x14c>)
 800e122:	687a      	ldr	r2, [r7, #4]
 800e124:	4613      	mov	r3, r2
 800e126:	005b      	lsls	r3, r3, #1
 800e128:	4413      	add	r3, r2
 800e12a:	00db      	lsls	r3, r3, #3
 800e12c:	440b      	add	r3, r1
 800e12e:	3308      	adds	r3, #8
 800e130:	6818      	ldr	r0, [r3, #0]
 800e132:	687a      	ldr	r2, [r7, #4]
 800e134:	4613      	mov	r3, r2
 800e136:	005b      	lsls	r3, r3, #1
 800e138:	4413      	add	r3, r2
 800e13a:	00db      	lsls	r3, r3, #3
 800e13c:	4a08      	ldr	r2, [pc, #32]	; (800e160 <etharp_tmr+0x14c>)
 800e13e:	4413      	add	r3, r2
 800e140:	3304      	adds	r3, #4
 800e142:	4619      	mov	r1, r3
 800e144:	f000 fe6e 	bl	800ee24 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	3301      	adds	r3, #1
 800e14c:	607b      	str	r3, [r7, #4]
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2b09      	cmp	r3, #9
 800e152:	f77f af65 	ble.w	800e020 <etharp_tmr+0xc>
      }
    }
  }
}
 800e156:	bf00      	nop
 800e158:	bf00      	nop
 800e15a:	3708      	adds	r7, #8
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}
 800e160:	20008a20 	.word	0x20008a20

0800e164 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b08a      	sub	sp, #40	; 0x28
 800e168:	af00      	add	r7, sp, #0
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	460b      	mov	r3, r1
 800e16e:	607a      	str	r2, [r7, #4]
 800e170:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e172:	230a      	movs	r3, #10
 800e174:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e176:	230a      	movs	r3, #10
 800e178:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800e17a:	230a      	movs	r3, #10
 800e17c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800e17e:	2300      	movs	r3, #0
 800e180:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800e182:	230a      	movs	r3, #10
 800e184:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e186:	2300      	movs	r3, #0
 800e188:	83bb      	strh	r3, [r7, #28]
 800e18a:	2300      	movs	r3, #0
 800e18c:	837b      	strh	r3, [r7, #26]
 800e18e:	2300      	movs	r3, #0
 800e190:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e192:	2300      	movs	r3, #0
 800e194:	843b      	strh	r3, [r7, #32]
 800e196:	e0ae      	b.n	800e2f6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800e198:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e19c:	49a6      	ldr	r1, [pc, #664]	; (800e438 <etharp_find_entry+0x2d4>)
 800e19e:	4613      	mov	r3, r2
 800e1a0:	005b      	lsls	r3, r3, #1
 800e1a2:	4413      	add	r3, r2
 800e1a4:	00db      	lsls	r3, r3, #3
 800e1a6:	440b      	add	r3, r1
 800e1a8:	3314      	adds	r3, #20
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e1ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e1b2:	2b0a      	cmp	r3, #10
 800e1b4:	d105      	bne.n	800e1c2 <etharp_find_entry+0x5e>
 800e1b6:	7dfb      	ldrb	r3, [r7, #23]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d102      	bne.n	800e1c2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800e1bc:	8c3b      	ldrh	r3, [r7, #32]
 800e1be:	847b      	strh	r3, [r7, #34]	; 0x22
 800e1c0:	e095      	b.n	800e2ee <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e1c2:	7dfb      	ldrb	r3, [r7, #23]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	f000 8092 	beq.w	800e2ee <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e1ca:	7dfb      	ldrb	r3, [r7, #23]
 800e1cc:	2b01      	cmp	r3, #1
 800e1ce:	d009      	beq.n	800e1e4 <etharp_find_entry+0x80>
 800e1d0:	7dfb      	ldrb	r3, [r7, #23]
 800e1d2:	2b01      	cmp	r3, #1
 800e1d4:	d806      	bhi.n	800e1e4 <etharp_find_entry+0x80>
 800e1d6:	4b99      	ldr	r3, [pc, #612]	; (800e43c <etharp_find_entry+0x2d8>)
 800e1d8:	f240 1223 	movw	r2, #291	; 0x123
 800e1dc:	4998      	ldr	r1, [pc, #608]	; (800e440 <etharp_find_entry+0x2dc>)
 800e1de:	4899      	ldr	r0, [pc, #612]	; (800e444 <etharp_find_entry+0x2e0>)
 800e1e0:	f002 faac 	bl	801073c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d020      	beq.n	800e22c <etharp_find_entry+0xc8>
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	6819      	ldr	r1, [r3, #0]
 800e1ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e1f2:	4891      	ldr	r0, [pc, #580]	; (800e438 <etharp_find_entry+0x2d4>)
 800e1f4:	4613      	mov	r3, r2
 800e1f6:	005b      	lsls	r3, r3, #1
 800e1f8:	4413      	add	r3, r2
 800e1fa:	00db      	lsls	r3, r3, #3
 800e1fc:	4403      	add	r3, r0
 800e1fe:	3304      	adds	r3, #4
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	4299      	cmp	r1, r3
 800e204:	d112      	bne.n	800e22c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d00c      	beq.n	800e226 <etharp_find_entry+0xc2>
 800e20c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e210:	4989      	ldr	r1, [pc, #548]	; (800e438 <etharp_find_entry+0x2d4>)
 800e212:	4613      	mov	r3, r2
 800e214:	005b      	lsls	r3, r3, #1
 800e216:	4413      	add	r3, r2
 800e218:	00db      	lsls	r3, r3, #3
 800e21a:	440b      	add	r3, r1
 800e21c:	3308      	adds	r3, #8
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	687a      	ldr	r2, [r7, #4]
 800e222:	429a      	cmp	r2, r3
 800e224:	d102      	bne.n	800e22c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e226:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e22a:	e100      	b.n	800e42e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e22c:	7dfb      	ldrb	r3, [r7, #23]
 800e22e:	2b01      	cmp	r3, #1
 800e230:	d140      	bne.n	800e2b4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e232:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e236:	4980      	ldr	r1, [pc, #512]	; (800e438 <etharp_find_entry+0x2d4>)
 800e238:	4613      	mov	r3, r2
 800e23a:	005b      	lsls	r3, r3, #1
 800e23c:	4413      	add	r3, r2
 800e23e:	00db      	lsls	r3, r3, #3
 800e240:	440b      	add	r3, r1
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d01a      	beq.n	800e27e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800e248:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e24c:	497a      	ldr	r1, [pc, #488]	; (800e438 <etharp_find_entry+0x2d4>)
 800e24e:	4613      	mov	r3, r2
 800e250:	005b      	lsls	r3, r3, #1
 800e252:	4413      	add	r3, r2
 800e254:	00db      	lsls	r3, r3, #3
 800e256:	440b      	add	r3, r1
 800e258:	3312      	adds	r3, #18
 800e25a:	881b      	ldrh	r3, [r3, #0]
 800e25c:	8bba      	ldrh	r2, [r7, #28]
 800e25e:	429a      	cmp	r2, r3
 800e260:	d845      	bhi.n	800e2ee <etharp_find_entry+0x18a>
            old_queue = i;
 800e262:	8c3b      	ldrh	r3, [r7, #32]
 800e264:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800e266:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e26a:	4973      	ldr	r1, [pc, #460]	; (800e438 <etharp_find_entry+0x2d4>)
 800e26c:	4613      	mov	r3, r2
 800e26e:	005b      	lsls	r3, r3, #1
 800e270:	4413      	add	r3, r2
 800e272:	00db      	lsls	r3, r3, #3
 800e274:	440b      	add	r3, r1
 800e276:	3312      	adds	r3, #18
 800e278:	881b      	ldrh	r3, [r3, #0]
 800e27a:	83bb      	strh	r3, [r7, #28]
 800e27c:	e037      	b.n	800e2ee <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e27e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e282:	496d      	ldr	r1, [pc, #436]	; (800e438 <etharp_find_entry+0x2d4>)
 800e284:	4613      	mov	r3, r2
 800e286:	005b      	lsls	r3, r3, #1
 800e288:	4413      	add	r3, r2
 800e28a:	00db      	lsls	r3, r3, #3
 800e28c:	440b      	add	r3, r1
 800e28e:	3312      	adds	r3, #18
 800e290:	881b      	ldrh	r3, [r3, #0]
 800e292:	8b7a      	ldrh	r2, [r7, #26]
 800e294:	429a      	cmp	r2, r3
 800e296:	d82a      	bhi.n	800e2ee <etharp_find_entry+0x18a>
            old_pending = i;
 800e298:	8c3b      	ldrh	r3, [r7, #32]
 800e29a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800e29c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e2a0:	4965      	ldr	r1, [pc, #404]	; (800e438 <etharp_find_entry+0x2d4>)
 800e2a2:	4613      	mov	r3, r2
 800e2a4:	005b      	lsls	r3, r3, #1
 800e2a6:	4413      	add	r3, r2
 800e2a8:	00db      	lsls	r3, r3, #3
 800e2aa:	440b      	add	r3, r1
 800e2ac:	3312      	adds	r3, #18
 800e2ae:	881b      	ldrh	r3, [r3, #0]
 800e2b0:	837b      	strh	r3, [r7, #26]
 800e2b2:	e01c      	b.n	800e2ee <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e2b4:	7dfb      	ldrb	r3, [r7, #23]
 800e2b6:	2b01      	cmp	r3, #1
 800e2b8:	d919      	bls.n	800e2ee <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e2ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e2be:	495e      	ldr	r1, [pc, #376]	; (800e438 <etharp_find_entry+0x2d4>)
 800e2c0:	4613      	mov	r3, r2
 800e2c2:	005b      	lsls	r3, r3, #1
 800e2c4:	4413      	add	r3, r2
 800e2c6:	00db      	lsls	r3, r3, #3
 800e2c8:	440b      	add	r3, r1
 800e2ca:	3312      	adds	r3, #18
 800e2cc:	881b      	ldrh	r3, [r3, #0]
 800e2ce:	8b3a      	ldrh	r2, [r7, #24]
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	d80c      	bhi.n	800e2ee <etharp_find_entry+0x18a>
            old_stable = i;
 800e2d4:	8c3b      	ldrh	r3, [r7, #32]
 800e2d6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800e2d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e2dc:	4956      	ldr	r1, [pc, #344]	; (800e438 <etharp_find_entry+0x2d4>)
 800e2de:	4613      	mov	r3, r2
 800e2e0:	005b      	lsls	r3, r3, #1
 800e2e2:	4413      	add	r3, r2
 800e2e4:	00db      	lsls	r3, r3, #3
 800e2e6:	440b      	add	r3, r1
 800e2e8:	3312      	adds	r3, #18
 800e2ea:	881b      	ldrh	r3, [r3, #0]
 800e2ec:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e2ee:	8c3b      	ldrh	r3, [r7, #32]
 800e2f0:	3301      	adds	r3, #1
 800e2f2:	b29b      	uxth	r3, r3
 800e2f4:	843b      	strh	r3, [r7, #32]
 800e2f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e2fa:	2b09      	cmp	r3, #9
 800e2fc:	f77f af4c 	ble.w	800e198 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e300:	7afb      	ldrb	r3, [r7, #11]
 800e302:	f003 0302 	and.w	r3, r3, #2
 800e306:	2b00      	cmp	r3, #0
 800e308:	d108      	bne.n	800e31c <etharp_find_entry+0x1b8>
 800e30a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e30e:	2b0a      	cmp	r3, #10
 800e310:	d107      	bne.n	800e322 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e312:	7afb      	ldrb	r3, [r7, #11]
 800e314:	f003 0301 	and.w	r3, r3, #1
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d102      	bne.n	800e322 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800e31c:	f04f 33ff 	mov.w	r3, #4294967295
 800e320:	e085      	b.n	800e42e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e322:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e326:	2b09      	cmp	r3, #9
 800e328:	dc02      	bgt.n	800e330 <etharp_find_entry+0x1cc>
    i = empty;
 800e32a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e32c:	843b      	strh	r3, [r7, #32]
 800e32e:	e039      	b.n	800e3a4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e330:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800e334:	2b09      	cmp	r3, #9
 800e336:	dc14      	bgt.n	800e362 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800e338:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e33a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e33c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e340:	493d      	ldr	r1, [pc, #244]	; (800e438 <etharp_find_entry+0x2d4>)
 800e342:	4613      	mov	r3, r2
 800e344:	005b      	lsls	r3, r3, #1
 800e346:	4413      	add	r3, r2
 800e348:	00db      	lsls	r3, r3, #3
 800e34a:	440b      	add	r3, r1
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d018      	beq.n	800e384 <etharp_find_entry+0x220>
 800e352:	4b3a      	ldr	r3, [pc, #232]	; (800e43c <etharp_find_entry+0x2d8>)
 800e354:	f240 126d 	movw	r2, #365	; 0x16d
 800e358:	493b      	ldr	r1, [pc, #236]	; (800e448 <etharp_find_entry+0x2e4>)
 800e35a:	483a      	ldr	r0, [pc, #232]	; (800e444 <etharp_find_entry+0x2e0>)
 800e35c:	f002 f9ee 	bl	801073c <iprintf>
 800e360:	e010      	b.n	800e384 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e362:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e366:	2b09      	cmp	r3, #9
 800e368:	dc02      	bgt.n	800e370 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800e36a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e36c:	843b      	strh	r3, [r7, #32]
 800e36e:	e009      	b.n	800e384 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e370:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e374:	2b09      	cmp	r3, #9
 800e376:	dc02      	bgt.n	800e37e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800e378:	8bfb      	ldrh	r3, [r7, #30]
 800e37a:	843b      	strh	r3, [r7, #32]
 800e37c:	e002      	b.n	800e384 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800e37e:	f04f 33ff 	mov.w	r3, #4294967295
 800e382:	e054      	b.n	800e42e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e384:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e388:	2b09      	cmp	r3, #9
 800e38a:	dd06      	ble.n	800e39a <etharp_find_entry+0x236>
 800e38c:	4b2b      	ldr	r3, [pc, #172]	; (800e43c <etharp_find_entry+0x2d8>)
 800e38e:	f240 127f 	movw	r2, #383	; 0x17f
 800e392:	492e      	ldr	r1, [pc, #184]	; (800e44c <etharp_find_entry+0x2e8>)
 800e394:	482b      	ldr	r0, [pc, #172]	; (800e444 <etharp_find_entry+0x2e0>)
 800e396:	f002 f9d1 	bl	801073c <iprintf>
    etharp_free_entry(i);
 800e39a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7ff fe06 	bl	800dfb0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e3a4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e3a8:	2b09      	cmp	r3, #9
 800e3aa:	dd06      	ble.n	800e3ba <etharp_find_entry+0x256>
 800e3ac:	4b23      	ldr	r3, [pc, #140]	; (800e43c <etharp_find_entry+0x2d8>)
 800e3ae:	f240 1283 	movw	r2, #387	; 0x183
 800e3b2:	4926      	ldr	r1, [pc, #152]	; (800e44c <etharp_find_entry+0x2e8>)
 800e3b4:	4823      	ldr	r0, [pc, #140]	; (800e444 <etharp_find_entry+0x2e0>)
 800e3b6:	f002 f9c1 	bl	801073c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e3ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e3be:	491e      	ldr	r1, [pc, #120]	; (800e438 <etharp_find_entry+0x2d4>)
 800e3c0:	4613      	mov	r3, r2
 800e3c2:	005b      	lsls	r3, r3, #1
 800e3c4:	4413      	add	r3, r2
 800e3c6:	00db      	lsls	r3, r3, #3
 800e3c8:	440b      	add	r3, r1
 800e3ca:	3314      	adds	r3, #20
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d006      	beq.n	800e3e0 <etharp_find_entry+0x27c>
 800e3d2:	4b1a      	ldr	r3, [pc, #104]	; (800e43c <etharp_find_entry+0x2d8>)
 800e3d4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800e3d8:	491d      	ldr	r1, [pc, #116]	; (800e450 <etharp_find_entry+0x2ec>)
 800e3da:	481a      	ldr	r0, [pc, #104]	; (800e444 <etharp_find_entry+0x2e0>)
 800e3dc:	f002 f9ae 	bl	801073c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d00b      	beq.n	800e3fe <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800e3e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	6819      	ldr	r1, [r3, #0]
 800e3ee:	4812      	ldr	r0, [pc, #72]	; (800e438 <etharp_find_entry+0x2d4>)
 800e3f0:	4613      	mov	r3, r2
 800e3f2:	005b      	lsls	r3, r3, #1
 800e3f4:	4413      	add	r3, r2
 800e3f6:	00db      	lsls	r3, r3, #3
 800e3f8:	4403      	add	r3, r0
 800e3fa:	3304      	adds	r3, #4
 800e3fc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800e3fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e402:	490d      	ldr	r1, [pc, #52]	; (800e438 <etharp_find_entry+0x2d4>)
 800e404:	4613      	mov	r3, r2
 800e406:	005b      	lsls	r3, r3, #1
 800e408:	4413      	add	r3, r2
 800e40a:	00db      	lsls	r3, r3, #3
 800e40c:	440b      	add	r3, r1
 800e40e:	3312      	adds	r3, #18
 800e410:	2200      	movs	r2, #0
 800e412:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800e414:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e418:	4907      	ldr	r1, [pc, #28]	; (800e438 <etharp_find_entry+0x2d4>)
 800e41a:	4613      	mov	r3, r2
 800e41c:	005b      	lsls	r3, r3, #1
 800e41e:	4413      	add	r3, r2
 800e420:	00db      	lsls	r3, r3, #3
 800e422:	440b      	add	r3, r1
 800e424:	3308      	adds	r3, #8
 800e426:	687a      	ldr	r2, [r7, #4]
 800e428:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800e42a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800e42e:	4618      	mov	r0, r3
 800e430:	3728      	adds	r7, #40	; 0x28
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop
 800e438:	20008a20 	.word	0x20008a20
 800e43c:	08013e84 	.word	0x08013e84
 800e440:	08013ebc 	.word	0x08013ebc
 800e444:	08013efc 	.word	0x08013efc
 800e448:	08013f24 	.word	0x08013f24
 800e44c:	08013f3c 	.word	0x08013f3c
 800e450:	08013f50 	.word	0x08013f50

0800e454 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b088      	sub	sp, #32
 800e458:	af02      	add	r7, sp, #8
 800e45a:	60f8      	str	r0, [r7, #12]
 800e45c:	60b9      	str	r1, [r7, #8]
 800e45e:	607a      	str	r2, [r7, #4]
 800e460:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e468:	2b06      	cmp	r3, #6
 800e46a:	d006      	beq.n	800e47a <etharp_update_arp_entry+0x26>
 800e46c:	4b48      	ldr	r3, [pc, #288]	; (800e590 <etharp_update_arp_entry+0x13c>)
 800e46e:	f240 12a9 	movw	r2, #425	; 0x1a9
 800e472:	4948      	ldr	r1, [pc, #288]	; (800e594 <etharp_update_arp_entry+0x140>)
 800e474:	4848      	ldr	r0, [pc, #288]	; (800e598 <etharp_update_arp_entry+0x144>)
 800e476:	f002 f961 	bl	801073c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d012      	beq.n	800e4a6 <etharp_update_arp_entry+0x52>
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d00e      	beq.n	800e4a6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	68f9      	ldr	r1, [r7, #12]
 800e48e:	4618      	mov	r0, r3
 800e490:	f001 f8fe 	bl	800f690 <ip4_addr_isbroadcast_u32>
 800e494:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800e496:	2b00      	cmp	r3, #0
 800e498:	d105      	bne.n	800e4a6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e4a2:	2be0      	cmp	r3, #224	; 0xe0
 800e4a4:	d102      	bne.n	800e4ac <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e4a6:	f06f 030f 	mvn.w	r3, #15
 800e4aa:	e06c      	b.n	800e586 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e4ac:	78fb      	ldrb	r3, [r7, #3]
 800e4ae:	68fa      	ldr	r2, [r7, #12]
 800e4b0:	4619      	mov	r1, r3
 800e4b2:	68b8      	ldr	r0, [r7, #8]
 800e4b4:	f7ff fe56 	bl	800e164 <etharp_find_entry>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800e4bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	da02      	bge.n	800e4ca <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800e4c4:	8afb      	ldrh	r3, [r7, #22]
 800e4c6:	b25b      	sxtb	r3, r3
 800e4c8:	e05d      	b.n	800e586 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e4ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e4ce:	4933      	ldr	r1, [pc, #204]	; (800e59c <etharp_update_arp_entry+0x148>)
 800e4d0:	4613      	mov	r3, r2
 800e4d2:	005b      	lsls	r3, r3, #1
 800e4d4:	4413      	add	r3, r2
 800e4d6:	00db      	lsls	r3, r3, #3
 800e4d8:	440b      	add	r3, r1
 800e4da:	3314      	adds	r3, #20
 800e4dc:	2202      	movs	r2, #2
 800e4de:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e4e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e4e4:	492d      	ldr	r1, [pc, #180]	; (800e59c <etharp_update_arp_entry+0x148>)
 800e4e6:	4613      	mov	r3, r2
 800e4e8:	005b      	lsls	r3, r3, #1
 800e4ea:	4413      	add	r3, r2
 800e4ec:	00db      	lsls	r3, r3, #3
 800e4ee:	440b      	add	r3, r1
 800e4f0:	3308      	adds	r3, #8
 800e4f2:	68fa      	ldr	r2, [r7, #12]
 800e4f4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e4f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e4fa:	4613      	mov	r3, r2
 800e4fc:	005b      	lsls	r3, r3, #1
 800e4fe:	4413      	add	r3, r2
 800e500:	00db      	lsls	r3, r3, #3
 800e502:	3308      	adds	r3, #8
 800e504:	4a25      	ldr	r2, [pc, #148]	; (800e59c <etharp_update_arp_entry+0x148>)
 800e506:	4413      	add	r3, r2
 800e508:	3304      	adds	r3, #4
 800e50a:	2206      	movs	r2, #6
 800e50c:	6879      	ldr	r1, [r7, #4]
 800e50e:	4618      	mov	r0, r3
 800e510:	f002 fb2d 	bl	8010b6e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e514:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e518:	4920      	ldr	r1, [pc, #128]	; (800e59c <etharp_update_arp_entry+0x148>)
 800e51a:	4613      	mov	r3, r2
 800e51c:	005b      	lsls	r3, r3, #1
 800e51e:	4413      	add	r3, r2
 800e520:	00db      	lsls	r3, r3, #3
 800e522:	440b      	add	r3, r1
 800e524:	3312      	adds	r3, #18
 800e526:	2200      	movs	r2, #0
 800e528:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e52a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e52e:	491b      	ldr	r1, [pc, #108]	; (800e59c <etharp_update_arp_entry+0x148>)
 800e530:	4613      	mov	r3, r2
 800e532:	005b      	lsls	r3, r3, #1
 800e534:	4413      	add	r3, r2
 800e536:	00db      	lsls	r3, r3, #3
 800e538:	440b      	add	r3, r1
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d021      	beq.n	800e584 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e540:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e544:	4915      	ldr	r1, [pc, #84]	; (800e59c <etharp_update_arp_entry+0x148>)
 800e546:	4613      	mov	r3, r2
 800e548:	005b      	lsls	r3, r3, #1
 800e54a:	4413      	add	r3, r2
 800e54c:	00db      	lsls	r3, r3, #3
 800e54e:	440b      	add	r3, r1
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e554:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e558:	4910      	ldr	r1, [pc, #64]	; (800e59c <etharp_update_arp_entry+0x148>)
 800e55a:	4613      	mov	r3, r2
 800e55c:	005b      	lsls	r3, r3, #1
 800e55e:	4413      	add	r3, r2
 800e560:	00db      	lsls	r3, r3, #3
 800e562:	440b      	add	r3, r1
 800e564:	2200      	movs	r2, #0
 800e566:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e56e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e572:	9300      	str	r3, [sp, #0]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	6939      	ldr	r1, [r7, #16]
 800e578:	68f8      	ldr	r0, [r7, #12]
 800e57a:	f001 ff97 	bl	80104ac <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e57e:	6938      	ldr	r0, [r7, #16]
 800e580:	f7f9 fb00 	bl	8007b84 <pbuf_free>
  }
  return ERR_OK;
 800e584:	2300      	movs	r3, #0
}
 800e586:	4618      	mov	r0, r3
 800e588:	3718      	adds	r7, #24
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}
 800e58e:	bf00      	nop
 800e590:	08013e84 	.word	0x08013e84
 800e594:	08013f7c 	.word	0x08013f7c
 800e598:	08013efc 	.word	0x08013efc
 800e59c:	20008a20 	.word	0x20008a20

0800e5a0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b084      	sub	sp, #16
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	60fb      	str	r3, [r7, #12]
 800e5ac:	e01e      	b.n	800e5ec <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800e5ae:	4913      	ldr	r1, [pc, #76]	; (800e5fc <etharp_cleanup_netif+0x5c>)
 800e5b0:	68fa      	ldr	r2, [r7, #12]
 800e5b2:	4613      	mov	r3, r2
 800e5b4:	005b      	lsls	r3, r3, #1
 800e5b6:	4413      	add	r3, r2
 800e5b8:	00db      	lsls	r3, r3, #3
 800e5ba:	440b      	add	r3, r1
 800e5bc:	3314      	adds	r3, #20
 800e5be:	781b      	ldrb	r3, [r3, #0]
 800e5c0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e5c2:	7afb      	ldrb	r3, [r7, #11]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d00e      	beq.n	800e5e6 <etharp_cleanup_netif+0x46>
 800e5c8:	490c      	ldr	r1, [pc, #48]	; (800e5fc <etharp_cleanup_netif+0x5c>)
 800e5ca:	68fa      	ldr	r2, [r7, #12]
 800e5cc:	4613      	mov	r3, r2
 800e5ce:	005b      	lsls	r3, r3, #1
 800e5d0:	4413      	add	r3, r2
 800e5d2:	00db      	lsls	r3, r3, #3
 800e5d4:	440b      	add	r3, r1
 800e5d6:	3308      	adds	r3, #8
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	687a      	ldr	r2, [r7, #4]
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d102      	bne.n	800e5e6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800e5e0:	68f8      	ldr	r0, [r7, #12]
 800e5e2:	f7ff fce5 	bl	800dfb0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	3301      	adds	r3, #1
 800e5ea:	60fb      	str	r3, [r7, #12]
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	2b09      	cmp	r3, #9
 800e5f0:	dddd      	ble.n	800e5ae <etharp_cleanup_netif+0xe>
    }
  }
}
 800e5f2:	bf00      	nop
 800e5f4:	bf00      	nop
 800e5f6:	3710      	adds	r7, #16
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}
 800e5fc:	20008a20 	.word	0x20008a20

0800e600 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800e600:	b5b0      	push	{r4, r5, r7, lr}
 800e602:	b08a      	sub	sp, #40	; 0x28
 800e604:	af04      	add	r7, sp, #16
 800e606:	6078      	str	r0, [r7, #4]
 800e608:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d107      	bne.n	800e620 <etharp_input+0x20>
 800e610:	4b3d      	ldr	r3, [pc, #244]	; (800e708 <etharp_input+0x108>)
 800e612:	f240 228a 	movw	r2, #650	; 0x28a
 800e616:	493d      	ldr	r1, [pc, #244]	; (800e70c <etharp_input+0x10c>)
 800e618:	483d      	ldr	r0, [pc, #244]	; (800e710 <etharp_input+0x110>)
 800e61a:	f002 f88f 	bl	801073c <iprintf>
 800e61e:	e06f      	b.n	800e700 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	685b      	ldr	r3, [r3, #4]
 800e624:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e626:	693b      	ldr	r3, [r7, #16]
 800e628:	881b      	ldrh	r3, [r3, #0]
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e630:	d10c      	bne.n	800e64c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e636:	2b06      	cmp	r3, #6
 800e638:	d108      	bne.n	800e64c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e63a:	693b      	ldr	r3, [r7, #16]
 800e63c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e63e:	2b04      	cmp	r3, #4
 800e640:	d104      	bne.n	800e64c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e642:	693b      	ldr	r3, [r7, #16]
 800e644:	885b      	ldrh	r3, [r3, #2]
 800e646:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e648:	2b08      	cmp	r3, #8
 800e64a:	d003      	beq.n	800e654 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f7f9 fa99 	bl	8007b84 <pbuf_free>
    return;
 800e652:	e055      	b.n	800e700 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e654:	693b      	ldr	r3, [r7, #16]
 800e656:	330e      	adds	r3, #14
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	3318      	adds	r3, #24
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	3304      	adds	r3, #4
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d102      	bne.n	800e674 <etharp_input+0x74>
    for_us = 0;
 800e66e:	2300      	movs	r3, #0
 800e670:	75fb      	strb	r3, [r7, #23]
 800e672:	e009      	b.n	800e688 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e674:	68ba      	ldr	r2, [r7, #8]
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	3304      	adds	r3, #4
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	bf0c      	ite	eq
 800e680:	2301      	moveq	r3, #1
 800e682:	2300      	movne	r3, #0
 800e684:	b2db      	uxtb	r3, r3
 800e686:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e688:	693b      	ldr	r3, [r7, #16]
 800e68a:	f103 0208 	add.w	r2, r3, #8
 800e68e:	7dfb      	ldrb	r3, [r7, #23]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d001      	beq.n	800e698 <etharp_input+0x98>
 800e694:	2301      	movs	r3, #1
 800e696:	e000      	b.n	800e69a <etharp_input+0x9a>
 800e698:	2302      	movs	r3, #2
 800e69a:	f107 010c 	add.w	r1, r7, #12
 800e69e:	6838      	ldr	r0, [r7, #0]
 800e6a0:	f7ff fed8 	bl	800e454 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e6a4:	693b      	ldr	r3, [r7, #16]
 800e6a6:	88db      	ldrh	r3, [r3, #6]
 800e6a8:	b29b      	uxth	r3, r3
 800e6aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e6ae:	d003      	beq.n	800e6b8 <etharp_input+0xb8>
 800e6b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6b4:	d01e      	beq.n	800e6f4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800e6b6:	e020      	b.n	800e6fa <etharp_input+0xfa>
      if (for_us) {
 800e6b8:	7dfb      	ldrb	r3, [r7, #23]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d01c      	beq.n	800e6f8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800e6d4:	693a      	ldr	r2, [r7, #16]
 800e6d6:	3208      	adds	r2, #8
        etharp_raw(netif,
 800e6d8:	2102      	movs	r1, #2
 800e6da:	9103      	str	r1, [sp, #12]
 800e6dc:	f107 010c 	add.w	r1, r7, #12
 800e6e0:	9102      	str	r1, [sp, #8]
 800e6e2:	9201      	str	r2, [sp, #4]
 800e6e4:	9300      	str	r3, [sp, #0]
 800e6e6:	462b      	mov	r3, r5
 800e6e8:	4622      	mov	r2, r4
 800e6ea:	4601      	mov	r1, r0
 800e6ec:	6838      	ldr	r0, [r7, #0]
 800e6ee:	f000 faeb 	bl	800ecc8 <etharp_raw>
      break;
 800e6f2:	e001      	b.n	800e6f8 <etharp_input+0xf8>
      break;
 800e6f4:	bf00      	nop
 800e6f6:	e000      	b.n	800e6fa <etharp_input+0xfa>
      break;
 800e6f8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f7f9 fa42 	bl	8007b84 <pbuf_free>
}
 800e700:	3718      	adds	r7, #24
 800e702:	46bd      	mov	sp, r7
 800e704:	bdb0      	pop	{r4, r5, r7, pc}
 800e706:	bf00      	nop
 800e708:	08013e84 	.word	0x08013e84
 800e70c:	08013fd4 	.word	0x08013fd4
 800e710:	08013efc 	.word	0x08013efc

0800e714 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b086      	sub	sp, #24
 800e718:	af02      	add	r7, sp, #8
 800e71a:	60f8      	str	r0, [r7, #12]
 800e71c:	60b9      	str	r1, [r7, #8]
 800e71e:	4613      	mov	r3, r2
 800e720:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e722:	79fa      	ldrb	r2, [r7, #7]
 800e724:	4944      	ldr	r1, [pc, #272]	; (800e838 <etharp_output_to_arp_index+0x124>)
 800e726:	4613      	mov	r3, r2
 800e728:	005b      	lsls	r3, r3, #1
 800e72a:	4413      	add	r3, r2
 800e72c:	00db      	lsls	r3, r3, #3
 800e72e:	440b      	add	r3, r1
 800e730:	3314      	adds	r3, #20
 800e732:	781b      	ldrb	r3, [r3, #0]
 800e734:	2b01      	cmp	r3, #1
 800e736:	d806      	bhi.n	800e746 <etharp_output_to_arp_index+0x32>
 800e738:	4b40      	ldr	r3, [pc, #256]	; (800e83c <etharp_output_to_arp_index+0x128>)
 800e73a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e73e:	4940      	ldr	r1, [pc, #256]	; (800e840 <etharp_output_to_arp_index+0x12c>)
 800e740:	4840      	ldr	r0, [pc, #256]	; (800e844 <etharp_output_to_arp_index+0x130>)
 800e742:	f001 fffb 	bl	801073c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e746:	79fa      	ldrb	r2, [r7, #7]
 800e748:	493b      	ldr	r1, [pc, #236]	; (800e838 <etharp_output_to_arp_index+0x124>)
 800e74a:	4613      	mov	r3, r2
 800e74c:	005b      	lsls	r3, r3, #1
 800e74e:	4413      	add	r3, r2
 800e750:	00db      	lsls	r3, r3, #3
 800e752:	440b      	add	r3, r1
 800e754:	3314      	adds	r3, #20
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	2b02      	cmp	r3, #2
 800e75a:	d153      	bne.n	800e804 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e75c:	79fa      	ldrb	r2, [r7, #7]
 800e75e:	4936      	ldr	r1, [pc, #216]	; (800e838 <etharp_output_to_arp_index+0x124>)
 800e760:	4613      	mov	r3, r2
 800e762:	005b      	lsls	r3, r3, #1
 800e764:	4413      	add	r3, r2
 800e766:	00db      	lsls	r3, r3, #3
 800e768:	440b      	add	r3, r1
 800e76a:	3312      	adds	r3, #18
 800e76c:	881b      	ldrh	r3, [r3, #0]
 800e76e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800e772:	d919      	bls.n	800e7a8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e774:	79fa      	ldrb	r2, [r7, #7]
 800e776:	4613      	mov	r3, r2
 800e778:	005b      	lsls	r3, r3, #1
 800e77a:	4413      	add	r3, r2
 800e77c:	00db      	lsls	r3, r3, #3
 800e77e:	4a2e      	ldr	r2, [pc, #184]	; (800e838 <etharp_output_to_arp_index+0x124>)
 800e780:	4413      	add	r3, r2
 800e782:	3304      	adds	r3, #4
 800e784:	4619      	mov	r1, r3
 800e786:	68f8      	ldr	r0, [r7, #12]
 800e788:	f000 fb4c 	bl	800ee24 <etharp_request>
 800e78c:	4603      	mov	r3, r0
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d138      	bne.n	800e804 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e792:	79fa      	ldrb	r2, [r7, #7]
 800e794:	4928      	ldr	r1, [pc, #160]	; (800e838 <etharp_output_to_arp_index+0x124>)
 800e796:	4613      	mov	r3, r2
 800e798:	005b      	lsls	r3, r3, #1
 800e79a:	4413      	add	r3, r2
 800e79c:	00db      	lsls	r3, r3, #3
 800e79e:	440b      	add	r3, r1
 800e7a0:	3314      	adds	r3, #20
 800e7a2:	2203      	movs	r2, #3
 800e7a4:	701a      	strb	r2, [r3, #0]
 800e7a6:	e02d      	b.n	800e804 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e7a8:	79fa      	ldrb	r2, [r7, #7]
 800e7aa:	4923      	ldr	r1, [pc, #140]	; (800e838 <etharp_output_to_arp_index+0x124>)
 800e7ac:	4613      	mov	r3, r2
 800e7ae:	005b      	lsls	r3, r3, #1
 800e7b0:	4413      	add	r3, r2
 800e7b2:	00db      	lsls	r3, r3, #3
 800e7b4:	440b      	add	r3, r1
 800e7b6:	3312      	adds	r3, #18
 800e7b8:	881b      	ldrh	r3, [r3, #0]
 800e7ba:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800e7be:	d321      	bcc.n	800e804 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e7c0:	79fa      	ldrb	r2, [r7, #7]
 800e7c2:	4613      	mov	r3, r2
 800e7c4:	005b      	lsls	r3, r3, #1
 800e7c6:	4413      	add	r3, r2
 800e7c8:	00db      	lsls	r3, r3, #3
 800e7ca:	4a1b      	ldr	r2, [pc, #108]	; (800e838 <etharp_output_to_arp_index+0x124>)
 800e7cc:	4413      	add	r3, r2
 800e7ce:	1d19      	adds	r1, r3, #4
 800e7d0:	79fa      	ldrb	r2, [r7, #7]
 800e7d2:	4613      	mov	r3, r2
 800e7d4:	005b      	lsls	r3, r3, #1
 800e7d6:	4413      	add	r3, r2
 800e7d8:	00db      	lsls	r3, r3, #3
 800e7da:	3308      	adds	r3, #8
 800e7dc:	4a16      	ldr	r2, [pc, #88]	; (800e838 <etharp_output_to_arp_index+0x124>)
 800e7de:	4413      	add	r3, r2
 800e7e0:	3304      	adds	r3, #4
 800e7e2:	461a      	mov	r2, r3
 800e7e4:	68f8      	ldr	r0, [r7, #12]
 800e7e6:	f000 fafb 	bl	800ede0 <etharp_request_dst>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d109      	bne.n	800e804 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e7f0:	79fa      	ldrb	r2, [r7, #7]
 800e7f2:	4911      	ldr	r1, [pc, #68]	; (800e838 <etharp_output_to_arp_index+0x124>)
 800e7f4:	4613      	mov	r3, r2
 800e7f6:	005b      	lsls	r3, r3, #1
 800e7f8:	4413      	add	r3, r2
 800e7fa:	00db      	lsls	r3, r3, #3
 800e7fc:	440b      	add	r3, r1
 800e7fe:	3314      	adds	r3, #20
 800e800:	2203      	movs	r2, #3
 800e802:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800e80a:	79fa      	ldrb	r2, [r7, #7]
 800e80c:	4613      	mov	r3, r2
 800e80e:	005b      	lsls	r3, r3, #1
 800e810:	4413      	add	r3, r2
 800e812:	00db      	lsls	r3, r3, #3
 800e814:	3308      	adds	r3, #8
 800e816:	4a08      	ldr	r2, [pc, #32]	; (800e838 <etharp_output_to_arp_index+0x124>)
 800e818:	4413      	add	r3, r2
 800e81a:	3304      	adds	r3, #4
 800e81c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e820:	9200      	str	r2, [sp, #0]
 800e822:	460a      	mov	r2, r1
 800e824:	68b9      	ldr	r1, [r7, #8]
 800e826:	68f8      	ldr	r0, [r7, #12]
 800e828:	f001 fe40 	bl	80104ac <ethernet_output>
 800e82c:	4603      	mov	r3, r0
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3710      	adds	r7, #16
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}
 800e836:	bf00      	nop
 800e838:	20008a20 	.word	0x20008a20
 800e83c:	08013e84 	.word	0x08013e84
 800e840:	08013ff4 	.word	0x08013ff4
 800e844:	08013efc 	.word	0x08013efc

0800e848 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b08a      	sub	sp, #40	; 0x28
 800e84c:	af02      	add	r7, sp, #8
 800e84e:	60f8      	str	r0, [r7, #12]
 800e850:	60b9      	str	r1, [r7, #8]
 800e852:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d106      	bne.n	800e86c <etharp_output+0x24>
 800e85e:	4b73      	ldr	r3, [pc, #460]	; (800ea2c <etharp_output+0x1e4>)
 800e860:	f240 321e 	movw	r2, #798	; 0x31e
 800e864:	4972      	ldr	r1, [pc, #456]	; (800ea30 <etharp_output+0x1e8>)
 800e866:	4873      	ldr	r0, [pc, #460]	; (800ea34 <etharp_output+0x1ec>)
 800e868:	f001 ff68 	bl	801073c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e86c:	68bb      	ldr	r3, [r7, #8]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d106      	bne.n	800e880 <etharp_output+0x38>
 800e872:	4b6e      	ldr	r3, [pc, #440]	; (800ea2c <etharp_output+0x1e4>)
 800e874:	f240 321f 	movw	r2, #799	; 0x31f
 800e878:	496f      	ldr	r1, [pc, #444]	; (800ea38 <etharp_output+0x1f0>)
 800e87a:	486e      	ldr	r0, [pc, #440]	; (800ea34 <etharp_output+0x1ec>)
 800e87c:	f001 ff5e 	bl	801073c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d106      	bne.n	800e894 <etharp_output+0x4c>
 800e886:	4b69      	ldr	r3, [pc, #420]	; (800ea2c <etharp_output+0x1e4>)
 800e888:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e88c:	496b      	ldr	r1, [pc, #428]	; (800ea3c <etharp_output+0x1f4>)
 800e88e:	4869      	ldr	r0, [pc, #420]	; (800ea34 <etharp_output+0x1ec>)
 800e890:	f001 ff54 	bl	801073c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	68f9      	ldr	r1, [r7, #12]
 800e89a:	4618      	mov	r0, r3
 800e89c:	f000 fef8 	bl	800f690 <ip4_addr_isbroadcast_u32>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d002      	beq.n	800e8ac <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e8a6:	4b66      	ldr	r3, [pc, #408]	; (800ea40 <etharp_output+0x1f8>)
 800e8a8:	61fb      	str	r3, [r7, #28]
 800e8aa:	e0af      	b.n	800ea0c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e8b4:	2be0      	cmp	r3, #224	; 0xe0
 800e8b6:	d118      	bne.n	800e8ea <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e8c0:	235e      	movs	r3, #94	; 0x5e
 800e8c2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8ce:	b2db      	uxtb	r3, r3
 800e8d0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	3302      	adds	r3, #2
 800e8d6:	781b      	ldrb	r3, [r3, #0]
 800e8d8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	3303      	adds	r3, #3
 800e8de:	781b      	ldrb	r3, [r3, #0]
 800e8e0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e8e2:	f107 0310 	add.w	r3, r7, #16
 800e8e6:	61fb      	str	r3, [r7, #28]
 800e8e8:	e090      	b.n	800ea0c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681a      	ldr	r2, [r3, #0]
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	3304      	adds	r3, #4
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	405a      	eors	r2, r3
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	3308      	adds	r3, #8
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	4013      	ands	r3, r2
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d012      	beq.n	800e928 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e908:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800e90c:	4293      	cmp	r3, r2
 800e90e:	d00b      	beq.n	800e928 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	330c      	adds	r3, #12
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d003      	beq.n	800e922 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	330c      	adds	r3, #12
 800e91e:	61bb      	str	r3, [r7, #24]
 800e920:	e002      	b.n	800e928 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e922:	f06f 0303 	mvn.w	r3, #3
 800e926:	e07d      	b.n	800ea24 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e928:	4b46      	ldr	r3, [pc, #280]	; (800ea44 <etharp_output+0x1fc>)
 800e92a:	781b      	ldrb	r3, [r3, #0]
 800e92c:	4619      	mov	r1, r3
 800e92e:	4a46      	ldr	r2, [pc, #280]	; (800ea48 <etharp_output+0x200>)
 800e930:	460b      	mov	r3, r1
 800e932:	005b      	lsls	r3, r3, #1
 800e934:	440b      	add	r3, r1
 800e936:	00db      	lsls	r3, r3, #3
 800e938:	4413      	add	r3, r2
 800e93a:	3314      	adds	r3, #20
 800e93c:	781b      	ldrb	r3, [r3, #0]
 800e93e:	2b01      	cmp	r3, #1
 800e940:	d925      	bls.n	800e98e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e942:	4b40      	ldr	r3, [pc, #256]	; (800ea44 <etharp_output+0x1fc>)
 800e944:	781b      	ldrb	r3, [r3, #0]
 800e946:	4619      	mov	r1, r3
 800e948:	4a3f      	ldr	r2, [pc, #252]	; (800ea48 <etharp_output+0x200>)
 800e94a:	460b      	mov	r3, r1
 800e94c:	005b      	lsls	r3, r3, #1
 800e94e:	440b      	add	r3, r1
 800e950:	00db      	lsls	r3, r3, #3
 800e952:	4413      	add	r3, r2
 800e954:	3308      	adds	r3, #8
 800e956:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e958:	68fa      	ldr	r2, [r7, #12]
 800e95a:	429a      	cmp	r2, r3
 800e95c:	d117      	bne.n	800e98e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e95e:	69bb      	ldr	r3, [r7, #24]
 800e960:	681a      	ldr	r2, [r3, #0]
 800e962:	4b38      	ldr	r3, [pc, #224]	; (800ea44 <etharp_output+0x1fc>)
 800e964:	781b      	ldrb	r3, [r3, #0]
 800e966:	4618      	mov	r0, r3
 800e968:	4937      	ldr	r1, [pc, #220]	; (800ea48 <etharp_output+0x200>)
 800e96a:	4603      	mov	r3, r0
 800e96c:	005b      	lsls	r3, r3, #1
 800e96e:	4403      	add	r3, r0
 800e970:	00db      	lsls	r3, r3, #3
 800e972:	440b      	add	r3, r1
 800e974:	3304      	adds	r3, #4
 800e976:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e978:	429a      	cmp	r2, r3
 800e97a:	d108      	bne.n	800e98e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e97c:	4b31      	ldr	r3, [pc, #196]	; (800ea44 <etharp_output+0x1fc>)
 800e97e:	781b      	ldrb	r3, [r3, #0]
 800e980:	461a      	mov	r2, r3
 800e982:	68b9      	ldr	r1, [r7, #8]
 800e984:	68f8      	ldr	r0, [r7, #12]
 800e986:	f7ff fec5 	bl	800e714 <etharp_output_to_arp_index>
 800e98a:	4603      	mov	r3, r0
 800e98c:	e04a      	b.n	800ea24 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e98e:	2300      	movs	r3, #0
 800e990:	75fb      	strb	r3, [r7, #23]
 800e992:	e031      	b.n	800e9f8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e994:	7dfa      	ldrb	r2, [r7, #23]
 800e996:	492c      	ldr	r1, [pc, #176]	; (800ea48 <etharp_output+0x200>)
 800e998:	4613      	mov	r3, r2
 800e99a:	005b      	lsls	r3, r3, #1
 800e99c:	4413      	add	r3, r2
 800e99e:	00db      	lsls	r3, r3, #3
 800e9a0:	440b      	add	r3, r1
 800e9a2:	3314      	adds	r3, #20
 800e9a4:	781b      	ldrb	r3, [r3, #0]
 800e9a6:	2b01      	cmp	r3, #1
 800e9a8:	d923      	bls.n	800e9f2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800e9aa:	7dfa      	ldrb	r2, [r7, #23]
 800e9ac:	4926      	ldr	r1, [pc, #152]	; (800ea48 <etharp_output+0x200>)
 800e9ae:	4613      	mov	r3, r2
 800e9b0:	005b      	lsls	r3, r3, #1
 800e9b2:	4413      	add	r3, r2
 800e9b4:	00db      	lsls	r3, r3, #3
 800e9b6:	440b      	add	r3, r1
 800e9b8:	3308      	adds	r3, #8
 800e9ba:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e9bc:	68fa      	ldr	r2, [r7, #12]
 800e9be:	429a      	cmp	r2, r3
 800e9c0:	d117      	bne.n	800e9f2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e9c2:	69bb      	ldr	r3, [r7, #24]
 800e9c4:	6819      	ldr	r1, [r3, #0]
 800e9c6:	7dfa      	ldrb	r2, [r7, #23]
 800e9c8:	481f      	ldr	r0, [pc, #124]	; (800ea48 <etharp_output+0x200>)
 800e9ca:	4613      	mov	r3, r2
 800e9cc:	005b      	lsls	r3, r3, #1
 800e9ce:	4413      	add	r3, r2
 800e9d0:	00db      	lsls	r3, r3, #3
 800e9d2:	4403      	add	r3, r0
 800e9d4:	3304      	adds	r3, #4
 800e9d6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800e9d8:	4299      	cmp	r1, r3
 800e9da:	d10a      	bne.n	800e9f2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800e9dc:	4a19      	ldr	r2, [pc, #100]	; (800ea44 <etharp_output+0x1fc>)
 800e9de:	7dfb      	ldrb	r3, [r7, #23]
 800e9e0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e9e2:	7dfb      	ldrb	r3, [r7, #23]
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	68b9      	ldr	r1, [r7, #8]
 800e9e8:	68f8      	ldr	r0, [r7, #12]
 800e9ea:	f7ff fe93 	bl	800e714 <etharp_output_to_arp_index>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	e018      	b.n	800ea24 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e9f2:	7dfb      	ldrb	r3, [r7, #23]
 800e9f4:	3301      	adds	r3, #1
 800e9f6:	75fb      	strb	r3, [r7, #23]
 800e9f8:	7dfb      	ldrb	r3, [r7, #23]
 800e9fa:	2b09      	cmp	r3, #9
 800e9fc:	d9ca      	bls.n	800e994 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e9fe:	68ba      	ldr	r2, [r7, #8]
 800ea00:	69b9      	ldr	r1, [r7, #24]
 800ea02:	68f8      	ldr	r0, [r7, #12]
 800ea04:	f000 f822 	bl	800ea4c <etharp_query>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	e00b      	b.n	800ea24 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800ea12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ea16:	9300      	str	r3, [sp, #0]
 800ea18:	69fb      	ldr	r3, [r7, #28]
 800ea1a:	68b9      	ldr	r1, [r7, #8]
 800ea1c:	68f8      	ldr	r0, [r7, #12]
 800ea1e:	f001 fd45 	bl	80104ac <ethernet_output>
 800ea22:	4603      	mov	r3, r0
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3720      	adds	r7, #32
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}
 800ea2c:	08013e84 	.word	0x08013e84
 800ea30:	08013fd4 	.word	0x08013fd4
 800ea34:	08013efc 	.word	0x08013efc
 800ea38:	08014024 	.word	0x08014024
 800ea3c:	08013fc4 	.word	0x08013fc4
 800ea40:	08014640 	.word	0x08014640
 800ea44:	20008b10 	.word	0x20008b10
 800ea48:	20008a20 	.word	0x20008a20

0800ea4c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b08c      	sub	sp, #48	; 0x30
 800ea50:	af02      	add	r7, sp, #8
 800ea52:	60f8      	str	r0, [r7, #12]
 800ea54:	60b9      	str	r1, [r7, #8]
 800ea56:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	3326      	adds	r3, #38	; 0x26
 800ea5c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800ea5e:	23ff      	movs	r3, #255	; 0xff
 800ea60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800ea64:	2300      	movs	r3, #0
 800ea66:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	68f9      	ldr	r1, [r7, #12]
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f000 fe0e 	bl	800f690 <ip4_addr_isbroadcast_u32>
 800ea74:	4603      	mov	r3, r0
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d10c      	bne.n	800ea94 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ea82:	2be0      	cmp	r3, #224	; 0xe0
 800ea84:	d006      	beq.n	800ea94 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d003      	beq.n	800ea94 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d102      	bne.n	800ea9a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ea94:	f06f 030f 	mvn.w	r3, #15
 800ea98:	e101      	b.n	800ec9e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ea9a:	68fa      	ldr	r2, [r7, #12]
 800ea9c:	2101      	movs	r1, #1
 800ea9e:	68b8      	ldr	r0, [r7, #8]
 800eaa0:	f7ff fb60 	bl	800e164 <etharp_find_entry>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800eaa8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	da02      	bge.n	800eab6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800eab0:	8a7b      	ldrh	r3, [r7, #18]
 800eab2:	b25b      	sxtb	r3, r3
 800eab4:	e0f3      	b.n	800ec9e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800eab6:	8a7b      	ldrh	r3, [r7, #18]
 800eab8:	2b7e      	cmp	r3, #126	; 0x7e
 800eaba:	d906      	bls.n	800eaca <etharp_query+0x7e>
 800eabc:	4b7a      	ldr	r3, [pc, #488]	; (800eca8 <etharp_query+0x25c>)
 800eabe:	f240 32c1 	movw	r2, #961	; 0x3c1
 800eac2:	497a      	ldr	r1, [pc, #488]	; (800ecac <etharp_query+0x260>)
 800eac4:	487a      	ldr	r0, [pc, #488]	; (800ecb0 <etharp_query+0x264>)
 800eac6:	f001 fe39 	bl	801073c <iprintf>
  i = (netif_addr_idx_t)i_err;
 800eaca:	8a7b      	ldrh	r3, [r7, #18]
 800eacc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800eace:	7c7a      	ldrb	r2, [r7, #17]
 800ead0:	4978      	ldr	r1, [pc, #480]	; (800ecb4 <etharp_query+0x268>)
 800ead2:	4613      	mov	r3, r2
 800ead4:	005b      	lsls	r3, r3, #1
 800ead6:	4413      	add	r3, r2
 800ead8:	00db      	lsls	r3, r3, #3
 800eada:	440b      	add	r3, r1
 800eadc:	3314      	adds	r3, #20
 800eade:	781b      	ldrb	r3, [r3, #0]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d115      	bne.n	800eb10 <etharp_query+0xc4>
    is_new_entry = 1;
 800eae4:	2301      	movs	r3, #1
 800eae6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800eae8:	7c7a      	ldrb	r2, [r7, #17]
 800eaea:	4972      	ldr	r1, [pc, #456]	; (800ecb4 <etharp_query+0x268>)
 800eaec:	4613      	mov	r3, r2
 800eaee:	005b      	lsls	r3, r3, #1
 800eaf0:	4413      	add	r3, r2
 800eaf2:	00db      	lsls	r3, r3, #3
 800eaf4:	440b      	add	r3, r1
 800eaf6:	3314      	adds	r3, #20
 800eaf8:	2201      	movs	r2, #1
 800eafa:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800eafc:	7c7a      	ldrb	r2, [r7, #17]
 800eafe:	496d      	ldr	r1, [pc, #436]	; (800ecb4 <etharp_query+0x268>)
 800eb00:	4613      	mov	r3, r2
 800eb02:	005b      	lsls	r3, r3, #1
 800eb04:	4413      	add	r3, r2
 800eb06:	00db      	lsls	r3, r3, #3
 800eb08:	440b      	add	r3, r1
 800eb0a:	3308      	adds	r3, #8
 800eb0c:	68fa      	ldr	r2, [r7, #12]
 800eb0e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800eb10:	7c7a      	ldrb	r2, [r7, #17]
 800eb12:	4968      	ldr	r1, [pc, #416]	; (800ecb4 <etharp_query+0x268>)
 800eb14:	4613      	mov	r3, r2
 800eb16:	005b      	lsls	r3, r3, #1
 800eb18:	4413      	add	r3, r2
 800eb1a:	00db      	lsls	r3, r3, #3
 800eb1c:	440b      	add	r3, r1
 800eb1e:	3314      	adds	r3, #20
 800eb20:	781b      	ldrb	r3, [r3, #0]
 800eb22:	2b01      	cmp	r3, #1
 800eb24:	d011      	beq.n	800eb4a <etharp_query+0xfe>
 800eb26:	7c7a      	ldrb	r2, [r7, #17]
 800eb28:	4962      	ldr	r1, [pc, #392]	; (800ecb4 <etharp_query+0x268>)
 800eb2a:	4613      	mov	r3, r2
 800eb2c:	005b      	lsls	r3, r3, #1
 800eb2e:	4413      	add	r3, r2
 800eb30:	00db      	lsls	r3, r3, #3
 800eb32:	440b      	add	r3, r1
 800eb34:	3314      	adds	r3, #20
 800eb36:	781b      	ldrb	r3, [r3, #0]
 800eb38:	2b01      	cmp	r3, #1
 800eb3a:	d806      	bhi.n	800eb4a <etharp_query+0xfe>
 800eb3c:	4b5a      	ldr	r3, [pc, #360]	; (800eca8 <etharp_query+0x25c>)
 800eb3e:	f240 32cd 	movw	r2, #973	; 0x3cd
 800eb42:	495d      	ldr	r1, [pc, #372]	; (800ecb8 <etharp_query+0x26c>)
 800eb44:	485a      	ldr	r0, [pc, #360]	; (800ecb0 <etharp_query+0x264>)
 800eb46:	f001 fdf9 	bl	801073c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800eb4a:	6a3b      	ldr	r3, [r7, #32]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d102      	bne.n	800eb56 <etharp_query+0x10a>
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d10c      	bne.n	800eb70 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800eb56:	68b9      	ldr	r1, [r7, #8]
 800eb58:	68f8      	ldr	r0, [r7, #12]
 800eb5a:	f000 f963 	bl	800ee24 <etharp_request>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d102      	bne.n	800eb70 <etharp_query+0x124>
      return result;
 800eb6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eb6e:	e096      	b.n	800ec9e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d106      	bne.n	800eb84 <etharp_query+0x138>
 800eb76:	4b4c      	ldr	r3, [pc, #304]	; (800eca8 <etharp_query+0x25c>)
 800eb78:	f240 32e1 	movw	r2, #993	; 0x3e1
 800eb7c:	494f      	ldr	r1, [pc, #316]	; (800ecbc <etharp_query+0x270>)
 800eb7e:	484c      	ldr	r0, [pc, #304]	; (800ecb0 <etharp_query+0x264>)
 800eb80:	f001 fddc 	bl	801073c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800eb84:	7c7a      	ldrb	r2, [r7, #17]
 800eb86:	494b      	ldr	r1, [pc, #300]	; (800ecb4 <etharp_query+0x268>)
 800eb88:	4613      	mov	r3, r2
 800eb8a:	005b      	lsls	r3, r3, #1
 800eb8c:	4413      	add	r3, r2
 800eb8e:	00db      	lsls	r3, r3, #3
 800eb90:	440b      	add	r3, r1
 800eb92:	3314      	adds	r3, #20
 800eb94:	781b      	ldrb	r3, [r3, #0]
 800eb96:	2b01      	cmp	r3, #1
 800eb98:	d917      	bls.n	800ebca <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800eb9a:	4a49      	ldr	r2, [pc, #292]	; (800ecc0 <etharp_query+0x274>)
 800eb9c:	7c7b      	ldrb	r3, [r7, #17]
 800eb9e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800eba0:	7c7a      	ldrb	r2, [r7, #17]
 800eba2:	4613      	mov	r3, r2
 800eba4:	005b      	lsls	r3, r3, #1
 800eba6:	4413      	add	r3, r2
 800eba8:	00db      	lsls	r3, r3, #3
 800ebaa:	3308      	adds	r3, #8
 800ebac:	4a41      	ldr	r2, [pc, #260]	; (800ecb4 <etharp_query+0x268>)
 800ebae:	4413      	add	r3, r2
 800ebb0:	3304      	adds	r3, #4
 800ebb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ebb6:	9200      	str	r2, [sp, #0]
 800ebb8:	697a      	ldr	r2, [r7, #20]
 800ebba:	6879      	ldr	r1, [r7, #4]
 800ebbc:	68f8      	ldr	r0, [r7, #12]
 800ebbe:	f001 fc75 	bl	80104ac <ethernet_output>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ebc8:	e067      	b.n	800ec9a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ebca:	7c7a      	ldrb	r2, [r7, #17]
 800ebcc:	4939      	ldr	r1, [pc, #228]	; (800ecb4 <etharp_query+0x268>)
 800ebce:	4613      	mov	r3, r2
 800ebd0:	005b      	lsls	r3, r3, #1
 800ebd2:	4413      	add	r3, r2
 800ebd4:	00db      	lsls	r3, r3, #3
 800ebd6:	440b      	add	r3, r1
 800ebd8:	3314      	adds	r3, #20
 800ebda:	781b      	ldrb	r3, [r3, #0]
 800ebdc:	2b01      	cmp	r3, #1
 800ebde:	d15c      	bne.n	800ec9a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ebe8:	e01c      	b.n	800ec24 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ebea:	69fb      	ldr	r3, [r7, #28]
 800ebec:	895a      	ldrh	r2, [r3, #10]
 800ebee:	69fb      	ldr	r3, [r7, #28]
 800ebf0:	891b      	ldrh	r3, [r3, #8]
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	d10a      	bne.n	800ec0c <etharp_query+0x1c0>
 800ebf6:	69fb      	ldr	r3, [r7, #28]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d006      	beq.n	800ec0c <etharp_query+0x1c0>
 800ebfe:	4b2a      	ldr	r3, [pc, #168]	; (800eca8 <etharp_query+0x25c>)
 800ec00:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800ec04:	492f      	ldr	r1, [pc, #188]	; (800ecc4 <etharp_query+0x278>)
 800ec06:	482a      	ldr	r0, [pc, #168]	; (800ecb0 <etharp_query+0x264>)
 800ec08:	f001 fd98 	bl	801073c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ec0c:	69fb      	ldr	r3, [r7, #28]
 800ec0e:	7b1b      	ldrb	r3, [r3, #12]
 800ec10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d002      	beq.n	800ec1e <etharp_query+0x1d2>
        copy_needed = 1;
 800ec18:	2301      	movs	r3, #1
 800ec1a:	61bb      	str	r3, [r7, #24]
        break;
 800ec1c:	e005      	b.n	800ec2a <etharp_query+0x1de>
      }
      p = p->next;
 800ec1e:	69fb      	ldr	r3, [r7, #28]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ec24:	69fb      	ldr	r3, [r7, #28]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d1df      	bne.n	800ebea <etharp_query+0x19e>
    }
    if (copy_needed) {
 800ec2a:	69bb      	ldr	r3, [r7, #24]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d007      	beq.n	800ec40 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ec30:	687a      	ldr	r2, [r7, #4]
 800ec32:	f44f 7120 	mov.w	r1, #640	; 0x280
 800ec36:	200e      	movs	r0, #14
 800ec38:	f7f9 fa10 	bl	800805c <pbuf_clone>
 800ec3c:	61f8      	str	r0, [r7, #28]
 800ec3e:	e004      	b.n	800ec4a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800ec44:	69f8      	ldr	r0, [r7, #28]
 800ec46:	f7f9 f83d 	bl	8007cc4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ec4a:	69fb      	ldr	r3, [r7, #28]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d021      	beq.n	800ec94 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ec50:	7c7a      	ldrb	r2, [r7, #17]
 800ec52:	4918      	ldr	r1, [pc, #96]	; (800ecb4 <etharp_query+0x268>)
 800ec54:	4613      	mov	r3, r2
 800ec56:	005b      	lsls	r3, r3, #1
 800ec58:	4413      	add	r3, r2
 800ec5a:	00db      	lsls	r3, r3, #3
 800ec5c:	440b      	add	r3, r1
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d00a      	beq.n	800ec7a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800ec64:	7c7a      	ldrb	r2, [r7, #17]
 800ec66:	4913      	ldr	r1, [pc, #76]	; (800ecb4 <etharp_query+0x268>)
 800ec68:	4613      	mov	r3, r2
 800ec6a:	005b      	lsls	r3, r3, #1
 800ec6c:	4413      	add	r3, r2
 800ec6e:	00db      	lsls	r3, r3, #3
 800ec70:	440b      	add	r3, r1
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7f8 ff85 	bl	8007b84 <pbuf_free>
      }
      arp_table[i].q = p;
 800ec7a:	7c7a      	ldrb	r2, [r7, #17]
 800ec7c:	490d      	ldr	r1, [pc, #52]	; (800ecb4 <etharp_query+0x268>)
 800ec7e:	4613      	mov	r3, r2
 800ec80:	005b      	lsls	r3, r3, #1
 800ec82:	4413      	add	r3, r2
 800ec84:	00db      	lsls	r3, r3, #3
 800ec86:	440b      	add	r3, r1
 800ec88:	69fa      	ldr	r2, [r7, #28]
 800ec8a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec92:	e002      	b.n	800ec9a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800ec94:	23ff      	movs	r3, #255	; 0xff
 800ec96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800ec9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3728      	adds	r7, #40	; 0x28
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}
 800eca6:	bf00      	nop
 800eca8:	08013e84 	.word	0x08013e84
 800ecac:	08014030 	.word	0x08014030
 800ecb0:	08013efc 	.word	0x08013efc
 800ecb4:	20008a20 	.word	0x20008a20
 800ecb8:	08014040 	.word	0x08014040
 800ecbc:	08014024 	.word	0x08014024
 800ecc0:	20008b10 	.word	0x20008b10
 800ecc4:	08014068 	.word	0x08014068

0800ecc8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b08a      	sub	sp, #40	; 0x28
 800eccc:	af02      	add	r7, sp, #8
 800ecce:	60f8      	str	r0, [r7, #12]
 800ecd0:	60b9      	str	r1, [r7, #8]
 800ecd2:	607a      	str	r2, [r7, #4]
 800ecd4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d106      	bne.n	800ecee <etharp_raw+0x26>
 800ece0:	4b3a      	ldr	r3, [pc, #232]	; (800edcc <etharp_raw+0x104>)
 800ece2:	f240 4257 	movw	r2, #1111	; 0x457
 800ece6:	493a      	ldr	r1, [pc, #232]	; (800edd0 <etharp_raw+0x108>)
 800ece8:	483a      	ldr	r0, [pc, #232]	; (800edd4 <etharp_raw+0x10c>)
 800ecea:	f001 fd27 	bl	801073c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800ecee:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ecf2:	211c      	movs	r1, #28
 800ecf4:	200e      	movs	r0, #14
 800ecf6:	f7f8 fc61 	bl	80075bc <pbuf_alloc>
 800ecfa:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800ecfc:	69bb      	ldr	r3, [r7, #24]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d102      	bne.n	800ed08 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800ed02:	f04f 33ff 	mov.w	r3, #4294967295
 800ed06:	e05d      	b.n	800edc4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800ed08:	69bb      	ldr	r3, [r7, #24]
 800ed0a:	895b      	ldrh	r3, [r3, #10]
 800ed0c:	2b1b      	cmp	r3, #27
 800ed0e:	d806      	bhi.n	800ed1e <etharp_raw+0x56>
 800ed10:	4b2e      	ldr	r3, [pc, #184]	; (800edcc <etharp_raw+0x104>)
 800ed12:	f240 4262 	movw	r2, #1122	; 0x462
 800ed16:	4930      	ldr	r1, [pc, #192]	; (800edd8 <etharp_raw+0x110>)
 800ed18:	482e      	ldr	r0, [pc, #184]	; (800edd4 <etharp_raw+0x10c>)
 800ed1a:	f001 fd0f 	bl	801073c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800ed1e:	69bb      	ldr	r3, [r7, #24]
 800ed20:	685b      	ldr	r3, [r3, #4]
 800ed22:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800ed24:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ed26:	4618      	mov	r0, r3
 800ed28:	f7f7 fbce 	bl	80064c8 <lwip_htons>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	461a      	mov	r2, r3
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ed3a:	2b06      	cmp	r3, #6
 800ed3c:	d006      	beq.n	800ed4c <etharp_raw+0x84>
 800ed3e:	4b23      	ldr	r3, [pc, #140]	; (800edcc <etharp_raw+0x104>)
 800ed40:	f240 4269 	movw	r2, #1129	; 0x469
 800ed44:	4925      	ldr	r1, [pc, #148]	; (800eddc <etharp_raw+0x114>)
 800ed46:	4823      	ldr	r0, [pc, #140]	; (800edd4 <etharp_raw+0x10c>)
 800ed48:	f001 fcf8 	bl	801073c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	3308      	adds	r3, #8
 800ed50:	2206      	movs	r2, #6
 800ed52:	6839      	ldr	r1, [r7, #0]
 800ed54:	4618      	mov	r0, r3
 800ed56:	f001 ff0a 	bl	8010b6e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	3312      	adds	r3, #18
 800ed5e:	2206      	movs	r2, #6
 800ed60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed62:	4618      	mov	r0, r3
 800ed64:	f001 ff03 	bl	8010b6e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	330e      	adds	r3, #14
 800ed6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed6e:	6812      	ldr	r2, [r2, #0]
 800ed70:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	3318      	adds	r3, #24
 800ed76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed78:	6812      	ldr	r2, [r2, #0]
 800ed7a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	2200      	movs	r2, #0
 800ed80:	701a      	strb	r2, [r3, #0]
 800ed82:	2200      	movs	r2, #0
 800ed84:	f042 0201 	orr.w	r2, r2, #1
 800ed88:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	f042 0208 	orr.w	r2, r2, #8
 800ed92:	709a      	strb	r2, [r3, #2]
 800ed94:	2200      	movs	r2, #0
 800ed96:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800ed98:	697b      	ldr	r3, [r7, #20]
 800ed9a:	2206      	movs	r2, #6
 800ed9c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	2204      	movs	r2, #4
 800eda2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800eda4:	f640 0306 	movw	r3, #2054	; 0x806
 800eda8:	9300      	str	r3, [sp, #0]
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	68ba      	ldr	r2, [r7, #8]
 800edae:	69b9      	ldr	r1, [r7, #24]
 800edb0:	68f8      	ldr	r0, [r7, #12]
 800edb2:	f001 fb7b 	bl	80104ac <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800edb6:	69b8      	ldr	r0, [r7, #24]
 800edb8:	f7f8 fee4 	bl	8007b84 <pbuf_free>
  p = NULL;
 800edbc:	2300      	movs	r3, #0
 800edbe:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800edc0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	3720      	adds	r7, #32
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	08013e84 	.word	0x08013e84
 800edd0:	08013fd4 	.word	0x08013fd4
 800edd4:	08013efc 	.word	0x08013efc
 800edd8:	08014084 	.word	0x08014084
 800eddc:	080140b8 	.word	0x080140b8

0800ede0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b088      	sub	sp, #32
 800ede4:	af04      	add	r7, sp, #16
 800ede6:	60f8      	str	r0, [r7, #12]
 800ede8:	60b9      	str	r1, [r7, #8]
 800edea:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800edfc:	2201      	movs	r2, #1
 800edfe:	9203      	str	r2, [sp, #12]
 800ee00:	68ba      	ldr	r2, [r7, #8]
 800ee02:	9202      	str	r2, [sp, #8]
 800ee04:	4a06      	ldr	r2, [pc, #24]	; (800ee20 <etharp_request_dst+0x40>)
 800ee06:	9201      	str	r2, [sp, #4]
 800ee08:	9300      	str	r3, [sp, #0]
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	687a      	ldr	r2, [r7, #4]
 800ee0e:	68f8      	ldr	r0, [r7, #12]
 800ee10:	f7ff ff5a 	bl	800ecc8 <etharp_raw>
 800ee14:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3710      	adds	r7, #16
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}
 800ee1e:	bf00      	nop
 800ee20:	08014648 	.word	0x08014648

0800ee24 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b082      	sub	sp, #8
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
 800ee2c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800ee2e:	4a05      	ldr	r2, [pc, #20]	; (800ee44 <etharp_request+0x20>)
 800ee30:	6839      	ldr	r1, [r7, #0]
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f7ff ffd4 	bl	800ede0 <etharp_request_dst>
 800ee38:	4603      	mov	r3, r0
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3708      	adds	r7, #8
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}
 800ee42:	bf00      	nop
 800ee44:	08014640 	.word	0x08014640

0800ee48 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b08e      	sub	sp, #56	; 0x38
 800ee4c:	af04      	add	r7, sp, #16
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800ee52:	4b79      	ldr	r3, [pc, #484]	; (800f038 <icmp_input+0x1f0>)
 800ee54:	689b      	ldr	r3, [r3, #8]
 800ee56:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800ee58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee5a:	781b      	ldrb	r3, [r3, #0]
 800ee5c:	f003 030f 	and.w	r3, r3, #15
 800ee60:	b2db      	uxtb	r3, r3
 800ee62:	009b      	lsls	r3, r3, #2
 800ee64:	b2db      	uxtb	r3, r3
 800ee66:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800ee68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ee6a:	2b13      	cmp	r3, #19
 800ee6c:	f240 80cd 	bls.w	800f00a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	895b      	ldrh	r3, [r3, #10]
 800ee74:	2b03      	cmp	r3, #3
 800ee76:	f240 80ca 	bls.w	800f00e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	685b      	ldr	r3, [r3, #4]
 800ee7e:	781b      	ldrb	r3, [r3, #0]
 800ee80:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ee84:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	f000 80b7 	beq.w	800effc <icmp_input+0x1b4>
 800ee8e:	2b08      	cmp	r3, #8
 800ee90:	f040 80b7 	bne.w	800f002 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ee94:	4b69      	ldr	r3, [pc, #420]	; (800f03c <icmp_input+0x1f4>)
 800ee96:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ee98:	4b67      	ldr	r3, [pc, #412]	; (800f038 <icmp_input+0x1f0>)
 800ee9a:	695b      	ldr	r3, [r3, #20]
 800ee9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eea0:	2be0      	cmp	r3, #224	; 0xe0
 800eea2:	f000 80bb 	beq.w	800f01c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800eea6:	4b64      	ldr	r3, [pc, #400]	; (800f038 <icmp_input+0x1f0>)
 800eea8:	695b      	ldr	r3, [r3, #20]
 800eeaa:	4a63      	ldr	r2, [pc, #396]	; (800f038 <icmp_input+0x1f0>)
 800eeac:	6812      	ldr	r2, [r2, #0]
 800eeae:	4611      	mov	r1, r2
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f000 fbed 	bl	800f690 <ip4_addr_isbroadcast_u32>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	f040 80b1 	bne.w	800f020 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	891b      	ldrh	r3, [r3, #8]
 800eec2:	2b07      	cmp	r3, #7
 800eec4:	f240 80a5 	bls.w	800f012 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800eec8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eeca:	330e      	adds	r3, #14
 800eecc:	4619      	mov	r1, r3
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f7f8 fdc2 	bl	8007a58 <pbuf_add_header>
 800eed4:	4603      	mov	r3, r0
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d04b      	beq.n	800ef72 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	891a      	ldrh	r2, [r3, #8]
 800eede:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eee0:	4413      	add	r3, r2
 800eee2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	891b      	ldrh	r3, [r3, #8]
 800eee8:	8b7a      	ldrh	r2, [r7, #26]
 800eeea:	429a      	cmp	r2, r3
 800eeec:	f0c0 809a 	bcc.w	800f024 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800eef0:	8b7b      	ldrh	r3, [r7, #26]
 800eef2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eef6:	4619      	mov	r1, r3
 800eef8:	200e      	movs	r0, #14
 800eefa:	f7f8 fb5f 	bl	80075bc <pbuf_alloc>
 800eefe:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	f000 8090 	beq.w	800f028 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800ef08:	697b      	ldr	r3, [r7, #20]
 800ef0a:	895b      	ldrh	r3, [r3, #10]
 800ef0c:	461a      	mov	r2, r3
 800ef0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ef10:	3308      	adds	r3, #8
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d203      	bcs.n	800ef1e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800ef16:	6978      	ldr	r0, [r7, #20]
 800ef18:	f7f8 fe34 	bl	8007b84 <pbuf_free>
          goto icmperr;
 800ef1c:	e085      	b.n	800f02a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	685b      	ldr	r3, [r3, #4]
 800ef22:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ef24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef26:	4618      	mov	r0, r3
 800ef28:	f001 fe21 	bl	8010b6e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800ef2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ef2e:	4619      	mov	r1, r3
 800ef30:	6978      	ldr	r0, [r7, #20]
 800ef32:	f7f8 fda1 	bl	8007a78 <pbuf_remove_header>
 800ef36:	4603      	mov	r3, r0
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d009      	beq.n	800ef50 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800ef3c:	4b40      	ldr	r3, [pc, #256]	; (800f040 <icmp_input+0x1f8>)
 800ef3e:	22b6      	movs	r2, #182	; 0xb6
 800ef40:	4940      	ldr	r1, [pc, #256]	; (800f044 <icmp_input+0x1fc>)
 800ef42:	4841      	ldr	r0, [pc, #260]	; (800f048 <icmp_input+0x200>)
 800ef44:	f001 fbfa 	bl	801073c <iprintf>
          pbuf_free(r);
 800ef48:	6978      	ldr	r0, [r7, #20]
 800ef4a:	f7f8 fe1b 	bl	8007b84 <pbuf_free>
          goto icmperr;
 800ef4e:	e06c      	b.n	800f02a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800ef50:	6879      	ldr	r1, [r7, #4]
 800ef52:	6978      	ldr	r0, [r7, #20]
 800ef54:	f7f8 ff3e 	bl	8007dd4 <pbuf_copy>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d003      	beq.n	800ef66 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800ef5e:	6978      	ldr	r0, [r7, #20]
 800ef60:	f7f8 fe10 	bl	8007b84 <pbuf_free>
          goto icmperr;
 800ef64:	e061      	b.n	800f02a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f7f8 fe0c 	bl	8007b84 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	607b      	str	r3, [r7, #4]
 800ef70:	e00f      	b.n	800ef92 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ef72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ef74:	330e      	adds	r3, #14
 800ef76:	4619      	mov	r1, r3
 800ef78:	6878      	ldr	r0, [r7, #4]
 800ef7a:	f7f8 fd7d 	bl	8007a78 <pbuf_remove_header>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d006      	beq.n	800ef92 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800ef84:	4b2e      	ldr	r3, [pc, #184]	; (800f040 <icmp_input+0x1f8>)
 800ef86:	22c7      	movs	r2, #199	; 0xc7
 800ef88:	4930      	ldr	r1, [pc, #192]	; (800f04c <icmp_input+0x204>)
 800ef8a:	482f      	ldr	r0, [pc, #188]	; (800f048 <icmp_input+0x200>)
 800ef8c:	f001 fbd6 	bl	801073c <iprintf>
          goto icmperr;
 800ef90:	e04b      	b.n	800f02a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	685b      	ldr	r3, [r3, #4]
 800ef96:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800ef98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ef9a:	4619      	mov	r1, r3
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f7f8 fd5b 	bl	8007a58 <pbuf_add_header>
 800efa2:	4603      	mov	r3, r0
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d12b      	bne.n	800f000 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	685b      	ldr	r3, [r3, #4]
 800efac:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800efae:	69fb      	ldr	r3, [r7, #28]
 800efb0:	681a      	ldr	r2, [r3, #0]
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800efb6:	4b20      	ldr	r3, [pc, #128]	; (800f038 <icmp_input+0x1f0>)
 800efb8:	691a      	ldr	r2, [r3, #16]
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800efbe:	693b      	ldr	r3, [r7, #16]
 800efc0:	2200      	movs	r2, #0
 800efc2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800efc4:	693b      	ldr	r3, [r7, #16]
 800efc6:	2200      	movs	r2, #0
 800efc8:	709a      	strb	r2, [r3, #2]
 800efca:	2200      	movs	r2, #0
 800efcc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	22ff      	movs	r2, #255	; 0xff
 800efd2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2200      	movs	r2, #0
 800efd8:	729a      	strb	r2, [r3, #10]
 800efda:	2200      	movs	r2, #0
 800efdc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	9302      	str	r3, [sp, #8]
 800efe2:	2301      	movs	r3, #1
 800efe4:	9301      	str	r3, [sp, #4]
 800efe6:	2300      	movs	r3, #0
 800efe8:	9300      	str	r3, [sp, #0]
 800efea:	23ff      	movs	r3, #255	; 0xff
 800efec:	2200      	movs	r2, #0
 800efee:	69f9      	ldr	r1, [r7, #28]
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f000 fa75 	bl	800f4e0 <ip4_output_if>
 800eff6:	4603      	mov	r3, r0
 800eff8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800effa:	e001      	b.n	800f000 <icmp_input+0x1b8>
      break;
 800effc:	bf00      	nop
 800effe:	e000      	b.n	800f002 <icmp_input+0x1ba>
      break;
 800f000:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f7f8 fdbe 	bl	8007b84 <pbuf_free>
  return;
 800f008:	e013      	b.n	800f032 <icmp_input+0x1ea>
    goto lenerr;
 800f00a:	bf00      	nop
 800f00c:	e002      	b.n	800f014 <icmp_input+0x1cc>
    goto lenerr;
 800f00e:	bf00      	nop
 800f010:	e000      	b.n	800f014 <icmp_input+0x1cc>
        goto lenerr;
 800f012:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f7f8 fdb5 	bl	8007b84 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f01a:	e00a      	b.n	800f032 <icmp_input+0x1ea>
        goto icmperr;
 800f01c:	bf00      	nop
 800f01e:	e004      	b.n	800f02a <icmp_input+0x1e2>
        goto icmperr;
 800f020:	bf00      	nop
 800f022:	e002      	b.n	800f02a <icmp_input+0x1e2>
          goto icmperr;
 800f024:	bf00      	nop
 800f026:	e000      	b.n	800f02a <icmp_input+0x1e2>
          goto icmperr;
 800f028:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	f7f8 fdaa 	bl	8007b84 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f030:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f032:	3728      	adds	r7, #40	; 0x28
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}
 800f038:	20005290 	.word	0x20005290
 800f03c:	200052a4 	.word	0x200052a4
 800f040:	080140fc 	.word	0x080140fc
 800f044:	08014134 	.word	0x08014134
 800f048:	0801416c 	.word	0x0801416c
 800f04c:	08014194 	.word	0x08014194

0800f050 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b082      	sub	sp, #8
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
 800f058:	460b      	mov	r3, r1
 800f05a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f05c:	78fb      	ldrb	r3, [r7, #3]
 800f05e:	461a      	mov	r2, r3
 800f060:	2103      	movs	r1, #3
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f000 f814 	bl	800f090 <icmp_send_response>
}
 800f068:	bf00      	nop
 800f06a:	3708      	adds	r7, #8
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b082      	sub	sp, #8
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
 800f078:	460b      	mov	r3, r1
 800f07a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f07c:	78fb      	ldrb	r3, [r7, #3]
 800f07e:	461a      	mov	r2, r3
 800f080:	210b      	movs	r1, #11
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f000 f804 	bl	800f090 <icmp_send_response>
}
 800f088:	bf00      	nop
 800f08a:	3708      	adds	r7, #8
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b08c      	sub	sp, #48	; 0x30
 800f094:	af04      	add	r7, sp, #16
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	460b      	mov	r3, r1
 800f09a:	70fb      	strb	r3, [r7, #3]
 800f09c:	4613      	mov	r3, r2
 800f09e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f0a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f0a4:	2124      	movs	r1, #36	; 0x24
 800f0a6:	2022      	movs	r0, #34	; 0x22
 800f0a8:	f7f8 fa88 	bl	80075bc <pbuf_alloc>
 800f0ac:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800f0ae:	69fb      	ldr	r3, [r7, #28]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d04c      	beq.n	800f14e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f0b4:	69fb      	ldr	r3, [r7, #28]
 800f0b6:	895b      	ldrh	r3, [r3, #10]
 800f0b8:	2b23      	cmp	r3, #35	; 0x23
 800f0ba:	d806      	bhi.n	800f0ca <icmp_send_response+0x3a>
 800f0bc:	4b26      	ldr	r3, [pc, #152]	; (800f158 <icmp_send_response+0xc8>)
 800f0be:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f0c2:	4926      	ldr	r1, [pc, #152]	; (800f15c <icmp_send_response+0xcc>)
 800f0c4:	4826      	ldr	r0, [pc, #152]	; (800f160 <icmp_send_response+0xd0>)
 800f0c6:	f001 fb39 	bl	801073c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	685b      	ldr	r3, [r3, #4]
 800f0ce:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f0d0:	69fb      	ldr	r3, [r7, #28]
 800f0d2:	685b      	ldr	r3, [r3, #4]
 800f0d4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	78fa      	ldrb	r2, [r7, #3]
 800f0da:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	78ba      	ldrb	r2, [r7, #2]
 800f0e0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800f0e2:	697b      	ldr	r3, [r7, #20]
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	711a      	strb	r2, [r3, #4]
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800f0ec:	697b      	ldr	r3, [r7, #20]
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	719a      	strb	r2, [r3, #6]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f0f6:	69fb      	ldr	r3, [r7, #28]
 800f0f8:	685b      	ldr	r3, [r3, #4]
 800f0fa:	f103 0008 	add.w	r0, r3, #8
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	685b      	ldr	r3, [r3, #4]
 800f102:	221c      	movs	r2, #28
 800f104:	4619      	mov	r1, r3
 800f106:	f001 fd32 	bl	8010b6e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800f10a:	69bb      	ldr	r3, [r7, #24]
 800f10c:	68db      	ldr	r3, [r3, #12]
 800f10e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f110:	f107 030c 	add.w	r3, r7, #12
 800f114:	4618      	mov	r0, r3
 800f116:	f000 f825 	bl	800f164 <ip4_route>
 800f11a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800f11c:	693b      	ldr	r3, [r7, #16]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d011      	beq.n	800f146 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	2200      	movs	r2, #0
 800f126:	709a      	strb	r2, [r3, #2]
 800f128:	2200      	movs	r2, #0
 800f12a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f12c:	f107 020c 	add.w	r2, r7, #12
 800f130:	693b      	ldr	r3, [r7, #16]
 800f132:	9302      	str	r3, [sp, #8]
 800f134:	2301      	movs	r3, #1
 800f136:	9301      	str	r3, [sp, #4]
 800f138:	2300      	movs	r3, #0
 800f13a:	9300      	str	r3, [sp, #0]
 800f13c:	23ff      	movs	r3, #255	; 0xff
 800f13e:	2100      	movs	r1, #0
 800f140:	69f8      	ldr	r0, [r7, #28]
 800f142:	f000 f9cd 	bl	800f4e0 <ip4_output_if>
  }
  pbuf_free(q);
 800f146:	69f8      	ldr	r0, [r7, #28]
 800f148:	f7f8 fd1c 	bl	8007b84 <pbuf_free>
 800f14c:	e000      	b.n	800f150 <icmp_send_response+0xc0>
    return;
 800f14e:	bf00      	nop
}
 800f150:	3720      	adds	r7, #32
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
 800f156:	bf00      	nop
 800f158:	080140fc 	.word	0x080140fc
 800f15c:	080141c8 	.word	0x080141c8
 800f160:	0801416c 	.word	0x0801416c

0800f164 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f164:	b480      	push	{r7}
 800f166:	b085      	sub	sp, #20
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800f16c:	4b33      	ldr	r3, [pc, #204]	; (800f23c <ip4_route+0xd8>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	60fb      	str	r3, [r7, #12]
 800f172:	e036      	b.n	800f1e2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f17a:	f003 0301 	and.w	r3, r3, #1
 800f17e:	b2db      	uxtb	r3, r3
 800f180:	2b00      	cmp	r3, #0
 800f182:	d02b      	beq.n	800f1dc <ip4_route+0x78>
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f18a:	089b      	lsrs	r3, r3, #2
 800f18c:	f003 0301 	and.w	r3, r3, #1
 800f190:	b2db      	uxtb	r3, r3
 800f192:	2b00      	cmp	r3, #0
 800f194:	d022      	beq.n	800f1dc <ip4_route+0x78>
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	3304      	adds	r3, #4
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d01d      	beq.n	800f1dc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	3304      	adds	r3, #4
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	405a      	eors	r2, r3
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	3308      	adds	r3, #8
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	4013      	ands	r3, r2
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d101      	bne.n	800f1bc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	e038      	b.n	800f22e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f1c2:	f003 0302 	and.w	r3, r3, #2
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d108      	bne.n	800f1dc <ip4_route+0x78>
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681a      	ldr	r2, [r3, #0]
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	330c      	adds	r3, #12
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	d101      	bne.n	800f1dc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	e028      	b.n	800f22e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	60fb      	str	r3, [r7, #12]
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d1c5      	bne.n	800f174 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f1e8:	4b15      	ldr	r3, [pc, #84]	; (800f240 <ip4_route+0xdc>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d01a      	beq.n	800f226 <ip4_route+0xc2>
 800f1f0:	4b13      	ldr	r3, [pc, #76]	; (800f240 <ip4_route+0xdc>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f1f8:	f003 0301 	and.w	r3, r3, #1
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d012      	beq.n	800f226 <ip4_route+0xc2>
 800f200:	4b0f      	ldr	r3, [pc, #60]	; (800f240 <ip4_route+0xdc>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f208:	f003 0304 	and.w	r3, r3, #4
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d00a      	beq.n	800f226 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f210:	4b0b      	ldr	r3, [pc, #44]	; (800f240 <ip4_route+0xdc>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	3304      	adds	r3, #4
 800f216:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d004      	beq.n	800f226 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	b2db      	uxtb	r3, r3
 800f222:	2b7f      	cmp	r3, #127	; 0x7f
 800f224:	d101      	bne.n	800f22a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f226:	2300      	movs	r3, #0
 800f228:	e001      	b.n	800f22e <ip4_route+0xca>
  }

  return netif_default;
 800f22a:	4b05      	ldr	r3, [pc, #20]	; (800f240 <ip4_route+0xdc>)
 800f22c:	681b      	ldr	r3, [r3, #0]
}
 800f22e:	4618      	mov	r0, r3
 800f230:	3714      	adds	r7, #20
 800f232:	46bd      	mov	sp, r7
 800f234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f238:	4770      	bx	lr
 800f23a:	bf00      	nop
 800f23c:	200089b4 	.word	0x200089b4
 800f240:	200089b8 	.word	0x200089b8

0800f244 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b082      	sub	sp, #8
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f252:	f003 0301 	and.w	r3, r3, #1
 800f256:	b2db      	uxtb	r3, r3
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d016      	beq.n	800f28a <ip4_input_accept+0x46>
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	3304      	adds	r3, #4
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d011      	beq.n	800f28a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f266:	4b0b      	ldr	r3, [pc, #44]	; (800f294 <ip4_input_accept+0x50>)
 800f268:	695a      	ldr	r2, [r3, #20]
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	3304      	adds	r3, #4
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	429a      	cmp	r2, r3
 800f272:	d008      	beq.n	800f286 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f274:	4b07      	ldr	r3, [pc, #28]	; (800f294 <ip4_input_accept+0x50>)
 800f276:	695b      	ldr	r3, [r3, #20]
 800f278:	6879      	ldr	r1, [r7, #4]
 800f27a:	4618      	mov	r0, r3
 800f27c:	f000 fa08 	bl	800f690 <ip4_addr_isbroadcast_u32>
 800f280:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f282:	2b00      	cmp	r3, #0
 800f284:	d001      	beq.n	800f28a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800f286:	2301      	movs	r3, #1
 800f288:	e000      	b.n	800f28c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f28a:	2300      	movs	r3, #0
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	3708      	adds	r7, #8
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}
 800f294:	20005290 	.word	0x20005290

0800f298 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b086      	sub	sp, #24
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	685b      	ldr	r3, [r3, #4]
 800f2a6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	781b      	ldrb	r3, [r3, #0]
 800f2ac:	091b      	lsrs	r3, r3, #4
 800f2ae:	b2db      	uxtb	r3, r3
 800f2b0:	2b04      	cmp	r3, #4
 800f2b2:	d004      	beq.n	800f2be <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f7f8 fc65 	bl	8007b84 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	e107      	b.n	800f4ce <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	781b      	ldrb	r3, [r3, #0]
 800f2c2:	f003 030f 	and.w	r3, r3, #15
 800f2c6:	b2db      	uxtb	r3, r3
 800f2c8:	009b      	lsls	r3, r3, #2
 800f2ca:	b2db      	uxtb	r3, r3
 800f2cc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	885b      	ldrh	r3, [r3, #2]
 800f2d2:	b29b      	uxth	r3, r3
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f7f7 f8f7 	bl	80064c8 <lwip_htons>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	891b      	ldrh	r3, [r3, #8]
 800f2e2:	89ba      	ldrh	r2, [r7, #12]
 800f2e4:	429a      	cmp	r2, r3
 800f2e6:	d204      	bcs.n	800f2f2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800f2e8:	89bb      	ldrh	r3, [r7, #12]
 800f2ea:	4619      	mov	r1, r3
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f7f8 fac3 	bl	8007878 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	895b      	ldrh	r3, [r3, #10]
 800f2f6:	89fa      	ldrh	r2, [r7, #14]
 800f2f8:	429a      	cmp	r2, r3
 800f2fa:	d807      	bhi.n	800f30c <ip4_input+0x74>
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	891b      	ldrh	r3, [r3, #8]
 800f300:	89ba      	ldrh	r2, [r7, #12]
 800f302:	429a      	cmp	r2, r3
 800f304:	d802      	bhi.n	800f30c <ip4_input+0x74>
 800f306:	89fb      	ldrh	r3, [r7, #14]
 800f308:	2b13      	cmp	r3, #19
 800f30a:	d804      	bhi.n	800f316 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f30c:	6878      	ldr	r0, [r7, #4]
 800f30e:	f7f8 fc39 	bl	8007b84 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f312:	2300      	movs	r3, #0
 800f314:	e0db      	b.n	800f4ce <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f316:	697b      	ldr	r3, [r7, #20]
 800f318:	691b      	ldr	r3, [r3, #16]
 800f31a:	4a6f      	ldr	r2, [pc, #444]	; (800f4d8 <ip4_input+0x240>)
 800f31c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	68db      	ldr	r3, [r3, #12]
 800f322:	4a6d      	ldr	r2, [pc, #436]	; (800f4d8 <ip4_input+0x240>)
 800f324:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f326:	4b6c      	ldr	r3, [pc, #432]	; (800f4d8 <ip4_input+0x240>)
 800f328:	695b      	ldr	r3, [r3, #20]
 800f32a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f32e:	2be0      	cmp	r3, #224	; 0xe0
 800f330:	d112      	bne.n	800f358 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f332:	683b      	ldr	r3, [r7, #0]
 800f334:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f338:	f003 0301 	and.w	r3, r3, #1
 800f33c:	b2db      	uxtb	r3, r3
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d007      	beq.n	800f352 <ip4_input+0xba>
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	3304      	adds	r3, #4
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d002      	beq.n	800f352 <ip4_input+0xba>
      netif = inp;
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	613b      	str	r3, [r7, #16]
 800f350:	e02a      	b.n	800f3a8 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f352:	2300      	movs	r3, #0
 800f354:	613b      	str	r3, [r7, #16]
 800f356:	e027      	b.n	800f3a8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800f358:	6838      	ldr	r0, [r7, #0]
 800f35a:	f7ff ff73 	bl	800f244 <ip4_input_accept>
 800f35e:	4603      	mov	r3, r0
 800f360:	2b00      	cmp	r3, #0
 800f362:	d002      	beq.n	800f36a <ip4_input+0xd2>
      netif = inp;
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	613b      	str	r3, [r7, #16]
 800f368:	e01e      	b.n	800f3a8 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f36a:	2300      	movs	r3, #0
 800f36c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800f36e:	4b5a      	ldr	r3, [pc, #360]	; (800f4d8 <ip4_input+0x240>)
 800f370:	695b      	ldr	r3, [r3, #20]
 800f372:	b2db      	uxtb	r3, r3
 800f374:	2b7f      	cmp	r3, #127	; 0x7f
 800f376:	d017      	beq.n	800f3a8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800f378:	4b58      	ldr	r3, [pc, #352]	; (800f4dc <ip4_input+0x244>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	613b      	str	r3, [r7, #16]
 800f37e:	e00e      	b.n	800f39e <ip4_input+0x106>
          if (netif == inp) {
 800f380:	693a      	ldr	r2, [r7, #16]
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	429a      	cmp	r2, r3
 800f386:	d006      	beq.n	800f396 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800f388:	6938      	ldr	r0, [r7, #16]
 800f38a:	f7ff ff5b 	bl	800f244 <ip4_input_accept>
 800f38e:	4603      	mov	r3, r0
 800f390:	2b00      	cmp	r3, #0
 800f392:	d108      	bne.n	800f3a6 <ip4_input+0x10e>
 800f394:	e000      	b.n	800f398 <ip4_input+0x100>
            continue;
 800f396:	bf00      	nop
        NETIF_FOREACH(netif) {
 800f398:	693b      	ldr	r3, [r7, #16]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	613b      	str	r3, [r7, #16]
 800f39e:	693b      	ldr	r3, [r7, #16]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d1ed      	bne.n	800f380 <ip4_input+0xe8>
 800f3a4:	e000      	b.n	800f3a8 <ip4_input+0x110>
            break;
 800f3a6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f3a8:	4b4b      	ldr	r3, [pc, #300]	; (800f4d8 <ip4_input+0x240>)
 800f3aa:	691b      	ldr	r3, [r3, #16]
 800f3ac:	6839      	ldr	r1, [r7, #0]
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f000 f96e 	bl	800f690 <ip4_addr_isbroadcast_u32>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d105      	bne.n	800f3c6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f3ba:	4b47      	ldr	r3, [pc, #284]	; (800f4d8 <ip4_input+0x240>)
 800f3bc:	691b      	ldr	r3, [r3, #16]
 800f3be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f3c2:	2be0      	cmp	r3, #224	; 0xe0
 800f3c4:	d104      	bne.n	800f3d0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	f7f8 fbdc 	bl	8007b84 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	e07e      	b.n	800f4ce <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d104      	bne.n	800f3e0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f7f8 fbd4 	bl	8007b84 <pbuf_free>
    return ERR_OK;
 800f3dc:	2300      	movs	r3, #0
 800f3de:	e076      	b.n	800f4ce <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	88db      	ldrh	r3, [r3, #6]
 800f3e4:	b29b      	uxth	r3, r3
 800f3e6:	461a      	mov	r2, r3
 800f3e8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800f3ec:	4013      	ands	r3, r2
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d00b      	beq.n	800f40a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f000 fc92 	bl	800fd1c <ip4_reass>
 800f3f8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d101      	bne.n	800f404 <ip4_input+0x16c>
      return ERR_OK;
 800f400:	2300      	movs	r3, #0
 800f402:	e064      	b.n	800f4ce <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	685b      	ldr	r3, [r3, #4]
 800f408:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800f40a:	4a33      	ldr	r2, [pc, #204]	; (800f4d8 <ip4_input+0x240>)
 800f40c:	693b      	ldr	r3, [r7, #16]
 800f40e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800f410:	4a31      	ldr	r2, [pc, #196]	; (800f4d8 <ip4_input+0x240>)
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800f416:	4a30      	ldr	r2, [pc, #192]	; (800f4d8 <ip4_input+0x240>)
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	f003 030f 	and.w	r3, r3, #15
 800f424:	b2db      	uxtb	r3, r3
 800f426:	009b      	lsls	r3, r3, #2
 800f428:	b2db      	uxtb	r3, r3
 800f42a:	b29a      	uxth	r2, r3
 800f42c:	4b2a      	ldr	r3, [pc, #168]	; (800f4d8 <ip4_input+0x240>)
 800f42e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f430:	89fb      	ldrh	r3, [r7, #14]
 800f432:	4619      	mov	r1, r3
 800f434:	6878      	ldr	r0, [r7, #4]
 800f436:	f7f8 fb1f 	bl	8007a78 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	7a5b      	ldrb	r3, [r3, #9]
 800f43e:	2b11      	cmp	r3, #17
 800f440:	d006      	beq.n	800f450 <ip4_input+0x1b8>
 800f442:	2b11      	cmp	r3, #17
 800f444:	dc13      	bgt.n	800f46e <ip4_input+0x1d6>
 800f446:	2b01      	cmp	r3, #1
 800f448:	d00c      	beq.n	800f464 <ip4_input+0x1cc>
 800f44a:	2b06      	cmp	r3, #6
 800f44c:	d005      	beq.n	800f45a <ip4_input+0x1c2>
 800f44e:	e00e      	b.n	800f46e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800f450:	6839      	ldr	r1, [r7, #0]
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f7fe f988 	bl	800d768 <udp_input>
        break;
 800f458:	e026      	b.n	800f4a8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800f45a:	6839      	ldr	r1, [r7, #0]
 800f45c:	6878      	ldr	r0, [r7, #4]
 800f45e:	f7fa f9c9 	bl	80097f4 <tcp_input>
        break;
 800f462:	e021      	b.n	800f4a8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800f464:	6839      	ldr	r1, [r7, #0]
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f7ff fcee 	bl	800ee48 <icmp_input>
        break;
 800f46c:	e01c      	b.n	800f4a8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f46e:	4b1a      	ldr	r3, [pc, #104]	; (800f4d8 <ip4_input+0x240>)
 800f470:	695b      	ldr	r3, [r3, #20]
 800f472:	6939      	ldr	r1, [r7, #16]
 800f474:	4618      	mov	r0, r3
 800f476:	f000 f90b 	bl	800f690 <ip4_addr_isbroadcast_u32>
 800f47a:	4603      	mov	r3, r0
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d10f      	bne.n	800f4a0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f480:	4b15      	ldr	r3, [pc, #84]	; (800f4d8 <ip4_input+0x240>)
 800f482:	695b      	ldr	r3, [r3, #20]
 800f484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f488:	2be0      	cmp	r3, #224	; 0xe0
 800f48a:	d009      	beq.n	800f4a0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800f48c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f490:	4619      	mov	r1, r3
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	f7f8 fb63 	bl	8007b5e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f498:	2102      	movs	r1, #2
 800f49a:	6878      	ldr	r0, [r7, #4]
 800f49c:	f7ff fdd8 	bl	800f050 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f7f8 fb6f 	bl	8007b84 <pbuf_free>
        break;
 800f4a6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800f4a8:	4b0b      	ldr	r3, [pc, #44]	; (800f4d8 <ip4_input+0x240>)
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f4ae:	4b0a      	ldr	r3, [pc, #40]	; (800f4d8 <ip4_input+0x240>)
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f4b4:	4b08      	ldr	r3, [pc, #32]	; (800f4d8 <ip4_input+0x240>)
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f4ba:	4b07      	ldr	r3, [pc, #28]	; (800f4d8 <ip4_input+0x240>)
 800f4bc:	2200      	movs	r2, #0
 800f4be:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800f4c0:	4b05      	ldr	r3, [pc, #20]	; (800f4d8 <ip4_input+0x240>)
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f4c6:	4b04      	ldr	r3, [pc, #16]	; (800f4d8 <ip4_input+0x240>)
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800f4cc:	2300      	movs	r3, #0
}
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	3718      	adds	r7, #24
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bd80      	pop	{r7, pc}
 800f4d6:	bf00      	nop
 800f4d8:	20005290 	.word	0x20005290
 800f4dc:	200089b4 	.word	0x200089b4

0800f4e0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b08a      	sub	sp, #40	; 0x28
 800f4e4:	af04      	add	r7, sp, #16
 800f4e6:	60f8      	str	r0, [r7, #12]
 800f4e8:	60b9      	str	r1, [r7, #8]
 800f4ea:	607a      	str	r2, [r7, #4]
 800f4ec:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d009      	beq.n	800f50c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800f4f8:	68bb      	ldr	r3, [r7, #8]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d003      	beq.n	800f506 <ip4_output_if+0x26>
 800f4fe:	68bb      	ldr	r3, [r7, #8]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d102      	bne.n	800f50c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800f506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f508:	3304      	adds	r3, #4
 800f50a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f50c:	78fa      	ldrb	r2, [r7, #3]
 800f50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f510:	9302      	str	r3, [sp, #8]
 800f512:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f516:	9301      	str	r3, [sp, #4]
 800f518:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f51c:	9300      	str	r3, [sp, #0]
 800f51e:	4613      	mov	r3, r2
 800f520:	687a      	ldr	r2, [r7, #4]
 800f522:	6979      	ldr	r1, [r7, #20]
 800f524:	68f8      	ldr	r0, [r7, #12]
 800f526:	f000 f805 	bl	800f534 <ip4_output_if_src>
 800f52a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3718      	adds	r7, #24
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}

0800f534 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b088      	sub	sp, #32
 800f538:	af00      	add	r7, sp, #0
 800f53a:	60f8      	str	r0, [r7, #12]
 800f53c:	60b9      	str	r1, [r7, #8]
 800f53e:	607a      	str	r2, [r7, #4]
 800f540:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	7b9b      	ldrb	r3, [r3, #14]
 800f546:	2b01      	cmp	r3, #1
 800f548:	d006      	beq.n	800f558 <ip4_output_if_src+0x24>
 800f54a:	4b4b      	ldr	r3, [pc, #300]	; (800f678 <ip4_output_if_src+0x144>)
 800f54c:	f44f 7255 	mov.w	r2, #852	; 0x354
 800f550:	494a      	ldr	r1, [pc, #296]	; (800f67c <ip4_output_if_src+0x148>)
 800f552:	484b      	ldr	r0, [pc, #300]	; (800f680 <ip4_output_if_src+0x14c>)
 800f554:	f001 f8f2 	bl	801073c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d060      	beq.n	800f620 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800f55e:	2314      	movs	r3, #20
 800f560:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f562:	2114      	movs	r1, #20
 800f564:	68f8      	ldr	r0, [r7, #12]
 800f566:	f7f8 fa77 	bl	8007a58 <pbuf_add_header>
 800f56a:	4603      	mov	r3, r0
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d002      	beq.n	800f576 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f570:	f06f 0301 	mvn.w	r3, #1
 800f574:	e07c      	b.n	800f670 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	685b      	ldr	r3, [r3, #4]
 800f57a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	895b      	ldrh	r3, [r3, #10]
 800f580:	2b13      	cmp	r3, #19
 800f582:	d806      	bhi.n	800f592 <ip4_output_if_src+0x5e>
 800f584:	4b3c      	ldr	r3, [pc, #240]	; (800f678 <ip4_output_if_src+0x144>)
 800f586:	f44f 7262 	mov.w	r2, #904	; 0x388
 800f58a:	493e      	ldr	r1, [pc, #248]	; (800f684 <ip4_output_if_src+0x150>)
 800f58c:	483c      	ldr	r0, [pc, #240]	; (800f680 <ip4_output_if_src+0x14c>)
 800f58e:	f001 f8d5 	bl	801073c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f592:	69fb      	ldr	r3, [r7, #28]
 800f594:	78fa      	ldrb	r2, [r7, #3]
 800f596:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f598:	69fb      	ldr	r3, [r7, #28]
 800f59a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800f59e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681a      	ldr	r2, [r3, #0]
 800f5a4:	69fb      	ldr	r3, [r7, #28]
 800f5a6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f5a8:	8b7b      	ldrh	r3, [r7, #26]
 800f5aa:	089b      	lsrs	r3, r3, #2
 800f5ac:	b29b      	uxth	r3, r3
 800f5ae:	b2db      	uxtb	r3, r3
 800f5b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5b4:	b2da      	uxtb	r2, r3
 800f5b6:	69fb      	ldr	r3, [r7, #28]
 800f5b8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800f5ba:	69fb      	ldr	r3, [r7, #28]
 800f5bc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f5c0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	891b      	ldrh	r3, [r3, #8]
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f7f6 ff7e 	bl	80064c8 <lwip_htons>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	461a      	mov	r2, r3
 800f5d0:	69fb      	ldr	r3, [r7, #28]
 800f5d2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f5d4:	69fb      	ldr	r3, [r7, #28]
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	719a      	strb	r2, [r3, #6]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f5de:	4b2a      	ldr	r3, [pc, #168]	; (800f688 <ip4_output_if_src+0x154>)
 800f5e0:	881b      	ldrh	r3, [r3, #0]
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f7f6 ff70 	bl	80064c8 <lwip_htons>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	461a      	mov	r2, r3
 800f5ec:	69fb      	ldr	r3, [r7, #28]
 800f5ee:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f5f0:	4b25      	ldr	r3, [pc, #148]	; (800f688 <ip4_output_if_src+0x154>)
 800f5f2:	881b      	ldrh	r3, [r3, #0]
 800f5f4:	3301      	adds	r3, #1
 800f5f6:	b29a      	uxth	r2, r3
 800f5f8:	4b23      	ldr	r3, [pc, #140]	; (800f688 <ip4_output_if_src+0x154>)
 800f5fa:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d104      	bne.n	800f60c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f602:	4b22      	ldr	r3, [pc, #136]	; (800f68c <ip4_output_if_src+0x158>)
 800f604:	681a      	ldr	r2, [r3, #0]
 800f606:	69fb      	ldr	r3, [r7, #28]
 800f608:	60da      	str	r2, [r3, #12]
 800f60a:	e003      	b.n	800f614 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f60c:	68bb      	ldr	r3, [r7, #8]
 800f60e:	681a      	ldr	r2, [r3, #0]
 800f610:	69fb      	ldr	r3, [r7, #28]
 800f612:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f614:	69fb      	ldr	r3, [r7, #28]
 800f616:	2200      	movs	r2, #0
 800f618:	729a      	strb	r2, [r3, #10]
 800f61a:	2200      	movs	r2, #0
 800f61c:	72da      	strb	r2, [r3, #11]
 800f61e:	e00f      	b.n	800f640 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	895b      	ldrh	r3, [r3, #10]
 800f624:	2b13      	cmp	r3, #19
 800f626:	d802      	bhi.n	800f62e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f628:	f06f 0301 	mvn.w	r3, #1
 800f62c:	e020      	b.n	800f670 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	685b      	ldr	r3, [r3, #4]
 800f632:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f634:	69fb      	ldr	r3, [r7, #28]
 800f636:	691b      	ldr	r3, [r3, #16]
 800f638:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f63a:	f107 0314 	add.w	r3, r7, #20
 800f63e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f642:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f644:	2b00      	cmp	r3, #0
 800f646:	d00c      	beq.n	800f662 <ip4_output_if_src+0x12e>
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	891a      	ldrh	r2, [r3, #8]
 800f64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f64e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f650:	429a      	cmp	r2, r3
 800f652:	d906      	bls.n	800f662 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800f654:	687a      	ldr	r2, [r7, #4]
 800f656:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f658:	68f8      	ldr	r0, [r7, #12]
 800f65a:	f000 fd53 	bl	8010104 <ip4_frag>
 800f65e:	4603      	mov	r3, r0
 800f660:	e006      	b.n	800f670 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f664:	695b      	ldr	r3, [r3, #20]
 800f666:	687a      	ldr	r2, [r7, #4]
 800f668:	68f9      	ldr	r1, [r7, #12]
 800f66a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f66c:	4798      	blx	r3
 800f66e:	4603      	mov	r3, r0
}
 800f670:	4618      	mov	r0, r3
 800f672:	3720      	adds	r7, #32
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}
 800f678:	080141f4 	.word	0x080141f4
 800f67c:	08014228 	.word	0x08014228
 800f680:	08014234 	.word	0x08014234
 800f684:	0801425c 	.word	0x0801425c
 800f688:	20008b12 	.word	0x20008b12
 800f68c:	0801463c 	.word	0x0801463c

0800f690 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f690:	b480      	push	{r7}
 800f692:	b085      	sub	sp, #20
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
 800f698:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6a4:	d002      	beq.n	800f6ac <ip4_addr_isbroadcast_u32+0x1c>
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d101      	bne.n	800f6b0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f6ac:	2301      	movs	r3, #1
 800f6ae:	e02a      	b.n	800f706 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f6b6:	f003 0302 	and.w	r3, r3, #2
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d101      	bne.n	800f6c2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	e021      	b.n	800f706 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	3304      	adds	r3, #4
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	687a      	ldr	r2, [r7, #4]
 800f6ca:	429a      	cmp	r2, r3
 800f6cc:	d101      	bne.n	800f6d2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	e019      	b.n	800f706 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f6d2:	68fa      	ldr	r2, [r7, #12]
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	3304      	adds	r3, #4
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	405a      	eors	r2, r3
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	3308      	adds	r3, #8
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	4013      	ands	r3, r2
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d10d      	bne.n	800f704 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	3308      	adds	r3, #8
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	43da      	mvns	r2, r3
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f6f4:	683b      	ldr	r3, [r7, #0]
 800f6f6:	3308      	adds	r3, #8
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f6fc:	429a      	cmp	r2, r3
 800f6fe:	d101      	bne.n	800f704 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f700:	2301      	movs	r3, #1
 800f702:	e000      	b.n	800f706 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800f704:	2300      	movs	r3, #0
  }
}
 800f706:	4618      	mov	r0, r3
 800f708:	3714      	adds	r7, #20
 800f70a:	46bd      	mov	sp, r7
 800f70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f710:	4770      	bx	lr
	...

0800f714 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b084      	sub	sp, #16
 800f718:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f71a:	2300      	movs	r3, #0
 800f71c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f71e:	4b12      	ldr	r3, [pc, #72]	; (800f768 <ip_reass_tmr+0x54>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f724:	e018      	b.n	800f758 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	7fdb      	ldrb	r3, [r3, #31]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d00b      	beq.n	800f746 <ip_reass_tmr+0x32>
      r->timer--;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	7fdb      	ldrb	r3, [r3, #31]
 800f732:	3b01      	subs	r3, #1
 800f734:	b2da      	uxtb	r2, r3
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	60fb      	str	r3, [r7, #12]
 800f744:	e008      	b.n	800f758 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f750:	68b9      	ldr	r1, [r7, #8]
 800f752:	6878      	ldr	r0, [r7, #4]
 800f754:	f000 f80a 	bl	800f76c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d1e3      	bne.n	800f726 <ip_reass_tmr+0x12>
    }
  }
}
 800f75e:	bf00      	nop
 800f760:	bf00      	nop
 800f762:	3710      	adds	r7, #16
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}
 800f768:	20008b14 	.word	0x20008b14

0800f76c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b088      	sub	sp, #32
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
 800f774:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f776:	2300      	movs	r3, #0
 800f778:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f77a:	683a      	ldr	r2, [r7, #0]
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	429a      	cmp	r2, r3
 800f780:	d105      	bne.n	800f78e <ip_reass_free_complete_datagram+0x22>
 800f782:	4b45      	ldr	r3, [pc, #276]	; (800f898 <ip_reass_free_complete_datagram+0x12c>)
 800f784:	22ab      	movs	r2, #171	; 0xab
 800f786:	4945      	ldr	r1, [pc, #276]	; (800f89c <ip_reass_free_complete_datagram+0x130>)
 800f788:	4845      	ldr	r0, [pc, #276]	; (800f8a0 <ip_reass_free_complete_datagram+0x134>)
 800f78a:	f000 ffd7 	bl	801073c <iprintf>
  if (prev != NULL) {
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d00a      	beq.n	800f7aa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	687a      	ldr	r2, [r7, #4]
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d005      	beq.n	800f7aa <ip_reass_free_complete_datagram+0x3e>
 800f79e:	4b3e      	ldr	r3, [pc, #248]	; (800f898 <ip_reass_free_complete_datagram+0x12c>)
 800f7a0:	22ad      	movs	r2, #173	; 0xad
 800f7a2:	4940      	ldr	r1, [pc, #256]	; (800f8a4 <ip_reass_free_complete_datagram+0x138>)
 800f7a4:	483e      	ldr	r0, [pc, #248]	; (800f8a0 <ip_reass_free_complete_datagram+0x134>)
 800f7a6:	f000 ffc9 	bl	801073c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	685b      	ldr	r3, [r3, #4]
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f7b2:	697b      	ldr	r3, [r7, #20]
 800f7b4:	889b      	ldrh	r3, [r3, #4]
 800f7b6:	b29b      	uxth	r3, r3
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d12a      	bne.n	800f812 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	685b      	ldr	r3, [r3, #4]
 800f7c0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	681a      	ldr	r2, [r3, #0]
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f7ca:	69bb      	ldr	r3, [r7, #24]
 800f7cc:	6858      	ldr	r0, [r3, #4]
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	3308      	adds	r3, #8
 800f7d2:	2214      	movs	r2, #20
 800f7d4:	4619      	mov	r1, r3
 800f7d6:	f001 f9ca 	bl	8010b6e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f7da:	2101      	movs	r1, #1
 800f7dc:	69b8      	ldr	r0, [r7, #24]
 800f7de:	f7ff fc47 	bl	800f070 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f7e2:	69b8      	ldr	r0, [r7, #24]
 800f7e4:	f7f8 fa56 	bl	8007c94 <pbuf_clen>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f7ec:	8bfa      	ldrh	r2, [r7, #30]
 800f7ee:	8a7b      	ldrh	r3, [r7, #18]
 800f7f0:	4413      	add	r3, r2
 800f7f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7f6:	db05      	blt.n	800f804 <ip_reass_free_complete_datagram+0x98>
 800f7f8:	4b27      	ldr	r3, [pc, #156]	; (800f898 <ip_reass_free_complete_datagram+0x12c>)
 800f7fa:	22bc      	movs	r2, #188	; 0xbc
 800f7fc:	492a      	ldr	r1, [pc, #168]	; (800f8a8 <ip_reass_free_complete_datagram+0x13c>)
 800f7fe:	4828      	ldr	r0, [pc, #160]	; (800f8a0 <ip_reass_free_complete_datagram+0x134>)
 800f800:	f000 ff9c 	bl	801073c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f804:	8bfa      	ldrh	r2, [r7, #30]
 800f806:	8a7b      	ldrh	r3, [r7, #18]
 800f808:	4413      	add	r3, r2
 800f80a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f80c:	69b8      	ldr	r0, [r7, #24]
 800f80e:	f7f8 f9b9 	bl	8007b84 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	685b      	ldr	r3, [r3, #4]
 800f816:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f818:	e01f      	b.n	800f85a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f81a:	69bb      	ldr	r3, [r7, #24]
 800f81c:	685b      	ldr	r3, [r3, #4]
 800f81e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f820:	69bb      	ldr	r3, [r7, #24]
 800f822:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f824:	697b      	ldr	r3, [r7, #20]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f82a:	68f8      	ldr	r0, [r7, #12]
 800f82c:	f7f8 fa32 	bl	8007c94 <pbuf_clen>
 800f830:	4603      	mov	r3, r0
 800f832:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f834:	8bfa      	ldrh	r2, [r7, #30]
 800f836:	8a7b      	ldrh	r3, [r7, #18]
 800f838:	4413      	add	r3, r2
 800f83a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f83e:	db05      	blt.n	800f84c <ip_reass_free_complete_datagram+0xe0>
 800f840:	4b15      	ldr	r3, [pc, #84]	; (800f898 <ip_reass_free_complete_datagram+0x12c>)
 800f842:	22cc      	movs	r2, #204	; 0xcc
 800f844:	4918      	ldr	r1, [pc, #96]	; (800f8a8 <ip_reass_free_complete_datagram+0x13c>)
 800f846:	4816      	ldr	r0, [pc, #88]	; (800f8a0 <ip_reass_free_complete_datagram+0x134>)
 800f848:	f000 ff78 	bl	801073c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f84c:	8bfa      	ldrh	r2, [r7, #30]
 800f84e:	8a7b      	ldrh	r3, [r7, #18]
 800f850:	4413      	add	r3, r2
 800f852:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f854:	68f8      	ldr	r0, [r7, #12]
 800f856:	f7f8 f995 	bl	8007b84 <pbuf_free>
  while (p != NULL) {
 800f85a:	69bb      	ldr	r3, [r7, #24]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d1dc      	bne.n	800f81a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f860:	6839      	ldr	r1, [r7, #0]
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f000 f8c2 	bl	800f9ec <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f868:	4b10      	ldr	r3, [pc, #64]	; (800f8ac <ip_reass_free_complete_datagram+0x140>)
 800f86a:	881b      	ldrh	r3, [r3, #0]
 800f86c:	8bfa      	ldrh	r2, [r7, #30]
 800f86e:	429a      	cmp	r2, r3
 800f870:	d905      	bls.n	800f87e <ip_reass_free_complete_datagram+0x112>
 800f872:	4b09      	ldr	r3, [pc, #36]	; (800f898 <ip_reass_free_complete_datagram+0x12c>)
 800f874:	22d2      	movs	r2, #210	; 0xd2
 800f876:	490e      	ldr	r1, [pc, #56]	; (800f8b0 <ip_reass_free_complete_datagram+0x144>)
 800f878:	4809      	ldr	r0, [pc, #36]	; (800f8a0 <ip_reass_free_complete_datagram+0x134>)
 800f87a:	f000 ff5f 	bl	801073c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f87e:	4b0b      	ldr	r3, [pc, #44]	; (800f8ac <ip_reass_free_complete_datagram+0x140>)
 800f880:	881a      	ldrh	r2, [r3, #0]
 800f882:	8bfb      	ldrh	r3, [r7, #30]
 800f884:	1ad3      	subs	r3, r2, r3
 800f886:	b29a      	uxth	r2, r3
 800f888:	4b08      	ldr	r3, [pc, #32]	; (800f8ac <ip_reass_free_complete_datagram+0x140>)
 800f88a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f88c:	8bfb      	ldrh	r3, [r7, #30]
}
 800f88e:	4618      	mov	r0, r3
 800f890:	3720      	adds	r7, #32
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}
 800f896:	bf00      	nop
 800f898:	0801428c 	.word	0x0801428c
 800f89c:	080142c8 	.word	0x080142c8
 800f8a0:	080142d4 	.word	0x080142d4
 800f8a4:	080142fc 	.word	0x080142fc
 800f8a8:	08014310 	.word	0x08014310
 800f8ac:	20008b18 	.word	0x20008b18
 800f8b0:	08014330 	.word	0x08014330

0800f8b4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b08a      	sub	sp, #40	; 0x28
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f8be:	2300      	movs	r3, #0
 800f8c0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f8d2:	4b28      	ldr	r3, [pc, #160]	; (800f974 <ip_reass_remove_oldest_datagram+0xc0>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f8d8:	e030      	b.n	800f93c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8dc:	695a      	ldr	r2, [r3, #20]
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	68db      	ldr	r3, [r3, #12]
 800f8e2:	429a      	cmp	r2, r3
 800f8e4:	d10c      	bne.n	800f900 <ip_reass_remove_oldest_datagram+0x4c>
 800f8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e8:	699a      	ldr	r2, [r3, #24]
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	691b      	ldr	r3, [r3, #16]
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	d106      	bne.n	800f900 <ip_reass_remove_oldest_datagram+0x4c>
 800f8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f4:	899a      	ldrh	r2, [r3, #12]
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	889b      	ldrh	r3, [r3, #4]
 800f8fa:	b29b      	uxth	r3, r3
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	d014      	beq.n	800f92a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f900:	693b      	ldr	r3, [r7, #16]
 800f902:	3301      	adds	r3, #1
 800f904:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f906:	6a3b      	ldr	r3, [r7, #32]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d104      	bne.n	800f916 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f90e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f910:	69fb      	ldr	r3, [r7, #28]
 800f912:	61bb      	str	r3, [r7, #24]
 800f914:	e009      	b.n	800f92a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f918:	7fda      	ldrb	r2, [r3, #31]
 800f91a:	6a3b      	ldr	r3, [r7, #32]
 800f91c:	7fdb      	ldrb	r3, [r3, #31]
 800f91e:	429a      	cmp	r2, r3
 800f920:	d803      	bhi.n	800f92a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f924:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f926:	69fb      	ldr	r3, [r7, #28]
 800f928:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d001      	beq.n	800f936 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f934:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800f93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d1cb      	bne.n	800f8da <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f942:	6a3b      	ldr	r3, [r7, #32]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d008      	beq.n	800f95a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f948:	69b9      	ldr	r1, [r7, #24]
 800f94a:	6a38      	ldr	r0, [r7, #32]
 800f94c:	f7ff ff0e 	bl	800f76c <ip_reass_free_complete_datagram>
 800f950:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f952:	697a      	ldr	r2, [r7, #20]
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	4413      	add	r3, r2
 800f958:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f95a:	697a      	ldr	r2, [r7, #20]
 800f95c:	683b      	ldr	r3, [r7, #0]
 800f95e:	429a      	cmp	r2, r3
 800f960:	da02      	bge.n	800f968 <ip_reass_remove_oldest_datagram+0xb4>
 800f962:	693b      	ldr	r3, [r7, #16]
 800f964:	2b01      	cmp	r3, #1
 800f966:	dcac      	bgt.n	800f8c2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f968:	697b      	ldr	r3, [r7, #20]
}
 800f96a:	4618      	mov	r0, r3
 800f96c:	3728      	adds	r7, #40	; 0x28
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}
 800f972:	bf00      	nop
 800f974:	20008b14 	.word	0x20008b14

0800f978 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b084      	sub	sp, #16
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
 800f980:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f982:	2004      	movs	r0, #4
 800f984:	f7f7 fa18 	bl	8006db8 <memp_malloc>
 800f988:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d110      	bne.n	800f9b2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f990:	6839      	ldr	r1, [r7, #0]
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f7ff ff8e 	bl	800f8b4 <ip_reass_remove_oldest_datagram>
 800f998:	4602      	mov	r2, r0
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	4293      	cmp	r3, r2
 800f99e:	dc03      	bgt.n	800f9a8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f9a0:	2004      	movs	r0, #4
 800f9a2:	f7f7 fa09 	bl	8006db8 <memp_malloc>
 800f9a6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d101      	bne.n	800f9b2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	e016      	b.n	800f9e0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f9b2:	2220      	movs	r2, #32
 800f9b4:	2100      	movs	r1, #0
 800f9b6:	68f8      	ldr	r0, [r7, #12]
 800f9b8:	f001 f850 	bl	8010a5c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	220f      	movs	r2, #15
 800f9c0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f9c2:	4b09      	ldr	r3, [pc, #36]	; (800f9e8 <ip_reass_enqueue_new_datagram+0x70>)
 800f9c4:	681a      	ldr	r2, [r3, #0]
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f9ca:	4a07      	ldr	r2, [pc, #28]	; (800f9e8 <ip_reass_enqueue_new_datagram+0x70>)
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	3308      	adds	r3, #8
 800f9d4:	2214      	movs	r2, #20
 800f9d6:	6879      	ldr	r1, [r7, #4]
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f001 f8c8 	bl	8010b6e <memcpy>
  return ipr;
 800f9de:	68fb      	ldr	r3, [r7, #12]
}
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3710      	adds	r7, #16
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}
 800f9e8:	20008b14 	.word	0x20008b14

0800f9ec <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b082      	sub	sp, #8
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
 800f9f4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f9f6:	4b10      	ldr	r3, [pc, #64]	; (800fa38 <ip_reass_dequeue_datagram+0x4c>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	687a      	ldr	r2, [r7, #4]
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d104      	bne.n	800fa0a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	4a0c      	ldr	r2, [pc, #48]	; (800fa38 <ip_reass_dequeue_datagram+0x4c>)
 800fa06:	6013      	str	r3, [r2, #0]
 800fa08:	e00d      	b.n	800fa26 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d106      	bne.n	800fa1e <ip_reass_dequeue_datagram+0x32>
 800fa10:	4b0a      	ldr	r3, [pc, #40]	; (800fa3c <ip_reass_dequeue_datagram+0x50>)
 800fa12:	f240 1245 	movw	r2, #325	; 0x145
 800fa16:	490a      	ldr	r1, [pc, #40]	; (800fa40 <ip_reass_dequeue_datagram+0x54>)
 800fa18:	480a      	ldr	r0, [pc, #40]	; (800fa44 <ip_reass_dequeue_datagram+0x58>)
 800fa1a:	f000 fe8f 	bl	801073c <iprintf>
    prev->next = ipr->next;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681a      	ldr	r2, [r3, #0]
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800fa26:	6879      	ldr	r1, [r7, #4]
 800fa28:	2004      	movs	r0, #4
 800fa2a:	f7f7 fa35 	bl	8006e98 <memp_free>
}
 800fa2e:	bf00      	nop
 800fa30:	3708      	adds	r7, #8
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}
 800fa36:	bf00      	nop
 800fa38:	20008b14 	.word	0x20008b14
 800fa3c:	0801428c 	.word	0x0801428c
 800fa40:	08014354 	.word	0x08014354
 800fa44:	080142d4 	.word	0x080142d4

0800fa48 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b08c      	sub	sp, #48	; 0x30
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	60f8      	str	r0, [r7, #12]
 800fa50:	60b9      	str	r1, [r7, #8]
 800fa52:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800fa54:	2300      	movs	r3, #0
 800fa56:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800fa58:	2301      	movs	r3, #1
 800fa5a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	685b      	ldr	r3, [r3, #4]
 800fa60:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fa62:	69fb      	ldr	r3, [r7, #28]
 800fa64:	885b      	ldrh	r3, [r3, #2]
 800fa66:	b29b      	uxth	r3, r3
 800fa68:	4618      	mov	r0, r3
 800fa6a:	f7f6 fd2d 	bl	80064c8 <lwip_htons>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800fa72:	69fb      	ldr	r3, [r7, #28]
 800fa74:	781b      	ldrb	r3, [r3, #0]
 800fa76:	f003 030f 	and.w	r3, r3, #15
 800fa7a:	b2db      	uxtb	r3, r3
 800fa7c:	009b      	lsls	r3, r3, #2
 800fa7e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800fa80:	7e7b      	ldrb	r3, [r7, #25]
 800fa82:	b29b      	uxth	r3, r3
 800fa84:	8b7a      	ldrh	r2, [r7, #26]
 800fa86:	429a      	cmp	r2, r3
 800fa88:	d202      	bcs.n	800fa90 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fa8a:	f04f 33ff 	mov.w	r3, #4294967295
 800fa8e:	e135      	b.n	800fcfc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800fa90:	7e7b      	ldrb	r3, [r7, #25]
 800fa92:	b29b      	uxth	r3, r3
 800fa94:	8b7a      	ldrh	r2, [r7, #26]
 800fa96:	1ad3      	subs	r3, r2, r3
 800fa98:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800fa9a:	69fb      	ldr	r3, [r7, #28]
 800fa9c:	88db      	ldrh	r3, [r3, #6]
 800fa9e:	b29b      	uxth	r3, r3
 800faa0:	4618      	mov	r0, r3
 800faa2:	f7f6 fd11 	bl	80064c8 <lwip_htons>
 800faa6:	4603      	mov	r3, r0
 800faa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800faac:	b29b      	uxth	r3, r3
 800faae:	00db      	lsls	r3, r3, #3
 800fab0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800fab2:	68bb      	ldr	r3, [r7, #8]
 800fab4:	685b      	ldr	r3, [r3, #4]
 800fab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800fab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faba:	2200      	movs	r2, #0
 800fabc:	701a      	strb	r2, [r3, #0]
 800fabe:	2200      	movs	r2, #0
 800fac0:	705a      	strb	r2, [r3, #1]
 800fac2:	2200      	movs	r2, #0
 800fac4:	709a      	strb	r2, [r3, #2]
 800fac6:	2200      	movs	r2, #0
 800fac8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800faca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800facc:	8afa      	ldrh	r2, [r7, #22]
 800face:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800fad0:	8afa      	ldrh	r2, [r7, #22]
 800fad2:	8b7b      	ldrh	r3, [r7, #26]
 800fad4:	4413      	add	r3, r2
 800fad6:	b29a      	uxth	r2, r3
 800fad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fada:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800fadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fade:	88db      	ldrh	r3, [r3, #6]
 800fae0:	b29b      	uxth	r3, r3
 800fae2:	8afa      	ldrh	r2, [r7, #22]
 800fae4:	429a      	cmp	r2, r3
 800fae6:	d902      	bls.n	800faee <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fae8:	f04f 33ff 	mov.w	r3, #4294967295
 800faec:	e106      	b.n	800fcfc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	685b      	ldr	r3, [r3, #4]
 800faf2:	627b      	str	r3, [r7, #36]	; 0x24
 800faf4:	e068      	b.n	800fbc8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800faf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf8:	685b      	ldr	r3, [r3, #4]
 800fafa:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800fafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fafe:	889b      	ldrh	r3, [r3, #4]
 800fb00:	b29a      	uxth	r2, r3
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	889b      	ldrh	r3, [r3, #4]
 800fb06:	b29b      	uxth	r3, r3
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	d235      	bcs.n	800fb78 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800fb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb10:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800fb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d020      	beq.n	800fb5a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800fb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb1a:	889b      	ldrh	r3, [r3, #4]
 800fb1c:	b29a      	uxth	r2, r3
 800fb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb20:	88db      	ldrh	r3, [r3, #6]
 800fb22:	b29b      	uxth	r3, r3
 800fb24:	429a      	cmp	r2, r3
 800fb26:	d307      	bcc.n	800fb38 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800fb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb2a:	88db      	ldrh	r3, [r3, #6]
 800fb2c:	b29a      	uxth	r2, r3
 800fb2e:	693b      	ldr	r3, [r7, #16]
 800fb30:	889b      	ldrh	r3, [r3, #4]
 800fb32:	b29b      	uxth	r3, r3
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d902      	bls.n	800fb3e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fb38:	f04f 33ff 	mov.w	r3, #4294967295
 800fb3c:	e0de      	b.n	800fcfc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800fb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb40:	68ba      	ldr	r2, [r7, #8]
 800fb42:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800fb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb46:	88db      	ldrh	r3, [r3, #6]
 800fb48:	b29a      	uxth	r2, r3
 800fb4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb4c:	889b      	ldrh	r3, [r3, #4]
 800fb4e:	b29b      	uxth	r3, r3
 800fb50:	429a      	cmp	r2, r3
 800fb52:	d03d      	beq.n	800fbd0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800fb54:	2300      	movs	r3, #0
 800fb56:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800fb58:	e03a      	b.n	800fbd0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800fb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb5c:	88db      	ldrh	r3, [r3, #6]
 800fb5e:	b29a      	uxth	r2, r3
 800fb60:	693b      	ldr	r3, [r7, #16]
 800fb62:	889b      	ldrh	r3, [r3, #4]
 800fb64:	b29b      	uxth	r3, r3
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d902      	bls.n	800fb70 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fb6a:	f04f 33ff 	mov.w	r3, #4294967295
 800fb6e:	e0c5      	b.n	800fcfc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	68ba      	ldr	r2, [r7, #8]
 800fb74:	605a      	str	r2, [r3, #4]
      break;
 800fb76:	e02b      	b.n	800fbd0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800fb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb7a:	889b      	ldrh	r3, [r3, #4]
 800fb7c:	b29a      	uxth	r2, r3
 800fb7e:	693b      	ldr	r3, [r7, #16]
 800fb80:	889b      	ldrh	r3, [r3, #4]
 800fb82:	b29b      	uxth	r3, r3
 800fb84:	429a      	cmp	r2, r3
 800fb86:	d102      	bne.n	800fb8e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fb88:	f04f 33ff 	mov.w	r3, #4294967295
 800fb8c:	e0b6      	b.n	800fcfc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800fb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb90:	889b      	ldrh	r3, [r3, #4]
 800fb92:	b29a      	uxth	r2, r3
 800fb94:	693b      	ldr	r3, [r7, #16]
 800fb96:	88db      	ldrh	r3, [r3, #6]
 800fb98:	b29b      	uxth	r3, r3
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	d202      	bcs.n	800fba4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fb9e:	f04f 33ff 	mov.w	r3, #4294967295
 800fba2:	e0ab      	b.n	800fcfc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800fba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d009      	beq.n	800fbbe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800fbaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbac:	88db      	ldrh	r3, [r3, #6]
 800fbae:	b29a      	uxth	r2, r3
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	889b      	ldrh	r3, [r3, #4]
 800fbb4:	b29b      	uxth	r3, r3
 800fbb6:	429a      	cmp	r2, r3
 800fbb8:	d001      	beq.n	800fbbe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800fbba:	2300      	movs	r3, #0
 800fbbc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800fbbe:	693b      	ldr	r3, [r7, #16]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800fbc4:	693b      	ldr	r3, [r7, #16]
 800fbc6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800fbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d193      	bne.n	800faf6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800fbce:	e000      	b.n	800fbd2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800fbd0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800fbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d12d      	bne.n	800fc34 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800fbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d01c      	beq.n	800fc18 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800fbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbe0:	88db      	ldrh	r3, [r3, #6]
 800fbe2:	b29a      	uxth	r2, r3
 800fbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe6:	889b      	ldrh	r3, [r3, #4]
 800fbe8:	b29b      	uxth	r3, r3
 800fbea:	429a      	cmp	r2, r3
 800fbec:	d906      	bls.n	800fbfc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800fbee:	4b45      	ldr	r3, [pc, #276]	; (800fd04 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fbf0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800fbf4:	4944      	ldr	r1, [pc, #272]	; (800fd08 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800fbf6:	4845      	ldr	r0, [pc, #276]	; (800fd0c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fbf8:	f000 fda0 	bl	801073c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800fbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbfe:	68ba      	ldr	r2, [r7, #8]
 800fc00:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800fc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc04:	88db      	ldrh	r3, [r3, #6]
 800fc06:	b29a      	uxth	r2, r3
 800fc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc0a:	889b      	ldrh	r3, [r3, #4]
 800fc0c:	b29b      	uxth	r3, r3
 800fc0e:	429a      	cmp	r2, r3
 800fc10:	d010      	beq.n	800fc34 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800fc12:	2300      	movs	r3, #0
 800fc14:	623b      	str	r3, [r7, #32]
 800fc16:	e00d      	b.n	800fc34 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	685b      	ldr	r3, [r3, #4]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d006      	beq.n	800fc2e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800fc20:	4b38      	ldr	r3, [pc, #224]	; (800fd04 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fc22:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800fc26:	493a      	ldr	r1, [pc, #232]	; (800fd10 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800fc28:	4838      	ldr	r0, [pc, #224]	; (800fd0c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fc2a:	f000 fd87 	bl	801073c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	68ba      	ldr	r2, [r7, #8]
 800fc32:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d105      	bne.n	800fc46 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	7f9b      	ldrb	r3, [r3, #30]
 800fc3e:	f003 0301 	and.w	r3, r3, #1
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d059      	beq.n	800fcfa <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800fc46:	6a3b      	ldr	r3, [r7, #32]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d04f      	beq.n	800fcec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	685b      	ldr	r3, [r3, #4]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d006      	beq.n	800fc62 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	685b      	ldr	r3, [r3, #4]
 800fc58:	685b      	ldr	r3, [r3, #4]
 800fc5a:	889b      	ldrh	r3, [r3, #4]
 800fc5c:	b29b      	uxth	r3, r3
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d002      	beq.n	800fc68 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800fc62:	2300      	movs	r3, #0
 800fc64:	623b      	str	r3, [r7, #32]
 800fc66:	e041      	b.n	800fcec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800fc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc6a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800fc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800fc72:	e012      	b.n	800fc9a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800fc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc76:	685b      	ldr	r3, [r3, #4]
 800fc78:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800fc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc7c:	88db      	ldrh	r3, [r3, #6]
 800fc7e:	b29a      	uxth	r2, r3
 800fc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc82:	889b      	ldrh	r3, [r3, #4]
 800fc84:	b29b      	uxth	r3, r3
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d002      	beq.n	800fc90 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	623b      	str	r3, [r7, #32]
            break;
 800fc8e:	e007      	b.n	800fca0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800fc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc92:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800fc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800fc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d1e9      	bne.n	800fc74 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800fca0:	6a3b      	ldr	r3, [r7, #32]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d022      	beq.n	800fcec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	685b      	ldr	r3, [r3, #4]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d106      	bne.n	800fcbc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800fcae:	4b15      	ldr	r3, [pc, #84]	; (800fd04 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fcb0:	f240 12df 	movw	r2, #479	; 0x1df
 800fcb4:	4917      	ldr	r1, [pc, #92]	; (800fd14 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800fcb6:	4815      	ldr	r0, [pc, #84]	; (800fd0c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fcb8:	f000 fd40 	bl	801073c <iprintf>
          LWIP_ASSERT("sanity check",
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	685b      	ldr	r3, [r3, #4]
 800fcc0:	685b      	ldr	r3, [r3, #4]
 800fcc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcc4:	429a      	cmp	r2, r3
 800fcc6:	d106      	bne.n	800fcd6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800fcc8:	4b0e      	ldr	r3, [pc, #56]	; (800fd04 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fcca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800fcce:	4911      	ldr	r1, [pc, #68]	; (800fd14 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800fcd0:	480e      	ldr	r0, [pc, #56]	; (800fd0c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fcd2:	f000 fd33 	bl	801073c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800fcd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d006      	beq.n	800fcec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800fcde:	4b09      	ldr	r3, [pc, #36]	; (800fd04 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fce0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800fce4:	490c      	ldr	r1, [pc, #48]	; (800fd18 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800fce6:	4809      	ldr	r0, [pc, #36]	; (800fd0c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fce8:	f000 fd28 	bl	801073c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800fcec:	6a3b      	ldr	r3, [r7, #32]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	bf14      	ite	ne
 800fcf2:	2301      	movne	r3, #1
 800fcf4:	2300      	moveq	r3, #0
 800fcf6:	b2db      	uxtb	r3, r3
 800fcf8:	e000      	b.n	800fcfc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800fcfa:	2300      	movs	r3, #0
}
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	3730      	adds	r7, #48	; 0x30
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}
 800fd04:	0801428c 	.word	0x0801428c
 800fd08:	08014370 	.word	0x08014370
 800fd0c:	080142d4 	.word	0x080142d4
 800fd10:	08014390 	.word	0x08014390
 800fd14:	080143c8 	.word	0x080143c8
 800fd18:	080143d8 	.word	0x080143d8

0800fd1c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b08e      	sub	sp, #56	; 0x38
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	685b      	ldr	r3, [r3, #4]
 800fd28:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800fd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd2c:	781b      	ldrb	r3, [r3, #0]
 800fd2e:	f003 030f 	and.w	r3, r3, #15
 800fd32:	b2db      	uxtb	r3, r3
 800fd34:	009b      	lsls	r3, r3, #2
 800fd36:	b2db      	uxtb	r3, r3
 800fd38:	2b14      	cmp	r3, #20
 800fd3a:	f040 8171 	bne.w	8010020 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800fd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd40:	88db      	ldrh	r3, [r3, #6]
 800fd42:	b29b      	uxth	r3, r3
 800fd44:	4618      	mov	r0, r3
 800fd46:	f7f6 fbbf 	bl	80064c8 <lwip_htons>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fd50:	b29b      	uxth	r3, r3
 800fd52:	00db      	lsls	r3, r3, #3
 800fd54:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd58:	885b      	ldrh	r3, [r3, #2]
 800fd5a:	b29b      	uxth	r3, r3
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f7f6 fbb3 	bl	80064c8 <lwip_htons>
 800fd62:	4603      	mov	r3, r0
 800fd64:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800fd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd68:	781b      	ldrb	r3, [r3, #0]
 800fd6a:	f003 030f 	and.w	r3, r3, #15
 800fd6e:	b2db      	uxtb	r3, r3
 800fd70:	009b      	lsls	r3, r3, #2
 800fd72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800fd76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fd7a:	b29b      	uxth	r3, r3
 800fd7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	f0c0 8150 	bcc.w	8010024 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800fd84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fd88:	b29b      	uxth	r3, r3
 800fd8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fd8c:	1ad3      	subs	r3, r2, r3
 800fd8e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800fd90:	6878      	ldr	r0, [r7, #4]
 800fd92:	f7f7 ff7f 	bl	8007c94 <pbuf_clen>
 800fd96:	4603      	mov	r3, r0
 800fd98:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800fd9a:	4b8c      	ldr	r3, [pc, #560]	; (800ffcc <ip4_reass+0x2b0>)
 800fd9c:	881b      	ldrh	r3, [r3, #0]
 800fd9e:	461a      	mov	r2, r3
 800fda0:	8c3b      	ldrh	r3, [r7, #32]
 800fda2:	4413      	add	r3, r2
 800fda4:	2b0a      	cmp	r3, #10
 800fda6:	dd10      	ble.n	800fdca <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fda8:	8c3b      	ldrh	r3, [r7, #32]
 800fdaa:	4619      	mov	r1, r3
 800fdac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdae:	f7ff fd81 	bl	800f8b4 <ip_reass_remove_oldest_datagram>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	f000 8137 	beq.w	8010028 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800fdba:	4b84      	ldr	r3, [pc, #528]	; (800ffcc <ip4_reass+0x2b0>)
 800fdbc:	881b      	ldrh	r3, [r3, #0]
 800fdbe:	461a      	mov	r2, r3
 800fdc0:	8c3b      	ldrh	r3, [r7, #32]
 800fdc2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fdc4:	2b0a      	cmp	r3, #10
 800fdc6:	f300 812f 	bgt.w	8010028 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fdca:	4b81      	ldr	r3, [pc, #516]	; (800ffd0 <ip4_reass+0x2b4>)
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	633b      	str	r3, [r7, #48]	; 0x30
 800fdd0:	e015      	b.n	800fdfe <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800fdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdd4:	695a      	ldr	r2, [r3, #20]
 800fdd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdd8:	68db      	ldr	r3, [r3, #12]
 800fdda:	429a      	cmp	r2, r3
 800fddc:	d10c      	bne.n	800fdf8 <ip4_reass+0xdc>
 800fdde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fde0:	699a      	ldr	r2, [r3, #24]
 800fde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fde4:	691b      	ldr	r3, [r3, #16]
 800fde6:	429a      	cmp	r2, r3
 800fde8:	d106      	bne.n	800fdf8 <ip4_reass+0xdc>
 800fdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdec:	899a      	ldrh	r2, [r3, #12]
 800fdee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdf0:	889b      	ldrh	r3, [r3, #4]
 800fdf2:	b29b      	uxth	r3, r3
 800fdf4:	429a      	cmp	r2, r3
 800fdf6:	d006      	beq.n	800fe06 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fdf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	633b      	str	r3, [r7, #48]	; 0x30
 800fdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d1e6      	bne.n	800fdd2 <ip4_reass+0xb6>
 800fe04:	e000      	b.n	800fe08 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800fe06:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800fe08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d109      	bne.n	800fe22 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800fe0e:	8c3b      	ldrh	r3, [r7, #32]
 800fe10:	4619      	mov	r1, r3
 800fe12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe14:	f7ff fdb0 	bl	800f978 <ip_reass_enqueue_new_datagram>
 800fe18:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800fe1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d11c      	bne.n	800fe5a <ip4_reass+0x13e>
      goto nullreturn;
 800fe20:	e105      	b.n	801002e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fe22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe24:	88db      	ldrh	r3, [r3, #6]
 800fe26:	b29b      	uxth	r3, r3
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f7f6 fb4d 	bl	80064c8 <lwip_htons>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d110      	bne.n	800fe5a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800fe38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe3a:	89db      	ldrh	r3, [r3, #14]
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f7f6 fb43 	bl	80064c8 <lwip_htons>
 800fe42:	4603      	mov	r3, r0
 800fe44:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d006      	beq.n	800fe5a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800fe4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe4e:	3308      	adds	r3, #8
 800fe50:	2214      	movs	r2, #20
 800fe52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fe54:	4618      	mov	r0, r3
 800fe56:	f000 fe8a 	bl	8010b6e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800fe5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe5c:	88db      	ldrh	r3, [r3, #6]
 800fe5e:	b29b      	uxth	r3, r3
 800fe60:	f003 0320 	and.w	r3, r3, #32
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	bf0c      	ite	eq
 800fe68:	2301      	moveq	r3, #1
 800fe6a:	2300      	movne	r3, #0
 800fe6c:	b2db      	uxtb	r3, r3
 800fe6e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800fe70:	69fb      	ldr	r3, [r7, #28]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d00e      	beq.n	800fe94 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800fe76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fe78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe7a:	4413      	add	r3, r2
 800fe7c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800fe7e:	8b7a      	ldrh	r2, [r7, #26]
 800fe80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fe82:	429a      	cmp	r2, r3
 800fe84:	f0c0 80a0 	bcc.w	800ffc8 <ip4_reass+0x2ac>
 800fe88:	8b7b      	ldrh	r3, [r7, #26]
 800fe8a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800fe8e:	4293      	cmp	r3, r2
 800fe90:	f200 809a 	bhi.w	800ffc8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800fe94:	69fa      	ldr	r2, [r7, #28]
 800fe96:	6879      	ldr	r1, [r7, #4]
 800fe98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe9a:	f7ff fdd5 	bl	800fa48 <ip_reass_chain_frag_into_datagram_and_validate>
 800fe9e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800fea0:	697b      	ldr	r3, [r7, #20]
 800fea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fea6:	f000 809b 	beq.w	800ffe0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800feaa:	4b48      	ldr	r3, [pc, #288]	; (800ffcc <ip4_reass+0x2b0>)
 800feac:	881a      	ldrh	r2, [r3, #0]
 800feae:	8c3b      	ldrh	r3, [r7, #32]
 800feb0:	4413      	add	r3, r2
 800feb2:	b29a      	uxth	r2, r3
 800feb4:	4b45      	ldr	r3, [pc, #276]	; (800ffcc <ip4_reass+0x2b0>)
 800feb6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800feb8:	69fb      	ldr	r3, [r7, #28]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d00d      	beq.n	800feda <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800febe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fec0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fec2:	4413      	add	r3, r2
 800fec4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800fec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fec8:	8a7a      	ldrh	r2, [r7, #18]
 800feca:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800fecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fece:	7f9b      	ldrb	r3, [r3, #30]
 800fed0:	f043 0301 	orr.w	r3, r3, #1
 800fed4:	b2da      	uxtb	r2, r3
 800fed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800feda:	697b      	ldr	r3, [r7, #20]
 800fedc:	2b01      	cmp	r3, #1
 800fede:	d171      	bne.n	800ffc4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800fee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fee2:	8b9b      	ldrh	r3, [r3, #28]
 800fee4:	3314      	adds	r3, #20
 800fee6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800fee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feea:	685b      	ldr	r3, [r3, #4]
 800feec:	685b      	ldr	r3, [r3, #4]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800fef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fef4:	685b      	ldr	r3, [r3, #4]
 800fef6:	685b      	ldr	r3, [r3, #4]
 800fef8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800fefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fefc:	3308      	adds	r3, #8
 800fefe:	2214      	movs	r2, #20
 800ff00:	4619      	mov	r1, r3
 800ff02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff04:	f000 fe33 	bl	8010b6e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ff08:	8a3b      	ldrh	r3, [r7, #16]
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	f7f6 fadc 	bl	80064c8 <lwip_htons>
 800ff10:	4603      	mov	r3, r0
 800ff12:	461a      	mov	r2, r3
 800ff14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff16:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ff18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	719a      	strb	r2, [r3, #6]
 800ff1e:	2200      	movs	r2, #0
 800ff20:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ff22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff24:	2200      	movs	r2, #0
 800ff26:	729a      	strb	r2, [r3, #10]
 800ff28:	2200      	movs	r2, #0
 800ff2a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800ff2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff2e:	685b      	ldr	r3, [r3, #4]
 800ff30:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800ff32:	e00d      	b.n	800ff50 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800ff34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff36:	685b      	ldr	r3, [r3, #4]
 800ff38:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800ff3a:	2114      	movs	r1, #20
 800ff3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ff3e:	f7f7 fd9b 	bl	8007a78 <pbuf_remove_header>
      pbuf_cat(p, r);
 800ff42:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ff44:	6878      	ldr	r0, [r7, #4]
 800ff46:	f7f7 fedf 	bl	8007d08 <pbuf_cat>
      r = iprh->next_pbuf;
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800ff50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d1ee      	bne.n	800ff34 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800ff56:	4b1e      	ldr	r3, [pc, #120]	; (800ffd0 <ip4_reass+0x2b4>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff5c:	429a      	cmp	r2, r3
 800ff5e:	d102      	bne.n	800ff66 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800ff60:	2300      	movs	r3, #0
 800ff62:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff64:	e010      	b.n	800ff88 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ff66:	4b1a      	ldr	r3, [pc, #104]	; (800ffd0 <ip4_reass+0x2b4>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff6c:	e007      	b.n	800ff7e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800ff6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff74:	429a      	cmp	r2, r3
 800ff76:	d006      	beq.n	800ff86 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ff78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d1f4      	bne.n	800ff6e <ip4_reass+0x252>
 800ff84:	e000      	b.n	800ff88 <ip4_reass+0x26c>
          break;
 800ff86:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800ff88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff8c:	f7ff fd2e 	bl	800f9ec <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800ff90:	6878      	ldr	r0, [r7, #4]
 800ff92:	f7f7 fe7f 	bl	8007c94 <pbuf_clen>
 800ff96:	4603      	mov	r3, r0
 800ff98:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800ff9a:	4b0c      	ldr	r3, [pc, #48]	; (800ffcc <ip4_reass+0x2b0>)
 800ff9c:	881b      	ldrh	r3, [r3, #0]
 800ff9e:	8c3a      	ldrh	r2, [r7, #32]
 800ffa0:	429a      	cmp	r2, r3
 800ffa2:	d906      	bls.n	800ffb2 <ip4_reass+0x296>
 800ffa4:	4b0b      	ldr	r3, [pc, #44]	; (800ffd4 <ip4_reass+0x2b8>)
 800ffa6:	f240 229b 	movw	r2, #667	; 0x29b
 800ffaa:	490b      	ldr	r1, [pc, #44]	; (800ffd8 <ip4_reass+0x2bc>)
 800ffac:	480b      	ldr	r0, [pc, #44]	; (800ffdc <ip4_reass+0x2c0>)
 800ffae:	f000 fbc5 	bl	801073c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800ffb2:	4b06      	ldr	r3, [pc, #24]	; (800ffcc <ip4_reass+0x2b0>)
 800ffb4:	881a      	ldrh	r2, [r3, #0]
 800ffb6:	8c3b      	ldrh	r3, [r7, #32]
 800ffb8:	1ad3      	subs	r3, r2, r3
 800ffba:	b29a      	uxth	r2, r3
 800ffbc:	4b03      	ldr	r3, [pc, #12]	; (800ffcc <ip4_reass+0x2b0>)
 800ffbe:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	e038      	b.n	8010036 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	e036      	b.n	8010036 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800ffc8:	bf00      	nop
 800ffca:	e00a      	b.n	800ffe2 <ip4_reass+0x2c6>
 800ffcc:	20008b18 	.word	0x20008b18
 800ffd0:	20008b14 	.word	0x20008b14
 800ffd4:	0801428c 	.word	0x0801428c
 800ffd8:	080143fc 	.word	0x080143fc
 800ffdc:	080142d4 	.word	0x080142d4
    goto nullreturn_ipr;
 800ffe0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800ffe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d106      	bne.n	800fff6 <ip4_reass+0x2da>
 800ffe8:	4b15      	ldr	r3, [pc, #84]	; (8010040 <ip4_reass+0x324>)
 800ffea:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800ffee:	4915      	ldr	r1, [pc, #84]	; (8010044 <ip4_reass+0x328>)
 800fff0:	4815      	ldr	r0, [pc, #84]	; (8010048 <ip4_reass+0x32c>)
 800fff2:	f000 fba3 	bl	801073c <iprintf>
  if (ipr->p == NULL) {
 800fff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fff8:	685b      	ldr	r3, [r3, #4]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d116      	bne.n	801002c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800fffe:	4b13      	ldr	r3, [pc, #76]	; (801004c <ip4_reass+0x330>)
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010004:	429a      	cmp	r2, r3
 8010006:	d006      	beq.n	8010016 <ip4_reass+0x2fa>
 8010008:	4b0d      	ldr	r3, [pc, #52]	; (8010040 <ip4_reass+0x324>)
 801000a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801000e:	4910      	ldr	r1, [pc, #64]	; (8010050 <ip4_reass+0x334>)
 8010010:	480d      	ldr	r0, [pc, #52]	; (8010048 <ip4_reass+0x32c>)
 8010012:	f000 fb93 	bl	801073c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010016:	2100      	movs	r1, #0
 8010018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801001a:	f7ff fce7 	bl	800f9ec <ip_reass_dequeue_datagram>
 801001e:	e006      	b.n	801002e <ip4_reass+0x312>
    goto nullreturn;
 8010020:	bf00      	nop
 8010022:	e004      	b.n	801002e <ip4_reass+0x312>
    goto nullreturn;
 8010024:	bf00      	nop
 8010026:	e002      	b.n	801002e <ip4_reass+0x312>
      goto nullreturn;
 8010028:	bf00      	nop
 801002a:	e000      	b.n	801002e <ip4_reass+0x312>
  }

nullreturn:
 801002c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	f7f7 fda8 	bl	8007b84 <pbuf_free>
  return NULL;
 8010034:	2300      	movs	r3, #0
}
 8010036:	4618      	mov	r0, r3
 8010038:	3738      	adds	r7, #56	; 0x38
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}
 801003e:	bf00      	nop
 8010040:	0801428c 	.word	0x0801428c
 8010044:	08014418 	.word	0x08014418
 8010048:	080142d4 	.word	0x080142d4
 801004c:	20008b14 	.word	0x20008b14
 8010050:	08014424 	.word	0x08014424

08010054 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010058:	2005      	movs	r0, #5
 801005a:	f7f6 fead 	bl	8006db8 <memp_malloc>
 801005e:	4603      	mov	r3, r0
}
 8010060:	4618      	mov	r0, r3
 8010062:	bd80      	pop	{r7, pc}

08010064 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b082      	sub	sp, #8
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d106      	bne.n	8010080 <ip_frag_free_pbuf_custom_ref+0x1c>
 8010072:	4b07      	ldr	r3, [pc, #28]	; (8010090 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8010074:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8010078:	4906      	ldr	r1, [pc, #24]	; (8010094 <ip_frag_free_pbuf_custom_ref+0x30>)
 801007a:	4807      	ldr	r0, [pc, #28]	; (8010098 <ip_frag_free_pbuf_custom_ref+0x34>)
 801007c:	f000 fb5e 	bl	801073c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8010080:	6879      	ldr	r1, [r7, #4]
 8010082:	2005      	movs	r0, #5
 8010084:	f7f6 ff08 	bl	8006e98 <memp_free>
}
 8010088:	bf00      	nop
 801008a:	3708      	adds	r7, #8
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}
 8010090:	0801428c 	.word	0x0801428c
 8010094:	08014444 	.word	0x08014444
 8010098:	080142d4 	.word	0x080142d4

0801009c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b084      	sub	sp, #16
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d106      	bne.n	80100bc <ipfrag_free_pbuf_custom+0x20>
 80100ae:	4b11      	ldr	r3, [pc, #68]	; (80100f4 <ipfrag_free_pbuf_custom+0x58>)
 80100b0:	f240 22ce 	movw	r2, #718	; 0x2ce
 80100b4:	4910      	ldr	r1, [pc, #64]	; (80100f8 <ipfrag_free_pbuf_custom+0x5c>)
 80100b6:	4811      	ldr	r0, [pc, #68]	; (80100fc <ipfrag_free_pbuf_custom+0x60>)
 80100b8:	f000 fb40 	bl	801073c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80100bc:	68fa      	ldr	r2, [r7, #12]
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	429a      	cmp	r2, r3
 80100c2:	d006      	beq.n	80100d2 <ipfrag_free_pbuf_custom+0x36>
 80100c4:	4b0b      	ldr	r3, [pc, #44]	; (80100f4 <ipfrag_free_pbuf_custom+0x58>)
 80100c6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80100ca:	490d      	ldr	r1, [pc, #52]	; (8010100 <ipfrag_free_pbuf_custom+0x64>)
 80100cc:	480b      	ldr	r0, [pc, #44]	; (80100fc <ipfrag_free_pbuf_custom+0x60>)
 80100ce:	f000 fb35 	bl	801073c <iprintf>
  if (pcr->original != NULL) {
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	695b      	ldr	r3, [r3, #20]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d004      	beq.n	80100e4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	695b      	ldr	r3, [r3, #20]
 80100de:	4618      	mov	r0, r3
 80100e0:	f7f7 fd50 	bl	8007b84 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80100e4:	68f8      	ldr	r0, [r7, #12]
 80100e6:	f7ff ffbd 	bl	8010064 <ip_frag_free_pbuf_custom_ref>
}
 80100ea:	bf00      	nop
 80100ec:	3710      	adds	r7, #16
 80100ee:	46bd      	mov	sp, r7
 80100f0:	bd80      	pop	{r7, pc}
 80100f2:	bf00      	nop
 80100f4:	0801428c 	.word	0x0801428c
 80100f8:	08014450 	.word	0x08014450
 80100fc:	080142d4 	.word	0x080142d4
 8010100:	0801445c 	.word	0x0801445c

08010104 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b094      	sub	sp, #80	; 0x50
 8010108:	af02      	add	r7, sp, #8
 801010a:	60f8      	str	r0, [r7, #12]
 801010c:	60b9      	str	r1, [r7, #8]
 801010e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010110:	2300      	movs	r3, #0
 8010112:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801011a:	3b14      	subs	r3, #20
 801011c:	2b00      	cmp	r3, #0
 801011e:	da00      	bge.n	8010122 <ip4_frag+0x1e>
 8010120:	3307      	adds	r3, #7
 8010122:	10db      	asrs	r3, r3, #3
 8010124:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8010126:	2314      	movs	r3, #20
 8010128:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	685b      	ldr	r3, [r3, #4]
 801012e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8010130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010132:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010136:	781b      	ldrb	r3, [r3, #0]
 8010138:	f003 030f 	and.w	r3, r3, #15
 801013c:	b2db      	uxtb	r3, r3
 801013e:	009b      	lsls	r3, r3, #2
 8010140:	b2db      	uxtb	r3, r3
 8010142:	2b14      	cmp	r3, #20
 8010144:	d002      	beq.n	801014c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8010146:	f06f 0305 	mvn.w	r3, #5
 801014a:	e110      	b.n	801036e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	895b      	ldrh	r3, [r3, #10]
 8010150:	2b13      	cmp	r3, #19
 8010152:	d809      	bhi.n	8010168 <ip4_frag+0x64>
 8010154:	4b88      	ldr	r3, [pc, #544]	; (8010378 <ip4_frag+0x274>)
 8010156:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801015a:	4988      	ldr	r1, [pc, #544]	; (801037c <ip4_frag+0x278>)
 801015c:	4888      	ldr	r0, [pc, #544]	; (8010380 <ip4_frag+0x27c>)
 801015e:	f000 faed 	bl	801073c <iprintf>
 8010162:	f06f 0305 	mvn.w	r3, #5
 8010166:	e102      	b.n	801036e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801016a:	88db      	ldrh	r3, [r3, #6]
 801016c:	b29b      	uxth	r3, r3
 801016e:	4618      	mov	r0, r3
 8010170:	f7f6 f9aa 	bl	80064c8 <lwip_htons>
 8010174:	4603      	mov	r3, r0
 8010176:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8010178:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801017a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801017e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8010182:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010184:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010188:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	891b      	ldrh	r3, [r3, #8]
 801018e:	3b14      	subs	r3, #20
 8010190:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8010194:	e0e1      	b.n	801035a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010196:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010198:	00db      	lsls	r3, r3, #3
 801019a:	b29b      	uxth	r3, r3
 801019c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80101a0:	4293      	cmp	r3, r2
 80101a2:	bf28      	it	cs
 80101a4:	4613      	movcs	r3, r2
 80101a6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80101a8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80101ac:	2114      	movs	r1, #20
 80101ae:	200e      	movs	r0, #14
 80101b0:	f7f7 fa04 	bl	80075bc <pbuf_alloc>
 80101b4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80101b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	f000 80d5 	beq.w	8010368 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80101be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c0:	895b      	ldrh	r3, [r3, #10]
 80101c2:	2b13      	cmp	r3, #19
 80101c4:	d806      	bhi.n	80101d4 <ip4_frag+0xd0>
 80101c6:	4b6c      	ldr	r3, [pc, #432]	; (8010378 <ip4_frag+0x274>)
 80101c8:	f44f 7249 	mov.w	r2, #804	; 0x324
 80101cc:	496d      	ldr	r1, [pc, #436]	; (8010384 <ip4_frag+0x280>)
 80101ce:	486c      	ldr	r0, [pc, #432]	; (8010380 <ip4_frag+0x27c>)
 80101d0:	f000 fab4 	bl	801073c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80101d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d6:	685b      	ldr	r3, [r3, #4]
 80101d8:	2214      	movs	r2, #20
 80101da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80101dc:	4618      	mov	r0, r3
 80101de:	f000 fcc6 	bl	8010b6e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80101e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101e4:	685b      	ldr	r3, [r3, #4]
 80101e6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80101e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80101ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80101ee:	e064      	b.n	80102ba <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	895a      	ldrh	r2, [r3, #10]
 80101f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80101f6:	1ad3      	subs	r3, r2, r3
 80101f8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	895b      	ldrh	r3, [r3, #10]
 80101fe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010200:	429a      	cmp	r2, r3
 8010202:	d906      	bls.n	8010212 <ip4_frag+0x10e>
 8010204:	4b5c      	ldr	r3, [pc, #368]	; (8010378 <ip4_frag+0x274>)
 8010206:	f240 322d 	movw	r2, #813	; 0x32d
 801020a:	495f      	ldr	r1, [pc, #380]	; (8010388 <ip4_frag+0x284>)
 801020c:	485c      	ldr	r0, [pc, #368]	; (8010380 <ip4_frag+0x27c>)
 801020e:	f000 fa95 	bl	801073c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010212:	8bfa      	ldrh	r2, [r7, #30]
 8010214:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010218:	4293      	cmp	r3, r2
 801021a:	bf28      	it	cs
 801021c:	4613      	movcs	r3, r2
 801021e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010222:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010226:	2b00      	cmp	r3, #0
 8010228:	d105      	bne.n	8010236 <ip4_frag+0x132>
        poff = 0;
 801022a:	2300      	movs	r3, #0
 801022c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	60fb      	str	r3, [r7, #12]
        continue;
 8010234:	e041      	b.n	80102ba <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010236:	f7ff ff0d 	bl	8010054 <ip_frag_alloc_pbuf_custom_ref>
 801023a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801023c:	69bb      	ldr	r3, [r7, #24]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d103      	bne.n	801024a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8010242:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010244:	f7f7 fc9e 	bl	8007b84 <pbuf_free>
        goto memerr;
 8010248:	e08f      	b.n	801036a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801024a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010250:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010252:	4413      	add	r3, r2
 8010254:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8010258:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801025c:	9201      	str	r2, [sp, #4]
 801025e:	9300      	str	r3, [sp, #0]
 8010260:	4603      	mov	r3, r0
 8010262:	2241      	movs	r2, #65	; 0x41
 8010264:	2000      	movs	r0, #0
 8010266:	f7f7 fad3 	bl	8007810 <pbuf_alloced_custom>
 801026a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801026c:	697b      	ldr	r3, [r7, #20]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d106      	bne.n	8010280 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010272:	69b8      	ldr	r0, [r7, #24]
 8010274:	f7ff fef6 	bl	8010064 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010278:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801027a:	f7f7 fc83 	bl	8007b84 <pbuf_free>
        goto memerr;
 801027e:	e074      	b.n	801036a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010280:	68f8      	ldr	r0, [r7, #12]
 8010282:	f7f7 fd1f 	bl	8007cc4 <pbuf_ref>
      pcr->original = p;
 8010286:	69bb      	ldr	r3, [r7, #24]
 8010288:	68fa      	ldr	r2, [r7, #12]
 801028a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801028c:	69bb      	ldr	r3, [r7, #24]
 801028e:	4a3f      	ldr	r2, [pc, #252]	; (801038c <ip4_frag+0x288>)
 8010290:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010292:	6979      	ldr	r1, [r7, #20]
 8010294:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010296:	f7f7 fd37 	bl	8007d08 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801029a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801029e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80102a2:	1ad3      	subs	r3, r2, r3
 80102a4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80102a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d004      	beq.n	80102ba <ip4_frag+0x1b6>
        poff = 0;
 80102b0:	2300      	movs	r3, #0
 80102b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80102ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d196      	bne.n	80101f0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80102c2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80102c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80102c8:	4413      	add	r3, r2
 80102ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80102d0:	f1a3 0213 	sub.w	r2, r3, #19
 80102d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80102d8:	429a      	cmp	r2, r3
 80102da:	bfcc      	ite	gt
 80102dc:	2301      	movgt	r3, #1
 80102de:	2300      	movle	r3, #0
 80102e0:	b2db      	uxtb	r3, r3
 80102e2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80102e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80102e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80102ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80102ee:	6a3b      	ldr	r3, [r7, #32]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d002      	beq.n	80102fa <ip4_frag+0x1f6>
 80102f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d003      	beq.n	8010302 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80102fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80102fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010300:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010302:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010304:	4618      	mov	r0, r3
 8010306:	f7f6 f8df 	bl	80064c8 <lwip_htons>
 801030a:	4603      	mov	r3, r0
 801030c:	461a      	mov	r2, r3
 801030e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010310:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010312:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010314:	3314      	adds	r3, #20
 8010316:	b29b      	uxth	r3, r3
 8010318:	4618      	mov	r0, r3
 801031a:	f7f6 f8d5 	bl	80064c8 <lwip_htons>
 801031e:	4603      	mov	r3, r0
 8010320:	461a      	mov	r2, r3
 8010322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010324:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010328:	2200      	movs	r2, #0
 801032a:	729a      	strb	r2, [r3, #10]
 801032c:	2200      	movs	r2, #0
 801032e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	695b      	ldr	r3, [r3, #20]
 8010334:	687a      	ldr	r2, [r7, #4]
 8010336:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010338:	68b8      	ldr	r0, [r7, #8]
 801033a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801033c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801033e:	f7f7 fc21 	bl	8007b84 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010342:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010346:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010348:	1ad3      	subs	r3, r2, r3
 801034a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801034e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010352:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010354:	4413      	add	r3, r2
 8010356:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801035a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801035e:	2b00      	cmp	r3, #0
 8010360:	f47f af19 	bne.w	8010196 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010364:	2300      	movs	r3, #0
 8010366:	e002      	b.n	801036e <ip4_frag+0x26a>
      goto memerr;
 8010368:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801036a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801036e:	4618      	mov	r0, r3
 8010370:	3748      	adds	r7, #72	; 0x48
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}
 8010376:	bf00      	nop
 8010378:	0801428c 	.word	0x0801428c
 801037c:	08014468 	.word	0x08014468
 8010380:	080142d4 	.word	0x080142d4
 8010384:	08014484 	.word	0x08014484
 8010388:	080144a4 	.word	0x080144a4
 801038c:	0801009d 	.word	0x0801009d

08010390 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b086      	sub	sp, #24
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
 8010398:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801039a:	230e      	movs	r3, #14
 801039c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	895b      	ldrh	r3, [r3, #10]
 80103a2:	2b0e      	cmp	r3, #14
 80103a4:	d96e      	bls.n	8010484 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	7bdb      	ldrb	r3, [r3, #15]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d106      	bne.n	80103bc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80103b4:	3301      	adds	r3, #1
 80103b6:	b2da      	uxtb	r2, r3
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	685b      	ldr	r3, [r3, #4]
 80103c0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80103c2:	693b      	ldr	r3, [r7, #16]
 80103c4:	7b1a      	ldrb	r2, [r3, #12]
 80103c6:	7b5b      	ldrb	r3, [r3, #13]
 80103c8:	021b      	lsls	r3, r3, #8
 80103ca:	4313      	orrs	r3, r2
 80103cc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80103ce:	693b      	ldr	r3, [r7, #16]
 80103d0:	781b      	ldrb	r3, [r3, #0]
 80103d2:	f003 0301 	and.w	r3, r3, #1
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d023      	beq.n	8010422 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	781b      	ldrb	r3, [r3, #0]
 80103de:	2b01      	cmp	r3, #1
 80103e0:	d10f      	bne.n	8010402 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80103e2:	693b      	ldr	r3, [r7, #16]
 80103e4:	785b      	ldrb	r3, [r3, #1]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d11b      	bne.n	8010422 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80103ea:	693b      	ldr	r3, [r7, #16]
 80103ec:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80103ee:	2b5e      	cmp	r3, #94	; 0x5e
 80103f0:	d117      	bne.n	8010422 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	7b5b      	ldrb	r3, [r3, #13]
 80103f6:	f043 0310 	orr.w	r3, r3, #16
 80103fa:	b2da      	uxtb	r2, r3
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	735a      	strb	r2, [r3, #13]
 8010400:	e00f      	b.n	8010422 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	2206      	movs	r2, #6
 8010406:	4928      	ldr	r1, [pc, #160]	; (80104a8 <ethernet_input+0x118>)
 8010408:	4618      	mov	r0, r3
 801040a:	f000 fafd 	bl	8010a08 <memcmp>
 801040e:	4603      	mov	r3, r0
 8010410:	2b00      	cmp	r3, #0
 8010412:	d106      	bne.n	8010422 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	7b5b      	ldrb	r3, [r3, #13]
 8010418:	f043 0308 	orr.w	r3, r3, #8
 801041c:	b2da      	uxtb	r2, r3
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010422:	89fb      	ldrh	r3, [r7, #14]
 8010424:	2b08      	cmp	r3, #8
 8010426:	d003      	beq.n	8010430 <ethernet_input+0xa0>
 8010428:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801042c:	d014      	beq.n	8010458 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801042e:	e032      	b.n	8010496 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010430:	683b      	ldr	r3, [r7, #0]
 8010432:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010436:	f003 0308 	and.w	r3, r3, #8
 801043a:	2b00      	cmp	r3, #0
 801043c:	d024      	beq.n	8010488 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801043e:	8afb      	ldrh	r3, [r7, #22]
 8010440:	4619      	mov	r1, r3
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	f7f7 fb18 	bl	8007a78 <pbuf_remove_header>
 8010448:	4603      	mov	r3, r0
 801044a:	2b00      	cmp	r3, #0
 801044c:	d11e      	bne.n	801048c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801044e:	6839      	ldr	r1, [r7, #0]
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f7fe ff21 	bl	800f298 <ip4_input>
      break;
 8010456:	e013      	b.n	8010480 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801045e:	f003 0308 	and.w	r3, r3, #8
 8010462:	2b00      	cmp	r3, #0
 8010464:	d014      	beq.n	8010490 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010466:	8afb      	ldrh	r3, [r7, #22]
 8010468:	4619      	mov	r1, r3
 801046a:	6878      	ldr	r0, [r7, #4]
 801046c:	f7f7 fb04 	bl	8007a78 <pbuf_remove_header>
 8010470:	4603      	mov	r3, r0
 8010472:	2b00      	cmp	r3, #0
 8010474:	d10e      	bne.n	8010494 <ethernet_input+0x104>
        etharp_input(p, netif);
 8010476:	6839      	ldr	r1, [r7, #0]
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f7fe f8c1 	bl	800e600 <etharp_input>
      break;
 801047e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010480:	2300      	movs	r3, #0
 8010482:	e00c      	b.n	801049e <ethernet_input+0x10e>
    goto free_and_return;
 8010484:	bf00      	nop
 8010486:	e006      	b.n	8010496 <ethernet_input+0x106>
        goto free_and_return;
 8010488:	bf00      	nop
 801048a:	e004      	b.n	8010496 <ethernet_input+0x106>
        goto free_and_return;
 801048c:	bf00      	nop
 801048e:	e002      	b.n	8010496 <ethernet_input+0x106>
        goto free_and_return;
 8010490:	bf00      	nop
 8010492:	e000      	b.n	8010496 <ethernet_input+0x106>
        goto free_and_return;
 8010494:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010496:	6878      	ldr	r0, [r7, #4]
 8010498:	f7f7 fb74 	bl	8007b84 <pbuf_free>
  return ERR_OK;
 801049c:	2300      	movs	r3, #0
}
 801049e:	4618      	mov	r0, r3
 80104a0:	3718      	adds	r7, #24
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}
 80104a6:	bf00      	nop
 80104a8:	08014640 	.word	0x08014640

080104ac <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b086      	sub	sp, #24
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	60f8      	str	r0, [r7, #12]
 80104b4:	60b9      	str	r1, [r7, #8]
 80104b6:	607a      	str	r2, [r7, #4]
 80104b8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80104ba:	8c3b      	ldrh	r3, [r7, #32]
 80104bc:	4618      	mov	r0, r3
 80104be:	f7f6 f803 	bl	80064c8 <lwip_htons>
 80104c2:	4603      	mov	r3, r0
 80104c4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80104c6:	210e      	movs	r1, #14
 80104c8:	68b8      	ldr	r0, [r7, #8]
 80104ca:	f7f7 fac5 	bl	8007a58 <pbuf_add_header>
 80104ce:	4603      	mov	r3, r0
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d125      	bne.n	8010520 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80104d4:	68bb      	ldr	r3, [r7, #8]
 80104d6:	685b      	ldr	r3, [r3, #4]
 80104d8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80104da:	693b      	ldr	r3, [r7, #16]
 80104dc:	8afa      	ldrh	r2, [r7, #22]
 80104de:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80104e0:	693b      	ldr	r3, [r7, #16]
 80104e2:	2206      	movs	r2, #6
 80104e4:	6839      	ldr	r1, [r7, #0]
 80104e6:	4618      	mov	r0, r3
 80104e8:	f000 fb41 	bl	8010b6e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80104ec:	693b      	ldr	r3, [r7, #16]
 80104ee:	3306      	adds	r3, #6
 80104f0:	2206      	movs	r2, #6
 80104f2:	6879      	ldr	r1, [r7, #4]
 80104f4:	4618      	mov	r0, r3
 80104f6:	f000 fb3a 	bl	8010b6e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010500:	2b06      	cmp	r3, #6
 8010502:	d006      	beq.n	8010512 <ethernet_output+0x66>
 8010504:	4b0a      	ldr	r3, [pc, #40]	; (8010530 <ethernet_output+0x84>)
 8010506:	f44f 7299 	mov.w	r2, #306	; 0x132
 801050a:	490a      	ldr	r1, [pc, #40]	; (8010534 <ethernet_output+0x88>)
 801050c:	480a      	ldr	r0, [pc, #40]	; (8010538 <ethernet_output+0x8c>)
 801050e:	f000 f915 	bl	801073c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	699b      	ldr	r3, [r3, #24]
 8010516:	68b9      	ldr	r1, [r7, #8]
 8010518:	68f8      	ldr	r0, [r7, #12]
 801051a:	4798      	blx	r3
 801051c:	4603      	mov	r3, r0
 801051e:	e002      	b.n	8010526 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010520:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010522:	f06f 0301 	mvn.w	r3, #1
}
 8010526:	4618      	mov	r0, r3
 8010528:	3718      	adds	r7, #24
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}
 801052e:	bf00      	nop
 8010530:	080144b4 	.word	0x080144b4
 8010534:	080144ec 	.word	0x080144ec
 8010538:	08014520 	.word	0x08014520

0801053c <rand>:
 801053c:	4b16      	ldr	r3, [pc, #88]	; (8010598 <rand+0x5c>)
 801053e:	b510      	push	{r4, lr}
 8010540:	681c      	ldr	r4, [r3, #0]
 8010542:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010544:	b9b3      	cbnz	r3, 8010574 <rand+0x38>
 8010546:	2018      	movs	r0, #24
 8010548:	f000 fb8a 	bl	8010c60 <malloc>
 801054c:	4602      	mov	r2, r0
 801054e:	6320      	str	r0, [r4, #48]	; 0x30
 8010550:	b920      	cbnz	r0, 801055c <rand+0x20>
 8010552:	4b12      	ldr	r3, [pc, #72]	; (801059c <rand+0x60>)
 8010554:	4812      	ldr	r0, [pc, #72]	; (80105a0 <rand+0x64>)
 8010556:	2152      	movs	r1, #82	; 0x52
 8010558:	f000 fb18 	bl	8010b8c <__assert_func>
 801055c:	4911      	ldr	r1, [pc, #68]	; (80105a4 <rand+0x68>)
 801055e:	4b12      	ldr	r3, [pc, #72]	; (80105a8 <rand+0x6c>)
 8010560:	e9c0 1300 	strd	r1, r3, [r0]
 8010564:	4b11      	ldr	r3, [pc, #68]	; (80105ac <rand+0x70>)
 8010566:	6083      	str	r3, [r0, #8]
 8010568:	230b      	movs	r3, #11
 801056a:	8183      	strh	r3, [r0, #12]
 801056c:	2100      	movs	r1, #0
 801056e:	2001      	movs	r0, #1
 8010570:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010574:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010576:	480e      	ldr	r0, [pc, #56]	; (80105b0 <rand+0x74>)
 8010578:	690b      	ldr	r3, [r1, #16]
 801057a:	694c      	ldr	r4, [r1, #20]
 801057c:	4a0d      	ldr	r2, [pc, #52]	; (80105b4 <rand+0x78>)
 801057e:	4358      	muls	r0, r3
 8010580:	fb02 0004 	mla	r0, r2, r4, r0
 8010584:	fba3 3202 	umull	r3, r2, r3, r2
 8010588:	3301      	adds	r3, #1
 801058a:	eb40 0002 	adc.w	r0, r0, r2
 801058e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8010592:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010596:	bd10      	pop	{r4, pc}
 8010598:	20000084 	.word	0x20000084
 801059c:	0801464e 	.word	0x0801464e
 80105a0:	08014665 	.word	0x08014665
 80105a4:	abcd330e 	.word	0xabcd330e
 80105a8:	e66d1234 	.word	0xe66d1234
 80105ac:	0005deec 	.word	0x0005deec
 80105b0:	5851f42d 	.word	0x5851f42d
 80105b4:	4c957f2d 	.word	0x4c957f2d

080105b8 <std>:
 80105b8:	2300      	movs	r3, #0
 80105ba:	b510      	push	{r4, lr}
 80105bc:	4604      	mov	r4, r0
 80105be:	e9c0 3300 	strd	r3, r3, [r0]
 80105c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80105c6:	6083      	str	r3, [r0, #8]
 80105c8:	8181      	strh	r1, [r0, #12]
 80105ca:	6643      	str	r3, [r0, #100]	; 0x64
 80105cc:	81c2      	strh	r2, [r0, #14]
 80105ce:	6183      	str	r3, [r0, #24]
 80105d0:	4619      	mov	r1, r3
 80105d2:	2208      	movs	r2, #8
 80105d4:	305c      	adds	r0, #92	; 0x5c
 80105d6:	f000 fa41 	bl	8010a5c <memset>
 80105da:	4b0d      	ldr	r3, [pc, #52]	; (8010610 <std+0x58>)
 80105dc:	6263      	str	r3, [r4, #36]	; 0x24
 80105de:	4b0d      	ldr	r3, [pc, #52]	; (8010614 <std+0x5c>)
 80105e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80105e2:	4b0d      	ldr	r3, [pc, #52]	; (8010618 <std+0x60>)
 80105e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80105e6:	4b0d      	ldr	r3, [pc, #52]	; (801061c <std+0x64>)
 80105e8:	6323      	str	r3, [r4, #48]	; 0x30
 80105ea:	4b0d      	ldr	r3, [pc, #52]	; (8010620 <std+0x68>)
 80105ec:	6224      	str	r4, [r4, #32]
 80105ee:	429c      	cmp	r4, r3
 80105f0:	d006      	beq.n	8010600 <std+0x48>
 80105f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80105f6:	4294      	cmp	r4, r2
 80105f8:	d002      	beq.n	8010600 <std+0x48>
 80105fa:	33d0      	adds	r3, #208	; 0xd0
 80105fc:	429c      	cmp	r4, r3
 80105fe:	d105      	bne.n	801060c <std+0x54>
 8010600:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010608:	f000 baae 	b.w	8010b68 <__retarget_lock_init_recursive>
 801060c:	bd10      	pop	{r4, pc}
 801060e:	bf00      	nop
 8010610:	08010859 	.word	0x08010859
 8010614:	0801087b 	.word	0x0801087b
 8010618:	080108b3 	.word	0x080108b3
 801061c:	080108d7 	.word	0x080108d7
 8010620:	20008b1c 	.word	0x20008b1c

08010624 <stdio_exit_handler>:
 8010624:	4a02      	ldr	r2, [pc, #8]	; (8010630 <stdio_exit_handler+0xc>)
 8010626:	4903      	ldr	r1, [pc, #12]	; (8010634 <stdio_exit_handler+0x10>)
 8010628:	4803      	ldr	r0, [pc, #12]	; (8010638 <stdio_exit_handler+0x14>)
 801062a:	f000 b869 	b.w	8010700 <_fwalk_sglue>
 801062e:	bf00      	nop
 8010630:	2000002c 	.word	0x2000002c
 8010634:	0801172d 	.word	0x0801172d
 8010638:	20000038 	.word	0x20000038

0801063c <cleanup_stdio>:
 801063c:	6841      	ldr	r1, [r0, #4]
 801063e:	4b0c      	ldr	r3, [pc, #48]	; (8010670 <cleanup_stdio+0x34>)
 8010640:	4299      	cmp	r1, r3
 8010642:	b510      	push	{r4, lr}
 8010644:	4604      	mov	r4, r0
 8010646:	d001      	beq.n	801064c <cleanup_stdio+0x10>
 8010648:	f001 f870 	bl	801172c <_fflush_r>
 801064c:	68a1      	ldr	r1, [r4, #8]
 801064e:	4b09      	ldr	r3, [pc, #36]	; (8010674 <cleanup_stdio+0x38>)
 8010650:	4299      	cmp	r1, r3
 8010652:	d002      	beq.n	801065a <cleanup_stdio+0x1e>
 8010654:	4620      	mov	r0, r4
 8010656:	f001 f869 	bl	801172c <_fflush_r>
 801065a:	68e1      	ldr	r1, [r4, #12]
 801065c:	4b06      	ldr	r3, [pc, #24]	; (8010678 <cleanup_stdio+0x3c>)
 801065e:	4299      	cmp	r1, r3
 8010660:	d004      	beq.n	801066c <cleanup_stdio+0x30>
 8010662:	4620      	mov	r0, r4
 8010664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010668:	f001 b860 	b.w	801172c <_fflush_r>
 801066c:	bd10      	pop	{r4, pc}
 801066e:	bf00      	nop
 8010670:	20008b1c 	.word	0x20008b1c
 8010674:	20008b84 	.word	0x20008b84
 8010678:	20008bec 	.word	0x20008bec

0801067c <global_stdio_init.part.0>:
 801067c:	b510      	push	{r4, lr}
 801067e:	4b0b      	ldr	r3, [pc, #44]	; (80106ac <global_stdio_init.part.0+0x30>)
 8010680:	4c0b      	ldr	r4, [pc, #44]	; (80106b0 <global_stdio_init.part.0+0x34>)
 8010682:	4a0c      	ldr	r2, [pc, #48]	; (80106b4 <global_stdio_init.part.0+0x38>)
 8010684:	601a      	str	r2, [r3, #0]
 8010686:	4620      	mov	r0, r4
 8010688:	2200      	movs	r2, #0
 801068a:	2104      	movs	r1, #4
 801068c:	f7ff ff94 	bl	80105b8 <std>
 8010690:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010694:	2201      	movs	r2, #1
 8010696:	2109      	movs	r1, #9
 8010698:	f7ff ff8e 	bl	80105b8 <std>
 801069c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80106a0:	2202      	movs	r2, #2
 80106a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106a6:	2112      	movs	r1, #18
 80106a8:	f7ff bf86 	b.w	80105b8 <std>
 80106ac:	20008c54 	.word	0x20008c54
 80106b0:	20008b1c 	.word	0x20008b1c
 80106b4:	08010625 	.word	0x08010625

080106b8 <__sfp_lock_acquire>:
 80106b8:	4801      	ldr	r0, [pc, #4]	; (80106c0 <__sfp_lock_acquire+0x8>)
 80106ba:	f000 ba56 	b.w	8010b6a <__retarget_lock_acquire_recursive>
 80106be:	bf00      	nop
 80106c0:	20008c5d 	.word	0x20008c5d

080106c4 <__sfp_lock_release>:
 80106c4:	4801      	ldr	r0, [pc, #4]	; (80106cc <__sfp_lock_release+0x8>)
 80106c6:	f000 ba51 	b.w	8010b6c <__retarget_lock_release_recursive>
 80106ca:	bf00      	nop
 80106cc:	20008c5d 	.word	0x20008c5d

080106d0 <__sinit>:
 80106d0:	b510      	push	{r4, lr}
 80106d2:	4604      	mov	r4, r0
 80106d4:	f7ff fff0 	bl	80106b8 <__sfp_lock_acquire>
 80106d8:	6a23      	ldr	r3, [r4, #32]
 80106da:	b11b      	cbz	r3, 80106e4 <__sinit+0x14>
 80106dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106e0:	f7ff bff0 	b.w	80106c4 <__sfp_lock_release>
 80106e4:	4b04      	ldr	r3, [pc, #16]	; (80106f8 <__sinit+0x28>)
 80106e6:	6223      	str	r3, [r4, #32]
 80106e8:	4b04      	ldr	r3, [pc, #16]	; (80106fc <__sinit+0x2c>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d1f5      	bne.n	80106dc <__sinit+0xc>
 80106f0:	f7ff ffc4 	bl	801067c <global_stdio_init.part.0>
 80106f4:	e7f2      	b.n	80106dc <__sinit+0xc>
 80106f6:	bf00      	nop
 80106f8:	0801063d 	.word	0x0801063d
 80106fc:	20008c54 	.word	0x20008c54

08010700 <_fwalk_sglue>:
 8010700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010704:	4607      	mov	r7, r0
 8010706:	4688      	mov	r8, r1
 8010708:	4614      	mov	r4, r2
 801070a:	2600      	movs	r6, #0
 801070c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010710:	f1b9 0901 	subs.w	r9, r9, #1
 8010714:	d505      	bpl.n	8010722 <_fwalk_sglue+0x22>
 8010716:	6824      	ldr	r4, [r4, #0]
 8010718:	2c00      	cmp	r4, #0
 801071a:	d1f7      	bne.n	801070c <_fwalk_sglue+0xc>
 801071c:	4630      	mov	r0, r6
 801071e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010722:	89ab      	ldrh	r3, [r5, #12]
 8010724:	2b01      	cmp	r3, #1
 8010726:	d907      	bls.n	8010738 <_fwalk_sglue+0x38>
 8010728:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801072c:	3301      	adds	r3, #1
 801072e:	d003      	beq.n	8010738 <_fwalk_sglue+0x38>
 8010730:	4629      	mov	r1, r5
 8010732:	4638      	mov	r0, r7
 8010734:	47c0      	blx	r8
 8010736:	4306      	orrs	r6, r0
 8010738:	3568      	adds	r5, #104	; 0x68
 801073a:	e7e9      	b.n	8010710 <_fwalk_sglue+0x10>

0801073c <iprintf>:
 801073c:	b40f      	push	{r0, r1, r2, r3}
 801073e:	b507      	push	{r0, r1, r2, lr}
 8010740:	4906      	ldr	r1, [pc, #24]	; (801075c <iprintf+0x20>)
 8010742:	ab04      	add	r3, sp, #16
 8010744:	6808      	ldr	r0, [r1, #0]
 8010746:	f853 2b04 	ldr.w	r2, [r3], #4
 801074a:	6881      	ldr	r1, [r0, #8]
 801074c:	9301      	str	r3, [sp, #4]
 801074e:	f000 fcbd 	bl	80110cc <_vfiprintf_r>
 8010752:	b003      	add	sp, #12
 8010754:	f85d eb04 	ldr.w	lr, [sp], #4
 8010758:	b004      	add	sp, #16
 801075a:	4770      	bx	lr
 801075c:	20000084 	.word	0x20000084

08010760 <_puts_r>:
 8010760:	6a03      	ldr	r3, [r0, #32]
 8010762:	b570      	push	{r4, r5, r6, lr}
 8010764:	6884      	ldr	r4, [r0, #8]
 8010766:	4605      	mov	r5, r0
 8010768:	460e      	mov	r6, r1
 801076a:	b90b      	cbnz	r3, 8010770 <_puts_r+0x10>
 801076c:	f7ff ffb0 	bl	80106d0 <__sinit>
 8010770:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010772:	07db      	lsls	r3, r3, #31
 8010774:	d405      	bmi.n	8010782 <_puts_r+0x22>
 8010776:	89a3      	ldrh	r3, [r4, #12]
 8010778:	0598      	lsls	r0, r3, #22
 801077a:	d402      	bmi.n	8010782 <_puts_r+0x22>
 801077c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801077e:	f000 f9f4 	bl	8010b6a <__retarget_lock_acquire_recursive>
 8010782:	89a3      	ldrh	r3, [r4, #12]
 8010784:	0719      	lsls	r1, r3, #28
 8010786:	d513      	bpl.n	80107b0 <_puts_r+0x50>
 8010788:	6923      	ldr	r3, [r4, #16]
 801078a:	b18b      	cbz	r3, 80107b0 <_puts_r+0x50>
 801078c:	3e01      	subs	r6, #1
 801078e:	68a3      	ldr	r3, [r4, #8]
 8010790:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010794:	3b01      	subs	r3, #1
 8010796:	60a3      	str	r3, [r4, #8]
 8010798:	b9e9      	cbnz	r1, 80107d6 <_puts_r+0x76>
 801079a:	2b00      	cmp	r3, #0
 801079c:	da2e      	bge.n	80107fc <_puts_r+0x9c>
 801079e:	4622      	mov	r2, r4
 80107a0:	210a      	movs	r1, #10
 80107a2:	4628      	mov	r0, r5
 80107a4:	f000 f89b 	bl	80108de <__swbuf_r>
 80107a8:	3001      	adds	r0, #1
 80107aa:	d007      	beq.n	80107bc <_puts_r+0x5c>
 80107ac:	250a      	movs	r5, #10
 80107ae:	e007      	b.n	80107c0 <_puts_r+0x60>
 80107b0:	4621      	mov	r1, r4
 80107b2:	4628      	mov	r0, r5
 80107b4:	f000 f8d0 	bl	8010958 <__swsetup_r>
 80107b8:	2800      	cmp	r0, #0
 80107ba:	d0e7      	beq.n	801078c <_puts_r+0x2c>
 80107bc:	f04f 35ff 	mov.w	r5, #4294967295
 80107c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80107c2:	07da      	lsls	r2, r3, #31
 80107c4:	d405      	bmi.n	80107d2 <_puts_r+0x72>
 80107c6:	89a3      	ldrh	r3, [r4, #12]
 80107c8:	059b      	lsls	r3, r3, #22
 80107ca:	d402      	bmi.n	80107d2 <_puts_r+0x72>
 80107cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80107ce:	f000 f9cd 	bl	8010b6c <__retarget_lock_release_recursive>
 80107d2:	4628      	mov	r0, r5
 80107d4:	bd70      	pop	{r4, r5, r6, pc}
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	da04      	bge.n	80107e4 <_puts_r+0x84>
 80107da:	69a2      	ldr	r2, [r4, #24]
 80107dc:	429a      	cmp	r2, r3
 80107de:	dc06      	bgt.n	80107ee <_puts_r+0x8e>
 80107e0:	290a      	cmp	r1, #10
 80107e2:	d004      	beq.n	80107ee <_puts_r+0x8e>
 80107e4:	6823      	ldr	r3, [r4, #0]
 80107e6:	1c5a      	adds	r2, r3, #1
 80107e8:	6022      	str	r2, [r4, #0]
 80107ea:	7019      	strb	r1, [r3, #0]
 80107ec:	e7cf      	b.n	801078e <_puts_r+0x2e>
 80107ee:	4622      	mov	r2, r4
 80107f0:	4628      	mov	r0, r5
 80107f2:	f000 f874 	bl	80108de <__swbuf_r>
 80107f6:	3001      	adds	r0, #1
 80107f8:	d1c9      	bne.n	801078e <_puts_r+0x2e>
 80107fa:	e7df      	b.n	80107bc <_puts_r+0x5c>
 80107fc:	6823      	ldr	r3, [r4, #0]
 80107fe:	250a      	movs	r5, #10
 8010800:	1c5a      	adds	r2, r3, #1
 8010802:	6022      	str	r2, [r4, #0]
 8010804:	701d      	strb	r5, [r3, #0]
 8010806:	e7db      	b.n	80107c0 <_puts_r+0x60>

08010808 <puts>:
 8010808:	4b02      	ldr	r3, [pc, #8]	; (8010814 <puts+0xc>)
 801080a:	4601      	mov	r1, r0
 801080c:	6818      	ldr	r0, [r3, #0]
 801080e:	f7ff bfa7 	b.w	8010760 <_puts_r>
 8010812:	bf00      	nop
 8010814:	20000084 	.word	0x20000084

08010818 <siprintf>:
 8010818:	b40e      	push	{r1, r2, r3}
 801081a:	b500      	push	{lr}
 801081c:	b09c      	sub	sp, #112	; 0x70
 801081e:	ab1d      	add	r3, sp, #116	; 0x74
 8010820:	9002      	str	r0, [sp, #8]
 8010822:	9006      	str	r0, [sp, #24]
 8010824:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010828:	4809      	ldr	r0, [pc, #36]	; (8010850 <siprintf+0x38>)
 801082a:	9107      	str	r1, [sp, #28]
 801082c:	9104      	str	r1, [sp, #16]
 801082e:	4909      	ldr	r1, [pc, #36]	; (8010854 <siprintf+0x3c>)
 8010830:	f853 2b04 	ldr.w	r2, [r3], #4
 8010834:	9105      	str	r1, [sp, #20]
 8010836:	6800      	ldr	r0, [r0, #0]
 8010838:	9301      	str	r3, [sp, #4]
 801083a:	a902      	add	r1, sp, #8
 801083c:	f000 fb1e 	bl	8010e7c <_svfiprintf_r>
 8010840:	9b02      	ldr	r3, [sp, #8]
 8010842:	2200      	movs	r2, #0
 8010844:	701a      	strb	r2, [r3, #0]
 8010846:	b01c      	add	sp, #112	; 0x70
 8010848:	f85d eb04 	ldr.w	lr, [sp], #4
 801084c:	b003      	add	sp, #12
 801084e:	4770      	bx	lr
 8010850:	20000084 	.word	0x20000084
 8010854:	ffff0208 	.word	0xffff0208

08010858 <__sread>:
 8010858:	b510      	push	{r4, lr}
 801085a:	460c      	mov	r4, r1
 801085c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010860:	f000 f93a 	bl	8010ad8 <_read_r>
 8010864:	2800      	cmp	r0, #0
 8010866:	bfab      	itete	ge
 8010868:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801086a:	89a3      	ldrhlt	r3, [r4, #12]
 801086c:	181b      	addge	r3, r3, r0
 801086e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010872:	bfac      	ite	ge
 8010874:	6563      	strge	r3, [r4, #84]	; 0x54
 8010876:	81a3      	strhlt	r3, [r4, #12]
 8010878:	bd10      	pop	{r4, pc}

0801087a <__swrite>:
 801087a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801087e:	461f      	mov	r7, r3
 8010880:	898b      	ldrh	r3, [r1, #12]
 8010882:	05db      	lsls	r3, r3, #23
 8010884:	4605      	mov	r5, r0
 8010886:	460c      	mov	r4, r1
 8010888:	4616      	mov	r6, r2
 801088a:	d505      	bpl.n	8010898 <__swrite+0x1e>
 801088c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010890:	2302      	movs	r3, #2
 8010892:	2200      	movs	r2, #0
 8010894:	f000 f90e 	bl	8010ab4 <_lseek_r>
 8010898:	89a3      	ldrh	r3, [r4, #12]
 801089a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801089e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80108a2:	81a3      	strh	r3, [r4, #12]
 80108a4:	4632      	mov	r2, r6
 80108a6:	463b      	mov	r3, r7
 80108a8:	4628      	mov	r0, r5
 80108aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80108ae:	f000 b925 	b.w	8010afc <_write_r>

080108b2 <__sseek>:
 80108b2:	b510      	push	{r4, lr}
 80108b4:	460c      	mov	r4, r1
 80108b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108ba:	f000 f8fb 	bl	8010ab4 <_lseek_r>
 80108be:	1c43      	adds	r3, r0, #1
 80108c0:	89a3      	ldrh	r3, [r4, #12]
 80108c2:	bf15      	itete	ne
 80108c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80108c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80108ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80108ce:	81a3      	strheq	r3, [r4, #12]
 80108d0:	bf18      	it	ne
 80108d2:	81a3      	strhne	r3, [r4, #12]
 80108d4:	bd10      	pop	{r4, pc}

080108d6 <__sclose>:
 80108d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108da:	f000 b8db 	b.w	8010a94 <_close_r>

080108de <__swbuf_r>:
 80108de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108e0:	460e      	mov	r6, r1
 80108e2:	4614      	mov	r4, r2
 80108e4:	4605      	mov	r5, r0
 80108e6:	b118      	cbz	r0, 80108f0 <__swbuf_r+0x12>
 80108e8:	6a03      	ldr	r3, [r0, #32]
 80108ea:	b90b      	cbnz	r3, 80108f0 <__swbuf_r+0x12>
 80108ec:	f7ff fef0 	bl	80106d0 <__sinit>
 80108f0:	69a3      	ldr	r3, [r4, #24]
 80108f2:	60a3      	str	r3, [r4, #8]
 80108f4:	89a3      	ldrh	r3, [r4, #12]
 80108f6:	071a      	lsls	r2, r3, #28
 80108f8:	d525      	bpl.n	8010946 <__swbuf_r+0x68>
 80108fa:	6923      	ldr	r3, [r4, #16]
 80108fc:	b31b      	cbz	r3, 8010946 <__swbuf_r+0x68>
 80108fe:	6823      	ldr	r3, [r4, #0]
 8010900:	6922      	ldr	r2, [r4, #16]
 8010902:	1a98      	subs	r0, r3, r2
 8010904:	6963      	ldr	r3, [r4, #20]
 8010906:	b2f6      	uxtb	r6, r6
 8010908:	4283      	cmp	r3, r0
 801090a:	4637      	mov	r7, r6
 801090c:	dc04      	bgt.n	8010918 <__swbuf_r+0x3a>
 801090e:	4621      	mov	r1, r4
 8010910:	4628      	mov	r0, r5
 8010912:	f000 ff0b 	bl	801172c <_fflush_r>
 8010916:	b9e0      	cbnz	r0, 8010952 <__swbuf_r+0x74>
 8010918:	68a3      	ldr	r3, [r4, #8]
 801091a:	3b01      	subs	r3, #1
 801091c:	60a3      	str	r3, [r4, #8]
 801091e:	6823      	ldr	r3, [r4, #0]
 8010920:	1c5a      	adds	r2, r3, #1
 8010922:	6022      	str	r2, [r4, #0]
 8010924:	701e      	strb	r6, [r3, #0]
 8010926:	6962      	ldr	r2, [r4, #20]
 8010928:	1c43      	adds	r3, r0, #1
 801092a:	429a      	cmp	r2, r3
 801092c:	d004      	beq.n	8010938 <__swbuf_r+0x5a>
 801092e:	89a3      	ldrh	r3, [r4, #12]
 8010930:	07db      	lsls	r3, r3, #31
 8010932:	d506      	bpl.n	8010942 <__swbuf_r+0x64>
 8010934:	2e0a      	cmp	r6, #10
 8010936:	d104      	bne.n	8010942 <__swbuf_r+0x64>
 8010938:	4621      	mov	r1, r4
 801093a:	4628      	mov	r0, r5
 801093c:	f000 fef6 	bl	801172c <_fflush_r>
 8010940:	b938      	cbnz	r0, 8010952 <__swbuf_r+0x74>
 8010942:	4638      	mov	r0, r7
 8010944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010946:	4621      	mov	r1, r4
 8010948:	4628      	mov	r0, r5
 801094a:	f000 f805 	bl	8010958 <__swsetup_r>
 801094e:	2800      	cmp	r0, #0
 8010950:	d0d5      	beq.n	80108fe <__swbuf_r+0x20>
 8010952:	f04f 37ff 	mov.w	r7, #4294967295
 8010956:	e7f4      	b.n	8010942 <__swbuf_r+0x64>

08010958 <__swsetup_r>:
 8010958:	b538      	push	{r3, r4, r5, lr}
 801095a:	4b2a      	ldr	r3, [pc, #168]	; (8010a04 <__swsetup_r+0xac>)
 801095c:	4605      	mov	r5, r0
 801095e:	6818      	ldr	r0, [r3, #0]
 8010960:	460c      	mov	r4, r1
 8010962:	b118      	cbz	r0, 801096c <__swsetup_r+0x14>
 8010964:	6a03      	ldr	r3, [r0, #32]
 8010966:	b90b      	cbnz	r3, 801096c <__swsetup_r+0x14>
 8010968:	f7ff feb2 	bl	80106d0 <__sinit>
 801096c:	89a3      	ldrh	r3, [r4, #12]
 801096e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010972:	0718      	lsls	r0, r3, #28
 8010974:	d422      	bmi.n	80109bc <__swsetup_r+0x64>
 8010976:	06d9      	lsls	r1, r3, #27
 8010978:	d407      	bmi.n	801098a <__swsetup_r+0x32>
 801097a:	2309      	movs	r3, #9
 801097c:	602b      	str	r3, [r5, #0]
 801097e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010982:	81a3      	strh	r3, [r4, #12]
 8010984:	f04f 30ff 	mov.w	r0, #4294967295
 8010988:	e034      	b.n	80109f4 <__swsetup_r+0x9c>
 801098a:	0758      	lsls	r0, r3, #29
 801098c:	d512      	bpl.n	80109b4 <__swsetup_r+0x5c>
 801098e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010990:	b141      	cbz	r1, 80109a4 <__swsetup_r+0x4c>
 8010992:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010996:	4299      	cmp	r1, r3
 8010998:	d002      	beq.n	80109a0 <__swsetup_r+0x48>
 801099a:	4628      	mov	r0, r5
 801099c:	f000 f914 	bl	8010bc8 <_free_r>
 80109a0:	2300      	movs	r3, #0
 80109a2:	6363      	str	r3, [r4, #52]	; 0x34
 80109a4:	89a3      	ldrh	r3, [r4, #12]
 80109a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80109aa:	81a3      	strh	r3, [r4, #12]
 80109ac:	2300      	movs	r3, #0
 80109ae:	6063      	str	r3, [r4, #4]
 80109b0:	6923      	ldr	r3, [r4, #16]
 80109b2:	6023      	str	r3, [r4, #0]
 80109b4:	89a3      	ldrh	r3, [r4, #12]
 80109b6:	f043 0308 	orr.w	r3, r3, #8
 80109ba:	81a3      	strh	r3, [r4, #12]
 80109bc:	6923      	ldr	r3, [r4, #16]
 80109be:	b94b      	cbnz	r3, 80109d4 <__swsetup_r+0x7c>
 80109c0:	89a3      	ldrh	r3, [r4, #12]
 80109c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80109c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80109ca:	d003      	beq.n	80109d4 <__swsetup_r+0x7c>
 80109cc:	4621      	mov	r1, r4
 80109ce:	4628      	mov	r0, r5
 80109d0:	f000 ff0c 	bl	80117ec <__smakebuf_r>
 80109d4:	89a0      	ldrh	r0, [r4, #12]
 80109d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80109da:	f010 0301 	ands.w	r3, r0, #1
 80109de:	d00a      	beq.n	80109f6 <__swsetup_r+0x9e>
 80109e0:	2300      	movs	r3, #0
 80109e2:	60a3      	str	r3, [r4, #8]
 80109e4:	6963      	ldr	r3, [r4, #20]
 80109e6:	425b      	negs	r3, r3
 80109e8:	61a3      	str	r3, [r4, #24]
 80109ea:	6923      	ldr	r3, [r4, #16]
 80109ec:	b943      	cbnz	r3, 8010a00 <__swsetup_r+0xa8>
 80109ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80109f2:	d1c4      	bne.n	801097e <__swsetup_r+0x26>
 80109f4:	bd38      	pop	{r3, r4, r5, pc}
 80109f6:	0781      	lsls	r1, r0, #30
 80109f8:	bf58      	it	pl
 80109fa:	6963      	ldrpl	r3, [r4, #20]
 80109fc:	60a3      	str	r3, [r4, #8]
 80109fe:	e7f4      	b.n	80109ea <__swsetup_r+0x92>
 8010a00:	2000      	movs	r0, #0
 8010a02:	e7f7      	b.n	80109f4 <__swsetup_r+0x9c>
 8010a04:	20000084 	.word	0x20000084

08010a08 <memcmp>:
 8010a08:	b510      	push	{r4, lr}
 8010a0a:	3901      	subs	r1, #1
 8010a0c:	4402      	add	r2, r0
 8010a0e:	4290      	cmp	r0, r2
 8010a10:	d101      	bne.n	8010a16 <memcmp+0xe>
 8010a12:	2000      	movs	r0, #0
 8010a14:	e005      	b.n	8010a22 <memcmp+0x1a>
 8010a16:	7803      	ldrb	r3, [r0, #0]
 8010a18:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010a1c:	42a3      	cmp	r3, r4
 8010a1e:	d001      	beq.n	8010a24 <memcmp+0x1c>
 8010a20:	1b18      	subs	r0, r3, r4
 8010a22:	bd10      	pop	{r4, pc}
 8010a24:	3001      	adds	r0, #1
 8010a26:	e7f2      	b.n	8010a0e <memcmp+0x6>

08010a28 <memmove>:
 8010a28:	4288      	cmp	r0, r1
 8010a2a:	b510      	push	{r4, lr}
 8010a2c:	eb01 0402 	add.w	r4, r1, r2
 8010a30:	d902      	bls.n	8010a38 <memmove+0x10>
 8010a32:	4284      	cmp	r4, r0
 8010a34:	4623      	mov	r3, r4
 8010a36:	d807      	bhi.n	8010a48 <memmove+0x20>
 8010a38:	1e43      	subs	r3, r0, #1
 8010a3a:	42a1      	cmp	r1, r4
 8010a3c:	d008      	beq.n	8010a50 <memmove+0x28>
 8010a3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010a42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010a46:	e7f8      	b.n	8010a3a <memmove+0x12>
 8010a48:	4402      	add	r2, r0
 8010a4a:	4601      	mov	r1, r0
 8010a4c:	428a      	cmp	r2, r1
 8010a4e:	d100      	bne.n	8010a52 <memmove+0x2a>
 8010a50:	bd10      	pop	{r4, pc}
 8010a52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010a56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010a5a:	e7f7      	b.n	8010a4c <memmove+0x24>

08010a5c <memset>:
 8010a5c:	4402      	add	r2, r0
 8010a5e:	4603      	mov	r3, r0
 8010a60:	4293      	cmp	r3, r2
 8010a62:	d100      	bne.n	8010a66 <memset+0xa>
 8010a64:	4770      	bx	lr
 8010a66:	f803 1b01 	strb.w	r1, [r3], #1
 8010a6a:	e7f9      	b.n	8010a60 <memset+0x4>

08010a6c <strncpy>:
 8010a6c:	b510      	push	{r4, lr}
 8010a6e:	3901      	subs	r1, #1
 8010a70:	4603      	mov	r3, r0
 8010a72:	b132      	cbz	r2, 8010a82 <strncpy+0x16>
 8010a74:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010a78:	f803 4b01 	strb.w	r4, [r3], #1
 8010a7c:	3a01      	subs	r2, #1
 8010a7e:	2c00      	cmp	r4, #0
 8010a80:	d1f7      	bne.n	8010a72 <strncpy+0x6>
 8010a82:	441a      	add	r2, r3
 8010a84:	2100      	movs	r1, #0
 8010a86:	4293      	cmp	r3, r2
 8010a88:	d100      	bne.n	8010a8c <strncpy+0x20>
 8010a8a:	bd10      	pop	{r4, pc}
 8010a8c:	f803 1b01 	strb.w	r1, [r3], #1
 8010a90:	e7f9      	b.n	8010a86 <strncpy+0x1a>
	...

08010a94 <_close_r>:
 8010a94:	b538      	push	{r3, r4, r5, lr}
 8010a96:	4d06      	ldr	r5, [pc, #24]	; (8010ab0 <_close_r+0x1c>)
 8010a98:	2300      	movs	r3, #0
 8010a9a:	4604      	mov	r4, r0
 8010a9c:	4608      	mov	r0, r1
 8010a9e:	602b      	str	r3, [r5, #0]
 8010aa0:	f7f0 f991 	bl	8000dc6 <_close>
 8010aa4:	1c43      	adds	r3, r0, #1
 8010aa6:	d102      	bne.n	8010aae <_close_r+0x1a>
 8010aa8:	682b      	ldr	r3, [r5, #0]
 8010aaa:	b103      	cbz	r3, 8010aae <_close_r+0x1a>
 8010aac:	6023      	str	r3, [r4, #0]
 8010aae:	bd38      	pop	{r3, r4, r5, pc}
 8010ab0:	20008c58 	.word	0x20008c58

08010ab4 <_lseek_r>:
 8010ab4:	b538      	push	{r3, r4, r5, lr}
 8010ab6:	4d07      	ldr	r5, [pc, #28]	; (8010ad4 <_lseek_r+0x20>)
 8010ab8:	4604      	mov	r4, r0
 8010aba:	4608      	mov	r0, r1
 8010abc:	4611      	mov	r1, r2
 8010abe:	2200      	movs	r2, #0
 8010ac0:	602a      	str	r2, [r5, #0]
 8010ac2:	461a      	mov	r2, r3
 8010ac4:	f7f0 f9a6 	bl	8000e14 <_lseek>
 8010ac8:	1c43      	adds	r3, r0, #1
 8010aca:	d102      	bne.n	8010ad2 <_lseek_r+0x1e>
 8010acc:	682b      	ldr	r3, [r5, #0]
 8010ace:	b103      	cbz	r3, 8010ad2 <_lseek_r+0x1e>
 8010ad0:	6023      	str	r3, [r4, #0]
 8010ad2:	bd38      	pop	{r3, r4, r5, pc}
 8010ad4:	20008c58 	.word	0x20008c58

08010ad8 <_read_r>:
 8010ad8:	b538      	push	{r3, r4, r5, lr}
 8010ada:	4d07      	ldr	r5, [pc, #28]	; (8010af8 <_read_r+0x20>)
 8010adc:	4604      	mov	r4, r0
 8010ade:	4608      	mov	r0, r1
 8010ae0:	4611      	mov	r1, r2
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	602a      	str	r2, [r5, #0]
 8010ae6:	461a      	mov	r2, r3
 8010ae8:	f7f0 f934 	bl	8000d54 <_read>
 8010aec:	1c43      	adds	r3, r0, #1
 8010aee:	d102      	bne.n	8010af6 <_read_r+0x1e>
 8010af0:	682b      	ldr	r3, [r5, #0]
 8010af2:	b103      	cbz	r3, 8010af6 <_read_r+0x1e>
 8010af4:	6023      	str	r3, [r4, #0]
 8010af6:	bd38      	pop	{r3, r4, r5, pc}
 8010af8:	20008c58 	.word	0x20008c58

08010afc <_write_r>:
 8010afc:	b538      	push	{r3, r4, r5, lr}
 8010afe:	4d07      	ldr	r5, [pc, #28]	; (8010b1c <_write_r+0x20>)
 8010b00:	4604      	mov	r4, r0
 8010b02:	4608      	mov	r0, r1
 8010b04:	4611      	mov	r1, r2
 8010b06:	2200      	movs	r2, #0
 8010b08:	602a      	str	r2, [r5, #0]
 8010b0a:	461a      	mov	r2, r3
 8010b0c:	f7f0 f93f 	bl	8000d8e <_write>
 8010b10:	1c43      	adds	r3, r0, #1
 8010b12:	d102      	bne.n	8010b1a <_write_r+0x1e>
 8010b14:	682b      	ldr	r3, [r5, #0]
 8010b16:	b103      	cbz	r3, 8010b1a <_write_r+0x1e>
 8010b18:	6023      	str	r3, [r4, #0]
 8010b1a:	bd38      	pop	{r3, r4, r5, pc}
 8010b1c:	20008c58 	.word	0x20008c58

08010b20 <__libc_init_array>:
 8010b20:	b570      	push	{r4, r5, r6, lr}
 8010b22:	4d0d      	ldr	r5, [pc, #52]	; (8010b58 <__libc_init_array+0x38>)
 8010b24:	4c0d      	ldr	r4, [pc, #52]	; (8010b5c <__libc_init_array+0x3c>)
 8010b26:	1b64      	subs	r4, r4, r5
 8010b28:	10a4      	asrs	r4, r4, #2
 8010b2a:	2600      	movs	r6, #0
 8010b2c:	42a6      	cmp	r6, r4
 8010b2e:	d109      	bne.n	8010b44 <__libc_init_array+0x24>
 8010b30:	4d0b      	ldr	r5, [pc, #44]	; (8010b60 <__libc_init_array+0x40>)
 8010b32:	4c0c      	ldr	r4, [pc, #48]	; (8010b64 <__libc_init_array+0x44>)
 8010b34:	f000 ff4a 	bl	80119cc <_init>
 8010b38:	1b64      	subs	r4, r4, r5
 8010b3a:	10a4      	asrs	r4, r4, #2
 8010b3c:	2600      	movs	r6, #0
 8010b3e:	42a6      	cmp	r6, r4
 8010b40:	d105      	bne.n	8010b4e <__libc_init_array+0x2e>
 8010b42:	bd70      	pop	{r4, r5, r6, pc}
 8010b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b48:	4798      	blx	r3
 8010b4a:	3601      	adds	r6, #1
 8010b4c:	e7ee      	b.n	8010b2c <__libc_init_array+0xc>
 8010b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b52:	4798      	blx	r3
 8010b54:	3601      	adds	r6, #1
 8010b56:	e7f2      	b.n	8010b3e <__libc_init_array+0x1e>
 8010b58:	08014734 	.word	0x08014734
 8010b5c:	08014734 	.word	0x08014734
 8010b60:	08014734 	.word	0x08014734
 8010b64:	08014738 	.word	0x08014738

08010b68 <__retarget_lock_init_recursive>:
 8010b68:	4770      	bx	lr

08010b6a <__retarget_lock_acquire_recursive>:
 8010b6a:	4770      	bx	lr

08010b6c <__retarget_lock_release_recursive>:
 8010b6c:	4770      	bx	lr

08010b6e <memcpy>:
 8010b6e:	440a      	add	r2, r1
 8010b70:	4291      	cmp	r1, r2
 8010b72:	f100 33ff 	add.w	r3, r0, #4294967295
 8010b76:	d100      	bne.n	8010b7a <memcpy+0xc>
 8010b78:	4770      	bx	lr
 8010b7a:	b510      	push	{r4, lr}
 8010b7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b84:	4291      	cmp	r1, r2
 8010b86:	d1f9      	bne.n	8010b7c <memcpy+0xe>
 8010b88:	bd10      	pop	{r4, pc}
	...

08010b8c <__assert_func>:
 8010b8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010b8e:	4614      	mov	r4, r2
 8010b90:	461a      	mov	r2, r3
 8010b92:	4b09      	ldr	r3, [pc, #36]	; (8010bb8 <__assert_func+0x2c>)
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	4605      	mov	r5, r0
 8010b98:	68d8      	ldr	r0, [r3, #12]
 8010b9a:	b14c      	cbz	r4, 8010bb0 <__assert_func+0x24>
 8010b9c:	4b07      	ldr	r3, [pc, #28]	; (8010bbc <__assert_func+0x30>)
 8010b9e:	9100      	str	r1, [sp, #0]
 8010ba0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010ba4:	4906      	ldr	r1, [pc, #24]	; (8010bc0 <__assert_func+0x34>)
 8010ba6:	462b      	mov	r3, r5
 8010ba8:	f000 fde8 	bl	801177c <fiprintf>
 8010bac:	f000 fe8c 	bl	80118c8 <abort>
 8010bb0:	4b04      	ldr	r3, [pc, #16]	; (8010bc4 <__assert_func+0x38>)
 8010bb2:	461c      	mov	r4, r3
 8010bb4:	e7f3      	b.n	8010b9e <__assert_func+0x12>
 8010bb6:	bf00      	nop
 8010bb8:	20000084 	.word	0x20000084
 8010bbc:	080146bd 	.word	0x080146bd
 8010bc0:	080146ca 	.word	0x080146ca
 8010bc4:	080146f8 	.word	0x080146f8

08010bc8 <_free_r>:
 8010bc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010bca:	2900      	cmp	r1, #0
 8010bcc:	d044      	beq.n	8010c58 <_free_r+0x90>
 8010bce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010bd2:	9001      	str	r0, [sp, #4]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	f1a1 0404 	sub.w	r4, r1, #4
 8010bda:	bfb8      	it	lt
 8010bdc:	18e4      	addlt	r4, r4, r3
 8010bde:	f000 f8e7 	bl	8010db0 <__malloc_lock>
 8010be2:	4a1e      	ldr	r2, [pc, #120]	; (8010c5c <_free_r+0x94>)
 8010be4:	9801      	ldr	r0, [sp, #4]
 8010be6:	6813      	ldr	r3, [r2, #0]
 8010be8:	b933      	cbnz	r3, 8010bf8 <_free_r+0x30>
 8010bea:	6063      	str	r3, [r4, #4]
 8010bec:	6014      	str	r4, [r2, #0]
 8010bee:	b003      	add	sp, #12
 8010bf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010bf4:	f000 b8e2 	b.w	8010dbc <__malloc_unlock>
 8010bf8:	42a3      	cmp	r3, r4
 8010bfa:	d908      	bls.n	8010c0e <_free_r+0x46>
 8010bfc:	6825      	ldr	r5, [r4, #0]
 8010bfe:	1961      	adds	r1, r4, r5
 8010c00:	428b      	cmp	r3, r1
 8010c02:	bf01      	itttt	eq
 8010c04:	6819      	ldreq	r1, [r3, #0]
 8010c06:	685b      	ldreq	r3, [r3, #4]
 8010c08:	1949      	addeq	r1, r1, r5
 8010c0a:	6021      	streq	r1, [r4, #0]
 8010c0c:	e7ed      	b.n	8010bea <_free_r+0x22>
 8010c0e:	461a      	mov	r2, r3
 8010c10:	685b      	ldr	r3, [r3, #4]
 8010c12:	b10b      	cbz	r3, 8010c18 <_free_r+0x50>
 8010c14:	42a3      	cmp	r3, r4
 8010c16:	d9fa      	bls.n	8010c0e <_free_r+0x46>
 8010c18:	6811      	ldr	r1, [r2, #0]
 8010c1a:	1855      	adds	r5, r2, r1
 8010c1c:	42a5      	cmp	r5, r4
 8010c1e:	d10b      	bne.n	8010c38 <_free_r+0x70>
 8010c20:	6824      	ldr	r4, [r4, #0]
 8010c22:	4421      	add	r1, r4
 8010c24:	1854      	adds	r4, r2, r1
 8010c26:	42a3      	cmp	r3, r4
 8010c28:	6011      	str	r1, [r2, #0]
 8010c2a:	d1e0      	bne.n	8010bee <_free_r+0x26>
 8010c2c:	681c      	ldr	r4, [r3, #0]
 8010c2e:	685b      	ldr	r3, [r3, #4]
 8010c30:	6053      	str	r3, [r2, #4]
 8010c32:	440c      	add	r4, r1
 8010c34:	6014      	str	r4, [r2, #0]
 8010c36:	e7da      	b.n	8010bee <_free_r+0x26>
 8010c38:	d902      	bls.n	8010c40 <_free_r+0x78>
 8010c3a:	230c      	movs	r3, #12
 8010c3c:	6003      	str	r3, [r0, #0]
 8010c3e:	e7d6      	b.n	8010bee <_free_r+0x26>
 8010c40:	6825      	ldr	r5, [r4, #0]
 8010c42:	1961      	adds	r1, r4, r5
 8010c44:	428b      	cmp	r3, r1
 8010c46:	bf04      	itt	eq
 8010c48:	6819      	ldreq	r1, [r3, #0]
 8010c4a:	685b      	ldreq	r3, [r3, #4]
 8010c4c:	6063      	str	r3, [r4, #4]
 8010c4e:	bf04      	itt	eq
 8010c50:	1949      	addeq	r1, r1, r5
 8010c52:	6021      	streq	r1, [r4, #0]
 8010c54:	6054      	str	r4, [r2, #4]
 8010c56:	e7ca      	b.n	8010bee <_free_r+0x26>
 8010c58:	b003      	add	sp, #12
 8010c5a:	bd30      	pop	{r4, r5, pc}
 8010c5c:	20008c60 	.word	0x20008c60

08010c60 <malloc>:
 8010c60:	4b02      	ldr	r3, [pc, #8]	; (8010c6c <malloc+0xc>)
 8010c62:	4601      	mov	r1, r0
 8010c64:	6818      	ldr	r0, [r3, #0]
 8010c66:	f000 b823 	b.w	8010cb0 <_malloc_r>
 8010c6a:	bf00      	nop
 8010c6c:	20000084 	.word	0x20000084

08010c70 <sbrk_aligned>:
 8010c70:	b570      	push	{r4, r5, r6, lr}
 8010c72:	4e0e      	ldr	r6, [pc, #56]	; (8010cac <sbrk_aligned+0x3c>)
 8010c74:	460c      	mov	r4, r1
 8010c76:	6831      	ldr	r1, [r6, #0]
 8010c78:	4605      	mov	r5, r0
 8010c7a:	b911      	cbnz	r1, 8010c82 <sbrk_aligned+0x12>
 8010c7c:	f000 fe14 	bl	80118a8 <_sbrk_r>
 8010c80:	6030      	str	r0, [r6, #0]
 8010c82:	4621      	mov	r1, r4
 8010c84:	4628      	mov	r0, r5
 8010c86:	f000 fe0f 	bl	80118a8 <_sbrk_r>
 8010c8a:	1c43      	adds	r3, r0, #1
 8010c8c:	d00a      	beq.n	8010ca4 <sbrk_aligned+0x34>
 8010c8e:	1cc4      	adds	r4, r0, #3
 8010c90:	f024 0403 	bic.w	r4, r4, #3
 8010c94:	42a0      	cmp	r0, r4
 8010c96:	d007      	beq.n	8010ca8 <sbrk_aligned+0x38>
 8010c98:	1a21      	subs	r1, r4, r0
 8010c9a:	4628      	mov	r0, r5
 8010c9c:	f000 fe04 	bl	80118a8 <_sbrk_r>
 8010ca0:	3001      	adds	r0, #1
 8010ca2:	d101      	bne.n	8010ca8 <sbrk_aligned+0x38>
 8010ca4:	f04f 34ff 	mov.w	r4, #4294967295
 8010ca8:	4620      	mov	r0, r4
 8010caa:	bd70      	pop	{r4, r5, r6, pc}
 8010cac:	20008c64 	.word	0x20008c64

08010cb0 <_malloc_r>:
 8010cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cb4:	1ccd      	adds	r5, r1, #3
 8010cb6:	f025 0503 	bic.w	r5, r5, #3
 8010cba:	3508      	adds	r5, #8
 8010cbc:	2d0c      	cmp	r5, #12
 8010cbe:	bf38      	it	cc
 8010cc0:	250c      	movcc	r5, #12
 8010cc2:	2d00      	cmp	r5, #0
 8010cc4:	4607      	mov	r7, r0
 8010cc6:	db01      	blt.n	8010ccc <_malloc_r+0x1c>
 8010cc8:	42a9      	cmp	r1, r5
 8010cca:	d905      	bls.n	8010cd8 <_malloc_r+0x28>
 8010ccc:	230c      	movs	r3, #12
 8010cce:	603b      	str	r3, [r7, #0]
 8010cd0:	2600      	movs	r6, #0
 8010cd2:	4630      	mov	r0, r6
 8010cd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010dac <_malloc_r+0xfc>
 8010cdc:	f000 f868 	bl	8010db0 <__malloc_lock>
 8010ce0:	f8d8 3000 	ldr.w	r3, [r8]
 8010ce4:	461c      	mov	r4, r3
 8010ce6:	bb5c      	cbnz	r4, 8010d40 <_malloc_r+0x90>
 8010ce8:	4629      	mov	r1, r5
 8010cea:	4638      	mov	r0, r7
 8010cec:	f7ff ffc0 	bl	8010c70 <sbrk_aligned>
 8010cf0:	1c43      	adds	r3, r0, #1
 8010cf2:	4604      	mov	r4, r0
 8010cf4:	d155      	bne.n	8010da2 <_malloc_r+0xf2>
 8010cf6:	f8d8 4000 	ldr.w	r4, [r8]
 8010cfa:	4626      	mov	r6, r4
 8010cfc:	2e00      	cmp	r6, #0
 8010cfe:	d145      	bne.n	8010d8c <_malloc_r+0xdc>
 8010d00:	2c00      	cmp	r4, #0
 8010d02:	d048      	beq.n	8010d96 <_malloc_r+0xe6>
 8010d04:	6823      	ldr	r3, [r4, #0]
 8010d06:	4631      	mov	r1, r6
 8010d08:	4638      	mov	r0, r7
 8010d0a:	eb04 0903 	add.w	r9, r4, r3
 8010d0e:	f000 fdcb 	bl	80118a8 <_sbrk_r>
 8010d12:	4581      	cmp	r9, r0
 8010d14:	d13f      	bne.n	8010d96 <_malloc_r+0xe6>
 8010d16:	6821      	ldr	r1, [r4, #0]
 8010d18:	1a6d      	subs	r5, r5, r1
 8010d1a:	4629      	mov	r1, r5
 8010d1c:	4638      	mov	r0, r7
 8010d1e:	f7ff ffa7 	bl	8010c70 <sbrk_aligned>
 8010d22:	3001      	adds	r0, #1
 8010d24:	d037      	beq.n	8010d96 <_malloc_r+0xe6>
 8010d26:	6823      	ldr	r3, [r4, #0]
 8010d28:	442b      	add	r3, r5
 8010d2a:	6023      	str	r3, [r4, #0]
 8010d2c:	f8d8 3000 	ldr.w	r3, [r8]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d038      	beq.n	8010da6 <_malloc_r+0xf6>
 8010d34:	685a      	ldr	r2, [r3, #4]
 8010d36:	42a2      	cmp	r2, r4
 8010d38:	d12b      	bne.n	8010d92 <_malloc_r+0xe2>
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	605a      	str	r2, [r3, #4]
 8010d3e:	e00f      	b.n	8010d60 <_malloc_r+0xb0>
 8010d40:	6822      	ldr	r2, [r4, #0]
 8010d42:	1b52      	subs	r2, r2, r5
 8010d44:	d41f      	bmi.n	8010d86 <_malloc_r+0xd6>
 8010d46:	2a0b      	cmp	r2, #11
 8010d48:	d917      	bls.n	8010d7a <_malloc_r+0xca>
 8010d4a:	1961      	adds	r1, r4, r5
 8010d4c:	42a3      	cmp	r3, r4
 8010d4e:	6025      	str	r5, [r4, #0]
 8010d50:	bf18      	it	ne
 8010d52:	6059      	strne	r1, [r3, #4]
 8010d54:	6863      	ldr	r3, [r4, #4]
 8010d56:	bf08      	it	eq
 8010d58:	f8c8 1000 	streq.w	r1, [r8]
 8010d5c:	5162      	str	r2, [r4, r5]
 8010d5e:	604b      	str	r3, [r1, #4]
 8010d60:	4638      	mov	r0, r7
 8010d62:	f104 060b 	add.w	r6, r4, #11
 8010d66:	f000 f829 	bl	8010dbc <__malloc_unlock>
 8010d6a:	f026 0607 	bic.w	r6, r6, #7
 8010d6e:	1d23      	adds	r3, r4, #4
 8010d70:	1af2      	subs	r2, r6, r3
 8010d72:	d0ae      	beq.n	8010cd2 <_malloc_r+0x22>
 8010d74:	1b9b      	subs	r3, r3, r6
 8010d76:	50a3      	str	r3, [r4, r2]
 8010d78:	e7ab      	b.n	8010cd2 <_malloc_r+0x22>
 8010d7a:	42a3      	cmp	r3, r4
 8010d7c:	6862      	ldr	r2, [r4, #4]
 8010d7e:	d1dd      	bne.n	8010d3c <_malloc_r+0x8c>
 8010d80:	f8c8 2000 	str.w	r2, [r8]
 8010d84:	e7ec      	b.n	8010d60 <_malloc_r+0xb0>
 8010d86:	4623      	mov	r3, r4
 8010d88:	6864      	ldr	r4, [r4, #4]
 8010d8a:	e7ac      	b.n	8010ce6 <_malloc_r+0x36>
 8010d8c:	4634      	mov	r4, r6
 8010d8e:	6876      	ldr	r6, [r6, #4]
 8010d90:	e7b4      	b.n	8010cfc <_malloc_r+0x4c>
 8010d92:	4613      	mov	r3, r2
 8010d94:	e7cc      	b.n	8010d30 <_malloc_r+0x80>
 8010d96:	230c      	movs	r3, #12
 8010d98:	603b      	str	r3, [r7, #0]
 8010d9a:	4638      	mov	r0, r7
 8010d9c:	f000 f80e 	bl	8010dbc <__malloc_unlock>
 8010da0:	e797      	b.n	8010cd2 <_malloc_r+0x22>
 8010da2:	6025      	str	r5, [r4, #0]
 8010da4:	e7dc      	b.n	8010d60 <_malloc_r+0xb0>
 8010da6:	605b      	str	r3, [r3, #4]
 8010da8:	deff      	udf	#255	; 0xff
 8010daa:	bf00      	nop
 8010dac:	20008c60 	.word	0x20008c60

08010db0 <__malloc_lock>:
 8010db0:	4801      	ldr	r0, [pc, #4]	; (8010db8 <__malloc_lock+0x8>)
 8010db2:	f7ff beda 	b.w	8010b6a <__retarget_lock_acquire_recursive>
 8010db6:	bf00      	nop
 8010db8:	20008c5c 	.word	0x20008c5c

08010dbc <__malloc_unlock>:
 8010dbc:	4801      	ldr	r0, [pc, #4]	; (8010dc4 <__malloc_unlock+0x8>)
 8010dbe:	f7ff bed5 	b.w	8010b6c <__retarget_lock_release_recursive>
 8010dc2:	bf00      	nop
 8010dc4:	20008c5c 	.word	0x20008c5c

08010dc8 <__ssputs_r>:
 8010dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010dcc:	688e      	ldr	r6, [r1, #8]
 8010dce:	461f      	mov	r7, r3
 8010dd0:	42be      	cmp	r6, r7
 8010dd2:	680b      	ldr	r3, [r1, #0]
 8010dd4:	4682      	mov	sl, r0
 8010dd6:	460c      	mov	r4, r1
 8010dd8:	4690      	mov	r8, r2
 8010dda:	d82c      	bhi.n	8010e36 <__ssputs_r+0x6e>
 8010ddc:	898a      	ldrh	r2, [r1, #12]
 8010dde:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010de2:	d026      	beq.n	8010e32 <__ssputs_r+0x6a>
 8010de4:	6965      	ldr	r5, [r4, #20]
 8010de6:	6909      	ldr	r1, [r1, #16]
 8010de8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010dec:	eba3 0901 	sub.w	r9, r3, r1
 8010df0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010df4:	1c7b      	adds	r3, r7, #1
 8010df6:	444b      	add	r3, r9
 8010df8:	106d      	asrs	r5, r5, #1
 8010dfa:	429d      	cmp	r5, r3
 8010dfc:	bf38      	it	cc
 8010dfe:	461d      	movcc	r5, r3
 8010e00:	0553      	lsls	r3, r2, #21
 8010e02:	d527      	bpl.n	8010e54 <__ssputs_r+0x8c>
 8010e04:	4629      	mov	r1, r5
 8010e06:	f7ff ff53 	bl	8010cb0 <_malloc_r>
 8010e0a:	4606      	mov	r6, r0
 8010e0c:	b360      	cbz	r0, 8010e68 <__ssputs_r+0xa0>
 8010e0e:	6921      	ldr	r1, [r4, #16]
 8010e10:	464a      	mov	r2, r9
 8010e12:	f7ff feac 	bl	8010b6e <memcpy>
 8010e16:	89a3      	ldrh	r3, [r4, #12]
 8010e18:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e20:	81a3      	strh	r3, [r4, #12]
 8010e22:	6126      	str	r6, [r4, #16]
 8010e24:	6165      	str	r5, [r4, #20]
 8010e26:	444e      	add	r6, r9
 8010e28:	eba5 0509 	sub.w	r5, r5, r9
 8010e2c:	6026      	str	r6, [r4, #0]
 8010e2e:	60a5      	str	r5, [r4, #8]
 8010e30:	463e      	mov	r6, r7
 8010e32:	42be      	cmp	r6, r7
 8010e34:	d900      	bls.n	8010e38 <__ssputs_r+0x70>
 8010e36:	463e      	mov	r6, r7
 8010e38:	6820      	ldr	r0, [r4, #0]
 8010e3a:	4632      	mov	r2, r6
 8010e3c:	4641      	mov	r1, r8
 8010e3e:	f7ff fdf3 	bl	8010a28 <memmove>
 8010e42:	68a3      	ldr	r3, [r4, #8]
 8010e44:	1b9b      	subs	r3, r3, r6
 8010e46:	60a3      	str	r3, [r4, #8]
 8010e48:	6823      	ldr	r3, [r4, #0]
 8010e4a:	4433      	add	r3, r6
 8010e4c:	6023      	str	r3, [r4, #0]
 8010e4e:	2000      	movs	r0, #0
 8010e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e54:	462a      	mov	r2, r5
 8010e56:	f000 fd3e 	bl	80118d6 <_realloc_r>
 8010e5a:	4606      	mov	r6, r0
 8010e5c:	2800      	cmp	r0, #0
 8010e5e:	d1e0      	bne.n	8010e22 <__ssputs_r+0x5a>
 8010e60:	6921      	ldr	r1, [r4, #16]
 8010e62:	4650      	mov	r0, sl
 8010e64:	f7ff feb0 	bl	8010bc8 <_free_r>
 8010e68:	230c      	movs	r3, #12
 8010e6a:	f8ca 3000 	str.w	r3, [sl]
 8010e6e:	89a3      	ldrh	r3, [r4, #12]
 8010e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e74:	81a3      	strh	r3, [r4, #12]
 8010e76:	f04f 30ff 	mov.w	r0, #4294967295
 8010e7a:	e7e9      	b.n	8010e50 <__ssputs_r+0x88>

08010e7c <_svfiprintf_r>:
 8010e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e80:	4698      	mov	r8, r3
 8010e82:	898b      	ldrh	r3, [r1, #12]
 8010e84:	061b      	lsls	r3, r3, #24
 8010e86:	b09d      	sub	sp, #116	; 0x74
 8010e88:	4607      	mov	r7, r0
 8010e8a:	460d      	mov	r5, r1
 8010e8c:	4614      	mov	r4, r2
 8010e8e:	d50e      	bpl.n	8010eae <_svfiprintf_r+0x32>
 8010e90:	690b      	ldr	r3, [r1, #16]
 8010e92:	b963      	cbnz	r3, 8010eae <_svfiprintf_r+0x32>
 8010e94:	2140      	movs	r1, #64	; 0x40
 8010e96:	f7ff ff0b 	bl	8010cb0 <_malloc_r>
 8010e9a:	6028      	str	r0, [r5, #0]
 8010e9c:	6128      	str	r0, [r5, #16]
 8010e9e:	b920      	cbnz	r0, 8010eaa <_svfiprintf_r+0x2e>
 8010ea0:	230c      	movs	r3, #12
 8010ea2:	603b      	str	r3, [r7, #0]
 8010ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ea8:	e0d0      	b.n	801104c <_svfiprintf_r+0x1d0>
 8010eaa:	2340      	movs	r3, #64	; 0x40
 8010eac:	616b      	str	r3, [r5, #20]
 8010eae:	2300      	movs	r3, #0
 8010eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8010eb2:	2320      	movs	r3, #32
 8010eb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010eb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ebc:	2330      	movs	r3, #48	; 0x30
 8010ebe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011064 <_svfiprintf_r+0x1e8>
 8010ec2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010ec6:	f04f 0901 	mov.w	r9, #1
 8010eca:	4623      	mov	r3, r4
 8010ecc:	469a      	mov	sl, r3
 8010ece:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ed2:	b10a      	cbz	r2, 8010ed8 <_svfiprintf_r+0x5c>
 8010ed4:	2a25      	cmp	r2, #37	; 0x25
 8010ed6:	d1f9      	bne.n	8010ecc <_svfiprintf_r+0x50>
 8010ed8:	ebba 0b04 	subs.w	fp, sl, r4
 8010edc:	d00b      	beq.n	8010ef6 <_svfiprintf_r+0x7a>
 8010ede:	465b      	mov	r3, fp
 8010ee0:	4622      	mov	r2, r4
 8010ee2:	4629      	mov	r1, r5
 8010ee4:	4638      	mov	r0, r7
 8010ee6:	f7ff ff6f 	bl	8010dc8 <__ssputs_r>
 8010eea:	3001      	adds	r0, #1
 8010eec:	f000 80a9 	beq.w	8011042 <_svfiprintf_r+0x1c6>
 8010ef0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ef2:	445a      	add	r2, fp
 8010ef4:	9209      	str	r2, [sp, #36]	; 0x24
 8010ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	f000 80a1 	beq.w	8011042 <_svfiprintf_r+0x1c6>
 8010f00:	2300      	movs	r3, #0
 8010f02:	f04f 32ff 	mov.w	r2, #4294967295
 8010f06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f0a:	f10a 0a01 	add.w	sl, sl, #1
 8010f0e:	9304      	str	r3, [sp, #16]
 8010f10:	9307      	str	r3, [sp, #28]
 8010f12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010f16:	931a      	str	r3, [sp, #104]	; 0x68
 8010f18:	4654      	mov	r4, sl
 8010f1a:	2205      	movs	r2, #5
 8010f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f20:	4850      	ldr	r0, [pc, #320]	; (8011064 <_svfiprintf_r+0x1e8>)
 8010f22:	f7ef f98d 	bl	8000240 <memchr>
 8010f26:	9a04      	ldr	r2, [sp, #16]
 8010f28:	b9d8      	cbnz	r0, 8010f62 <_svfiprintf_r+0xe6>
 8010f2a:	06d0      	lsls	r0, r2, #27
 8010f2c:	bf44      	itt	mi
 8010f2e:	2320      	movmi	r3, #32
 8010f30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f34:	0711      	lsls	r1, r2, #28
 8010f36:	bf44      	itt	mi
 8010f38:	232b      	movmi	r3, #43	; 0x2b
 8010f3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8010f42:	2b2a      	cmp	r3, #42	; 0x2a
 8010f44:	d015      	beq.n	8010f72 <_svfiprintf_r+0xf6>
 8010f46:	9a07      	ldr	r2, [sp, #28]
 8010f48:	4654      	mov	r4, sl
 8010f4a:	2000      	movs	r0, #0
 8010f4c:	f04f 0c0a 	mov.w	ip, #10
 8010f50:	4621      	mov	r1, r4
 8010f52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f56:	3b30      	subs	r3, #48	; 0x30
 8010f58:	2b09      	cmp	r3, #9
 8010f5a:	d94d      	bls.n	8010ff8 <_svfiprintf_r+0x17c>
 8010f5c:	b1b0      	cbz	r0, 8010f8c <_svfiprintf_r+0x110>
 8010f5e:	9207      	str	r2, [sp, #28]
 8010f60:	e014      	b.n	8010f8c <_svfiprintf_r+0x110>
 8010f62:	eba0 0308 	sub.w	r3, r0, r8
 8010f66:	fa09 f303 	lsl.w	r3, r9, r3
 8010f6a:	4313      	orrs	r3, r2
 8010f6c:	9304      	str	r3, [sp, #16]
 8010f6e:	46a2      	mov	sl, r4
 8010f70:	e7d2      	b.n	8010f18 <_svfiprintf_r+0x9c>
 8010f72:	9b03      	ldr	r3, [sp, #12]
 8010f74:	1d19      	adds	r1, r3, #4
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	9103      	str	r1, [sp, #12]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	bfbb      	ittet	lt
 8010f7e:	425b      	neglt	r3, r3
 8010f80:	f042 0202 	orrlt.w	r2, r2, #2
 8010f84:	9307      	strge	r3, [sp, #28]
 8010f86:	9307      	strlt	r3, [sp, #28]
 8010f88:	bfb8      	it	lt
 8010f8a:	9204      	strlt	r2, [sp, #16]
 8010f8c:	7823      	ldrb	r3, [r4, #0]
 8010f8e:	2b2e      	cmp	r3, #46	; 0x2e
 8010f90:	d10c      	bne.n	8010fac <_svfiprintf_r+0x130>
 8010f92:	7863      	ldrb	r3, [r4, #1]
 8010f94:	2b2a      	cmp	r3, #42	; 0x2a
 8010f96:	d134      	bne.n	8011002 <_svfiprintf_r+0x186>
 8010f98:	9b03      	ldr	r3, [sp, #12]
 8010f9a:	1d1a      	adds	r2, r3, #4
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	9203      	str	r2, [sp, #12]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	bfb8      	it	lt
 8010fa4:	f04f 33ff 	movlt.w	r3, #4294967295
 8010fa8:	3402      	adds	r4, #2
 8010faa:	9305      	str	r3, [sp, #20]
 8010fac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011074 <_svfiprintf_r+0x1f8>
 8010fb0:	7821      	ldrb	r1, [r4, #0]
 8010fb2:	2203      	movs	r2, #3
 8010fb4:	4650      	mov	r0, sl
 8010fb6:	f7ef f943 	bl	8000240 <memchr>
 8010fba:	b138      	cbz	r0, 8010fcc <_svfiprintf_r+0x150>
 8010fbc:	9b04      	ldr	r3, [sp, #16]
 8010fbe:	eba0 000a 	sub.w	r0, r0, sl
 8010fc2:	2240      	movs	r2, #64	; 0x40
 8010fc4:	4082      	lsls	r2, r0
 8010fc6:	4313      	orrs	r3, r2
 8010fc8:	3401      	adds	r4, #1
 8010fca:	9304      	str	r3, [sp, #16]
 8010fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fd0:	4825      	ldr	r0, [pc, #148]	; (8011068 <_svfiprintf_r+0x1ec>)
 8010fd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010fd6:	2206      	movs	r2, #6
 8010fd8:	f7ef f932 	bl	8000240 <memchr>
 8010fdc:	2800      	cmp	r0, #0
 8010fde:	d038      	beq.n	8011052 <_svfiprintf_r+0x1d6>
 8010fe0:	4b22      	ldr	r3, [pc, #136]	; (801106c <_svfiprintf_r+0x1f0>)
 8010fe2:	bb1b      	cbnz	r3, 801102c <_svfiprintf_r+0x1b0>
 8010fe4:	9b03      	ldr	r3, [sp, #12]
 8010fe6:	3307      	adds	r3, #7
 8010fe8:	f023 0307 	bic.w	r3, r3, #7
 8010fec:	3308      	adds	r3, #8
 8010fee:	9303      	str	r3, [sp, #12]
 8010ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ff2:	4433      	add	r3, r6
 8010ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8010ff6:	e768      	b.n	8010eca <_svfiprintf_r+0x4e>
 8010ff8:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ffc:	460c      	mov	r4, r1
 8010ffe:	2001      	movs	r0, #1
 8011000:	e7a6      	b.n	8010f50 <_svfiprintf_r+0xd4>
 8011002:	2300      	movs	r3, #0
 8011004:	3401      	adds	r4, #1
 8011006:	9305      	str	r3, [sp, #20]
 8011008:	4619      	mov	r1, r3
 801100a:	f04f 0c0a 	mov.w	ip, #10
 801100e:	4620      	mov	r0, r4
 8011010:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011014:	3a30      	subs	r2, #48	; 0x30
 8011016:	2a09      	cmp	r2, #9
 8011018:	d903      	bls.n	8011022 <_svfiprintf_r+0x1a6>
 801101a:	2b00      	cmp	r3, #0
 801101c:	d0c6      	beq.n	8010fac <_svfiprintf_r+0x130>
 801101e:	9105      	str	r1, [sp, #20]
 8011020:	e7c4      	b.n	8010fac <_svfiprintf_r+0x130>
 8011022:	fb0c 2101 	mla	r1, ip, r1, r2
 8011026:	4604      	mov	r4, r0
 8011028:	2301      	movs	r3, #1
 801102a:	e7f0      	b.n	801100e <_svfiprintf_r+0x192>
 801102c:	ab03      	add	r3, sp, #12
 801102e:	9300      	str	r3, [sp, #0]
 8011030:	462a      	mov	r2, r5
 8011032:	4b0f      	ldr	r3, [pc, #60]	; (8011070 <_svfiprintf_r+0x1f4>)
 8011034:	a904      	add	r1, sp, #16
 8011036:	4638      	mov	r0, r7
 8011038:	f3af 8000 	nop.w
 801103c:	1c42      	adds	r2, r0, #1
 801103e:	4606      	mov	r6, r0
 8011040:	d1d6      	bne.n	8010ff0 <_svfiprintf_r+0x174>
 8011042:	89ab      	ldrh	r3, [r5, #12]
 8011044:	065b      	lsls	r3, r3, #25
 8011046:	f53f af2d 	bmi.w	8010ea4 <_svfiprintf_r+0x28>
 801104a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801104c:	b01d      	add	sp, #116	; 0x74
 801104e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011052:	ab03      	add	r3, sp, #12
 8011054:	9300      	str	r3, [sp, #0]
 8011056:	462a      	mov	r2, r5
 8011058:	4b05      	ldr	r3, [pc, #20]	; (8011070 <_svfiprintf_r+0x1f4>)
 801105a:	a904      	add	r1, sp, #16
 801105c:	4638      	mov	r0, r7
 801105e:	f000 f9bd 	bl	80113dc <_printf_i>
 8011062:	e7eb      	b.n	801103c <_svfiprintf_r+0x1c0>
 8011064:	080146f9 	.word	0x080146f9
 8011068:	08014703 	.word	0x08014703
 801106c:	00000000 	.word	0x00000000
 8011070:	08010dc9 	.word	0x08010dc9
 8011074:	080146ff 	.word	0x080146ff

08011078 <__sfputc_r>:
 8011078:	6893      	ldr	r3, [r2, #8]
 801107a:	3b01      	subs	r3, #1
 801107c:	2b00      	cmp	r3, #0
 801107e:	b410      	push	{r4}
 8011080:	6093      	str	r3, [r2, #8]
 8011082:	da08      	bge.n	8011096 <__sfputc_r+0x1e>
 8011084:	6994      	ldr	r4, [r2, #24]
 8011086:	42a3      	cmp	r3, r4
 8011088:	db01      	blt.n	801108e <__sfputc_r+0x16>
 801108a:	290a      	cmp	r1, #10
 801108c:	d103      	bne.n	8011096 <__sfputc_r+0x1e>
 801108e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011092:	f7ff bc24 	b.w	80108de <__swbuf_r>
 8011096:	6813      	ldr	r3, [r2, #0]
 8011098:	1c58      	adds	r0, r3, #1
 801109a:	6010      	str	r0, [r2, #0]
 801109c:	7019      	strb	r1, [r3, #0]
 801109e:	4608      	mov	r0, r1
 80110a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110a4:	4770      	bx	lr

080110a6 <__sfputs_r>:
 80110a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110a8:	4606      	mov	r6, r0
 80110aa:	460f      	mov	r7, r1
 80110ac:	4614      	mov	r4, r2
 80110ae:	18d5      	adds	r5, r2, r3
 80110b0:	42ac      	cmp	r4, r5
 80110b2:	d101      	bne.n	80110b8 <__sfputs_r+0x12>
 80110b4:	2000      	movs	r0, #0
 80110b6:	e007      	b.n	80110c8 <__sfputs_r+0x22>
 80110b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110bc:	463a      	mov	r2, r7
 80110be:	4630      	mov	r0, r6
 80110c0:	f7ff ffda 	bl	8011078 <__sfputc_r>
 80110c4:	1c43      	adds	r3, r0, #1
 80110c6:	d1f3      	bne.n	80110b0 <__sfputs_r+0xa>
 80110c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080110cc <_vfiprintf_r>:
 80110cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110d0:	460d      	mov	r5, r1
 80110d2:	b09d      	sub	sp, #116	; 0x74
 80110d4:	4614      	mov	r4, r2
 80110d6:	4698      	mov	r8, r3
 80110d8:	4606      	mov	r6, r0
 80110da:	b118      	cbz	r0, 80110e4 <_vfiprintf_r+0x18>
 80110dc:	6a03      	ldr	r3, [r0, #32]
 80110de:	b90b      	cbnz	r3, 80110e4 <_vfiprintf_r+0x18>
 80110e0:	f7ff faf6 	bl	80106d0 <__sinit>
 80110e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80110e6:	07d9      	lsls	r1, r3, #31
 80110e8:	d405      	bmi.n	80110f6 <_vfiprintf_r+0x2a>
 80110ea:	89ab      	ldrh	r3, [r5, #12]
 80110ec:	059a      	lsls	r2, r3, #22
 80110ee:	d402      	bmi.n	80110f6 <_vfiprintf_r+0x2a>
 80110f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80110f2:	f7ff fd3a 	bl	8010b6a <__retarget_lock_acquire_recursive>
 80110f6:	89ab      	ldrh	r3, [r5, #12]
 80110f8:	071b      	lsls	r3, r3, #28
 80110fa:	d501      	bpl.n	8011100 <_vfiprintf_r+0x34>
 80110fc:	692b      	ldr	r3, [r5, #16]
 80110fe:	b99b      	cbnz	r3, 8011128 <_vfiprintf_r+0x5c>
 8011100:	4629      	mov	r1, r5
 8011102:	4630      	mov	r0, r6
 8011104:	f7ff fc28 	bl	8010958 <__swsetup_r>
 8011108:	b170      	cbz	r0, 8011128 <_vfiprintf_r+0x5c>
 801110a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801110c:	07dc      	lsls	r4, r3, #31
 801110e:	d504      	bpl.n	801111a <_vfiprintf_r+0x4e>
 8011110:	f04f 30ff 	mov.w	r0, #4294967295
 8011114:	b01d      	add	sp, #116	; 0x74
 8011116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801111a:	89ab      	ldrh	r3, [r5, #12]
 801111c:	0598      	lsls	r0, r3, #22
 801111e:	d4f7      	bmi.n	8011110 <_vfiprintf_r+0x44>
 8011120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011122:	f7ff fd23 	bl	8010b6c <__retarget_lock_release_recursive>
 8011126:	e7f3      	b.n	8011110 <_vfiprintf_r+0x44>
 8011128:	2300      	movs	r3, #0
 801112a:	9309      	str	r3, [sp, #36]	; 0x24
 801112c:	2320      	movs	r3, #32
 801112e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011132:	f8cd 800c 	str.w	r8, [sp, #12]
 8011136:	2330      	movs	r3, #48	; 0x30
 8011138:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80112ec <_vfiprintf_r+0x220>
 801113c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011140:	f04f 0901 	mov.w	r9, #1
 8011144:	4623      	mov	r3, r4
 8011146:	469a      	mov	sl, r3
 8011148:	f813 2b01 	ldrb.w	r2, [r3], #1
 801114c:	b10a      	cbz	r2, 8011152 <_vfiprintf_r+0x86>
 801114e:	2a25      	cmp	r2, #37	; 0x25
 8011150:	d1f9      	bne.n	8011146 <_vfiprintf_r+0x7a>
 8011152:	ebba 0b04 	subs.w	fp, sl, r4
 8011156:	d00b      	beq.n	8011170 <_vfiprintf_r+0xa4>
 8011158:	465b      	mov	r3, fp
 801115a:	4622      	mov	r2, r4
 801115c:	4629      	mov	r1, r5
 801115e:	4630      	mov	r0, r6
 8011160:	f7ff ffa1 	bl	80110a6 <__sfputs_r>
 8011164:	3001      	adds	r0, #1
 8011166:	f000 80a9 	beq.w	80112bc <_vfiprintf_r+0x1f0>
 801116a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801116c:	445a      	add	r2, fp
 801116e:	9209      	str	r2, [sp, #36]	; 0x24
 8011170:	f89a 3000 	ldrb.w	r3, [sl]
 8011174:	2b00      	cmp	r3, #0
 8011176:	f000 80a1 	beq.w	80112bc <_vfiprintf_r+0x1f0>
 801117a:	2300      	movs	r3, #0
 801117c:	f04f 32ff 	mov.w	r2, #4294967295
 8011180:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011184:	f10a 0a01 	add.w	sl, sl, #1
 8011188:	9304      	str	r3, [sp, #16]
 801118a:	9307      	str	r3, [sp, #28]
 801118c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011190:	931a      	str	r3, [sp, #104]	; 0x68
 8011192:	4654      	mov	r4, sl
 8011194:	2205      	movs	r2, #5
 8011196:	f814 1b01 	ldrb.w	r1, [r4], #1
 801119a:	4854      	ldr	r0, [pc, #336]	; (80112ec <_vfiprintf_r+0x220>)
 801119c:	f7ef f850 	bl	8000240 <memchr>
 80111a0:	9a04      	ldr	r2, [sp, #16]
 80111a2:	b9d8      	cbnz	r0, 80111dc <_vfiprintf_r+0x110>
 80111a4:	06d1      	lsls	r1, r2, #27
 80111a6:	bf44      	itt	mi
 80111a8:	2320      	movmi	r3, #32
 80111aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80111ae:	0713      	lsls	r3, r2, #28
 80111b0:	bf44      	itt	mi
 80111b2:	232b      	movmi	r3, #43	; 0x2b
 80111b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80111b8:	f89a 3000 	ldrb.w	r3, [sl]
 80111bc:	2b2a      	cmp	r3, #42	; 0x2a
 80111be:	d015      	beq.n	80111ec <_vfiprintf_r+0x120>
 80111c0:	9a07      	ldr	r2, [sp, #28]
 80111c2:	4654      	mov	r4, sl
 80111c4:	2000      	movs	r0, #0
 80111c6:	f04f 0c0a 	mov.w	ip, #10
 80111ca:	4621      	mov	r1, r4
 80111cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80111d0:	3b30      	subs	r3, #48	; 0x30
 80111d2:	2b09      	cmp	r3, #9
 80111d4:	d94d      	bls.n	8011272 <_vfiprintf_r+0x1a6>
 80111d6:	b1b0      	cbz	r0, 8011206 <_vfiprintf_r+0x13a>
 80111d8:	9207      	str	r2, [sp, #28]
 80111da:	e014      	b.n	8011206 <_vfiprintf_r+0x13a>
 80111dc:	eba0 0308 	sub.w	r3, r0, r8
 80111e0:	fa09 f303 	lsl.w	r3, r9, r3
 80111e4:	4313      	orrs	r3, r2
 80111e6:	9304      	str	r3, [sp, #16]
 80111e8:	46a2      	mov	sl, r4
 80111ea:	e7d2      	b.n	8011192 <_vfiprintf_r+0xc6>
 80111ec:	9b03      	ldr	r3, [sp, #12]
 80111ee:	1d19      	adds	r1, r3, #4
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	9103      	str	r1, [sp, #12]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	bfbb      	ittet	lt
 80111f8:	425b      	neglt	r3, r3
 80111fa:	f042 0202 	orrlt.w	r2, r2, #2
 80111fe:	9307      	strge	r3, [sp, #28]
 8011200:	9307      	strlt	r3, [sp, #28]
 8011202:	bfb8      	it	lt
 8011204:	9204      	strlt	r2, [sp, #16]
 8011206:	7823      	ldrb	r3, [r4, #0]
 8011208:	2b2e      	cmp	r3, #46	; 0x2e
 801120a:	d10c      	bne.n	8011226 <_vfiprintf_r+0x15a>
 801120c:	7863      	ldrb	r3, [r4, #1]
 801120e:	2b2a      	cmp	r3, #42	; 0x2a
 8011210:	d134      	bne.n	801127c <_vfiprintf_r+0x1b0>
 8011212:	9b03      	ldr	r3, [sp, #12]
 8011214:	1d1a      	adds	r2, r3, #4
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	9203      	str	r2, [sp, #12]
 801121a:	2b00      	cmp	r3, #0
 801121c:	bfb8      	it	lt
 801121e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011222:	3402      	adds	r4, #2
 8011224:	9305      	str	r3, [sp, #20]
 8011226:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80112fc <_vfiprintf_r+0x230>
 801122a:	7821      	ldrb	r1, [r4, #0]
 801122c:	2203      	movs	r2, #3
 801122e:	4650      	mov	r0, sl
 8011230:	f7ef f806 	bl	8000240 <memchr>
 8011234:	b138      	cbz	r0, 8011246 <_vfiprintf_r+0x17a>
 8011236:	9b04      	ldr	r3, [sp, #16]
 8011238:	eba0 000a 	sub.w	r0, r0, sl
 801123c:	2240      	movs	r2, #64	; 0x40
 801123e:	4082      	lsls	r2, r0
 8011240:	4313      	orrs	r3, r2
 8011242:	3401      	adds	r4, #1
 8011244:	9304      	str	r3, [sp, #16]
 8011246:	f814 1b01 	ldrb.w	r1, [r4], #1
 801124a:	4829      	ldr	r0, [pc, #164]	; (80112f0 <_vfiprintf_r+0x224>)
 801124c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011250:	2206      	movs	r2, #6
 8011252:	f7ee fff5 	bl	8000240 <memchr>
 8011256:	2800      	cmp	r0, #0
 8011258:	d03f      	beq.n	80112da <_vfiprintf_r+0x20e>
 801125a:	4b26      	ldr	r3, [pc, #152]	; (80112f4 <_vfiprintf_r+0x228>)
 801125c:	bb1b      	cbnz	r3, 80112a6 <_vfiprintf_r+0x1da>
 801125e:	9b03      	ldr	r3, [sp, #12]
 8011260:	3307      	adds	r3, #7
 8011262:	f023 0307 	bic.w	r3, r3, #7
 8011266:	3308      	adds	r3, #8
 8011268:	9303      	str	r3, [sp, #12]
 801126a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801126c:	443b      	add	r3, r7
 801126e:	9309      	str	r3, [sp, #36]	; 0x24
 8011270:	e768      	b.n	8011144 <_vfiprintf_r+0x78>
 8011272:	fb0c 3202 	mla	r2, ip, r2, r3
 8011276:	460c      	mov	r4, r1
 8011278:	2001      	movs	r0, #1
 801127a:	e7a6      	b.n	80111ca <_vfiprintf_r+0xfe>
 801127c:	2300      	movs	r3, #0
 801127e:	3401      	adds	r4, #1
 8011280:	9305      	str	r3, [sp, #20]
 8011282:	4619      	mov	r1, r3
 8011284:	f04f 0c0a 	mov.w	ip, #10
 8011288:	4620      	mov	r0, r4
 801128a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801128e:	3a30      	subs	r2, #48	; 0x30
 8011290:	2a09      	cmp	r2, #9
 8011292:	d903      	bls.n	801129c <_vfiprintf_r+0x1d0>
 8011294:	2b00      	cmp	r3, #0
 8011296:	d0c6      	beq.n	8011226 <_vfiprintf_r+0x15a>
 8011298:	9105      	str	r1, [sp, #20]
 801129a:	e7c4      	b.n	8011226 <_vfiprintf_r+0x15a>
 801129c:	fb0c 2101 	mla	r1, ip, r1, r2
 80112a0:	4604      	mov	r4, r0
 80112a2:	2301      	movs	r3, #1
 80112a4:	e7f0      	b.n	8011288 <_vfiprintf_r+0x1bc>
 80112a6:	ab03      	add	r3, sp, #12
 80112a8:	9300      	str	r3, [sp, #0]
 80112aa:	462a      	mov	r2, r5
 80112ac:	4b12      	ldr	r3, [pc, #72]	; (80112f8 <_vfiprintf_r+0x22c>)
 80112ae:	a904      	add	r1, sp, #16
 80112b0:	4630      	mov	r0, r6
 80112b2:	f3af 8000 	nop.w
 80112b6:	4607      	mov	r7, r0
 80112b8:	1c78      	adds	r0, r7, #1
 80112ba:	d1d6      	bne.n	801126a <_vfiprintf_r+0x19e>
 80112bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112be:	07d9      	lsls	r1, r3, #31
 80112c0:	d405      	bmi.n	80112ce <_vfiprintf_r+0x202>
 80112c2:	89ab      	ldrh	r3, [r5, #12]
 80112c4:	059a      	lsls	r2, r3, #22
 80112c6:	d402      	bmi.n	80112ce <_vfiprintf_r+0x202>
 80112c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80112ca:	f7ff fc4f 	bl	8010b6c <__retarget_lock_release_recursive>
 80112ce:	89ab      	ldrh	r3, [r5, #12]
 80112d0:	065b      	lsls	r3, r3, #25
 80112d2:	f53f af1d 	bmi.w	8011110 <_vfiprintf_r+0x44>
 80112d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80112d8:	e71c      	b.n	8011114 <_vfiprintf_r+0x48>
 80112da:	ab03      	add	r3, sp, #12
 80112dc:	9300      	str	r3, [sp, #0]
 80112de:	462a      	mov	r2, r5
 80112e0:	4b05      	ldr	r3, [pc, #20]	; (80112f8 <_vfiprintf_r+0x22c>)
 80112e2:	a904      	add	r1, sp, #16
 80112e4:	4630      	mov	r0, r6
 80112e6:	f000 f879 	bl	80113dc <_printf_i>
 80112ea:	e7e4      	b.n	80112b6 <_vfiprintf_r+0x1ea>
 80112ec:	080146f9 	.word	0x080146f9
 80112f0:	08014703 	.word	0x08014703
 80112f4:	00000000 	.word	0x00000000
 80112f8:	080110a7 	.word	0x080110a7
 80112fc:	080146ff 	.word	0x080146ff

08011300 <_printf_common>:
 8011300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011304:	4616      	mov	r6, r2
 8011306:	4699      	mov	r9, r3
 8011308:	688a      	ldr	r2, [r1, #8]
 801130a:	690b      	ldr	r3, [r1, #16]
 801130c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011310:	4293      	cmp	r3, r2
 8011312:	bfb8      	it	lt
 8011314:	4613      	movlt	r3, r2
 8011316:	6033      	str	r3, [r6, #0]
 8011318:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801131c:	4607      	mov	r7, r0
 801131e:	460c      	mov	r4, r1
 8011320:	b10a      	cbz	r2, 8011326 <_printf_common+0x26>
 8011322:	3301      	adds	r3, #1
 8011324:	6033      	str	r3, [r6, #0]
 8011326:	6823      	ldr	r3, [r4, #0]
 8011328:	0699      	lsls	r1, r3, #26
 801132a:	bf42      	ittt	mi
 801132c:	6833      	ldrmi	r3, [r6, #0]
 801132e:	3302      	addmi	r3, #2
 8011330:	6033      	strmi	r3, [r6, #0]
 8011332:	6825      	ldr	r5, [r4, #0]
 8011334:	f015 0506 	ands.w	r5, r5, #6
 8011338:	d106      	bne.n	8011348 <_printf_common+0x48>
 801133a:	f104 0a19 	add.w	sl, r4, #25
 801133e:	68e3      	ldr	r3, [r4, #12]
 8011340:	6832      	ldr	r2, [r6, #0]
 8011342:	1a9b      	subs	r3, r3, r2
 8011344:	42ab      	cmp	r3, r5
 8011346:	dc26      	bgt.n	8011396 <_printf_common+0x96>
 8011348:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801134c:	1e13      	subs	r3, r2, #0
 801134e:	6822      	ldr	r2, [r4, #0]
 8011350:	bf18      	it	ne
 8011352:	2301      	movne	r3, #1
 8011354:	0692      	lsls	r2, r2, #26
 8011356:	d42b      	bmi.n	80113b0 <_printf_common+0xb0>
 8011358:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801135c:	4649      	mov	r1, r9
 801135e:	4638      	mov	r0, r7
 8011360:	47c0      	blx	r8
 8011362:	3001      	adds	r0, #1
 8011364:	d01e      	beq.n	80113a4 <_printf_common+0xa4>
 8011366:	6823      	ldr	r3, [r4, #0]
 8011368:	6922      	ldr	r2, [r4, #16]
 801136a:	f003 0306 	and.w	r3, r3, #6
 801136e:	2b04      	cmp	r3, #4
 8011370:	bf02      	ittt	eq
 8011372:	68e5      	ldreq	r5, [r4, #12]
 8011374:	6833      	ldreq	r3, [r6, #0]
 8011376:	1aed      	subeq	r5, r5, r3
 8011378:	68a3      	ldr	r3, [r4, #8]
 801137a:	bf0c      	ite	eq
 801137c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011380:	2500      	movne	r5, #0
 8011382:	4293      	cmp	r3, r2
 8011384:	bfc4      	itt	gt
 8011386:	1a9b      	subgt	r3, r3, r2
 8011388:	18ed      	addgt	r5, r5, r3
 801138a:	2600      	movs	r6, #0
 801138c:	341a      	adds	r4, #26
 801138e:	42b5      	cmp	r5, r6
 8011390:	d11a      	bne.n	80113c8 <_printf_common+0xc8>
 8011392:	2000      	movs	r0, #0
 8011394:	e008      	b.n	80113a8 <_printf_common+0xa8>
 8011396:	2301      	movs	r3, #1
 8011398:	4652      	mov	r2, sl
 801139a:	4649      	mov	r1, r9
 801139c:	4638      	mov	r0, r7
 801139e:	47c0      	blx	r8
 80113a0:	3001      	adds	r0, #1
 80113a2:	d103      	bne.n	80113ac <_printf_common+0xac>
 80113a4:	f04f 30ff 	mov.w	r0, #4294967295
 80113a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113ac:	3501      	adds	r5, #1
 80113ae:	e7c6      	b.n	801133e <_printf_common+0x3e>
 80113b0:	18e1      	adds	r1, r4, r3
 80113b2:	1c5a      	adds	r2, r3, #1
 80113b4:	2030      	movs	r0, #48	; 0x30
 80113b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80113ba:	4422      	add	r2, r4
 80113bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80113c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80113c4:	3302      	adds	r3, #2
 80113c6:	e7c7      	b.n	8011358 <_printf_common+0x58>
 80113c8:	2301      	movs	r3, #1
 80113ca:	4622      	mov	r2, r4
 80113cc:	4649      	mov	r1, r9
 80113ce:	4638      	mov	r0, r7
 80113d0:	47c0      	blx	r8
 80113d2:	3001      	adds	r0, #1
 80113d4:	d0e6      	beq.n	80113a4 <_printf_common+0xa4>
 80113d6:	3601      	adds	r6, #1
 80113d8:	e7d9      	b.n	801138e <_printf_common+0x8e>
	...

080113dc <_printf_i>:
 80113dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80113e0:	7e0f      	ldrb	r7, [r1, #24]
 80113e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80113e4:	2f78      	cmp	r7, #120	; 0x78
 80113e6:	4691      	mov	r9, r2
 80113e8:	4680      	mov	r8, r0
 80113ea:	460c      	mov	r4, r1
 80113ec:	469a      	mov	sl, r3
 80113ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80113f2:	d807      	bhi.n	8011404 <_printf_i+0x28>
 80113f4:	2f62      	cmp	r7, #98	; 0x62
 80113f6:	d80a      	bhi.n	801140e <_printf_i+0x32>
 80113f8:	2f00      	cmp	r7, #0
 80113fa:	f000 80d4 	beq.w	80115a6 <_printf_i+0x1ca>
 80113fe:	2f58      	cmp	r7, #88	; 0x58
 8011400:	f000 80c0 	beq.w	8011584 <_printf_i+0x1a8>
 8011404:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011408:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801140c:	e03a      	b.n	8011484 <_printf_i+0xa8>
 801140e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011412:	2b15      	cmp	r3, #21
 8011414:	d8f6      	bhi.n	8011404 <_printf_i+0x28>
 8011416:	a101      	add	r1, pc, #4	; (adr r1, 801141c <_printf_i+0x40>)
 8011418:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801141c:	08011475 	.word	0x08011475
 8011420:	08011489 	.word	0x08011489
 8011424:	08011405 	.word	0x08011405
 8011428:	08011405 	.word	0x08011405
 801142c:	08011405 	.word	0x08011405
 8011430:	08011405 	.word	0x08011405
 8011434:	08011489 	.word	0x08011489
 8011438:	08011405 	.word	0x08011405
 801143c:	08011405 	.word	0x08011405
 8011440:	08011405 	.word	0x08011405
 8011444:	08011405 	.word	0x08011405
 8011448:	0801158d 	.word	0x0801158d
 801144c:	080114b5 	.word	0x080114b5
 8011450:	08011547 	.word	0x08011547
 8011454:	08011405 	.word	0x08011405
 8011458:	08011405 	.word	0x08011405
 801145c:	080115af 	.word	0x080115af
 8011460:	08011405 	.word	0x08011405
 8011464:	080114b5 	.word	0x080114b5
 8011468:	08011405 	.word	0x08011405
 801146c:	08011405 	.word	0x08011405
 8011470:	0801154f 	.word	0x0801154f
 8011474:	682b      	ldr	r3, [r5, #0]
 8011476:	1d1a      	adds	r2, r3, #4
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	602a      	str	r2, [r5, #0]
 801147c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011480:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011484:	2301      	movs	r3, #1
 8011486:	e09f      	b.n	80115c8 <_printf_i+0x1ec>
 8011488:	6820      	ldr	r0, [r4, #0]
 801148a:	682b      	ldr	r3, [r5, #0]
 801148c:	0607      	lsls	r7, r0, #24
 801148e:	f103 0104 	add.w	r1, r3, #4
 8011492:	6029      	str	r1, [r5, #0]
 8011494:	d501      	bpl.n	801149a <_printf_i+0xbe>
 8011496:	681e      	ldr	r6, [r3, #0]
 8011498:	e003      	b.n	80114a2 <_printf_i+0xc6>
 801149a:	0646      	lsls	r6, r0, #25
 801149c:	d5fb      	bpl.n	8011496 <_printf_i+0xba>
 801149e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80114a2:	2e00      	cmp	r6, #0
 80114a4:	da03      	bge.n	80114ae <_printf_i+0xd2>
 80114a6:	232d      	movs	r3, #45	; 0x2d
 80114a8:	4276      	negs	r6, r6
 80114aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80114ae:	485a      	ldr	r0, [pc, #360]	; (8011618 <_printf_i+0x23c>)
 80114b0:	230a      	movs	r3, #10
 80114b2:	e012      	b.n	80114da <_printf_i+0xfe>
 80114b4:	682b      	ldr	r3, [r5, #0]
 80114b6:	6820      	ldr	r0, [r4, #0]
 80114b8:	1d19      	adds	r1, r3, #4
 80114ba:	6029      	str	r1, [r5, #0]
 80114bc:	0605      	lsls	r5, r0, #24
 80114be:	d501      	bpl.n	80114c4 <_printf_i+0xe8>
 80114c0:	681e      	ldr	r6, [r3, #0]
 80114c2:	e002      	b.n	80114ca <_printf_i+0xee>
 80114c4:	0641      	lsls	r1, r0, #25
 80114c6:	d5fb      	bpl.n	80114c0 <_printf_i+0xe4>
 80114c8:	881e      	ldrh	r6, [r3, #0]
 80114ca:	4853      	ldr	r0, [pc, #332]	; (8011618 <_printf_i+0x23c>)
 80114cc:	2f6f      	cmp	r7, #111	; 0x6f
 80114ce:	bf0c      	ite	eq
 80114d0:	2308      	moveq	r3, #8
 80114d2:	230a      	movne	r3, #10
 80114d4:	2100      	movs	r1, #0
 80114d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80114da:	6865      	ldr	r5, [r4, #4]
 80114dc:	60a5      	str	r5, [r4, #8]
 80114de:	2d00      	cmp	r5, #0
 80114e0:	bfa2      	ittt	ge
 80114e2:	6821      	ldrge	r1, [r4, #0]
 80114e4:	f021 0104 	bicge.w	r1, r1, #4
 80114e8:	6021      	strge	r1, [r4, #0]
 80114ea:	b90e      	cbnz	r6, 80114f0 <_printf_i+0x114>
 80114ec:	2d00      	cmp	r5, #0
 80114ee:	d04b      	beq.n	8011588 <_printf_i+0x1ac>
 80114f0:	4615      	mov	r5, r2
 80114f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80114f6:	fb03 6711 	mls	r7, r3, r1, r6
 80114fa:	5dc7      	ldrb	r7, [r0, r7]
 80114fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011500:	4637      	mov	r7, r6
 8011502:	42bb      	cmp	r3, r7
 8011504:	460e      	mov	r6, r1
 8011506:	d9f4      	bls.n	80114f2 <_printf_i+0x116>
 8011508:	2b08      	cmp	r3, #8
 801150a:	d10b      	bne.n	8011524 <_printf_i+0x148>
 801150c:	6823      	ldr	r3, [r4, #0]
 801150e:	07de      	lsls	r6, r3, #31
 8011510:	d508      	bpl.n	8011524 <_printf_i+0x148>
 8011512:	6923      	ldr	r3, [r4, #16]
 8011514:	6861      	ldr	r1, [r4, #4]
 8011516:	4299      	cmp	r1, r3
 8011518:	bfde      	ittt	le
 801151a:	2330      	movle	r3, #48	; 0x30
 801151c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011520:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011524:	1b52      	subs	r2, r2, r5
 8011526:	6122      	str	r2, [r4, #16]
 8011528:	f8cd a000 	str.w	sl, [sp]
 801152c:	464b      	mov	r3, r9
 801152e:	aa03      	add	r2, sp, #12
 8011530:	4621      	mov	r1, r4
 8011532:	4640      	mov	r0, r8
 8011534:	f7ff fee4 	bl	8011300 <_printf_common>
 8011538:	3001      	adds	r0, #1
 801153a:	d14a      	bne.n	80115d2 <_printf_i+0x1f6>
 801153c:	f04f 30ff 	mov.w	r0, #4294967295
 8011540:	b004      	add	sp, #16
 8011542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011546:	6823      	ldr	r3, [r4, #0]
 8011548:	f043 0320 	orr.w	r3, r3, #32
 801154c:	6023      	str	r3, [r4, #0]
 801154e:	4833      	ldr	r0, [pc, #204]	; (801161c <_printf_i+0x240>)
 8011550:	2778      	movs	r7, #120	; 0x78
 8011552:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011556:	6823      	ldr	r3, [r4, #0]
 8011558:	6829      	ldr	r1, [r5, #0]
 801155a:	061f      	lsls	r7, r3, #24
 801155c:	f851 6b04 	ldr.w	r6, [r1], #4
 8011560:	d402      	bmi.n	8011568 <_printf_i+0x18c>
 8011562:	065f      	lsls	r7, r3, #25
 8011564:	bf48      	it	mi
 8011566:	b2b6      	uxthmi	r6, r6
 8011568:	07df      	lsls	r7, r3, #31
 801156a:	bf48      	it	mi
 801156c:	f043 0320 	orrmi.w	r3, r3, #32
 8011570:	6029      	str	r1, [r5, #0]
 8011572:	bf48      	it	mi
 8011574:	6023      	strmi	r3, [r4, #0]
 8011576:	b91e      	cbnz	r6, 8011580 <_printf_i+0x1a4>
 8011578:	6823      	ldr	r3, [r4, #0]
 801157a:	f023 0320 	bic.w	r3, r3, #32
 801157e:	6023      	str	r3, [r4, #0]
 8011580:	2310      	movs	r3, #16
 8011582:	e7a7      	b.n	80114d4 <_printf_i+0xf8>
 8011584:	4824      	ldr	r0, [pc, #144]	; (8011618 <_printf_i+0x23c>)
 8011586:	e7e4      	b.n	8011552 <_printf_i+0x176>
 8011588:	4615      	mov	r5, r2
 801158a:	e7bd      	b.n	8011508 <_printf_i+0x12c>
 801158c:	682b      	ldr	r3, [r5, #0]
 801158e:	6826      	ldr	r6, [r4, #0]
 8011590:	6961      	ldr	r1, [r4, #20]
 8011592:	1d18      	adds	r0, r3, #4
 8011594:	6028      	str	r0, [r5, #0]
 8011596:	0635      	lsls	r5, r6, #24
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	d501      	bpl.n	80115a0 <_printf_i+0x1c4>
 801159c:	6019      	str	r1, [r3, #0]
 801159e:	e002      	b.n	80115a6 <_printf_i+0x1ca>
 80115a0:	0670      	lsls	r0, r6, #25
 80115a2:	d5fb      	bpl.n	801159c <_printf_i+0x1c0>
 80115a4:	8019      	strh	r1, [r3, #0]
 80115a6:	2300      	movs	r3, #0
 80115a8:	6123      	str	r3, [r4, #16]
 80115aa:	4615      	mov	r5, r2
 80115ac:	e7bc      	b.n	8011528 <_printf_i+0x14c>
 80115ae:	682b      	ldr	r3, [r5, #0]
 80115b0:	1d1a      	adds	r2, r3, #4
 80115b2:	602a      	str	r2, [r5, #0]
 80115b4:	681d      	ldr	r5, [r3, #0]
 80115b6:	6862      	ldr	r2, [r4, #4]
 80115b8:	2100      	movs	r1, #0
 80115ba:	4628      	mov	r0, r5
 80115bc:	f7ee fe40 	bl	8000240 <memchr>
 80115c0:	b108      	cbz	r0, 80115c6 <_printf_i+0x1ea>
 80115c2:	1b40      	subs	r0, r0, r5
 80115c4:	6060      	str	r0, [r4, #4]
 80115c6:	6863      	ldr	r3, [r4, #4]
 80115c8:	6123      	str	r3, [r4, #16]
 80115ca:	2300      	movs	r3, #0
 80115cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80115d0:	e7aa      	b.n	8011528 <_printf_i+0x14c>
 80115d2:	6923      	ldr	r3, [r4, #16]
 80115d4:	462a      	mov	r2, r5
 80115d6:	4649      	mov	r1, r9
 80115d8:	4640      	mov	r0, r8
 80115da:	47d0      	blx	sl
 80115dc:	3001      	adds	r0, #1
 80115de:	d0ad      	beq.n	801153c <_printf_i+0x160>
 80115e0:	6823      	ldr	r3, [r4, #0]
 80115e2:	079b      	lsls	r3, r3, #30
 80115e4:	d413      	bmi.n	801160e <_printf_i+0x232>
 80115e6:	68e0      	ldr	r0, [r4, #12]
 80115e8:	9b03      	ldr	r3, [sp, #12]
 80115ea:	4298      	cmp	r0, r3
 80115ec:	bfb8      	it	lt
 80115ee:	4618      	movlt	r0, r3
 80115f0:	e7a6      	b.n	8011540 <_printf_i+0x164>
 80115f2:	2301      	movs	r3, #1
 80115f4:	4632      	mov	r2, r6
 80115f6:	4649      	mov	r1, r9
 80115f8:	4640      	mov	r0, r8
 80115fa:	47d0      	blx	sl
 80115fc:	3001      	adds	r0, #1
 80115fe:	d09d      	beq.n	801153c <_printf_i+0x160>
 8011600:	3501      	adds	r5, #1
 8011602:	68e3      	ldr	r3, [r4, #12]
 8011604:	9903      	ldr	r1, [sp, #12]
 8011606:	1a5b      	subs	r3, r3, r1
 8011608:	42ab      	cmp	r3, r5
 801160a:	dcf2      	bgt.n	80115f2 <_printf_i+0x216>
 801160c:	e7eb      	b.n	80115e6 <_printf_i+0x20a>
 801160e:	2500      	movs	r5, #0
 8011610:	f104 0619 	add.w	r6, r4, #25
 8011614:	e7f5      	b.n	8011602 <_printf_i+0x226>
 8011616:	bf00      	nop
 8011618:	0801470a 	.word	0x0801470a
 801161c:	0801471b 	.word	0x0801471b

08011620 <__sflush_r>:
 8011620:	898a      	ldrh	r2, [r1, #12]
 8011622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011626:	4605      	mov	r5, r0
 8011628:	0710      	lsls	r0, r2, #28
 801162a:	460c      	mov	r4, r1
 801162c:	d458      	bmi.n	80116e0 <__sflush_r+0xc0>
 801162e:	684b      	ldr	r3, [r1, #4]
 8011630:	2b00      	cmp	r3, #0
 8011632:	dc05      	bgt.n	8011640 <__sflush_r+0x20>
 8011634:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011636:	2b00      	cmp	r3, #0
 8011638:	dc02      	bgt.n	8011640 <__sflush_r+0x20>
 801163a:	2000      	movs	r0, #0
 801163c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011640:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011642:	2e00      	cmp	r6, #0
 8011644:	d0f9      	beq.n	801163a <__sflush_r+0x1a>
 8011646:	2300      	movs	r3, #0
 8011648:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801164c:	682f      	ldr	r7, [r5, #0]
 801164e:	6a21      	ldr	r1, [r4, #32]
 8011650:	602b      	str	r3, [r5, #0]
 8011652:	d032      	beq.n	80116ba <__sflush_r+0x9a>
 8011654:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011656:	89a3      	ldrh	r3, [r4, #12]
 8011658:	075a      	lsls	r2, r3, #29
 801165a:	d505      	bpl.n	8011668 <__sflush_r+0x48>
 801165c:	6863      	ldr	r3, [r4, #4]
 801165e:	1ac0      	subs	r0, r0, r3
 8011660:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011662:	b10b      	cbz	r3, 8011668 <__sflush_r+0x48>
 8011664:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011666:	1ac0      	subs	r0, r0, r3
 8011668:	2300      	movs	r3, #0
 801166a:	4602      	mov	r2, r0
 801166c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801166e:	6a21      	ldr	r1, [r4, #32]
 8011670:	4628      	mov	r0, r5
 8011672:	47b0      	blx	r6
 8011674:	1c43      	adds	r3, r0, #1
 8011676:	89a3      	ldrh	r3, [r4, #12]
 8011678:	d106      	bne.n	8011688 <__sflush_r+0x68>
 801167a:	6829      	ldr	r1, [r5, #0]
 801167c:	291d      	cmp	r1, #29
 801167e:	d82b      	bhi.n	80116d8 <__sflush_r+0xb8>
 8011680:	4a29      	ldr	r2, [pc, #164]	; (8011728 <__sflush_r+0x108>)
 8011682:	410a      	asrs	r2, r1
 8011684:	07d6      	lsls	r6, r2, #31
 8011686:	d427      	bmi.n	80116d8 <__sflush_r+0xb8>
 8011688:	2200      	movs	r2, #0
 801168a:	6062      	str	r2, [r4, #4]
 801168c:	04d9      	lsls	r1, r3, #19
 801168e:	6922      	ldr	r2, [r4, #16]
 8011690:	6022      	str	r2, [r4, #0]
 8011692:	d504      	bpl.n	801169e <__sflush_r+0x7e>
 8011694:	1c42      	adds	r2, r0, #1
 8011696:	d101      	bne.n	801169c <__sflush_r+0x7c>
 8011698:	682b      	ldr	r3, [r5, #0]
 801169a:	b903      	cbnz	r3, 801169e <__sflush_r+0x7e>
 801169c:	6560      	str	r0, [r4, #84]	; 0x54
 801169e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80116a0:	602f      	str	r7, [r5, #0]
 80116a2:	2900      	cmp	r1, #0
 80116a4:	d0c9      	beq.n	801163a <__sflush_r+0x1a>
 80116a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80116aa:	4299      	cmp	r1, r3
 80116ac:	d002      	beq.n	80116b4 <__sflush_r+0x94>
 80116ae:	4628      	mov	r0, r5
 80116b0:	f7ff fa8a 	bl	8010bc8 <_free_r>
 80116b4:	2000      	movs	r0, #0
 80116b6:	6360      	str	r0, [r4, #52]	; 0x34
 80116b8:	e7c0      	b.n	801163c <__sflush_r+0x1c>
 80116ba:	2301      	movs	r3, #1
 80116bc:	4628      	mov	r0, r5
 80116be:	47b0      	blx	r6
 80116c0:	1c41      	adds	r1, r0, #1
 80116c2:	d1c8      	bne.n	8011656 <__sflush_r+0x36>
 80116c4:	682b      	ldr	r3, [r5, #0]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d0c5      	beq.n	8011656 <__sflush_r+0x36>
 80116ca:	2b1d      	cmp	r3, #29
 80116cc:	d001      	beq.n	80116d2 <__sflush_r+0xb2>
 80116ce:	2b16      	cmp	r3, #22
 80116d0:	d101      	bne.n	80116d6 <__sflush_r+0xb6>
 80116d2:	602f      	str	r7, [r5, #0]
 80116d4:	e7b1      	b.n	801163a <__sflush_r+0x1a>
 80116d6:	89a3      	ldrh	r3, [r4, #12]
 80116d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116dc:	81a3      	strh	r3, [r4, #12]
 80116de:	e7ad      	b.n	801163c <__sflush_r+0x1c>
 80116e0:	690f      	ldr	r7, [r1, #16]
 80116e2:	2f00      	cmp	r7, #0
 80116e4:	d0a9      	beq.n	801163a <__sflush_r+0x1a>
 80116e6:	0793      	lsls	r3, r2, #30
 80116e8:	680e      	ldr	r6, [r1, #0]
 80116ea:	bf08      	it	eq
 80116ec:	694b      	ldreq	r3, [r1, #20]
 80116ee:	600f      	str	r7, [r1, #0]
 80116f0:	bf18      	it	ne
 80116f2:	2300      	movne	r3, #0
 80116f4:	eba6 0807 	sub.w	r8, r6, r7
 80116f8:	608b      	str	r3, [r1, #8]
 80116fa:	f1b8 0f00 	cmp.w	r8, #0
 80116fe:	dd9c      	ble.n	801163a <__sflush_r+0x1a>
 8011700:	6a21      	ldr	r1, [r4, #32]
 8011702:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011704:	4643      	mov	r3, r8
 8011706:	463a      	mov	r2, r7
 8011708:	4628      	mov	r0, r5
 801170a:	47b0      	blx	r6
 801170c:	2800      	cmp	r0, #0
 801170e:	dc06      	bgt.n	801171e <__sflush_r+0xfe>
 8011710:	89a3      	ldrh	r3, [r4, #12]
 8011712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011716:	81a3      	strh	r3, [r4, #12]
 8011718:	f04f 30ff 	mov.w	r0, #4294967295
 801171c:	e78e      	b.n	801163c <__sflush_r+0x1c>
 801171e:	4407      	add	r7, r0
 8011720:	eba8 0800 	sub.w	r8, r8, r0
 8011724:	e7e9      	b.n	80116fa <__sflush_r+0xda>
 8011726:	bf00      	nop
 8011728:	dfbffffe 	.word	0xdfbffffe

0801172c <_fflush_r>:
 801172c:	b538      	push	{r3, r4, r5, lr}
 801172e:	690b      	ldr	r3, [r1, #16]
 8011730:	4605      	mov	r5, r0
 8011732:	460c      	mov	r4, r1
 8011734:	b913      	cbnz	r3, 801173c <_fflush_r+0x10>
 8011736:	2500      	movs	r5, #0
 8011738:	4628      	mov	r0, r5
 801173a:	bd38      	pop	{r3, r4, r5, pc}
 801173c:	b118      	cbz	r0, 8011746 <_fflush_r+0x1a>
 801173e:	6a03      	ldr	r3, [r0, #32]
 8011740:	b90b      	cbnz	r3, 8011746 <_fflush_r+0x1a>
 8011742:	f7fe ffc5 	bl	80106d0 <__sinit>
 8011746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d0f3      	beq.n	8011736 <_fflush_r+0xa>
 801174e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011750:	07d0      	lsls	r0, r2, #31
 8011752:	d404      	bmi.n	801175e <_fflush_r+0x32>
 8011754:	0599      	lsls	r1, r3, #22
 8011756:	d402      	bmi.n	801175e <_fflush_r+0x32>
 8011758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801175a:	f7ff fa06 	bl	8010b6a <__retarget_lock_acquire_recursive>
 801175e:	4628      	mov	r0, r5
 8011760:	4621      	mov	r1, r4
 8011762:	f7ff ff5d 	bl	8011620 <__sflush_r>
 8011766:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011768:	07da      	lsls	r2, r3, #31
 801176a:	4605      	mov	r5, r0
 801176c:	d4e4      	bmi.n	8011738 <_fflush_r+0xc>
 801176e:	89a3      	ldrh	r3, [r4, #12]
 8011770:	059b      	lsls	r3, r3, #22
 8011772:	d4e1      	bmi.n	8011738 <_fflush_r+0xc>
 8011774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011776:	f7ff f9f9 	bl	8010b6c <__retarget_lock_release_recursive>
 801177a:	e7dd      	b.n	8011738 <_fflush_r+0xc>

0801177c <fiprintf>:
 801177c:	b40e      	push	{r1, r2, r3}
 801177e:	b503      	push	{r0, r1, lr}
 8011780:	4601      	mov	r1, r0
 8011782:	ab03      	add	r3, sp, #12
 8011784:	4805      	ldr	r0, [pc, #20]	; (801179c <fiprintf+0x20>)
 8011786:	f853 2b04 	ldr.w	r2, [r3], #4
 801178a:	6800      	ldr	r0, [r0, #0]
 801178c:	9301      	str	r3, [sp, #4]
 801178e:	f7ff fc9d 	bl	80110cc <_vfiprintf_r>
 8011792:	b002      	add	sp, #8
 8011794:	f85d eb04 	ldr.w	lr, [sp], #4
 8011798:	b003      	add	sp, #12
 801179a:	4770      	bx	lr
 801179c:	20000084 	.word	0x20000084

080117a0 <__swhatbuf_r>:
 80117a0:	b570      	push	{r4, r5, r6, lr}
 80117a2:	460c      	mov	r4, r1
 80117a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117a8:	2900      	cmp	r1, #0
 80117aa:	b096      	sub	sp, #88	; 0x58
 80117ac:	4615      	mov	r5, r2
 80117ae:	461e      	mov	r6, r3
 80117b0:	da0d      	bge.n	80117ce <__swhatbuf_r+0x2e>
 80117b2:	89a3      	ldrh	r3, [r4, #12]
 80117b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80117b8:	f04f 0100 	mov.w	r1, #0
 80117bc:	bf0c      	ite	eq
 80117be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80117c2:	2340      	movne	r3, #64	; 0x40
 80117c4:	2000      	movs	r0, #0
 80117c6:	6031      	str	r1, [r6, #0]
 80117c8:	602b      	str	r3, [r5, #0]
 80117ca:	b016      	add	sp, #88	; 0x58
 80117cc:	bd70      	pop	{r4, r5, r6, pc}
 80117ce:	466a      	mov	r2, sp
 80117d0:	f000 f848 	bl	8011864 <_fstat_r>
 80117d4:	2800      	cmp	r0, #0
 80117d6:	dbec      	blt.n	80117b2 <__swhatbuf_r+0x12>
 80117d8:	9901      	ldr	r1, [sp, #4]
 80117da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80117de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80117e2:	4259      	negs	r1, r3
 80117e4:	4159      	adcs	r1, r3
 80117e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80117ea:	e7eb      	b.n	80117c4 <__swhatbuf_r+0x24>

080117ec <__smakebuf_r>:
 80117ec:	898b      	ldrh	r3, [r1, #12]
 80117ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80117f0:	079d      	lsls	r5, r3, #30
 80117f2:	4606      	mov	r6, r0
 80117f4:	460c      	mov	r4, r1
 80117f6:	d507      	bpl.n	8011808 <__smakebuf_r+0x1c>
 80117f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80117fc:	6023      	str	r3, [r4, #0]
 80117fe:	6123      	str	r3, [r4, #16]
 8011800:	2301      	movs	r3, #1
 8011802:	6163      	str	r3, [r4, #20]
 8011804:	b002      	add	sp, #8
 8011806:	bd70      	pop	{r4, r5, r6, pc}
 8011808:	ab01      	add	r3, sp, #4
 801180a:	466a      	mov	r2, sp
 801180c:	f7ff ffc8 	bl	80117a0 <__swhatbuf_r>
 8011810:	9900      	ldr	r1, [sp, #0]
 8011812:	4605      	mov	r5, r0
 8011814:	4630      	mov	r0, r6
 8011816:	f7ff fa4b 	bl	8010cb0 <_malloc_r>
 801181a:	b948      	cbnz	r0, 8011830 <__smakebuf_r+0x44>
 801181c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011820:	059a      	lsls	r2, r3, #22
 8011822:	d4ef      	bmi.n	8011804 <__smakebuf_r+0x18>
 8011824:	f023 0303 	bic.w	r3, r3, #3
 8011828:	f043 0302 	orr.w	r3, r3, #2
 801182c:	81a3      	strh	r3, [r4, #12]
 801182e:	e7e3      	b.n	80117f8 <__smakebuf_r+0xc>
 8011830:	89a3      	ldrh	r3, [r4, #12]
 8011832:	6020      	str	r0, [r4, #0]
 8011834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011838:	81a3      	strh	r3, [r4, #12]
 801183a:	9b00      	ldr	r3, [sp, #0]
 801183c:	6163      	str	r3, [r4, #20]
 801183e:	9b01      	ldr	r3, [sp, #4]
 8011840:	6120      	str	r0, [r4, #16]
 8011842:	b15b      	cbz	r3, 801185c <__smakebuf_r+0x70>
 8011844:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011848:	4630      	mov	r0, r6
 801184a:	f000 f81d 	bl	8011888 <_isatty_r>
 801184e:	b128      	cbz	r0, 801185c <__smakebuf_r+0x70>
 8011850:	89a3      	ldrh	r3, [r4, #12]
 8011852:	f023 0303 	bic.w	r3, r3, #3
 8011856:	f043 0301 	orr.w	r3, r3, #1
 801185a:	81a3      	strh	r3, [r4, #12]
 801185c:	89a3      	ldrh	r3, [r4, #12]
 801185e:	431d      	orrs	r5, r3
 8011860:	81a5      	strh	r5, [r4, #12]
 8011862:	e7cf      	b.n	8011804 <__smakebuf_r+0x18>

08011864 <_fstat_r>:
 8011864:	b538      	push	{r3, r4, r5, lr}
 8011866:	4d07      	ldr	r5, [pc, #28]	; (8011884 <_fstat_r+0x20>)
 8011868:	2300      	movs	r3, #0
 801186a:	4604      	mov	r4, r0
 801186c:	4608      	mov	r0, r1
 801186e:	4611      	mov	r1, r2
 8011870:	602b      	str	r3, [r5, #0]
 8011872:	f7ef fab4 	bl	8000dde <_fstat>
 8011876:	1c43      	adds	r3, r0, #1
 8011878:	d102      	bne.n	8011880 <_fstat_r+0x1c>
 801187a:	682b      	ldr	r3, [r5, #0]
 801187c:	b103      	cbz	r3, 8011880 <_fstat_r+0x1c>
 801187e:	6023      	str	r3, [r4, #0]
 8011880:	bd38      	pop	{r3, r4, r5, pc}
 8011882:	bf00      	nop
 8011884:	20008c58 	.word	0x20008c58

08011888 <_isatty_r>:
 8011888:	b538      	push	{r3, r4, r5, lr}
 801188a:	4d06      	ldr	r5, [pc, #24]	; (80118a4 <_isatty_r+0x1c>)
 801188c:	2300      	movs	r3, #0
 801188e:	4604      	mov	r4, r0
 8011890:	4608      	mov	r0, r1
 8011892:	602b      	str	r3, [r5, #0]
 8011894:	f7ef fab3 	bl	8000dfe <_isatty>
 8011898:	1c43      	adds	r3, r0, #1
 801189a:	d102      	bne.n	80118a2 <_isatty_r+0x1a>
 801189c:	682b      	ldr	r3, [r5, #0]
 801189e:	b103      	cbz	r3, 80118a2 <_isatty_r+0x1a>
 80118a0:	6023      	str	r3, [r4, #0]
 80118a2:	bd38      	pop	{r3, r4, r5, pc}
 80118a4:	20008c58 	.word	0x20008c58

080118a8 <_sbrk_r>:
 80118a8:	b538      	push	{r3, r4, r5, lr}
 80118aa:	4d06      	ldr	r5, [pc, #24]	; (80118c4 <_sbrk_r+0x1c>)
 80118ac:	2300      	movs	r3, #0
 80118ae:	4604      	mov	r4, r0
 80118b0:	4608      	mov	r0, r1
 80118b2:	602b      	str	r3, [r5, #0]
 80118b4:	f7ef fabc 	bl	8000e30 <_sbrk>
 80118b8:	1c43      	adds	r3, r0, #1
 80118ba:	d102      	bne.n	80118c2 <_sbrk_r+0x1a>
 80118bc:	682b      	ldr	r3, [r5, #0]
 80118be:	b103      	cbz	r3, 80118c2 <_sbrk_r+0x1a>
 80118c0:	6023      	str	r3, [r4, #0]
 80118c2:	bd38      	pop	{r3, r4, r5, pc}
 80118c4:	20008c58 	.word	0x20008c58

080118c8 <abort>:
 80118c8:	b508      	push	{r3, lr}
 80118ca:	2006      	movs	r0, #6
 80118cc:	f000 f85a 	bl	8011984 <raise>
 80118d0:	2001      	movs	r0, #1
 80118d2:	f7ef fa35 	bl	8000d40 <_exit>

080118d6 <_realloc_r>:
 80118d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118da:	4680      	mov	r8, r0
 80118dc:	4614      	mov	r4, r2
 80118de:	460e      	mov	r6, r1
 80118e0:	b921      	cbnz	r1, 80118ec <_realloc_r+0x16>
 80118e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80118e6:	4611      	mov	r1, r2
 80118e8:	f7ff b9e2 	b.w	8010cb0 <_malloc_r>
 80118ec:	b92a      	cbnz	r2, 80118fa <_realloc_r+0x24>
 80118ee:	f7ff f96b 	bl	8010bc8 <_free_r>
 80118f2:	4625      	mov	r5, r4
 80118f4:	4628      	mov	r0, r5
 80118f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118fa:	f000 f85f 	bl	80119bc <_malloc_usable_size_r>
 80118fe:	4284      	cmp	r4, r0
 8011900:	4607      	mov	r7, r0
 8011902:	d802      	bhi.n	801190a <_realloc_r+0x34>
 8011904:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011908:	d812      	bhi.n	8011930 <_realloc_r+0x5a>
 801190a:	4621      	mov	r1, r4
 801190c:	4640      	mov	r0, r8
 801190e:	f7ff f9cf 	bl	8010cb0 <_malloc_r>
 8011912:	4605      	mov	r5, r0
 8011914:	2800      	cmp	r0, #0
 8011916:	d0ed      	beq.n	80118f4 <_realloc_r+0x1e>
 8011918:	42bc      	cmp	r4, r7
 801191a:	4622      	mov	r2, r4
 801191c:	4631      	mov	r1, r6
 801191e:	bf28      	it	cs
 8011920:	463a      	movcs	r2, r7
 8011922:	f7ff f924 	bl	8010b6e <memcpy>
 8011926:	4631      	mov	r1, r6
 8011928:	4640      	mov	r0, r8
 801192a:	f7ff f94d 	bl	8010bc8 <_free_r>
 801192e:	e7e1      	b.n	80118f4 <_realloc_r+0x1e>
 8011930:	4635      	mov	r5, r6
 8011932:	e7df      	b.n	80118f4 <_realloc_r+0x1e>

08011934 <_raise_r>:
 8011934:	291f      	cmp	r1, #31
 8011936:	b538      	push	{r3, r4, r5, lr}
 8011938:	4604      	mov	r4, r0
 801193a:	460d      	mov	r5, r1
 801193c:	d904      	bls.n	8011948 <_raise_r+0x14>
 801193e:	2316      	movs	r3, #22
 8011940:	6003      	str	r3, [r0, #0]
 8011942:	f04f 30ff 	mov.w	r0, #4294967295
 8011946:	bd38      	pop	{r3, r4, r5, pc}
 8011948:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801194a:	b112      	cbz	r2, 8011952 <_raise_r+0x1e>
 801194c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011950:	b94b      	cbnz	r3, 8011966 <_raise_r+0x32>
 8011952:	4620      	mov	r0, r4
 8011954:	f000 f830 	bl	80119b8 <_getpid_r>
 8011958:	462a      	mov	r2, r5
 801195a:	4601      	mov	r1, r0
 801195c:	4620      	mov	r0, r4
 801195e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011962:	f000 b817 	b.w	8011994 <_kill_r>
 8011966:	2b01      	cmp	r3, #1
 8011968:	d00a      	beq.n	8011980 <_raise_r+0x4c>
 801196a:	1c59      	adds	r1, r3, #1
 801196c:	d103      	bne.n	8011976 <_raise_r+0x42>
 801196e:	2316      	movs	r3, #22
 8011970:	6003      	str	r3, [r0, #0]
 8011972:	2001      	movs	r0, #1
 8011974:	e7e7      	b.n	8011946 <_raise_r+0x12>
 8011976:	2400      	movs	r4, #0
 8011978:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801197c:	4628      	mov	r0, r5
 801197e:	4798      	blx	r3
 8011980:	2000      	movs	r0, #0
 8011982:	e7e0      	b.n	8011946 <_raise_r+0x12>

08011984 <raise>:
 8011984:	4b02      	ldr	r3, [pc, #8]	; (8011990 <raise+0xc>)
 8011986:	4601      	mov	r1, r0
 8011988:	6818      	ldr	r0, [r3, #0]
 801198a:	f7ff bfd3 	b.w	8011934 <_raise_r>
 801198e:	bf00      	nop
 8011990:	20000084 	.word	0x20000084

08011994 <_kill_r>:
 8011994:	b538      	push	{r3, r4, r5, lr}
 8011996:	4d07      	ldr	r5, [pc, #28]	; (80119b4 <_kill_r+0x20>)
 8011998:	2300      	movs	r3, #0
 801199a:	4604      	mov	r4, r0
 801199c:	4608      	mov	r0, r1
 801199e:	4611      	mov	r1, r2
 80119a0:	602b      	str	r3, [r5, #0]
 80119a2:	f7ef f9bb 	bl	8000d1c <_kill>
 80119a6:	1c43      	adds	r3, r0, #1
 80119a8:	d102      	bne.n	80119b0 <_kill_r+0x1c>
 80119aa:	682b      	ldr	r3, [r5, #0]
 80119ac:	b103      	cbz	r3, 80119b0 <_kill_r+0x1c>
 80119ae:	6023      	str	r3, [r4, #0]
 80119b0:	bd38      	pop	{r3, r4, r5, pc}
 80119b2:	bf00      	nop
 80119b4:	20008c58 	.word	0x20008c58

080119b8 <_getpid_r>:
 80119b8:	f7ef b9a8 	b.w	8000d0c <_getpid>

080119bc <_malloc_usable_size_r>:
 80119bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119c0:	1f18      	subs	r0, r3, #4
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	bfbc      	itt	lt
 80119c6:	580b      	ldrlt	r3, [r1, r0]
 80119c8:	18c0      	addlt	r0, r0, r3
 80119ca:	4770      	bx	lr

080119cc <_init>:
 80119cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119ce:	bf00      	nop
 80119d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119d2:	bc08      	pop	{r3}
 80119d4:	469e      	mov	lr, r3
 80119d6:	4770      	bx	lr

080119d8 <_fini>:
 80119d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119da:	bf00      	nop
 80119dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80119de:	bc08      	pop	{r3}
 80119e0:	469e      	mov	lr, r3
 80119e2:	4770      	bx	lr
