
for_iap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c90  080201f8  080201f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08023e88  08023e88  00013e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023ea0  08023ea0  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08023ea0  08023ea0  00013ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023ea8  08023ea8  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023ea8  08023ea8  00013ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023eac  08023eac  00013eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08023eb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08023ebc  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08023f5c  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006a0  2000014c  08023ffc  0002014c  2**2
                  ALLOC
 12 ._user_heap_stack 00002004  200007ec  08023ffc  000207ec  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002017a  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001149c  00000000  00000000  000201bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000023a0  00000000  00000000  00031659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000d10  00000000  00000000  00033a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000a0d  00000000  00000000  00034710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002857b  00000000  00000000  0003511d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0000fff4  00000000  00000000  0005d698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f96f0  00000000  00000000  0006d68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00003650  00000000  00000000  00166d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005f  00000000  00000000  0016a3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080201f8 <__do_global_dtors_aux>:
 80201f8:	b510      	push	{r4, lr}
 80201fa:	4c05      	ldr	r4, [pc, #20]	; (8020210 <__do_global_dtors_aux+0x18>)
 80201fc:	7823      	ldrb	r3, [r4, #0]
 80201fe:	b933      	cbnz	r3, 802020e <__do_global_dtors_aux+0x16>
 8020200:	4b04      	ldr	r3, [pc, #16]	; (8020214 <__do_global_dtors_aux+0x1c>)
 8020202:	b113      	cbz	r3, 802020a <__do_global_dtors_aux+0x12>
 8020204:	4804      	ldr	r0, [pc, #16]	; (8020218 <__do_global_dtors_aux+0x20>)
 8020206:	f3af 8000 	nop.w
 802020a:	2301      	movs	r3, #1
 802020c:	7023      	strb	r3, [r4, #0]
 802020e:	bd10      	pop	{r4, pc}
 8020210:	2000014c 	.word	0x2000014c
 8020214:	00000000 	.word	0x00000000
 8020218:	08023e70 	.word	0x08023e70

0802021c <frame_dummy>:
 802021c:	b508      	push	{r3, lr}
 802021e:	4b03      	ldr	r3, [pc, #12]	; (802022c <frame_dummy+0x10>)
 8020220:	b11b      	cbz	r3, 802022a <frame_dummy+0xe>
 8020222:	4903      	ldr	r1, [pc, #12]	; (8020230 <frame_dummy+0x14>)
 8020224:	4803      	ldr	r0, [pc, #12]	; (8020234 <frame_dummy+0x18>)
 8020226:	f3af 8000 	nop.w
 802022a:	bd08      	pop	{r3, pc}
 802022c:	00000000 	.word	0x00000000
 8020230:	20000150 	.word	0x20000150
 8020234:	08023e70 	.word	0x08023e70

08020238 <__aeabi_uldivmod>:
 8020238:	b953      	cbnz	r3, 8020250 <__aeabi_uldivmod+0x18>
 802023a:	b94a      	cbnz	r2, 8020250 <__aeabi_uldivmod+0x18>
 802023c:	2900      	cmp	r1, #0
 802023e:	bf08      	it	eq
 8020240:	2800      	cmpeq	r0, #0
 8020242:	bf1c      	itt	ne
 8020244:	f04f 31ff 	movne.w	r1, #4294967295
 8020248:	f04f 30ff 	movne.w	r0, #4294967295
 802024c:	f000 b970 	b.w	8020530 <__aeabi_idiv0>
 8020250:	f1ad 0c08 	sub.w	ip, sp, #8
 8020254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020258:	f000 f806 	bl	8020268 <__udivmoddi4>
 802025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020264:	b004      	add	sp, #16
 8020266:	4770      	bx	lr

08020268 <__udivmoddi4>:
 8020268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802026c:	9e08      	ldr	r6, [sp, #32]
 802026e:	460d      	mov	r5, r1
 8020270:	4604      	mov	r4, r0
 8020272:	460f      	mov	r7, r1
 8020274:	2b00      	cmp	r3, #0
 8020276:	d14a      	bne.n	802030e <__udivmoddi4+0xa6>
 8020278:	428a      	cmp	r2, r1
 802027a:	4694      	mov	ip, r2
 802027c:	d965      	bls.n	802034a <__udivmoddi4+0xe2>
 802027e:	fab2 f382 	clz	r3, r2
 8020282:	b143      	cbz	r3, 8020296 <__udivmoddi4+0x2e>
 8020284:	fa02 fc03 	lsl.w	ip, r2, r3
 8020288:	f1c3 0220 	rsb	r2, r3, #32
 802028c:	409f      	lsls	r7, r3
 802028e:	fa20 f202 	lsr.w	r2, r0, r2
 8020292:	4317      	orrs	r7, r2
 8020294:	409c      	lsls	r4, r3
 8020296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 802029a:	fa1f f58c 	uxth.w	r5, ip
 802029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80202a2:	0c22      	lsrs	r2, r4, #16
 80202a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80202a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80202ac:	fb01 f005 	mul.w	r0, r1, r5
 80202b0:	4290      	cmp	r0, r2
 80202b2:	d90a      	bls.n	80202ca <__udivmoddi4+0x62>
 80202b4:	eb1c 0202 	adds.w	r2, ip, r2
 80202b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80202bc:	f080 811c 	bcs.w	80204f8 <__udivmoddi4+0x290>
 80202c0:	4290      	cmp	r0, r2
 80202c2:	f240 8119 	bls.w	80204f8 <__udivmoddi4+0x290>
 80202c6:	3902      	subs	r1, #2
 80202c8:	4462      	add	r2, ip
 80202ca:	1a12      	subs	r2, r2, r0
 80202cc:	b2a4      	uxth	r4, r4
 80202ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80202d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80202d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80202da:	fb00 f505 	mul.w	r5, r0, r5
 80202de:	42a5      	cmp	r5, r4
 80202e0:	d90a      	bls.n	80202f8 <__udivmoddi4+0x90>
 80202e2:	eb1c 0404 	adds.w	r4, ip, r4
 80202e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80202ea:	f080 8107 	bcs.w	80204fc <__udivmoddi4+0x294>
 80202ee:	42a5      	cmp	r5, r4
 80202f0:	f240 8104 	bls.w	80204fc <__udivmoddi4+0x294>
 80202f4:	4464      	add	r4, ip
 80202f6:	3802      	subs	r0, #2
 80202f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80202fc:	1b64      	subs	r4, r4, r5
 80202fe:	2100      	movs	r1, #0
 8020300:	b11e      	cbz	r6, 802030a <__udivmoddi4+0xa2>
 8020302:	40dc      	lsrs	r4, r3
 8020304:	2300      	movs	r3, #0
 8020306:	e9c6 4300 	strd	r4, r3, [r6]
 802030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802030e:	428b      	cmp	r3, r1
 8020310:	d908      	bls.n	8020324 <__udivmoddi4+0xbc>
 8020312:	2e00      	cmp	r6, #0
 8020314:	f000 80ed 	beq.w	80204f2 <__udivmoddi4+0x28a>
 8020318:	2100      	movs	r1, #0
 802031a:	e9c6 0500 	strd	r0, r5, [r6]
 802031e:	4608      	mov	r0, r1
 8020320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020324:	fab3 f183 	clz	r1, r3
 8020328:	2900      	cmp	r1, #0
 802032a:	d149      	bne.n	80203c0 <__udivmoddi4+0x158>
 802032c:	42ab      	cmp	r3, r5
 802032e:	d302      	bcc.n	8020336 <__udivmoddi4+0xce>
 8020330:	4282      	cmp	r2, r0
 8020332:	f200 80f8 	bhi.w	8020526 <__udivmoddi4+0x2be>
 8020336:	1a84      	subs	r4, r0, r2
 8020338:	eb65 0203 	sbc.w	r2, r5, r3
 802033c:	2001      	movs	r0, #1
 802033e:	4617      	mov	r7, r2
 8020340:	2e00      	cmp	r6, #0
 8020342:	d0e2      	beq.n	802030a <__udivmoddi4+0xa2>
 8020344:	e9c6 4700 	strd	r4, r7, [r6]
 8020348:	e7df      	b.n	802030a <__udivmoddi4+0xa2>
 802034a:	b902      	cbnz	r2, 802034e <__udivmoddi4+0xe6>
 802034c:	deff      	udf	#255	; 0xff
 802034e:	fab2 f382 	clz	r3, r2
 8020352:	2b00      	cmp	r3, #0
 8020354:	f040 8090 	bne.w	8020478 <__udivmoddi4+0x210>
 8020358:	1a8a      	subs	r2, r1, r2
 802035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 802035e:	fa1f fe8c 	uxth.w	lr, ip
 8020362:	2101      	movs	r1, #1
 8020364:	fbb2 f5f7 	udiv	r5, r2, r7
 8020368:	fb07 2015 	mls	r0, r7, r5, r2
 802036c:	0c22      	lsrs	r2, r4, #16
 802036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8020372:	fb0e f005 	mul.w	r0, lr, r5
 8020376:	4290      	cmp	r0, r2
 8020378:	d908      	bls.n	802038c <__udivmoddi4+0x124>
 802037a:	eb1c 0202 	adds.w	r2, ip, r2
 802037e:	f105 38ff 	add.w	r8, r5, #4294967295
 8020382:	d202      	bcs.n	802038a <__udivmoddi4+0x122>
 8020384:	4290      	cmp	r0, r2
 8020386:	f200 80cb 	bhi.w	8020520 <__udivmoddi4+0x2b8>
 802038a:	4645      	mov	r5, r8
 802038c:	1a12      	subs	r2, r2, r0
 802038e:	b2a4      	uxth	r4, r4
 8020390:	fbb2 f0f7 	udiv	r0, r2, r7
 8020394:	fb07 2210 	mls	r2, r7, r0, r2
 8020398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 802039c:	fb0e fe00 	mul.w	lr, lr, r0
 80203a0:	45a6      	cmp	lr, r4
 80203a2:	d908      	bls.n	80203b6 <__udivmoddi4+0x14e>
 80203a4:	eb1c 0404 	adds.w	r4, ip, r4
 80203a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80203ac:	d202      	bcs.n	80203b4 <__udivmoddi4+0x14c>
 80203ae:	45a6      	cmp	lr, r4
 80203b0:	f200 80bb 	bhi.w	802052a <__udivmoddi4+0x2c2>
 80203b4:	4610      	mov	r0, r2
 80203b6:	eba4 040e 	sub.w	r4, r4, lr
 80203ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80203be:	e79f      	b.n	8020300 <__udivmoddi4+0x98>
 80203c0:	f1c1 0720 	rsb	r7, r1, #32
 80203c4:	408b      	lsls	r3, r1
 80203c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80203ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80203ce:	fa05 f401 	lsl.w	r4, r5, r1
 80203d2:	fa20 f307 	lsr.w	r3, r0, r7
 80203d6:	40fd      	lsrs	r5, r7
 80203d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80203dc:	4323      	orrs	r3, r4
 80203de:	fbb5 f8f9 	udiv	r8, r5, r9
 80203e2:	fa1f fe8c 	uxth.w	lr, ip
 80203e6:	fb09 5518 	mls	r5, r9, r8, r5
 80203ea:	0c1c      	lsrs	r4, r3, #16
 80203ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80203f0:	fb08 f50e 	mul.w	r5, r8, lr
 80203f4:	42a5      	cmp	r5, r4
 80203f6:	fa02 f201 	lsl.w	r2, r2, r1
 80203fa:	fa00 f001 	lsl.w	r0, r0, r1
 80203fe:	d90b      	bls.n	8020418 <__udivmoddi4+0x1b0>
 8020400:	eb1c 0404 	adds.w	r4, ip, r4
 8020404:	f108 3aff 	add.w	sl, r8, #4294967295
 8020408:	f080 8088 	bcs.w	802051c <__udivmoddi4+0x2b4>
 802040c:	42a5      	cmp	r5, r4
 802040e:	f240 8085 	bls.w	802051c <__udivmoddi4+0x2b4>
 8020412:	f1a8 0802 	sub.w	r8, r8, #2
 8020416:	4464      	add	r4, ip
 8020418:	1b64      	subs	r4, r4, r5
 802041a:	b29d      	uxth	r5, r3
 802041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8020420:	fb09 4413 	mls	r4, r9, r3, r4
 8020424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8020428:	fb03 fe0e 	mul.w	lr, r3, lr
 802042c:	45a6      	cmp	lr, r4
 802042e:	d908      	bls.n	8020442 <__udivmoddi4+0x1da>
 8020430:	eb1c 0404 	adds.w	r4, ip, r4
 8020434:	f103 35ff 	add.w	r5, r3, #4294967295
 8020438:	d26c      	bcs.n	8020514 <__udivmoddi4+0x2ac>
 802043a:	45a6      	cmp	lr, r4
 802043c:	d96a      	bls.n	8020514 <__udivmoddi4+0x2ac>
 802043e:	3b02      	subs	r3, #2
 8020440:	4464      	add	r4, ip
 8020442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8020446:	fba3 9502 	umull	r9, r5, r3, r2
 802044a:	eba4 040e 	sub.w	r4, r4, lr
 802044e:	42ac      	cmp	r4, r5
 8020450:	46c8      	mov	r8, r9
 8020452:	46ae      	mov	lr, r5
 8020454:	d356      	bcc.n	8020504 <__udivmoddi4+0x29c>
 8020456:	d053      	beq.n	8020500 <__udivmoddi4+0x298>
 8020458:	b156      	cbz	r6, 8020470 <__udivmoddi4+0x208>
 802045a:	ebb0 0208 	subs.w	r2, r0, r8
 802045e:	eb64 040e 	sbc.w	r4, r4, lr
 8020462:	fa04 f707 	lsl.w	r7, r4, r7
 8020466:	40ca      	lsrs	r2, r1
 8020468:	40cc      	lsrs	r4, r1
 802046a:	4317      	orrs	r7, r2
 802046c:	e9c6 7400 	strd	r7, r4, [r6]
 8020470:	4618      	mov	r0, r3
 8020472:	2100      	movs	r1, #0
 8020474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020478:	f1c3 0120 	rsb	r1, r3, #32
 802047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8020480:	fa20 f201 	lsr.w	r2, r0, r1
 8020484:	fa25 f101 	lsr.w	r1, r5, r1
 8020488:	409d      	lsls	r5, r3
 802048a:	432a      	orrs	r2, r5
 802048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8020490:	fa1f fe8c 	uxth.w	lr, ip
 8020494:	fbb1 f0f7 	udiv	r0, r1, r7
 8020498:	fb07 1510 	mls	r5, r7, r0, r1
 802049c:	0c11      	lsrs	r1, r2, #16
 802049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80204a2:	fb00 f50e 	mul.w	r5, r0, lr
 80204a6:	428d      	cmp	r5, r1
 80204a8:	fa04 f403 	lsl.w	r4, r4, r3
 80204ac:	d908      	bls.n	80204c0 <__udivmoddi4+0x258>
 80204ae:	eb1c 0101 	adds.w	r1, ip, r1
 80204b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80204b6:	d22f      	bcs.n	8020518 <__udivmoddi4+0x2b0>
 80204b8:	428d      	cmp	r5, r1
 80204ba:	d92d      	bls.n	8020518 <__udivmoddi4+0x2b0>
 80204bc:	3802      	subs	r0, #2
 80204be:	4461      	add	r1, ip
 80204c0:	1b49      	subs	r1, r1, r5
 80204c2:	b292      	uxth	r2, r2
 80204c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80204c8:	fb07 1115 	mls	r1, r7, r5, r1
 80204cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80204d0:	fb05 f10e 	mul.w	r1, r5, lr
 80204d4:	4291      	cmp	r1, r2
 80204d6:	d908      	bls.n	80204ea <__udivmoddi4+0x282>
 80204d8:	eb1c 0202 	adds.w	r2, ip, r2
 80204dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80204e0:	d216      	bcs.n	8020510 <__udivmoddi4+0x2a8>
 80204e2:	4291      	cmp	r1, r2
 80204e4:	d914      	bls.n	8020510 <__udivmoddi4+0x2a8>
 80204e6:	3d02      	subs	r5, #2
 80204e8:	4462      	add	r2, ip
 80204ea:	1a52      	subs	r2, r2, r1
 80204ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80204f0:	e738      	b.n	8020364 <__udivmoddi4+0xfc>
 80204f2:	4631      	mov	r1, r6
 80204f4:	4630      	mov	r0, r6
 80204f6:	e708      	b.n	802030a <__udivmoddi4+0xa2>
 80204f8:	4639      	mov	r1, r7
 80204fa:	e6e6      	b.n	80202ca <__udivmoddi4+0x62>
 80204fc:	4610      	mov	r0, r2
 80204fe:	e6fb      	b.n	80202f8 <__udivmoddi4+0x90>
 8020500:	4548      	cmp	r0, r9
 8020502:	d2a9      	bcs.n	8020458 <__udivmoddi4+0x1f0>
 8020504:	ebb9 0802 	subs.w	r8, r9, r2
 8020508:	eb65 0e0c 	sbc.w	lr, r5, ip
 802050c:	3b01      	subs	r3, #1
 802050e:	e7a3      	b.n	8020458 <__udivmoddi4+0x1f0>
 8020510:	4645      	mov	r5, r8
 8020512:	e7ea      	b.n	80204ea <__udivmoddi4+0x282>
 8020514:	462b      	mov	r3, r5
 8020516:	e794      	b.n	8020442 <__udivmoddi4+0x1da>
 8020518:	4640      	mov	r0, r8
 802051a:	e7d1      	b.n	80204c0 <__udivmoddi4+0x258>
 802051c:	46d0      	mov	r8, sl
 802051e:	e77b      	b.n	8020418 <__udivmoddi4+0x1b0>
 8020520:	3d02      	subs	r5, #2
 8020522:	4462      	add	r2, ip
 8020524:	e732      	b.n	802038c <__udivmoddi4+0x124>
 8020526:	4608      	mov	r0, r1
 8020528:	e70a      	b.n	8020340 <__udivmoddi4+0xd8>
 802052a:	4464      	add	r4, ip
 802052c:	3802      	subs	r0, #2
 802052e:	e742      	b.n	80203b6 <__udivmoddi4+0x14e>

08020530 <__aeabi_idiv0>:
 8020530:	4770      	bx	lr
 8020532:	bf00      	nop

08020534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020534:	b580      	push	{r7, lr}
 8020536:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020538:	f000 fc1b 	bl	8020d72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 802053c:	f000 f836 	bl	80205ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8020540:	f000 f950 	bl	80207e4 <MX_GPIO_Init>
  MX_ETH_Init();
 8020544:	f000 f8a2 	bl	802068c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8020548:	f000 f8ee 	bl	8020728 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 802054c:	f000 f91c 	bl	8020788 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8020550:	2201      	movs	r2, #1
 8020552:	2101      	movs	r1, #1
 8020554:	4814      	ldr	r0, [pc, #80]	; (80205a8 <main+0x74>)
 8020556:	f001 fa45 	bl	80219e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 802055a:	2201      	movs	r2, #1
 802055c:	2180      	movs	r1, #128	; 0x80
 802055e:	4812      	ldr	r0, [pc, #72]	; (80205a8 <main+0x74>)
 8020560:	f001 fa40 	bl	80219e4 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8020564:	2200      	movs	r2, #0
 8020566:	2101      	movs	r1, #1
 8020568:	480f      	ldr	r0, [pc, #60]	; (80205a8 <main+0x74>)
 802056a:	f001 fa3b 	bl	80219e4 <HAL_GPIO_WritePin>
	     HAL_Delay(100);
 802056e:	2064      	movs	r0, #100	; 0x64
 8020570:	f000 fc5c 	bl	8020e2c <HAL_Delay>
	     HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8020574:	2201      	movs	r2, #1
 8020576:	2101      	movs	r1, #1
 8020578:	480b      	ldr	r0, [pc, #44]	; (80205a8 <main+0x74>)
 802057a:	f001 fa33 	bl	80219e4 <HAL_GPIO_WritePin>
	     HAL_Delay(100);
 802057e:	2064      	movs	r0, #100	; 0x64
 8020580:	f000 fc54 	bl	8020e2c <HAL_Delay>

	     HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8020584:	2200      	movs	r2, #0
 8020586:	2180      	movs	r1, #128	; 0x80
 8020588:	4807      	ldr	r0, [pc, #28]	; (80205a8 <main+0x74>)
 802058a:	f001 fa2b 	bl	80219e4 <HAL_GPIO_WritePin>
	     HAL_Delay(100);
 802058e:	2064      	movs	r0, #100	; 0x64
 8020590:	f000 fc4c 	bl	8020e2c <HAL_Delay>
	     HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8020594:	2201      	movs	r2, #1
 8020596:	2180      	movs	r1, #128	; 0x80
 8020598:	4803      	ldr	r0, [pc, #12]	; (80205a8 <main+0x74>)
 802059a:	f001 fa23 	bl	80219e4 <HAL_GPIO_WritePin>
	     HAL_Delay(100);
 802059e:	2064      	movs	r0, #100	; 0x64
 80205a0:	f000 fc44 	bl	8020e2c <HAL_Delay>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80205a4:	e7de      	b.n	8020564 <main+0x30>
 80205a6:	bf00      	nop
 80205a8:	40020400 	.word	0x40020400

080205ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80205ac:	b580      	push	{r7, lr}
 80205ae:	b094      	sub	sp, #80	; 0x50
 80205b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80205b2:	f107 031c 	add.w	r3, r7, #28
 80205b6:	2234      	movs	r2, #52	; 0x34
 80205b8:	2100      	movs	r1, #0
 80205ba:	4618      	mov	r0, r3
 80205bc:	f003 fc2c 	bl	8023e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80205c0:	f107 0308 	add.w	r3, r7, #8
 80205c4:	2200      	movs	r2, #0
 80205c6:	601a      	str	r2, [r3, #0]
 80205c8:	605a      	str	r2, [r3, #4]
 80205ca:	609a      	str	r2, [r3, #8]
 80205cc:	60da      	str	r2, [r3, #12]
 80205ce:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80205d0:	f001 fb6a 	bl	8021ca8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80205d4:	4b2b      	ldr	r3, [pc, #172]	; (8020684 <SystemClock_Config+0xd8>)
 80205d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80205d8:	4a2a      	ldr	r2, [pc, #168]	; (8020684 <SystemClock_Config+0xd8>)
 80205da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80205de:	6413      	str	r3, [r2, #64]	; 0x40
 80205e0:	4b28      	ldr	r3, [pc, #160]	; (8020684 <SystemClock_Config+0xd8>)
 80205e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80205e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80205e8:	607b      	str	r3, [r7, #4]
 80205ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80205ec:	4b26      	ldr	r3, [pc, #152]	; (8020688 <SystemClock_Config+0xdc>)
 80205ee:	681b      	ldr	r3, [r3, #0]
 80205f0:	4a25      	ldr	r2, [pc, #148]	; (8020688 <SystemClock_Config+0xdc>)
 80205f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80205f6:	6013      	str	r3, [r2, #0]
 80205f8:	4b23      	ldr	r3, [pc, #140]	; (8020688 <SystemClock_Config+0xdc>)
 80205fa:	681b      	ldr	r3, [r3, #0]
 80205fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8020600:	603b      	str	r3, [r7, #0]
 8020602:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8020604:	2301      	movs	r3, #1
 8020606:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8020608:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 802060c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 802060e:	2302      	movs	r3, #2
 8020610:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8020612:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8020616:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8020618:	2304      	movs	r3, #4
 802061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 802061c:	23c0      	movs	r3, #192	; 0xc0
 802061e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8020620:	2302      	movs	r3, #2
 8020622:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8020624:	2308      	movs	r3, #8
 8020626:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8020628:	2302      	movs	r3, #2
 802062a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802062c:	f107 031c 	add.w	r3, r7, #28
 8020630:	4618      	mov	r0, r3
 8020632:	f001 fb99 	bl	8021d68 <HAL_RCC_OscConfig>
 8020636:	4603      	mov	r3, r0
 8020638:	2b00      	cmp	r3, #0
 802063a:	d001      	beq.n	8020640 <SystemClock_Config+0x94>
  {
    Error_Handler();
 802063c:	f000 f974 	bl	8020928 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8020640:	f001 fb42 	bl	8021cc8 <HAL_PWREx_EnableOverDrive>
 8020644:	4603      	mov	r3, r0
 8020646:	2b00      	cmp	r3, #0
 8020648:	d001      	beq.n	802064e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 802064a:	f000 f96d 	bl	8020928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 802064e:	230f      	movs	r3, #15
 8020650:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8020652:	2302      	movs	r3, #2
 8020654:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8020656:	2300      	movs	r3, #0
 8020658:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 802065a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 802065e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8020660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020664:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8020666:	f107 0308 	add.w	r3, r7, #8
 802066a:	2106      	movs	r1, #6
 802066c:	4618      	mov	r0, r3
 802066e:	f001 fe29 	bl	80222c4 <HAL_RCC_ClockConfig>
 8020672:	4603      	mov	r3, r0
 8020674:	2b00      	cmp	r3, #0
 8020676:	d001      	beq.n	802067c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8020678:	f000 f956 	bl	8020928 <Error_Handler>
  }
}
 802067c:	bf00      	nop
 802067e:	3750      	adds	r7, #80	; 0x50
 8020680:	46bd      	mov	sp, r7
 8020682:	bd80      	pop	{r7, pc}
 8020684:	40023800 	.word	0x40023800
 8020688:	40007000 	.word	0x40007000

0802068c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 802068c:	b580      	push	{r7, lr}
 802068e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8020690:	4b1f      	ldr	r3, [pc, #124]	; (8020710 <MX_ETH_Init+0x84>)
 8020692:	4a20      	ldr	r2, [pc, #128]	; (8020714 <MX_ETH_Init+0x88>)
 8020694:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8020696:	4b20      	ldr	r3, [pc, #128]	; (8020718 <MX_ETH_Init+0x8c>)
 8020698:	2200      	movs	r2, #0
 802069a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 802069c:	4b1e      	ldr	r3, [pc, #120]	; (8020718 <MX_ETH_Init+0x8c>)
 802069e:	2280      	movs	r2, #128	; 0x80
 80206a0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80206a2:	4b1d      	ldr	r3, [pc, #116]	; (8020718 <MX_ETH_Init+0x8c>)
 80206a4:	22e1      	movs	r2, #225	; 0xe1
 80206a6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80206a8:	4b1b      	ldr	r3, [pc, #108]	; (8020718 <MX_ETH_Init+0x8c>)
 80206aa:	2200      	movs	r2, #0
 80206ac:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80206ae:	4b1a      	ldr	r3, [pc, #104]	; (8020718 <MX_ETH_Init+0x8c>)
 80206b0:	2200      	movs	r2, #0
 80206b2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80206b4:	4b18      	ldr	r3, [pc, #96]	; (8020718 <MX_ETH_Init+0x8c>)
 80206b6:	2200      	movs	r2, #0
 80206b8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80206ba:	4b15      	ldr	r3, [pc, #84]	; (8020710 <MX_ETH_Init+0x84>)
 80206bc:	4a16      	ldr	r2, [pc, #88]	; (8020718 <MX_ETH_Init+0x8c>)
 80206be:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80206c0:	4b13      	ldr	r3, [pc, #76]	; (8020710 <MX_ETH_Init+0x84>)
 80206c2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80206c6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80206c8:	4b11      	ldr	r3, [pc, #68]	; (8020710 <MX_ETH_Init+0x84>)
 80206ca:	4a14      	ldr	r2, [pc, #80]	; (802071c <MX_ETH_Init+0x90>)
 80206cc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80206ce:	4b10      	ldr	r3, [pc, #64]	; (8020710 <MX_ETH_Init+0x84>)
 80206d0:	4a13      	ldr	r2, [pc, #76]	; (8020720 <MX_ETH_Init+0x94>)
 80206d2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80206d4:	4b0e      	ldr	r3, [pc, #56]	; (8020710 <MX_ETH_Init+0x84>)
 80206d6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80206da:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80206dc:	480c      	ldr	r0, [pc, #48]	; (8020710 <MX_ETH_Init+0x84>)
 80206de:	f000 fcaf 	bl	8021040 <HAL_ETH_Init>
 80206e2:	4603      	mov	r3, r0
 80206e4:	2b00      	cmp	r3, #0
 80206e6:	d001      	beq.n	80206ec <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80206e8:	f000 f91e 	bl	8020928 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80206ec:	2238      	movs	r2, #56	; 0x38
 80206ee:	2100      	movs	r1, #0
 80206f0:	480c      	ldr	r0, [pc, #48]	; (8020724 <MX_ETH_Init+0x98>)
 80206f2:	f003 fb91 	bl	8023e18 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80206f6:	4b0b      	ldr	r3, [pc, #44]	; (8020724 <MX_ETH_Init+0x98>)
 80206f8:	2221      	movs	r2, #33	; 0x21
 80206fa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80206fc:	4b09      	ldr	r3, [pc, #36]	; (8020724 <MX_ETH_Init+0x98>)
 80206fe:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8020702:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8020704:	4b07      	ldr	r3, [pc, #28]	; (8020724 <MX_ETH_Init+0x98>)
 8020706:	2200      	movs	r2, #0
 8020708:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 802070a:	bf00      	nop
 802070c:	bd80      	pop	{r7, pc}
 802070e:	bf00      	nop
 8020710:	200001a0 	.word	0x200001a0
 8020714:	40028000 	.word	0x40028000
 8020718:	200007e0 	.word	0x200007e0
 802071c:	200000ac 	.word	0x200000ac
 8020720:	2000000c 	.word	0x2000000c
 8020724:	20000168 	.word	0x20000168

08020728 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8020728:	b580      	push	{r7, lr}
 802072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 802072c:	4b14      	ldr	r3, [pc, #80]	; (8020780 <MX_USART3_UART_Init+0x58>)
 802072e:	4a15      	ldr	r2, [pc, #84]	; (8020784 <MX_USART3_UART_Init+0x5c>)
 8020730:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8020732:	4b13      	ldr	r3, [pc, #76]	; (8020780 <MX_USART3_UART_Init+0x58>)
 8020734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020738:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 802073a:	4b11      	ldr	r3, [pc, #68]	; (8020780 <MX_USART3_UART_Init+0x58>)
 802073c:	2200      	movs	r2, #0
 802073e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8020740:	4b0f      	ldr	r3, [pc, #60]	; (8020780 <MX_USART3_UART_Init+0x58>)
 8020742:	2200      	movs	r2, #0
 8020744:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8020746:	4b0e      	ldr	r3, [pc, #56]	; (8020780 <MX_USART3_UART_Init+0x58>)
 8020748:	2200      	movs	r2, #0
 802074a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 802074c:	4b0c      	ldr	r3, [pc, #48]	; (8020780 <MX_USART3_UART_Init+0x58>)
 802074e:	220c      	movs	r2, #12
 8020750:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020752:	4b0b      	ldr	r3, [pc, #44]	; (8020780 <MX_USART3_UART_Init+0x58>)
 8020754:	2200      	movs	r2, #0
 8020756:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8020758:	4b09      	ldr	r3, [pc, #36]	; (8020780 <MX_USART3_UART_Init+0x58>)
 802075a:	2200      	movs	r2, #0
 802075c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802075e:	4b08      	ldr	r3, [pc, #32]	; (8020780 <MX_USART3_UART_Init+0x58>)
 8020760:	2200      	movs	r2, #0
 8020762:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8020764:	4b06      	ldr	r3, [pc, #24]	; (8020780 <MX_USART3_UART_Init+0x58>)
 8020766:	2200      	movs	r2, #0
 8020768:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 802076a:	4805      	ldr	r0, [pc, #20]	; (8020780 <MX_USART3_UART_Init+0x58>)
 802076c:	f002 fbf8 	bl	8022f60 <HAL_UART_Init>
 8020770:	4603      	mov	r3, r0
 8020772:	2b00      	cmp	r3, #0
 8020774:	d001      	beq.n	802077a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8020776:	f000 f8d7 	bl	8020928 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 802077a:	bf00      	nop
 802077c:	bd80      	pop	{r7, pc}
 802077e:	bf00      	nop
 8020780:	20000250 	.word	0x20000250
 8020784:	40004800 	.word	0x40004800

08020788 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8020788:	b580      	push	{r7, lr}
 802078a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 802078c:	4b14      	ldr	r3, [pc, #80]	; (80207e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 802078e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8020792:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8020794:	4b12      	ldr	r3, [pc, #72]	; (80207e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8020796:	2206      	movs	r2, #6
 8020798:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 802079a:	4b11      	ldr	r3, [pc, #68]	; (80207e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 802079c:	2202      	movs	r2, #2
 802079e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80207a0:	4b0f      	ldr	r3, [pc, #60]	; (80207e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80207a2:	2200      	movs	r2, #0
 80207a4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80207a6:	4b0e      	ldr	r3, [pc, #56]	; (80207e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80207a8:	2202      	movs	r2, #2
 80207aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80207ac:	4b0c      	ldr	r3, [pc, #48]	; (80207e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80207ae:	2201      	movs	r2, #1
 80207b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80207b2:	4b0b      	ldr	r3, [pc, #44]	; (80207e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80207b4:	2200      	movs	r2, #0
 80207b6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80207b8:	4b09      	ldr	r3, [pc, #36]	; (80207e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80207ba:	2200      	movs	r2, #0
 80207bc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80207be:	4b08      	ldr	r3, [pc, #32]	; (80207e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80207c0:	2201      	movs	r2, #1
 80207c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80207c4:	4b06      	ldr	r3, [pc, #24]	; (80207e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80207c6:	2200      	movs	r2, #0
 80207c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80207ca:	4805      	ldr	r0, [pc, #20]	; (80207e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80207cc:	f001 f923 	bl	8021a16 <HAL_PCD_Init>
 80207d0:	4603      	mov	r3, r0
 80207d2:	2b00      	cmp	r3, #0
 80207d4:	d001      	beq.n	80207da <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80207d6:	f000 f8a7 	bl	8020928 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80207da:	bf00      	nop
 80207dc:	bd80      	pop	{r7, pc}
 80207de:	bf00      	nop
 80207e0:	200002d8 	.word	0x200002d8

080207e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80207e4:	b580      	push	{r7, lr}
 80207e6:	b08c      	sub	sp, #48	; 0x30
 80207e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80207ea:	f107 031c 	add.w	r3, r7, #28
 80207ee:	2200      	movs	r2, #0
 80207f0:	601a      	str	r2, [r3, #0]
 80207f2:	605a      	str	r2, [r3, #4]
 80207f4:	609a      	str	r2, [r3, #8]
 80207f6:	60da      	str	r2, [r3, #12]
 80207f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80207fa:	4b47      	ldr	r3, [pc, #284]	; (8020918 <MX_GPIO_Init+0x134>)
 80207fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80207fe:	4a46      	ldr	r2, [pc, #280]	; (8020918 <MX_GPIO_Init+0x134>)
 8020800:	f043 0304 	orr.w	r3, r3, #4
 8020804:	6313      	str	r3, [r2, #48]	; 0x30
 8020806:	4b44      	ldr	r3, [pc, #272]	; (8020918 <MX_GPIO_Init+0x134>)
 8020808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802080a:	f003 0304 	and.w	r3, r3, #4
 802080e:	61bb      	str	r3, [r7, #24]
 8020810:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8020812:	4b41      	ldr	r3, [pc, #260]	; (8020918 <MX_GPIO_Init+0x134>)
 8020814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020816:	4a40      	ldr	r2, [pc, #256]	; (8020918 <MX_GPIO_Init+0x134>)
 8020818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802081c:	6313      	str	r3, [r2, #48]	; 0x30
 802081e:	4b3e      	ldr	r3, [pc, #248]	; (8020918 <MX_GPIO_Init+0x134>)
 8020820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020826:	617b      	str	r3, [r7, #20]
 8020828:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802082a:	4b3b      	ldr	r3, [pc, #236]	; (8020918 <MX_GPIO_Init+0x134>)
 802082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802082e:	4a3a      	ldr	r2, [pc, #232]	; (8020918 <MX_GPIO_Init+0x134>)
 8020830:	f043 0301 	orr.w	r3, r3, #1
 8020834:	6313      	str	r3, [r2, #48]	; 0x30
 8020836:	4b38      	ldr	r3, [pc, #224]	; (8020918 <MX_GPIO_Init+0x134>)
 8020838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802083a:	f003 0301 	and.w	r3, r3, #1
 802083e:	613b      	str	r3, [r7, #16]
 8020840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8020842:	4b35      	ldr	r3, [pc, #212]	; (8020918 <MX_GPIO_Init+0x134>)
 8020844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020846:	4a34      	ldr	r2, [pc, #208]	; (8020918 <MX_GPIO_Init+0x134>)
 8020848:	f043 0302 	orr.w	r3, r3, #2
 802084c:	6313      	str	r3, [r2, #48]	; 0x30
 802084e:	4b32      	ldr	r3, [pc, #200]	; (8020918 <MX_GPIO_Init+0x134>)
 8020850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020852:	f003 0302 	and.w	r3, r3, #2
 8020856:	60fb      	str	r3, [r7, #12]
 8020858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802085a:	4b2f      	ldr	r3, [pc, #188]	; (8020918 <MX_GPIO_Init+0x134>)
 802085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802085e:	4a2e      	ldr	r2, [pc, #184]	; (8020918 <MX_GPIO_Init+0x134>)
 8020860:	f043 0308 	orr.w	r3, r3, #8
 8020864:	6313      	str	r3, [r2, #48]	; 0x30
 8020866:	4b2c      	ldr	r3, [pc, #176]	; (8020918 <MX_GPIO_Init+0x134>)
 8020868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802086a:	f003 0308 	and.w	r3, r3, #8
 802086e:	60bb      	str	r3, [r7, #8]
 8020870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8020872:	4b29      	ldr	r3, [pc, #164]	; (8020918 <MX_GPIO_Init+0x134>)
 8020874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020876:	4a28      	ldr	r2, [pc, #160]	; (8020918 <MX_GPIO_Init+0x134>)
 8020878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802087c:	6313      	str	r3, [r2, #48]	; 0x30
 802087e:	4b26      	ldr	r3, [pc, #152]	; (8020918 <MX_GPIO_Init+0x134>)
 8020880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020886:	607b      	str	r3, [r7, #4]
 8020888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 802088a:	2200      	movs	r2, #0
 802088c:	f244 0181 	movw	r1, #16513	; 0x4081
 8020890:	4822      	ldr	r0, [pc, #136]	; (802091c <MX_GPIO_Init+0x138>)
 8020892:	f001 f8a7 	bl	80219e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8020896:	2200      	movs	r2, #0
 8020898:	2140      	movs	r1, #64	; 0x40
 802089a:	4821      	ldr	r0, [pc, #132]	; (8020920 <MX_GPIO_Init+0x13c>)
 802089c:	f001 f8a2 	bl	80219e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80208a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80208a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80208a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80208aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80208ac:	2300      	movs	r3, #0
 80208ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80208b0:	f107 031c 	add.w	r3, r7, #28
 80208b4:	4619      	mov	r1, r3
 80208b6:	481b      	ldr	r0, [pc, #108]	; (8020924 <MX_GPIO_Init+0x140>)
 80208b8:	f000 fee8 	bl	802168c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80208bc:	f244 0381 	movw	r3, #16513	; 0x4081
 80208c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80208c2:	2301      	movs	r3, #1
 80208c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80208c6:	2300      	movs	r3, #0
 80208c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80208ca:	2300      	movs	r3, #0
 80208cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80208ce:	f107 031c 	add.w	r3, r7, #28
 80208d2:	4619      	mov	r1, r3
 80208d4:	4811      	ldr	r0, [pc, #68]	; (802091c <MX_GPIO_Init+0x138>)
 80208d6:	f000 fed9 	bl	802168c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80208da:	2340      	movs	r3, #64	; 0x40
 80208dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80208de:	2301      	movs	r3, #1
 80208e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80208e2:	2300      	movs	r3, #0
 80208e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80208e6:	2300      	movs	r3, #0
 80208e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80208ea:	f107 031c 	add.w	r3, r7, #28
 80208ee:	4619      	mov	r1, r3
 80208f0:	480b      	ldr	r0, [pc, #44]	; (8020920 <MX_GPIO_Init+0x13c>)
 80208f2:	f000 fecb 	bl	802168c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80208f6:	2380      	movs	r3, #128	; 0x80
 80208f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80208fa:	2300      	movs	r3, #0
 80208fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80208fe:	2300      	movs	r3, #0
 8020900:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8020902:	f107 031c 	add.w	r3, r7, #28
 8020906:	4619      	mov	r1, r3
 8020908:	4805      	ldr	r0, [pc, #20]	; (8020920 <MX_GPIO_Init+0x13c>)
 802090a:	f000 febf 	bl	802168c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 802090e:	bf00      	nop
 8020910:	3730      	adds	r7, #48	; 0x30
 8020912:	46bd      	mov	sp, r7
 8020914:	bd80      	pop	{r7, pc}
 8020916:	bf00      	nop
 8020918:	40023800 	.word	0x40023800
 802091c:	40020400 	.word	0x40020400
 8020920:	40021800 	.word	0x40021800
 8020924:	40020800 	.word	0x40020800

08020928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020928:	b480      	push	{r7}
 802092a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 802092c:	b672      	cpsid	i
}
 802092e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8020930:	e7fe      	b.n	8020930 <Error_Handler+0x8>
	...

08020934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8020934:	b480      	push	{r7}
 8020936:	b083      	sub	sp, #12
 8020938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 802093a:	4b0f      	ldr	r3, [pc, #60]	; (8020978 <HAL_MspInit+0x44>)
 802093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802093e:	4a0e      	ldr	r2, [pc, #56]	; (8020978 <HAL_MspInit+0x44>)
 8020940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020944:	6413      	str	r3, [r2, #64]	; 0x40
 8020946:	4b0c      	ldr	r3, [pc, #48]	; (8020978 <HAL_MspInit+0x44>)
 8020948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802094a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802094e:	607b      	str	r3, [r7, #4]
 8020950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020952:	4b09      	ldr	r3, [pc, #36]	; (8020978 <HAL_MspInit+0x44>)
 8020954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020956:	4a08      	ldr	r2, [pc, #32]	; (8020978 <HAL_MspInit+0x44>)
 8020958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802095c:	6453      	str	r3, [r2, #68]	; 0x44
 802095e:	4b06      	ldr	r3, [pc, #24]	; (8020978 <HAL_MspInit+0x44>)
 8020960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020966:	603b      	str	r3, [r7, #0]
 8020968:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802096a:	bf00      	nop
 802096c:	370c      	adds	r7, #12
 802096e:	46bd      	mov	sp, r7
 8020970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020974:	4770      	bx	lr
 8020976:	bf00      	nop
 8020978:	40023800 	.word	0x40023800

0802097c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 802097c:	b580      	push	{r7, lr}
 802097e:	b08e      	sub	sp, #56	; 0x38
 8020980:	af00      	add	r7, sp, #0
 8020982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020988:	2200      	movs	r2, #0
 802098a:	601a      	str	r2, [r3, #0]
 802098c:	605a      	str	r2, [r3, #4]
 802098e:	609a      	str	r2, [r3, #8]
 8020990:	60da      	str	r2, [r3, #12]
 8020992:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8020994:	687b      	ldr	r3, [r7, #4]
 8020996:	681b      	ldr	r3, [r3, #0]
 8020998:	4a4e      	ldr	r2, [pc, #312]	; (8020ad4 <HAL_ETH_MspInit+0x158>)
 802099a:	4293      	cmp	r3, r2
 802099c:	f040 8096 	bne.w	8020acc <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80209a0:	4b4d      	ldr	r3, [pc, #308]	; (8020ad8 <HAL_ETH_MspInit+0x15c>)
 80209a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80209a4:	4a4c      	ldr	r2, [pc, #304]	; (8020ad8 <HAL_ETH_MspInit+0x15c>)
 80209a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80209aa:	6313      	str	r3, [r2, #48]	; 0x30
 80209ac:	4b4a      	ldr	r3, [pc, #296]	; (8020ad8 <HAL_ETH_MspInit+0x15c>)
 80209ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80209b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80209b4:	623b      	str	r3, [r7, #32]
 80209b6:	6a3b      	ldr	r3, [r7, #32]
 80209b8:	4b47      	ldr	r3, [pc, #284]	; (8020ad8 <HAL_ETH_MspInit+0x15c>)
 80209ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80209bc:	4a46      	ldr	r2, [pc, #280]	; (8020ad8 <HAL_ETH_MspInit+0x15c>)
 80209be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80209c2:	6313      	str	r3, [r2, #48]	; 0x30
 80209c4:	4b44      	ldr	r3, [pc, #272]	; (8020ad8 <HAL_ETH_MspInit+0x15c>)
 80209c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80209c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80209cc:	61fb      	str	r3, [r7, #28]
 80209ce:	69fb      	ldr	r3, [r7, #28]
 80209d0:	4b41      	ldr	r3, [pc, #260]	; (8020ad8 <HAL_ETH_MspInit+0x15c>)
 80209d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80209d4:	4a40      	ldr	r2, [pc, #256]	; (8020ad8 <HAL_ETH_MspInit+0x15c>)
 80209d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80209da:	6313      	str	r3, [r2, #48]	; 0x30
 80209dc:	4b3e      	ldr	r3, [pc, #248]	; (8020ad8 <HAL_ETH_MspInit+0x15c>)
 80209de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80209e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80209e4:	61bb      	str	r3, [r7, #24]
 80209e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80209e8:	4b3b      	ldr	r3, [pc, #236]	; (8020ad8 <HAL_ETH_MspInit+0x15c>)
 80209ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80209ec:	4a3a      	ldr	r2, [pc, #232]	; (8020ad8 <HAL_ETH_MspInit+0x15c>)
 80209ee:	f043 0304 	orr.w	r3, r3, #4
 80209f2:	6313      	str	r3, [r2, #48]	; 0x30
 80209f4:	4b38      	ldr	r3, [pc, #224]	; (8020ad8 <HAL_ETH_MspInit+0x15c>)
 80209f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80209f8:	f003 0304 	and.w	r3, r3, #4
 80209fc:	617b      	str	r3, [r7, #20]
 80209fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020a00:	4b35      	ldr	r3, [pc, #212]	; (8020ad8 <HAL_ETH_MspInit+0x15c>)
 8020a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a04:	4a34      	ldr	r2, [pc, #208]	; (8020ad8 <HAL_ETH_MspInit+0x15c>)
 8020a06:	f043 0301 	orr.w	r3, r3, #1
 8020a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8020a0c:	4b32      	ldr	r3, [pc, #200]	; (8020ad8 <HAL_ETH_MspInit+0x15c>)
 8020a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a10:	f003 0301 	and.w	r3, r3, #1
 8020a14:	613b      	str	r3, [r7, #16]
 8020a16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8020a18:	4b2f      	ldr	r3, [pc, #188]	; (8020ad8 <HAL_ETH_MspInit+0x15c>)
 8020a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a1c:	4a2e      	ldr	r2, [pc, #184]	; (8020ad8 <HAL_ETH_MspInit+0x15c>)
 8020a1e:	f043 0302 	orr.w	r3, r3, #2
 8020a22:	6313      	str	r3, [r2, #48]	; 0x30
 8020a24:	4b2c      	ldr	r3, [pc, #176]	; (8020ad8 <HAL_ETH_MspInit+0x15c>)
 8020a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a28:	f003 0302 	and.w	r3, r3, #2
 8020a2c:	60fb      	str	r3, [r7, #12]
 8020a2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8020a30:	4b29      	ldr	r3, [pc, #164]	; (8020ad8 <HAL_ETH_MspInit+0x15c>)
 8020a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a34:	4a28      	ldr	r2, [pc, #160]	; (8020ad8 <HAL_ETH_MspInit+0x15c>)
 8020a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020a3a:	6313      	str	r3, [r2, #48]	; 0x30
 8020a3c:	4b26      	ldr	r3, [pc, #152]	; (8020ad8 <HAL_ETH_MspInit+0x15c>)
 8020a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020a44:	60bb      	str	r3, [r7, #8]
 8020a46:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8020a48:	2332      	movs	r3, #50	; 0x32
 8020a4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020a4c:	2302      	movs	r3, #2
 8020a4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020a50:	2300      	movs	r3, #0
 8020a52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020a54:	2303      	movs	r3, #3
 8020a56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8020a58:	230b      	movs	r3, #11
 8020a5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020a60:	4619      	mov	r1, r3
 8020a62:	481e      	ldr	r0, [pc, #120]	; (8020adc <HAL_ETH_MspInit+0x160>)
 8020a64:	f000 fe12 	bl	802168c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8020a68:	2386      	movs	r3, #134	; 0x86
 8020a6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020a6c:	2302      	movs	r3, #2
 8020a6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020a70:	2300      	movs	r3, #0
 8020a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020a74:	2303      	movs	r3, #3
 8020a76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8020a78:	230b      	movs	r3, #11
 8020a7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020a80:	4619      	mov	r1, r3
 8020a82:	4817      	ldr	r0, [pc, #92]	; (8020ae0 <HAL_ETH_MspInit+0x164>)
 8020a84:	f000 fe02 	bl	802168c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8020a88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8020a8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020a8e:	2302      	movs	r3, #2
 8020a90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020a92:	2300      	movs	r3, #0
 8020a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020a96:	2303      	movs	r3, #3
 8020a98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8020a9a:	230b      	movs	r3, #11
 8020a9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8020a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020aa2:	4619      	mov	r1, r3
 8020aa4:	480f      	ldr	r0, [pc, #60]	; (8020ae4 <HAL_ETH_MspInit+0x168>)
 8020aa6:	f000 fdf1 	bl	802168c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8020aaa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8020aae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020ab0:	2302      	movs	r3, #2
 8020ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020ab4:	2300      	movs	r3, #0
 8020ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020ab8:	2303      	movs	r3, #3
 8020aba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8020abc:	230b      	movs	r3, #11
 8020abe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8020ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020ac4:	4619      	mov	r1, r3
 8020ac6:	4808      	ldr	r0, [pc, #32]	; (8020ae8 <HAL_ETH_MspInit+0x16c>)
 8020ac8:	f000 fde0 	bl	802168c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8020acc:	bf00      	nop
 8020ace:	3738      	adds	r7, #56	; 0x38
 8020ad0:	46bd      	mov	sp, r7
 8020ad2:	bd80      	pop	{r7, pc}
 8020ad4:	40028000 	.word	0x40028000
 8020ad8:	40023800 	.word	0x40023800
 8020adc:	40020800 	.word	0x40020800
 8020ae0:	40020000 	.word	0x40020000
 8020ae4:	40020400 	.word	0x40020400
 8020ae8:	40021800 	.word	0x40021800

08020aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8020aec:	b580      	push	{r7, lr}
 8020aee:	b0ae      	sub	sp, #184	; 0xb8
 8020af0:	af00      	add	r7, sp, #0
 8020af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020af4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8020af8:	2200      	movs	r2, #0
 8020afa:	601a      	str	r2, [r3, #0]
 8020afc:	605a      	str	r2, [r3, #4]
 8020afe:	609a      	str	r2, [r3, #8]
 8020b00:	60da      	str	r2, [r3, #12]
 8020b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8020b04:	f107 0314 	add.w	r3, r7, #20
 8020b08:	2290      	movs	r2, #144	; 0x90
 8020b0a:	2100      	movs	r1, #0
 8020b0c:	4618      	mov	r0, r3
 8020b0e:	f003 f983 	bl	8023e18 <memset>
  if(huart->Instance==USART3)
 8020b12:	687b      	ldr	r3, [r7, #4]
 8020b14:	681b      	ldr	r3, [r3, #0]
 8020b16:	4a22      	ldr	r2, [pc, #136]	; (8020ba0 <HAL_UART_MspInit+0xb4>)
 8020b18:	4293      	cmp	r3, r2
 8020b1a:	d13c      	bne.n	8020b96 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8020b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8020b20:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8020b22:	2300      	movs	r3, #0
 8020b24:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8020b26:	f107 0314 	add.w	r3, r7, #20
 8020b2a:	4618      	mov	r0, r3
 8020b2c:	f001 fdf0 	bl	8022710 <HAL_RCCEx_PeriphCLKConfig>
 8020b30:	4603      	mov	r3, r0
 8020b32:	2b00      	cmp	r3, #0
 8020b34:	d001      	beq.n	8020b3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8020b36:	f7ff fef7 	bl	8020928 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8020b3a:	4b1a      	ldr	r3, [pc, #104]	; (8020ba4 <HAL_UART_MspInit+0xb8>)
 8020b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020b3e:	4a19      	ldr	r2, [pc, #100]	; (8020ba4 <HAL_UART_MspInit+0xb8>)
 8020b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8020b44:	6413      	str	r3, [r2, #64]	; 0x40
 8020b46:	4b17      	ldr	r3, [pc, #92]	; (8020ba4 <HAL_UART_MspInit+0xb8>)
 8020b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020b4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8020b4e:	613b      	str	r3, [r7, #16]
 8020b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8020b52:	4b14      	ldr	r3, [pc, #80]	; (8020ba4 <HAL_UART_MspInit+0xb8>)
 8020b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020b56:	4a13      	ldr	r2, [pc, #76]	; (8020ba4 <HAL_UART_MspInit+0xb8>)
 8020b58:	f043 0308 	orr.w	r3, r3, #8
 8020b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8020b5e:	4b11      	ldr	r3, [pc, #68]	; (8020ba4 <HAL_UART_MspInit+0xb8>)
 8020b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020b62:	f003 0308 	and.w	r3, r3, #8
 8020b66:	60fb      	str	r3, [r7, #12]
 8020b68:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8020b6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8020b6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020b72:	2302      	movs	r3, #2
 8020b74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020b78:	2300      	movs	r3, #0
 8020b7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020b7e:	2303      	movs	r3, #3
 8020b80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8020b84:	2307      	movs	r3, #7
 8020b86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8020b8a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8020b8e:	4619      	mov	r1, r3
 8020b90:	4805      	ldr	r0, [pc, #20]	; (8020ba8 <HAL_UART_MspInit+0xbc>)
 8020b92:	f000 fd7b 	bl	802168c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8020b96:	bf00      	nop
 8020b98:	37b8      	adds	r7, #184	; 0xb8
 8020b9a:	46bd      	mov	sp, r7
 8020b9c:	bd80      	pop	{r7, pc}
 8020b9e:	bf00      	nop
 8020ba0:	40004800 	.word	0x40004800
 8020ba4:	40023800 	.word	0x40023800
 8020ba8:	40020c00 	.word	0x40020c00

08020bac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8020bac:	b580      	push	{r7, lr}
 8020bae:	b0ae      	sub	sp, #184	; 0xb8
 8020bb0:	af00      	add	r7, sp, #0
 8020bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020bb4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8020bb8:	2200      	movs	r2, #0
 8020bba:	601a      	str	r2, [r3, #0]
 8020bbc:	605a      	str	r2, [r3, #4]
 8020bbe:	609a      	str	r2, [r3, #8]
 8020bc0:	60da      	str	r2, [r3, #12]
 8020bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8020bc4:	f107 0314 	add.w	r3, r7, #20
 8020bc8:	2290      	movs	r2, #144	; 0x90
 8020bca:	2100      	movs	r1, #0
 8020bcc:	4618      	mov	r0, r3
 8020bce:	f003 f923 	bl	8023e18 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8020bd2:	687b      	ldr	r3, [r7, #4]
 8020bd4:	681b      	ldr	r3, [r3, #0]
 8020bd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8020bda:	d159      	bne.n	8020c90 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8020bdc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8020be0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8020be2:	2300      	movs	r3, #0
 8020be4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8020be8:	f107 0314 	add.w	r3, r7, #20
 8020bec:	4618      	mov	r0, r3
 8020bee:	f001 fd8f 	bl	8022710 <HAL_RCCEx_PeriphCLKConfig>
 8020bf2:	4603      	mov	r3, r0
 8020bf4:	2b00      	cmp	r3, #0
 8020bf6:	d001      	beq.n	8020bfc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8020bf8:	f7ff fe96 	bl	8020928 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020bfc:	4b26      	ldr	r3, [pc, #152]	; (8020c98 <HAL_PCD_MspInit+0xec>)
 8020bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c00:	4a25      	ldr	r2, [pc, #148]	; (8020c98 <HAL_PCD_MspInit+0xec>)
 8020c02:	f043 0301 	orr.w	r3, r3, #1
 8020c06:	6313      	str	r3, [r2, #48]	; 0x30
 8020c08:	4b23      	ldr	r3, [pc, #140]	; (8020c98 <HAL_PCD_MspInit+0xec>)
 8020c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c0c:	f003 0301 	and.w	r3, r3, #1
 8020c10:	613b      	str	r3, [r7, #16]
 8020c12:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8020c14:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8020c18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020c1c:	2302      	movs	r3, #2
 8020c1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020c22:	2300      	movs	r3, #0
 8020c24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020c28:	2303      	movs	r3, #3
 8020c2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8020c2e:	230a      	movs	r3, #10
 8020c30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020c34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8020c38:	4619      	mov	r1, r3
 8020c3a:	4818      	ldr	r0, [pc, #96]	; (8020c9c <HAL_PCD_MspInit+0xf0>)
 8020c3c:	f000 fd26 	bl	802168c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8020c40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8020c44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020c48:	2300      	movs	r3, #0
 8020c4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020c4e:	2300      	movs	r3, #0
 8020c50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8020c54:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8020c58:	4619      	mov	r1, r3
 8020c5a:	4810      	ldr	r0, [pc, #64]	; (8020c9c <HAL_PCD_MspInit+0xf0>)
 8020c5c:	f000 fd16 	bl	802168c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8020c60:	4b0d      	ldr	r3, [pc, #52]	; (8020c98 <HAL_PCD_MspInit+0xec>)
 8020c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020c64:	4a0c      	ldr	r2, [pc, #48]	; (8020c98 <HAL_PCD_MspInit+0xec>)
 8020c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020c6a:	6353      	str	r3, [r2, #52]	; 0x34
 8020c6c:	4b0a      	ldr	r3, [pc, #40]	; (8020c98 <HAL_PCD_MspInit+0xec>)
 8020c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020c74:	60fb      	str	r3, [r7, #12]
 8020c76:	68fb      	ldr	r3, [r7, #12]
 8020c78:	4b07      	ldr	r3, [pc, #28]	; (8020c98 <HAL_PCD_MspInit+0xec>)
 8020c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020c7c:	4a06      	ldr	r2, [pc, #24]	; (8020c98 <HAL_PCD_MspInit+0xec>)
 8020c7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020c82:	6453      	str	r3, [r2, #68]	; 0x44
 8020c84:	4b04      	ldr	r3, [pc, #16]	; (8020c98 <HAL_PCD_MspInit+0xec>)
 8020c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020c8c:	60bb      	str	r3, [r7, #8]
 8020c8e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8020c90:	bf00      	nop
 8020c92:	37b8      	adds	r7, #184	; 0xb8
 8020c94:	46bd      	mov	sp, r7
 8020c96:	bd80      	pop	{r7, pc}
 8020c98:	40023800 	.word	0x40023800
 8020c9c:	40020000 	.word	0x40020000

08020ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8020ca0:	b480      	push	{r7}
 8020ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8020ca4:	e7fe      	b.n	8020ca4 <NMI_Handler+0x4>

08020ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8020ca6:	b480      	push	{r7}
 8020ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8020caa:	e7fe      	b.n	8020caa <HardFault_Handler+0x4>

08020cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8020cac:	b480      	push	{r7}
 8020cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8020cb0:	e7fe      	b.n	8020cb0 <MemManage_Handler+0x4>

08020cb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8020cb2:	b480      	push	{r7}
 8020cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8020cb6:	e7fe      	b.n	8020cb6 <BusFault_Handler+0x4>

08020cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8020cb8:	b480      	push	{r7}
 8020cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8020cbc:	e7fe      	b.n	8020cbc <UsageFault_Handler+0x4>

08020cbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8020cbe:	b480      	push	{r7}
 8020cc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8020cc2:	bf00      	nop
 8020cc4:	46bd      	mov	sp, r7
 8020cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cca:	4770      	bx	lr

08020ccc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8020ccc:	b480      	push	{r7}
 8020cce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8020cd0:	bf00      	nop
 8020cd2:	46bd      	mov	sp, r7
 8020cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cd8:	4770      	bx	lr

08020cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8020cda:	b480      	push	{r7}
 8020cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8020cde:	bf00      	nop
 8020ce0:	46bd      	mov	sp, r7
 8020ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ce6:	4770      	bx	lr

08020ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8020ce8:	b580      	push	{r7, lr}
 8020cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8020cec:	f000 f87e 	bl	8020dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8020cf0:	bf00      	nop
 8020cf2:	bd80      	pop	{r7, pc}

08020cf4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8020cf4:	b480      	push	{r7}
 8020cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8020cf8:	4b07      	ldr	r3, [pc, #28]	; (8020d18 <SystemInit+0x24>)
 8020cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020cfe:	4a06      	ldr	r2, [pc, #24]	; (8020d18 <SystemInit+0x24>)
 8020d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8020d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8020d08:	4b03      	ldr	r3, [pc, #12]	; (8020d18 <SystemInit+0x24>)
 8020d0a:	4a04      	ldr	r2, [pc, #16]	; (8020d1c <SystemInit+0x28>)
 8020d0c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8020d0e:	bf00      	nop
 8020d10:	46bd      	mov	sp, r7
 8020d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d16:	4770      	bx	lr
 8020d18:	e000ed00 	.word	0xe000ed00
 8020d1c:	08020000 	.word	0x08020000

08020d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8020d20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8020d58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8020d24:	480d      	ldr	r0, [pc, #52]	; (8020d5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8020d26:	490e      	ldr	r1, [pc, #56]	; (8020d60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8020d28:	4a0e      	ldr	r2, [pc, #56]	; (8020d64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8020d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8020d2c:	e002      	b.n	8020d34 <LoopCopyDataInit>

08020d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8020d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8020d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8020d32:	3304      	adds	r3, #4

08020d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8020d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8020d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8020d38:	d3f9      	bcc.n	8020d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8020d3a:	4a0b      	ldr	r2, [pc, #44]	; (8020d68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8020d3c:	4c0b      	ldr	r4, [pc, #44]	; (8020d6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8020d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8020d40:	e001      	b.n	8020d46 <LoopFillZerobss>

08020d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8020d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8020d44:	3204      	adds	r2, #4

08020d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8020d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8020d48:	d3fb      	bcc.n	8020d42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8020d4a:	f7ff ffd3 	bl	8020cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8020d4e:	f003 f86b 	bl	8023e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8020d52:	f7ff fbef 	bl	8020534 <main>
  bx  lr    
 8020d56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8020d58:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8020d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8020d60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8020d64:	08023eb0 	.word	0x08023eb0
  ldr r2, =_sbss
 8020d68:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8020d6c:	200007ec 	.word	0x200007ec

08020d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8020d70:	e7fe      	b.n	8020d70 <ADC_IRQHandler>

08020d72 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8020d72:	b580      	push	{r7, lr}
 8020d74:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8020d76:	2003      	movs	r0, #3
 8020d78:	f000 f92e 	bl	8020fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8020d7c:	2000      	movs	r0, #0
 8020d7e:	f000 f805 	bl	8020d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8020d82:	f7ff fdd7 	bl	8020934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8020d86:	2300      	movs	r3, #0
}
 8020d88:	4618      	mov	r0, r3
 8020d8a:	bd80      	pop	{r7, pc}

08020d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8020d8c:	b580      	push	{r7, lr}
 8020d8e:	b082      	sub	sp, #8
 8020d90:	af00      	add	r7, sp, #0
 8020d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8020d94:	4b12      	ldr	r3, [pc, #72]	; (8020de0 <HAL_InitTick+0x54>)
 8020d96:	681a      	ldr	r2, [r3, #0]
 8020d98:	4b12      	ldr	r3, [pc, #72]	; (8020de4 <HAL_InitTick+0x58>)
 8020d9a:	781b      	ldrb	r3, [r3, #0]
 8020d9c:	4619      	mov	r1, r3
 8020d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8020da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8020da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8020daa:	4618      	mov	r0, r3
 8020dac:	f000 f93b 	bl	8021026 <HAL_SYSTICK_Config>
 8020db0:	4603      	mov	r3, r0
 8020db2:	2b00      	cmp	r3, #0
 8020db4:	d001      	beq.n	8020dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8020db6:	2301      	movs	r3, #1
 8020db8:	e00e      	b.n	8020dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020dba:	687b      	ldr	r3, [r7, #4]
 8020dbc:	2b0f      	cmp	r3, #15
 8020dbe:	d80a      	bhi.n	8020dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8020dc0:	2200      	movs	r2, #0
 8020dc2:	6879      	ldr	r1, [r7, #4]
 8020dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8020dc8:	f000 f911 	bl	8020fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8020dcc:	4a06      	ldr	r2, [pc, #24]	; (8020de8 <HAL_InitTick+0x5c>)
 8020dce:	687b      	ldr	r3, [r7, #4]
 8020dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8020dd2:	2300      	movs	r3, #0
 8020dd4:	e000      	b.n	8020dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8020dd6:	2301      	movs	r3, #1
}
 8020dd8:	4618      	mov	r0, r3
 8020dda:	3708      	adds	r7, #8
 8020ddc:	46bd      	mov	sp, r7
 8020dde:	bd80      	pop	{r7, pc}
 8020de0:	20000000 	.word	0x20000000
 8020de4:	20000008 	.word	0x20000008
 8020de8:	20000004 	.word	0x20000004

08020dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8020dec:	b480      	push	{r7}
 8020dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8020df0:	4b06      	ldr	r3, [pc, #24]	; (8020e0c <HAL_IncTick+0x20>)
 8020df2:	781b      	ldrb	r3, [r3, #0]
 8020df4:	461a      	mov	r2, r3
 8020df6:	4b06      	ldr	r3, [pc, #24]	; (8020e10 <HAL_IncTick+0x24>)
 8020df8:	681b      	ldr	r3, [r3, #0]
 8020dfa:	4413      	add	r3, r2
 8020dfc:	4a04      	ldr	r2, [pc, #16]	; (8020e10 <HAL_IncTick+0x24>)
 8020dfe:	6013      	str	r3, [r2, #0]
}
 8020e00:	bf00      	nop
 8020e02:	46bd      	mov	sp, r7
 8020e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e08:	4770      	bx	lr
 8020e0a:	bf00      	nop
 8020e0c:	20000008 	.word	0x20000008
 8020e10:	200007e8 	.word	0x200007e8

08020e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8020e14:	b480      	push	{r7}
 8020e16:	af00      	add	r7, sp, #0
  return uwTick;
 8020e18:	4b03      	ldr	r3, [pc, #12]	; (8020e28 <HAL_GetTick+0x14>)
 8020e1a:	681b      	ldr	r3, [r3, #0]
}
 8020e1c:	4618      	mov	r0, r3
 8020e1e:	46bd      	mov	sp, r7
 8020e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e24:	4770      	bx	lr
 8020e26:	bf00      	nop
 8020e28:	200007e8 	.word	0x200007e8

08020e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8020e2c:	b580      	push	{r7, lr}
 8020e2e:	b084      	sub	sp, #16
 8020e30:	af00      	add	r7, sp, #0
 8020e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8020e34:	f7ff ffee 	bl	8020e14 <HAL_GetTick>
 8020e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8020e3a:	687b      	ldr	r3, [r7, #4]
 8020e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8020e3e:	68fb      	ldr	r3, [r7, #12]
 8020e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020e44:	d005      	beq.n	8020e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8020e46:	4b0a      	ldr	r3, [pc, #40]	; (8020e70 <HAL_Delay+0x44>)
 8020e48:	781b      	ldrb	r3, [r3, #0]
 8020e4a:	461a      	mov	r2, r3
 8020e4c:	68fb      	ldr	r3, [r7, #12]
 8020e4e:	4413      	add	r3, r2
 8020e50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8020e52:	bf00      	nop
 8020e54:	f7ff ffde 	bl	8020e14 <HAL_GetTick>
 8020e58:	4602      	mov	r2, r0
 8020e5a:	68bb      	ldr	r3, [r7, #8]
 8020e5c:	1ad3      	subs	r3, r2, r3
 8020e5e:	68fa      	ldr	r2, [r7, #12]
 8020e60:	429a      	cmp	r2, r3
 8020e62:	d8f7      	bhi.n	8020e54 <HAL_Delay+0x28>
  {
  }
}
 8020e64:	bf00      	nop
 8020e66:	bf00      	nop
 8020e68:	3710      	adds	r7, #16
 8020e6a:	46bd      	mov	sp, r7
 8020e6c:	bd80      	pop	{r7, pc}
 8020e6e:	bf00      	nop
 8020e70:	20000008 	.word	0x20000008

08020e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020e74:	b480      	push	{r7}
 8020e76:	b085      	sub	sp, #20
 8020e78:	af00      	add	r7, sp, #0
 8020e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8020e7c:	687b      	ldr	r3, [r7, #4]
 8020e7e:	f003 0307 	and.w	r3, r3, #7
 8020e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8020e84:	4b0b      	ldr	r3, [pc, #44]	; (8020eb4 <__NVIC_SetPriorityGrouping+0x40>)
 8020e86:	68db      	ldr	r3, [r3, #12]
 8020e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8020e8a:	68ba      	ldr	r2, [r7, #8]
 8020e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8020e90:	4013      	ands	r3, r2
 8020e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8020e94:	68fb      	ldr	r3, [r7, #12]
 8020e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8020e98:	68bb      	ldr	r3, [r7, #8]
 8020e9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8020e9c:	4b06      	ldr	r3, [pc, #24]	; (8020eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8020e9e:	4313      	orrs	r3, r2
 8020ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8020ea2:	4a04      	ldr	r2, [pc, #16]	; (8020eb4 <__NVIC_SetPriorityGrouping+0x40>)
 8020ea4:	68bb      	ldr	r3, [r7, #8]
 8020ea6:	60d3      	str	r3, [r2, #12]
}
 8020ea8:	bf00      	nop
 8020eaa:	3714      	adds	r7, #20
 8020eac:	46bd      	mov	sp, r7
 8020eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eb2:	4770      	bx	lr
 8020eb4:	e000ed00 	.word	0xe000ed00
 8020eb8:	05fa0000 	.word	0x05fa0000

08020ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8020ebc:	b480      	push	{r7}
 8020ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8020ec0:	4b04      	ldr	r3, [pc, #16]	; (8020ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8020ec2:	68db      	ldr	r3, [r3, #12]
 8020ec4:	0a1b      	lsrs	r3, r3, #8
 8020ec6:	f003 0307 	and.w	r3, r3, #7
}
 8020eca:	4618      	mov	r0, r3
 8020ecc:	46bd      	mov	sp, r7
 8020ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ed2:	4770      	bx	lr
 8020ed4:	e000ed00 	.word	0xe000ed00

08020ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8020ed8:	b480      	push	{r7}
 8020eda:	b083      	sub	sp, #12
 8020edc:	af00      	add	r7, sp, #0
 8020ede:	4603      	mov	r3, r0
 8020ee0:	6039      	str	r1, [r7, #0]
 8020ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020ee8:	2b00      	cmp	r3, #0
 8020eea:	db0a      	blt.n	8020f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020eec:	683b      	ldr	r3, [r7, #0]
 8020eee:	b2da      	uxtb	r2, r3
 8020ef0:	490c      	ldr	r1, [pc, #48]	; (8020f24 <__NVIC_SetPriority+0x4c>)
 8020ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020ef6:	0112      	lsls	r2, r2, #4
 8020ef8:	b2d2      	uxtb	r2, r2
 8020efa:	440b      	add	r3, r1
 8020efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8020f00:	e00a      	b.n	8020f18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020f02:	683b      	ldr	r3, [r7, #0]
 8020f04:	b2da      	uxtb	r2, r3
 8020f06:	4908      	ldr	r1, [pc, #32]	; (8020f28 <__NVIC_SetPriority+0x50>)
 8020f08:	79fb      	ldrb	r3, [r7, #7]
 8020f0a:	f003 030f 	and.w	r3, r3, #15
 8020f0e:	3b04      	subs	r3, #4
 8020f10:	0112      	lsls	r2, r2, #4
 8020f12:	b2d2      	uxtb	r2, r2
 8020f14:	440b      	add	r3, r1
 8020f16:	761a      	strb	r2, [r3, #24]
}
 8020f18:	bf00      	nop
 8020f1a:	370c      	adds	r7, #12
 8020f1c:	46bd      	mov	sp, r7
 8020f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f22:	4770      	bx	lr
 8020f24:	e000e100 	.word	0xe000e100
 8020f28:	e000ed00 	.word	0xe000ed00

08020f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020f2c:	b480      	push	{r7}
 8020f2e:	b089      	sub	sp, #36	; 0x24
 8020f30:	af00      	add	r7, sp, #0
 8020f32:	60f8      	str	r0, [r7, #12]
 8020f34:	60b9      	str	r1, [r7, #8]
 8020f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8020f38:	68fb      	ldr	r3, [r7, #12]
 8020f3a:	f003 0307 	and.w	r3, r3, #7
 8020f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8020f40:	69fb      	ldr	r3, [r7, #28]
 8020f42:	f1c3 0307 	rsb	r3, r3, #7
 8020f46:	2b04      	cmp	r3, #4
 8020f48:	bf28      	it	cs
 8020f4a:	2304      	movcs	r3, #4
 8020f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020f4e:	69fb      	ldr	r3, [r7, #28]
 8020f50:	3304      	adds	r3, #4
 8020f52:	2b06      	cmp	r3, #6
 8020f54:	d902      	bls.n	8020f5c <NVIC_EncodePriority+0x30>
 8020f56:	69fb      	ldr	r3, [r7, #28]
 8020f58:	3b03      	subs	r3, #3
 8020f5a:	e000      	b.n	8020f5e <NVIC_EncodePriority+0x32>
 8020f5c:	2300      	movs	r3, #0
 8020f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020f60:	f04f 32ff 	mov.w	r2, #4294967295
 8020f64:	69bb      	ldr	r3, [r7, #24]
 8020f66:	fa02 f303 	lsl.w	r3, r2, r3
 8020f6a:	43da      	mvns	r2, r3
 8020f6c:	68bb      	ldr	r3, [r7, #8]
 8020f6e:	401a      	ands	r2, r3
 8020f70:	697b      	ldr	r3, [r7, #20]
 8020f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8020f74:	f04f 31ff 	mov.w	r1, #4294967295
 8020f78:	697b      	ldr	r3, [r7, #20]
 8020f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8020f7e:	43d9      	mvns	r1, r3
 8020f80:	687b      	ldr	r3, [r7, #4]
 8020f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020f84:	4313      	orrs	r3, r2
         );
}
 8020f86:	4618      	mov	r0, r3
 8020f88:	3724      	adds	r7, #36	; 0x24
 8020f8a:	46bd      	mov	sp, r7
 8020f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f90:	4770      	bx	lr
	...

08020f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8020f94:	b580      	push	{r7, lr}
 8020f96:	b082      	sub	sp, #8
 8020f98:	af00      	add	r7, sp, #0
 8020f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8020f9c:	687b      	ldr	r3, [r7, #4]
 8020f9e:	3b01      	subs	r3, #1
 8020fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8020fa4:	d301      	bcc.n	8020faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8020fa6:	2301      	movs	r3, #1
 8020fa8:	e00f      	b.n	8020fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8020faa:	4a0a      	ldr	r2, [pc, #40]	; (8020fd4 <SysTick_Config+0x40>)
 8020fac:	687b      	ldr	r3, [r7, #4]
 8020fae:	3b01      	subs	r3, #1
 8020fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8020fb2:	210f      	movs	r1, #15
 8020fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8020fb8:	f7ff ff8e 	bl	8020ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8020fbc:	4b05      	ldr	r3, [pc, #20]	; (8020fd4 <SysTick_Config+0x40>)
 8020fbe:	2200      	movs	r2, #0
 8020fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8020fc2:	4b04      	ldr	r3, [pc, #16]	; (8020fd4 <SysTick_Config+0x40>)
 8020fc4:	2207      	movs	r2, #7
 8020fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8020fc8:	2300      	movs	r3, #0
}
 8020fca:	4618      	mov	r0, r3
 8020fcc:	3708      	adds	r7, #8
 8020fce:	46bd      	mov	sp, r7
 8020fd0:	bd80      	pop	{r7, pc}
 8020fd2:	bf00      	nop
 8020fd4:	e000e010 	.word	0xe000e010

08020fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020fd8:	b580      	push	{r7, lr}
 8020fda:	b082      	sub	sp, #8
 8020fdc:	af00      	add	r7, sp, #0
 8020fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8020fe0:	6878      	ldr	r0, [r7, #4]
 8020fe2:	f7ff ff47 	bl	8020e74 <__NVIC_SetPriorityGrouping>
}
 8020fe6:	bf00      	nop
 8020fe8:	3708      	adds	r7, #8
 8020fea:	46bd      	mov	sp, r7
 8020fec:	bd80      	pop	{r7, pc}

08020fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8020fee:	b580      	push	{r7, lr}
 8020ff0:	b086      	sub	sp, #24
 8020ff2:	af00      	add	r7, sp, #0
 8020ff4:	4603      	mov	r3, r0
 8020ff6:	60b9      	str	r1, [r7, #8]
 8020ff8:	607a      	str	r2, [r7, #4]
 8020ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8020ffc:	2300      	movs	r3, #0
 8020ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8021000:	f7ff ff5c 	bl	8020ebc <__NVIC_GetPriorityGrouping>
 8021004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8021006:	687a      	ldr	r2, [r7, #4]
 8021008:	68b9      	ldr	r1, [r7, #8]
 802100a:	6978      	ldr	r0, [r7, #20]
 802100c:	f7ff ff8e 	bl	8020f2c <NVIC_EncodePriority>
 8021010:	4602      	mov	r2, r0
 8021012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021016:	4611      	mov	r1, r2
 8021018:	4618      	mov	r0, r3
 802101a:	f7ff ff5d 	bl	8020ed8 <__NVIC_SetPriority>
}
 802101e:	bf00      	nop
 8021020:	3718      	adds	r7, #24
 8021022:	46bd      	mov	sp, r7
 8021024:	bd80      	pop	{r7, pc}

08021026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8021026:	b580      	push	{r7, lr}
 8021028:	b082      	sub	sp, #8
 802102a:	af00      	add	r7, sp, #0
 802102c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 802102e:	6878      	ldr	r0, [r7, #4]
 8021030:	f7ff ffb0 	bl	8020f94 <SysTick_Config>
 8021034:	4603      	mov	r3, r0
}
 8021036:	4618      	mov	r0, r3
 8021038:	3708      	adds	r7, #8
 802103a:	46bd      	mov	sp, r7
 802103c:	bd80      	pop	{r7, pc}
	...

08021040 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8021040:	b580      	push	{r7, lr}
 8021042:	b084      	sub	sp, #16
 8021044:	af00      	add	r7, sp, #0
 8021046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8021048:	687b      	ldr	r3, [r7, #4]
 802104a:	2b00      	cmp	r3, #0
 802104c:	d101      	bne.n	8021052 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 802104e:	2301      	movs	r3, #1
 8021050:	e06a      	b.n	8021128 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8021052:	687b      	ldr	r3, [r7, #4]
 8021054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8021058:	2b00      	cmp	r3, #0
 802105a:	d106      	bne.n	802106a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 802105c:	687b      	ldr	r3, [r7, #4]
 802105e:	2223      	movs	r2, #35	; 0x23
 8021060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8021064:	6878      	ldr	r0, [r7, #4]
 8021066:	f7ff fc89 	bl	802097c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802106a:	4b31      	ldr	r3, [pc, #196]	; (8021130 <HAL_ETH_Init+0xf0>)
 802106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802106e:	4a30      	ldr	r2, [pc, #192]	; (8021130 <HAL_ETH_Init+0xf0>)
 8021070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8021074:	6453      	str	r3, [r2, #68]	; 0x44
 8021076:	4b2e      	ldr	r3, [pc, #184]	; (8021130 <HAL_ETH_Init+0xf0>)
 8021078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802107a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802107e:	60bb      	str	r3, [r7, #8]
 8021080:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8021082:	4b2c      	ldr	r3, [pc, #176]	; (8021134 <HAL_ETH_Init+0xf4>)
 8021084:	685b      	ldr	r3, [r3, #4]
 8021086:	4a2b      	ldr	r2, [pc, #172]	; (8021134 <HAL_ETH_Init+0xf4>)
 8021088:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 802108c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 802108e:	4b29      	ldr	r3, [pc, #164]	; (8021134 <HAL_ETH_Init+0xf4>)
 8021090:	685a      	ldr	r2, [r3, #4]
 8021092:	687b      	ldr	r3, [r7, #4]
 8021094:	689b      	ldr	r3, [r3, #8]
 8021096:	4927      	ldr	r1, [pc, #156]	; (8021134 <HAL_ETH_Init+0xf4>)
 8021098:	4313      	orrs	r3, r2
 802109a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 802109c:	4b25      	ldr	r3, [pc, #148]	; (8021134 <HAL_ETH_Init+0xf4>)
 802109e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80210a0:	687b      	ldr	r3, [r7, #4]
 80210a2:	681b      	ldr	r3, [r3, #0]
 80210a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80210a8:	681b      	ldr	r3, [r3, #0]
 80210aa:	687a      	ldr	r2, [r7, #4]
 80210ac:	6812      	ldr	r2, [r2, #0]
 80210ae:	f043 0301 	orr.w	r3, r3, #1
 80210b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80210b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80210b8:	f7ff feac 	bl	8020e14 <HAL_GetTick>
 80210bc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80210be:	e011      	b.n	80210e4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80210c0:	f7ff fea8 	bl	8020e14 <HAL_GetTick>
 80210c4:	4602      	mov	r2, r0
 80210c6:	68fb      	ldr	r3, [r7, #12]
 80210c8:	1ad3      	subs	r3, r2, r3
 80210ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80210ce:	d909      	bls.n	80210e4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80210d0:	687b      	ldr	r3, [r7, #4]
 80210d2:	2204      	movs	r2, #4
 80210d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80210d8:	687b      	ldr	r3, [r7, #4]
 80210da:	22e0      	movs	r2, #224	; 0xe0
 80210dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80210e0:	2301      	movs	r3, #1
 80210e2:	e021      	b.n	8021128 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80210e4:	687b      	ldr	r3, [r7, #4]
 80210e6:	681b      	ldr	r3, [r3, #0]
 80210e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80210ec:	681b      	ldr	r3, [r3, #0]
 80210ee:	f003 0301 	and.w	r3, r3, #1
 80210f2:	2b00      	cmp	r3, #0
 80210f4:	d1e4      	bne.n	80210c0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80210f6:	6878      	ldr	r0, [r7, #4]
 80210f8:	f000 f958 	bl	80213ac <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80210fc:	6878      	ldr	r0, [r7, #4]
 80210fe:	f000 f9ff 	bl	8021500 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8021102:	6878      	ldr	r0, [r7, #4]
 8021104:	f000 fa55 	bl	80215b2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8021108:	687b      	ldr	r3, [r7, #4]
 802110a:	685b      	ldr	r3, [r3, #4]
 802110c:	461a      	mov	r2, r3
 802110e:	2100      	movs	r1, #0
 8021110:	6878      	ldr	r0, [r7, #4]
 8021112:	f000 f9bd 	bl	8021490 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8021116:	687b      	ldr	r3, [r7, #4]
 8021118:	2200      	movs	r2, #0
 802111a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 802111e:	687b      	ldr	r3, [r7, #4]
 8021120:	2210      	movs	r2, #16
 8021122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8021126:	2300      	movs	r3, #0
}
 8021128:	4618      	mov	r0, r3
 802112a:	3710      	adds	r7, #16
 802112c:	46bd      	mov	sp, r7
 802112e:	bd80      	pop	{r7, pc}
 8021130:	40023800 	.word	0x40023800
 8021134:	40013800 	.word	0x40013800

08021138 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8021138:	b580      	push	{r7, lr}
 802113a:	b084      	sub	sp, #16
 802113c:	af00      	add	r7, sp, #0
 802113e:	6078      	str	r0, [r7, #4]
 8021140:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8021142:	687b      	ldr	r3, [r7, #4]
 8021144:	681b      	ldr	r3, [r3, #0]
 8021146:	681b      	ldr	r3, [r3, #0]
 8021148:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 802114a:	68fa      	ldr	r2, [r7, #12]
 802114c:	4b51      	ldr	r3, [pc, #324]	; (8021294 <ETH_SetMACConfig+0x15c>)
 802114e:	4013      	ands	r3, r2
 8021150:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8021152:	683b      	ldr	r3, [r7, #0]
 8021154:	7c1b      	ldrb	r3, [r3, #16]
 8021156:	2b00      	cmp	r3, #0
 8021158:	d102      	bne.n	8021160 <ETH_SetMACConfig+0x28>
 802115a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 802115e:	e000      	b.n	8021162 <ETH_SetMACConfig+0x2a>
 8021160:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8021162:	683b      	ldr	r3, [r7, #0]
 8021164:	7c5b      	ldrb	r3, [r3, #17]
 8021166:	2b00      	cmp	r3, #0
 8021168:	d102      	bne.n	8021170 <ETH_SetMACConfig+0x38>
 802116a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802116e:	e000      	b.n	8021172 <ETH_SetMACConfig+0x3a>
 8021170:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8021172:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8021174:	683b      	ldr	r3, [r7, #0]
 8021176:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8021178:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 802117a:	683b      	ldr	r3, [r7, #0]
 802117c:	7fdb      	ldrb	r3, [r3, #31]
 802117e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8021180:	431a      	orrs	r2, r3
                        macconf->Speed |
 8021182:	683b      	ldr	r3, [r7, #0]
 8021184:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8021186:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8021188:	683a      	ldr	r2, [r7, #0]
 802118a:	7f92      	ldrb	r2, [r2, #30]
 802118c:	2a00      	cmp	r2, #0
 802118e:	d102      	bne.n	8021196 <ETH_SetMACConfig+0x5e>
 8021190:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8021194:	e000      	b.n	8021198 <ETH_SetMACConfig+0x60>
 8021196:	2200      	movs	r2, #0
                        macconf->Speed |
 8021198:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 802119a:	683b      	ldr	r3, [r7, #0]
 802119c:	7f1b      	ldrb	r3, [r3, #28]
 802119e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80211a0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80211a2:	683b      	ldr	r3, [r7, #0]
 80211a4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80211a6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80211a8:	683b      	ldr	r3, [r7, #0]
 80211aa:	791b      	ldrb	r3, [r3, #4]
 80211ac:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80211ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80211b0:	683a      	ldr	r2, [r7, #0]
 80211b2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80211b6:	2a00      	cmp	r2, #0
 80211b8:	d102      	bne.n	80211c0 <ETH_SetMACConfig+0x88>
 80211ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80211be:	e000      	b.n	80211c2 <ETH_SetMACConfig+0x8a>
 80211c0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80211c2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80211c4:	683b      	ldr	r3, [r7, #0]
 80211c6:	7bdb      	ldrb	r3, [r3, #15]
 80211c8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80211ca:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80211cc:	683b      	ldr	r3, [r7, #0]
 80211ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80211d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80211d2:	683b      	ldr	r3, [r7, #0]
 80211d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80211d8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80211da:	4313      	orrs	r3, r2
 80211dc:	68fa      	ldr	r2, [r7, #12]
 80211de:	4313      	orrs	r3, r2
 80211e0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80211e2:	687b      	ldr	r3, [r7, #4]
 80211e4:	681b      	ldr	r3, [r3, #0]
 80211e6:	68fa      	ldr	r2, [r7, #12]
 80211e8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80211ea:	687b      	ldr	r3, [r7, #4]
 80211ec:	681b      	ldr	r3, [r3, #0]
 80211ee:	681b      	ldr	r3, [r3, #0]
 80211f0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80211f2:	2001      	movs	r0, #1
 80211f4:	f7ff fe1a 	bl	8020e2c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80211f8:	687b      	ldr	r3, [r7, #4]
 80211fa:	681b      	ldr	r3, [r3, #0]
 80211fc:	68fa      	ldr	r2, [r7, #12]
 80211fe:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8021200:	687b      	ldr	r3, [r7, #4]
 8021202:	681b      	ldr	r3, [r3, #0]
 8021204:	699b      	ldr	r3, [r3, #24]
 8021206:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8021208:	68fa      	ldr	r2, [r7, #12]
 802120a:	f64f 7341 	movw	r3, #65345	; 0xff41
 802120e:	4013      	ands	r3, r2
 8021210:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8021212:	683b      	ldr	r3, [r7, #0]
 8021214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021216:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8021218:	683a      	ldr	r2, [r7, #0]
 802121a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 802121e:	2a00      	cmp	r2, #0
 8021220:	d101      	bne.n	8021226 <ETH_SetMACConfig+0xee>
 8021222:	2280      	movs	r2, #128	; 0x80
 8021224:	e000      	b.n	8021228 <ETH_SetMACConfig+0xf0>
 8021226:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8021228:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 802122a:	683b      	ldr	r3, [r7, #0]
 802122c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 802122e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8021230:	683a      	ldr	r2, [r7, #0]
 8021232:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8021236:	2a01      	cmp	r2, #1
 8021238:	d101      	bne.n	802123e <ETH_SetMACConfig+0x106>
 802123a:	2208      	movs	r2, #8
 802123c:	e000      	b.n	8021240 <ETH_SetMACConfig+0x108>
 802123e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8021240:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8021242:	683a      	ldr	r2, [r7, #0]
 8021244:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8021248:	2a01      	cmp	r2, #1
 802124a:	d101      	bne.n	8021250 <ETH_SetMACConfig+0x118>
 802124c:	2204      	movs	r2, #4
 802124e:	e000      	b.n	8021252 <ETH_SetMACConfig+0x11a>
 8021250:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8021252:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8021254:	683a      	ldr	r2, [r7, #0]
 8021256:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 802125a:	2a01      	cmp	r2, #1
 802125c:	d101      	bne.n	8021262 <ETH_SetMACConfig+0x12a>
 802125e:	2202      	movs	r2, #2
 8021260:	e000      	b.n	8021264 <ETH_SetMACConfig+0x12c>
 8021262:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8021264:	4313      	orrs	r3, r2
 8021266:	68fa      	ldr	r2, [r7, #12]
 8021268:	4313      	orrs	r3, r2
 802126a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 802126c:	687b      	ldr	r3, [r7, #4]
 802126e:	681b      	ldr	r3, [r3, #0]
 8021270:	68fa      	ldr	r2, [r7, #12]
 8021272:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8021274:	687b      	ldr	r3, [r7, #4]
 8021276:	681b      	ldr	r3, [r3, #0]
 8021278:	699b      	ldr	r3, [r3, #24]
 802127a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 802127c:	2001      	movs	r0, #1
 802127e:	f7ff fdd5 	bl	8020e2c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8021282:	687b      	ldr	r3, [r7, #4]
 8021284:	681b      	ldr	r3, [r3, #0]
 8021286:	68fa      	ldr	r2, [r7, #12]
 8021288:	619a      	str	r2, [r3, #24]
}
 802128a:	bf00      	nop
 802128c:	3710      	adds	r7, #16
 802128e:	46bd      	mov	sp, r7
 8021290:	bd80      	pop	{r7, pc}
 8021292:	bf00      	nop
 8021294:	ff20810f 	.word	0xff20810f

08021298 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8021298:	b580      	push	{r7, lr}
 802129a:	b084      	sub	sp, #16
 802129c:	af00      	add	r7, sp, #0
 802129e:	6078      	str	r0, [r7, #4]
 80212a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80212a2:	687b      	ldr	r3, [r7, #4]
 80212a4:	681b      	ldr	r3, [r3, #0]
 80212a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80212aa:	699b      	ldr	r3, [r3, #24]
 80212ac:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80212ae:	68fa      	ldr	r2, [r7, #12]
 80212b0:	4b3d      	ldr	r3, [pc, #244]	; (80213a8 <ETH_SetDMAConfig+0x110>)
 80212b2:	4013      	ands	r3, r2
 80212b4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80212b6:	683b      	ldr	r3, [r7, #0]
 80212b8:	7b1b      	ldrb	r3, [r3, #12]
 80212ba:	2b00      	cmp	r3, #0
 80212bc:	d102      	bne.n	80212c4 <ETH_SetDMAConfig+0x2c>
 80212be:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80212c2:	e000      	b.n	80212c6 <ETH_SetDMAConfig+0x2e>
 80212c4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80212c6:	683b      	ldr	r3, [r7, #0]
 80212c8:	7b5b      	ldrb	r3, [r3, #13]
 80212ca:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80212cc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80212ce:	683a      	ldr	r2, [r7, #0]
 80212d0:	7f52      	ldrb	r2, [r2, #29]
 80212d2:	2a00      	cmp	r2, #0
 80212d4:	d102      	bne.n	80212dc <ETH_SetDMAConfig+0x44>
 80212d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80212da:	e000      	b.n	80212de <ETH_SetDMAConfig+0x46>
 80212dc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80212de:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80212e0:	683b      	ldr	r3, [r7, #0]
 80212e2:	7b9b      	ldrb	r3, [r3, #14]
 80212e4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80212e6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80212e8:	683b      	ldr	r3, [r7, #0]
 80212ea:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80212ec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80212ee:	683b      	ldr	r3, [r7, #0]
 80212f0:	7f1b      	ldrb	r3, [r3, #28]
 80212f2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80212f4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80212f6:	683b      	ldr	r3, [r7, #0]
 80212f8:	7f9b      	ldrb	r3, [r3, #30]
 80212fa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80212fc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80212fe:	683b      	ldr	r3, [r7, #0]
 8021300:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8021302:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8021304:	683b      	ldr	r3, [r7, #0]
 8021306:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 802130a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 802130c:	4313      	orrs	r3, r2
 802130e:	68fa      	ldr	r2, [r7, #12]
 8021310:	4313      	orrs	r3, r2
 8021312:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8021314:	687b      	ldr	r3, [r7, #4]
 8021316:	681b      	ldr	r3, [r3, #0]
 8021318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802131c:	461a      	mov	r2, r3
 802131e:	68fb      	ldr	r3, [r7, #12]
 8021320:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8021322:	687b      	ldr	r3, [r7, #4]
 8021324:	681b      	ldr	r3, [r3, #0]
 8021326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802132a:	699b      	ldr	r3, [r3, #24]
 802132c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 802132e:	2001      	movs	r0, #1
 8021330:	f7ff fd7c 	bl	8020e2c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8021334:	687b      	ldr	r3, [r7, #4]
 8021336:	681b      	ldr	r3, [r3, #0]
 8021338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802133c:	461a      	mov	r2, r3
 802133e:	68fb      	ldr	r3, [r7, #12]
 8021340:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8021342:	683b      	ldr	r3, [r7, #0]
 8021344:	791b      	ldrb	r3, [r3, #4]
 8021346:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8021348:	683b      	ldr	r3, [r7, #0]
 802134a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 802134c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 802134e:	683b      	ldr	r3, [r7, #0]
 8021350:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8021352:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8021354:	683b      	ldr	r3, [r7, #0]
 8021356:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8021358:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 802135a:	683b      	ldr	r3, [r7, #0]
 802135c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8021360:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8021362:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8021364:	683b      	ldr	r3, [r7, #0]
 8021366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021368:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 802136a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 802136c:	683b      	ldr	r3, [r7, #0]
 802136e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8021370:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8021372:	687a      	ldr	r2, [r7, #4]
 8021374:	6812      	ldr	r2, [r2, #0]
 8021376:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 802137a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 802137e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8021380:	687b      	ldr	r3, [r7, #4]
 8021382:	681b      	ldr	r3, [r3, #0]
 8021384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8021388:	681b      	ldr	r3, [r3, #0]
 802138a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 802138c:	2001      	movs	r0, #1
 802138e:	f7ff fd4d 	bl	8020e2c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8021392:	687b      	ldr	r3, [r7, #4]
 8021394:	681b      	ldr	r3, [r3, #0]
 8021396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802139a:	461a      	mov	r2, r3
 802139c:	68fb      	ldr	r3, [r7, #12]
 802139e:	6013      	str	r3, [r2, #0]
}
 80213a0:	bf00      	nop
 80213a2:	3710      	adds	r7, #16
 80213a4:	46bd      	mov	sp, r7
 80213a6:	bd80      	pop	{r7, pc}
 80213a8:	f8de3f23 	.word	0xf8de3f23

080213ac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80213ac:	b580      	push	{r7, lr}
 80213ae:	b0a6      	sub	sp, #152	; 0x98
 80213b0:	af00      	add	r7, sp, #0
 80213b2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80213b4:	2301      	movs	r3, #1
 80213b6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80213ba:	2301      	movs	r3, #1
 80213bc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80213c0:	2300      	movs	r3, #0
 80213c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80213c4:	2300      	movs	r3, #0
 80213c6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80213ca:	2301      	movs	r3, #1
 80213cc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80213d0:	2300      	movs	r3, #0
 80213d2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80213d6:	2301      	movs	r3, #1
 80213d8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80213dc:	2300      	movs	r3, #0
 80213de:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80213e2:	2300      	movs	r3, #0
 80213e4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80213e8:	2300      	movs	r3, #0
 80213ea:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80213ec:	2300      	movs	r3, #0
 80213ee:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80213f2:	2300      	movs	r3, #0
 80213f4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80213f6:	2300      	movs	r3, #0
 80213f8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80213fc:	2300      	movs	r3, #0
 80213fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8021402:	2300      	movs	r3, #0
 8021404:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8021408:	2300      	movs	r3, #0
 802140a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 802140e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8021412:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8021414:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021418:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 802141a:	2300      	movs	r3, #0
 802141c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8021420:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8021424:	4619      	mov	r1, r3
 8021426:	6878      	ldr	r0, [r7, #4]
 8021428:	f7ff fe86 	bl	8021138 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 802142c:	2301      	movs	r3, #1
 802142e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8021430:	2301      	movs	r3, #1
 8021432:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8021434:	2301      	movs	r3, #1
 8021436:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 802143a:	2301      	movs	r3, #1
 802143c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 802143e:	2300      	movs	r3, #0
 8021440:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8021442:	2300      	movs	r3, #0
 8021444:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8021448:	2300      	movs	r3, #0
 802144a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 802144e:	2300      	movs	r3, #0
 8021450:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8021452:	2301      	movs	r3, #1
 8021454:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8021458:	2301      	movs	r3, #1
 802145a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 802145c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021460:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8021462:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8021466:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8021468:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802146c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 802146e:	2301      	movs	r3, #1
 8021470:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8021474:	2300      	movs	r3, #0
 8021476:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8021478:	2300      	movs	r3, #0
 802147a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 802147c:	f107 0308 	add.w	r3, r7, #8
 8021480:	4619      	mov	r1, r3
 8021482:	6878      	ldr	r0, [r7, #4]
 8021484:	f7ff ff08 	bl	8021298 <ETH_SetDMAConfig>
}
 8021488:	bf00      	nop
 802148a:	3798      	adds	r7, #152	; 0x98
 802148c:	46bd      	mov	sp, r7
 802148e:	bd80      	pop	{r7, pc}

08021490 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8021490:	b480      	push	{r7}
 8021492:	b087      	sub	sp, #28
 8021494:	af00      	add	r7, sp, #0
 8021496:	60f8      	str	r0, [r7, #12]
 8021498:	60b9      	str	r1, [r7, #8]
 802149a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 802149c:	687b      	ldr	r3, [r7, #4]
 802149e:	3305      	adds	r3, #5
 80214a0:	781b      	ldrb	r3, [r3, #0]
 80214a2:	021b      	lsls	r3, r3, #8
 80214a4:	687a      	ldr	r2, [r7, #4]
 80214a6:	3204      	adds	r2, #4
 80214a8:	7812      	ldrb	r2, [r2, #0]
 80214aa:	4313      	orrs	r3, r2
 80214ac:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80214ae:	68ba      	ldr	r2, [r7, #8]
 80214b0:	4b11      	ldr	r3, [pc, #68]	; (80214f8 <ETH_MACAddressConfig+0x68>)
 80214b2:	4413      	add	r3, r2
 80214b4:	461a      	mov	r2, r3
 80214b6:	697b      	ldr	r3, [r7, #20]
 80214b8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80214ba:	687b      	ldr	r3, [r7, #4]
 80214bc:	3303      	adds	r3, #3
 80214be:	781b      	ldrb	r3, [r3, #0]
 80214c0:	061a      	lsls	r2, r3, #24
 80214c2:	687b      	ldr	r3, [r7, #4]
 80214c4:	3302      	adds	r3, #2
 80214c6:	781b      	ldrb	r3, [r3, #0]
 80214c8:	041b      	lsls	r3, r3, #16
 80214ca:	431a      	orrs	r2, r3
 80214cc:	687b      	ldr	r3, [r7, #4]
 80214ce:	3301      	adds	r3, #1
 80214d0:	781b      	ldrb	r3, [r3, #0]
 80214d2:	021b      	lsls	r3, r3, #8
 80214d4:	4313      	orrs	r3, r2
 80214d6:	687a      	ldr	r2, [r7, #4]
 80214d8:	7812      	ldrb	r2, [r2, #0]
 80214da:	4313      	orrs	r3, r2
 80214dc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80214de:	68ba      	ldr	r2, [r7, #8]
 80214e0:	4b06      	ldr	r3, [pc, #24]	; (80214fc <ETH_MACAddressConfig+0x6c>)
 80214e2:	4413      	add	r3, r2
 80214e4:	461a      	mov	r2, r3
 80214e6:	697b      	ldr	r3, [r7, #20]
 80214e8:	6013      	str	r3, [r2, #0]
}
 80214ea:	bf00      	nop
 80214ec:	371c      	adds	r7, #28
 80214ee:	46bd      	mov	sp, r7
 80214f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214f4:	4770      	bx	lr
 80214f6:	bf00      	nop
 80214f8:	40028040 	.word	0x40028040
 80214fc:	40028044 	.word	0x40028044

08021500 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8021500:	b480      	push	{r7}
 8021502:	b085      	sub	sp, #20
 8021504:	af00      	add	r7, sp, #0
 8021506:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8021508:	2300      	movs	r3, #0
 802150a:	60fb      	str	r3, [r7, #12]
 802150c:	e03e      	b.n	802158c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 802150e:	687b      	ldr	r3, [r7, #4]
 8021510:	68d9      	ldr	r1, [r3, #12]
 8021512:	68fa      	ldr	r2, [r7, #12]
 8021514:	4613      	mov	r3, r2
 8021516:	009b      	lsls	r3, r3, #2
 8021518:	4413      	add	r3, r2
 802151a:	00db      	lsls	r3, r3, #3
 802151c:	440b      	add	r3, r1
 802151e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8021520:	68bb      	ldr	r3, [r7, #8]
 8021522:	2200      	movs	r2, #0
 8021524:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8021526:	68bb      	ldr	r3, [r7, #8]
 8021528:	2200      	movs	r2, #0
 802152a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 802152c:	68bb      	ldr	r3, [r7, #8]
 802152e:	2200      	movs	r2, #0
 8021530:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8021532:	68bb      	ldr	r3, [r7, #8]
 8021534:	2200      	movs	r2, #0
 8021536:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8021538:	68b9      	ldr	r1, [r7, #8]
 802153a:	687b      	ldr	r3, [r7, #4]
 802153c:	68fa      	ldr	r2, [r7, #12]
 802153e:	3206      	adds	r2, #6
 8021540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8021544:	68bb      	ldr	r3, [r7, #8]
 8021546:	681b      	ldr	r3, [r3, #0]
 8021548:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 802154c:	68bb      	ldr	r3, [r7, #8]
 802154e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8021550:	68fb      	ldr	r3, [r7, #12]
 8021552:	2b02      	cmp	r3, #2
 8021554:	d80c      	bhi.n	8021570 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8021556:	687b      	ldr	r3, [r7, #4]
 8021558:	68d9      	ldr	r1, [r3, #12]
 802155a:	68fb      	ldr	r3, [r7, #12]
 802155c:	1c5a      	adds	r2, r3, #1
 802155e:	4613      	mov	r3, r2
 8021560:	009b      	lsls	r3, r3, #2
 8021562:	4413      	add	r3, r2
 8021564:	00db      	lsls	r3, r3, #3
 8021566:	440b      	add	r3, r1
 8021568:	461a      	mov	r2, r3
 802156a:	68bb      	ldr	r3, [r7, #8]
 802156c:	60da      	str	r2, [r3, #12]
 802156e:	e004      	b.n	802157a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8021570:	687b      	ldr	r3, [r7, #4]
 8021572:	68db      	ldr	r3, [r3, #12]
 8021574:	461a      	mov	r2, r3
 8021576:	68bb      	ldr	r3, [r7, #8]
 8021578:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 802157a:	68bb      	ldr	r3, [r7, #8]
 802157c:	681b      	ldr	r3, [r3, #0]
 802157e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8021582:	68bb      	ldr	r3, [r7, #8]
 8021584:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8021586:	68fb      	ldr	r3, [r7, #12]
 8021588:	3301      	adds	r3, #1
 802158a:	60fb      	str	r3, [r7, #12]
 802158c:	68fb      	ldr	r3, [r7, #12]
 802158e:	2b03      	cmp	r3, #3
 8021590:	d9bd      	bls.n	802150e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8021592:	687b      	ldr	r3, [r7, #4]
 8021594:	2200      	movs	r2, #0
 8021596:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8021598:	687b      	ldr	r3, [r7, #4]
 802159a:	68da      	ldr	r2, [r3, #12]
 802159c:	687b      	ldr	r3, [r7, #4]
 802159e:	681b      	ldr	r3, [r3, #0]
 80215a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80215a4:	611a      	str	r2, [r3, #16]
}
 80215a6:	bf00      	nop
 80215a8:	3714      	adds	r7, #20
 80215aa:	46bd      	mov	sp, r7
 80215ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215b0:	4770      	bx	lr

080215b2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80215b2:	b480      	push	{r7}
 80215b4:	b085      	sub	sp, #20
 80215b6:	af00      	add	r7, sp, #0
 80215b8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80215ba:	2300      	movs	r3, #0
 80215bc:	60fb      	str	r3, [r7, #12]
 80215be:	e046      	b.n	802164e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80215c0:	687b      	ldr	r3, [r7, #4]
 80215c2:	6919      	ldr	r1, [r3, #16]
 80215c4:	68fa      	ldr	r2, [r7, #12]
 80215c6:	4613      	mov	r3, r2
 80215c8:	009b      	lsls	r3, r3, #2
 80215ca:	4413      	add	r3, r2
 80215cc:	00db      	lsls	r3, r3, #3
 80215ce:	440b      	add	r3, r1
 80215d0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80215d2:	68bb      	ldr	r3, [r7, #8]
 80215d4:	2200      	movs	r2, #0
 80215d6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80215d8:	68bb      	ldr	r3, [r7, #8]
 80215da:	2200      	movs	r2, #0
 80215dc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80215de:	68bb      	ldr	r3, [r7, #8]
 80215e0:	2200      	movs	r2, #0
 80215e2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80215e4:	68bb      	ldr	r3, [r7, #8]
 80215e6:	2200      	movs	r2, #0
 80215e8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80215ea:	68bb      	ldr	r3, [r7, #8]
 80215ec:	2200      	movs	r2, #0
 80215ee:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80215f0:	68bb      	ldr	r3, [r7, #8]
 80215f2:	2200      	movs	r2, #0
 80215f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80215f6:	68bb      	ldr	r3, [r7, #8]
 80215f8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80215fc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80215fe:	68bb      	ldr	r3, [r7, #8]
 8021600:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8021604:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8021606:	68bb      	ldr	r3, [r7, #8]
 8021608:	685b      	ldr	r3, [r3, #4]
 802160a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 802160e:	68bb      	ldr	r3, [r7, #8]
 8021610:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8021612:	68b9      	ldr	r1, [r7, #8]
 8021614:	687b      	ldr	r3, [r7, #4]
 8021616:	68fa      	ldr	r2, [r7, #12]
 8021618:	3212      	adds	r2, #18
 802161a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 802161e:	68fb      	ldr	r3, [r7, #12]
 8021620:	2b02      	cmp	r3, #2
 8021622:	d80c      	bhi.n	802163e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8021624:	687b      	ldr	r3, [r7, #4]
 8021626:	6919      	ldr	r1, [r3, #16]
 8021628:	68fb      	ldr	r3, [r7, #12]
 802162a:	1c5a      	adds	r2, r3, #1
 802162c:	4613      	mov	r3, r2
 802162e:	009b      	lsls	r3, r3, #2
 8021630:	4413      	add	r3, r2
 8021632:	00db      	lsls	r3, r3, #3
 8021634:	440b      	add	r3, r1
 8021636:	461a      	mov	r2, r3
 8021638:	68bb      	ldr	r3, [r7, #8]
 802163a:	60da      	str	r2, [r3, #12]
 802163c:	e004      	b.n	8021648 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 802163e:	687b      	ldr	r3, [r7, #4]
 8021640:	691b      	ldr	r3, [r3, #16]
 8021642:	461a      	mov	r2, r3
 8021644:	68bb      	ldr	r3, [r7, #8]
 8021646:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8021648:	68fb      	ldr	r3, [r7, #12]
 802164a:	3301      	adds	r3, #1
 802164c:	60fb      	str	r3, [r7, #12]
 802164e:	68fb      	ldr	r3, [r7, #12]
 8021650:	2b03      	cmp	r3, #3
 8021652:	d9b5      	bls.n	80215c0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8021654:	687b      	ldr	r3, [r7, #4]
 8021656:	2200      	movs	r2, #0
 8021658:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 802165a:	687b      	ldr	r3, [r7, #4]
 802165c:	2200      	movs	r2, #0
 802165e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8021660:	687b      	ldr	r3, [r7, #4]
 8021662:	2200      	movs	r2, #0
 8021664:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8021666:	687b      	ldr	r3, [r7, #4]
 8021668:	2200      	movs	r2, #0
 802166a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 802166c:	687b      	ldr	r3, [r7, #4]
 802166e:	2200      	movs	r2, #0
 8021670:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8021672:	687b      	ldr	r3, [r7, #4]
 8021674:	691a      	ldr	r2, [r3, #16]
 8021676:	687b      	ldr	r3, [r7, #4]
 8021678:	681b      	ldr	r3, [r3, #0]
 802167a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802167e:	60da      	str	r2, [r3, #12]
}
 8021680:	bf00      	nop
 8021682:	3714      	adds	r7, #20
 8021684:	46bd      	mov	sp, r7
 8021686:	f85d 7b04 	ldr.w	r7, [sp], #4
 802168a:	4770      	bx	lr

0802168c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 802168c:	b480      	push	{r7}
 802168e:	b089      	sub	sp, #36	; 0x24
 8021690:	af00      	add	r7, sp, #0
 8021692:	6078      	str	r0, [r7, #4]
 8021694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8021696:	2300      	movs	r3, #0
 8021698:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 802169a:	2300      	movs	r3, #0
 802169c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 802169e:	2300      	movs	r3, #0
 80216a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80216a2:	2300      	movs	r3, #0
 80216a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80216a6:	2300      	movs	r3, #0
 80216a8:	61fb      	str	r3, [r7, #28]
 80216aa:	e175      	b.n	8021998 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80216ac:	2201      	movs	r2, #1
 80216ae:	69fb      	ldr	r3, [r7, #28]
 80216b0:	fa02 f303 	lsl.w	r3, r2, r3
 80216b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80216b6:	683b      	ldr	r3, [r7, #0]
 80216b8:	681b      	ldr	r3, [r3, #0]
 80216ba:	697a      	ldr	r2, [r7, #20]
 80216bc:	4013      	ands	r3, r2
 80216be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80216c0:	693a      	ldr	r2, [r7, #16]
 80216c2:	697b      	ldr	r3, [r7, #20]
 80216c4:	429a      	cmp	r2, r3
 80216c6:	f040 8164 	bne.w	8021992 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80216ca:	683b      	ldr	r3, [r7, #0]
 80216cc:	685b      	ldr	r3, [r3, #4]
 80216ce:	f003 0303 	and.w	r3, r3, #3
 80216d2:	2b01      	cmp	r3, #1
 80216d4:	d005      	beq.n	80216e2 <HAL_GPIO_Init+0x56>
 80216d6:	683b      	ldr	r3, [r7, #0]
 80216d8:	685b      	ldr	r3, [r3, #4]
 80216da:	f003 0303 	and.w	r3, r3, #3
 80216de:	2b02      	cmp	r3, #2
 80216e0:	d130      	bne.n	8021744 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80216e2:	687b      	ldr	r3, [r7, #4]
 80216e4:	689b      	ldr	r3, [r3, #8]
 80216e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80216e8:	69fb      	ldr	r3, [r7, #28]
 80216ea:	005b      	lsls	r3, r3, #1
 80216ec:	2203      	movs	r2, #3
 80216ee:	fa02 f303 	lsl.w	r3, r2, r3
 80216f2:	43db      	mvns	r3, r3
 80216f4:	69ba      	ldr	r2, [r7, #24]
 80216f6:	4013      	ands	r3, r2
 80216f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80216fa:	683b      	ldr	r3, [r7, #0]
 80216fc:	68da      	ldr	r2, [r3, #12]
 80216fe:	69fb      	ldr	r3, [r7, #28]
 8021700:	005b      	lsls	r3, r3, #1
 8021702:	fa02 f303 	lsl.w	r3, r2, r3
 8021706:	69ba      	ldr	r2, [r7, #24]
 8021708:	4313      	orrs	r3, r2
 802170a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 802170c:	687b      	ldr	r3, [r7, #4]
 802170e:	69ba      	ldr	r2, [r7, #24]
 8021710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8021712:	687b      	ldr	r3, [r7, #4]
 8021714:	685b      	ldr	r3, [r3, #4]
 8021716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8021718:	2201      	movs	r2, #1
 802171a:	69fb      	ldr	r3, [r7, #28]
 802171c:	fa02 f303 	lsl.w	r3, r2, r3
 8021720:	43db      	mvns	r3, r3
 8021722:	69ba      	ldr	r2, [r7, #24]
 8021724:	4013      	ands	r3, r2
 8021726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8021728:	683b      	ldr	r3, [r7, #0]
 802172a:	685b      	ldr	r3, [r3, #4]
 802172c:	091b      	lsrs	r3, r3, #4
 802172e:	f003 0201 	and.w	r2, r3, #1
 8021732:	69fb      	ldr	r3, [r7, #28]
 8021734:	fa02 f303 	lsl.w	r3, r2, r3
 8021738:	69ba      	ldr	r2, [r7, #24]
 802173a:	4313      	orrs	r3, r2
 802173c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 802173e:	687b      	ldr	r3, [r7, #4]
 8021740:	69ba      	ldr	r2, [r7, #24]
 8021742:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8021744:	683b      	ldr	r3, [r7, #0]
 8021746:	685b      	ldr	r3, [r3, #4]
 8021748:	f003 0303 	and.w	r3, r3, #3
 802174c:	2b03      	cmp	r3, #3
 802174e:	d017      	beq.n	8021780 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8021750:	687b      	ldr	r3, [r7, #4]
 8021752:	68db      	ldr	r3, [r3, #12]
 8021754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8021756:	69fb      	ldr	r3, [r7, #28]
 8021758:	005b      	lsls	r3, r3, #1
 802175a:	2203      	movs	r2, #3
 802175c:	fa02 f303 	lsl.w	r3, r2, r3
 8021760:	43db      	mvns	r3, r3
 8021762:	69ba      	ldr	r2, [r7, #24]
 8021764:	4013      	ands	r3, r2
 8021766:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8021768:	683b      	ldr	r3, [r7, #0]
 802176a:	689a      	ldr	r2, [r3, #8]
 802176c:	69fb      	ldr	r3, [r7, #28]
 802176e:	005b      	lsls	r3, r3, #1
 8021770:	fa02 f303 	lsl.w	r3, r2, r3
 8021774:	69ba      	ldr	r2, [r7, #24]
 8021776:	4313      	orrs	r3, r2
 8021778:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 802177a:	687b      	ldr	r3, [r7, #4]
 802177c:	69ba      	ldr	r2, [r7, #24]
 802177e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8021780:	683b      	ldr	r3, [r7, #0]
 8021782:	685b      	ldr	r3, [r3, #4]
 8021784:	f003 0303 	and.w	r3, r3, #3
 8021788:	2b02      	cmp	r3, #2
 802178a:	d123      	bne.n	80217d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 802178c:	69fb      	ldr	r3, [r7, #28]
 802178e:	08da      	lsrs	r2, r3, #3
 8021790:	687b      	ldr	r3, [r7, #4]
 8021792:	3208      	adds	r2, #8
 8021794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 802179a:	69fb      	ldr	r3, [r7, #28]
 802179c:	f003 0307 	and.w	r3, r3, #7
 80217a0:	009b      	lsls	r3, r3, #2
 80217a2:	220f      	movs	r2, #15
 80217a4:	fa02 f303 	lsl.w	r3, r2, r3
 80217a8:	43db      	mvns	r3, r3
 80217aa:	69ba      	ldr	r2, [r7, #24]
 80217ac:	4013      	ands	r3, r2
 80217ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80217b0:	683b      	ldr	r3, [r7, #0]
 80217b2:	691a      	ldr	r2, [r3, #16]
 80217b4:	69fb      	ldr	r3, [r7, #28]
 80217b6:	f003 0307 	and.w	r3, r3, #7
 80217ba:	009b      	lsls	r3, r3, #2
 80217bc:	fa02 f303 	lsl.w	r3, r2, r3
 80217c0:	69ba      	ldr	r2, [r7, #24]
 80217c2:	4313      	orrs	r3, r2
 80217c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80217c6:	69fb      	ldr	r3, [r7, #28]
 80217c8:	08da      	lsrs	r2, r3, #3
 80217ca:	687b      	ldr	r3, [r7, #4]
 80217cc:	3208      	adds	r2, #8
 80217ce:	69b9      	ldr	r1, [r7, #24]
 80217d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80217d4:	687b      	ldr	r3, [r7, #4]
 80217d6:	681b      	ldr	r3, [r3, #0]
 80217d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80217da:	69fb      	ldr	r3, [r7, #28]
 80217dc:	005b      	lsls	r3, r3, #1
 80217de:	2203      	movs	r2, #3
 80217e0:	fa02 f303 	lsl.w	r3, r2, r3
 80217e4:	43db      	mvns	r3, r3
 80217e6:	69ba      	ldr	r2, [r7, #24]
 80217e8:	4013      	ands	r3, r2
 80217ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80217ec:	683b      	ldr	r3, [r7, #0]
 80217ee:	685b      	ldr	r3, [r3, #4]
 80217f0:	f003 0203 	and.w	r2, r3, #3
 80217f4:	69fb      	ldr	r3, [r7, #28]
 80217f6:	005b      	lsls	r3, r3, #1
 80217f8:	fa02 f303 	lsl.w	r3, r2, r3
 80217fc:	69ba      	ldr	r2, [r7, #24]
 80217fe:	4313      	orrs	r3, r2
 8021800:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8021802:	687b      	ldr	r3, [r7, #4]
 8021804:	69ba      	ldr	r2, [r7, #24]
 8021806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8021808:	683b      	ldr	r3, [r7, #0]
 802180a:	685b      	ldr	r3, [r3, #4]
 802180c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8021810:	2b00      	cmp	r3, #0
 8021812:	f000 80be 	beq.w	8021992 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021816:	4b66      	ldr	r3, [pc, #408]	; (80219b0 <HAL_GPIO_Init+0x324>)
 8021818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802181a:	4a65      	ldr	r2, [pc, #404]	; (80219b0 <HAL_GPIO_Init+0x324>)
 802181c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8021820:	6453      	str	r3, [r2, #68]	; 0x44
 8021822:	4b63      	ldr	r3, [pc, #396]	; (80219b0 <HAL_GPIO_Init+0x324>)
 8021824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802182a:	60fb      	str	r3, [r7, #12]
 802182c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 802182e:	4a61      	ldr	r2, [pc, #388]	; (80219b4 <HAL_GPIO_Init+0x328>)
 8021830:	69fb      	ldr	r3, [r7, #28]
 8021832:	089b      	lsrs	r3, r3, #2
 8021834:	3302      	adds	r3, #2
 8021836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802183a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 802183c:	69fb      	ldr	r3, [r7, #28]
 802183e:	f003 0303 	and.w	r3, r3, #3
 8021842:	009b      	lsls	r3, r3, #2
 8021844:	220f      	movs	r2, #15
 8021846:	fa02 f303 	lsl.w	r3, r2, r3
 802184a:	43db      	mvns	r3, r3
 802184c:	69ba      	ldr	r2, [r7, #24]
 802184e:	4013      	ands	r3, r2
 8021850:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8021852:	687b      	ldr	r3, [r7, #4]
 8021854:	4a58      	ldr	r2, [pc, #352]	; (80219b8 <HAL_GPIO_Init+0x32c>)
 8021856:	4293      	cmp	r3, r2
 8021858:	d037      	beq.n	80218ca <HAL_GPIO_Init+0x23e>
 802185a:	687b      	ldr	r3, [r7, #4]
 802185c:	4a57      	ldr	r2, [pc, #348]	; (80219bc <HAL_GPIO_Init+0x330>)
 802185e:	4293      	cmp	r3, r2
 8021860:	d031      	beq.n	80218c6 <HAL_GPIO_Init+0x23a>
 8021862:	687b      	ldr	r3, [r7, #4]
 8021864:	4a56      	ldr	r2, [pc, #344]	; (80219c0 <HAL_GPIO_Init+0x334>)
 8021866:	4293      	cmp	r3, r2
 8021868:	d02b      	beq.n	80218c2 <HAL_GPIO_Init+0x236>
 802186a:	687b      	ldr	r3, [r7, #4]
 802186c:	4a55      	ldr	r2, [pc, #340]	; (80219c4 <HAL_GPIO_Init+0x338>)
 802186e:	4293      	cmp	r3, r2
 8021870:	d025      	beq.n	80218be <HAL_GPIO_Init+0x232>
 8021872:	687b      	ldr	r3, [r7, #4]
 8021874:	4a54      	ldr	r2, [pc, #336]	; (80219c8 <HAL_GPIO_Init+0x33c>)
 8021876:	4293      	cmp	r3, r2
 8021878:	d01f      	beq.n	80218ba <HAL_GPIO_Init+0x22e>
 802187a:	687b      	ldr	r3, [r7, #4]
 802187c:	4a53      	ldr	r2, [pc, #332]	; (80219cc <HAL_GPIO_Init+0x340>)
 802187e:	4293      	cmp	r3, r2
 8021880:	d019      	beq.n	80218b6 <HAL_GPIO_Init+0x22a>
 8021882:	687b      	ldr	r3, [r7, #4]
 8021884:	4a52      	ldr	r2, [pc, #328]	; (80219d0 <HAL_GPIO_Init+0x344>)
 8021886:	4293      	cmp	r3, r2
 8021888:	d013      	beq.n	80218b2 <HAL_GPIO_Init+0x226>
 802188a:	687b      	ldr	r3, [r7, #4]
 802188c:	4a51      	ldr	r2, [pc, #324]	; (80219d4 <HAL_GPIO_Init+0x348>)
 802188e:	4293      	cmp	r3, r2
 8021890:	d00d      	beq.n	80218ae <HAL_GPIO_Init+0x222>
 8021892:	687b      	ldr	r3, [r7, #4]
 8021894:	4a50      	ldr	r2, [pc, #320]	; (80219d8 <HAL_GPIO_Init+0x34c>)
 8021896:	4293      	cmp	r3, r2
 8021898:	d007      	beq.n	80218aa <HAL_GPIO_Init+0x21e>
 802189a:	687b      	ldr	r3, [r7, #4]
 802189c:	4a4f      	ldr	r2, [pc, #316]	; (80219dc <HAL_GPIO_Init+0x350>)
 802189e:	4293      	cmp	r3, r2
 80218a0:	d101      	bne.n	80218a6 <HAL_GPIO_Init+0x21a>
 80218a2:	2309      	movs	r3, #9
 80218a4:	e012      	b.n	80218cc <HAL_GPIO_Init+0x240>
 80218a6:	230a      	movs	r3, #10
 80218a8:	e010      	b.n	80218cc <HAL_GPIO_Init+0x240>
 80218aa:	2308      	movs	r3, #8
 80218ac:	e00e      	b.n	80218cc <HAL_GPIO_Init+0x240>
 80218ae:	2307      	movs	r3, #7
 80218b0:	e00c      	b.n	80218cc <HAL_GPIO_Init+0x240>
 80218b2:	2306      	movs	r3, #6
 80218b4:	e00a      	b.n	80218cc <HAL_GPIO_Init+0x240>
 80218b6:	2305      	movs	r3, #5
 80218b8:	e008      	b.n	80218cc <HAL_GPIO_Init+0x240>
 80218ba:	2304      	movs	r3, #4
 80218bc:	e006      	b.n	80218cc <HAL_GPIO_Init+0x240>
 80218be:	2303      	movs	r3, #3
 80218c0:	e004      	b.n	80218cc <HAL_GPIO_Init+0x240>
 80218c2:	2302      	movs	r3, #2
 80218c4:	e002      	b.n	80218cc <HAL_GPIO_Init+0x240>
 80218c6:	2301      	movs	r3, #1
 80218c8:	e000      	b.n	80218cc <HAL_GPIO_Init+0x240>
 80218ca:	2300      	movs	r3, #0
 80218cc:	69fa      	ldr	r2, [r7, #28]
 80218ce:	f002 0203 	and.w	r2, r2, #3
 80218d2:	0092      	lsls	r2, r2, #2
 80218d4:	4093      	lsls	r3, r2
 80218d6:	69ba      	ldr	r2, [r7, #24]
 80218d8:	4313      	orrs	r3, r2
 80218da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80218dc:	4935      	ldr	r1, [pc, #212]	; (80219b4 <HAL_GPIO_Init+0x328>)
 80218de:	69fb      	ldr	r3, [r7, #28]
 80218e0:	089b      	lsrs	r3, r3, #2
 80218e2:	3302      	adds	r3, #2
 80218e4:	69ba      	ldr	r2, [r7, #24]
 80218e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80218ea:	4b3d      	ldr	r3, [pc, #244]	; (80219e0 <HAL_GPIO_Init+0x354>)
 80218ec:	689b      	ldr	r3, [r3, #8]
 80218ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80218f0:	693b      	ldr	r3, [r7, #16]
 80218f2:	43db      	mvns	r3, r3
 80218f4:	69ba      	ldr	r2, [r7, #24]
 80218f6:	4013      	ands	r3, r2
 80218f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80218fa:	683b      	ldr	r3, [r7, #0]
 80218fc:	685b      	ldr	r3, [r3, #4]
 80218fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8021902:	2b00      	cmp	r3, #0
 8021904:	d003      	beq.n	802190e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8021906:	69ba      	ldr	r2, [r7, #24]
 8021908:	693b      	ldr	r3, [r7, #16]
 802190a:	4313      	orrs	r3, r2
 802190c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 802190e:	4a34      	ldr	r2, [pc, #208]	; (80219e0 <HAL_GPIO_Init+0x354>)
 8021910:	69bb      	ldr	r3, [r7, #24]
 8021912:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8021914:	4b32      	ldr	r3, [pc, #200]	; (80219e0 <HAL_GPIO_Init+0x354>)
 8021916:	68db      	ldr	r3, [r3, #12]
 8021918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802191a:	693b      	ldr	r3, [r7, #16]
 802191c:	43db      	mvns	r3, r3
 802191e:	69ba      	ldr	r2, [r7, #24]
 8021920:	4013      	ands	r3, r2
 8021922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8021924:	683b      	ldr	r3, [r7, #0]
 8021926:	685b      	ldr	r3, [r3, #4]
 8021928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802192c:	2b00      	cmp	r3, #0
 802192e:	d003      	beq.n	8021938 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8021930:	69ba      	ldr	r2, [r7, #24]
 8021932:	693b      	ldr	r3, [r7, #16]
 8021934:	4313      	orrs	r3, r2
 8021936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8021938:	4a29      	ldr	r2, [pc, #164]	; (80219e0 <HAL_GPIO_Init+0x354>)
 802193a:	69bb      	ldr	r3, [r7, #24]
 802193c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 802193e:	4b28      	ldr	r3, [pc, #160]	; (80219e0 <HAL_GPIO_Init+0x354>)
 8021940:	685b      	ldr	r3, [r3, #4]
 8021942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8021944:	693b      	ldr	r3, [r7, #16]
 8021946:	43db      	mvns	r3, r3
 8021948:	69ba      	ldr	r2, [r7, #24]
 802194a:	4013      	ands	r3, r2
 802194c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 802194e:	683b      	ldr	r3, [r7, #0]
 8021950:	685b      	ldr	r3, [r3, #4]
 8021952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021956:	2b00      	cmp	r3, #0
 8021958:	d003      	beq.n	8021962 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 802195a:	69ba      	ldr	r2, [r7, #24]
 802195c:	693b      	ldr	r3, [r7, #16]
 802195e:	4313      	orrs	r3, r2
 8021960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8021962:	4a1f      	ldr	r2, [pc, #124]	; (80219e0 <HAL_GPIO_Init+0x354>)
 8021964:	69bb      	ldr	r3, [r7, #24]
 8021966:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8021968:	4b1d      	ldr	r3, [pc, #116]	; (80219e0 <HAL_GPIO_Init+0x354>)
 802196a:	681b      	ldr	r3, [r3, #0]
 802196c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802196e:	693b      	ldr	r3, [r7, #16]
 8021970:	43db      	mvns	r3, r3
 8021972:	69ba      	ldr	r2, [r7, #24]
 8021974:	4013      	ands	r3, r2
 8021976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8021978:	683b      	ldr	r3, [r7, #0]
 802197a:	685b      	ldr	r3, [r3, #4]
 802197c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8021980:	2b00      	cmp	r3, #0
 8021982:	d003      	beq.n	802198c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8021984:	69ba      	ldr	r2, [r7, #24]
 8021986:	693b      	ldr	r3, [r7, #16]
 8021988:	4313      	orrs	r3, r2
 802198a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 802198c:	4a14      	ldr	r2, [pc, #80]	; (80219e0 <HAL_GPIO_Init+0x354>)
 802198e:	69bb      	ldr	r3, [r7, #24]
 8021990:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8021992:	69fb      	ldr	r3, [r7, #28]
 8021994:	3301      	adds	r3, #1
 8021996:	61fb      	str	r3, [r7, #28]
 8021998:	69fb      	ldr	r3, [r7, #28]
 802199a:	2b0f      	cmp	r3, #15
 802199c:	f67f ae86 	bls.w	80216ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80219a0:	bf00      	nop
 80219a2:	bf00      	nop
 80219a4:	3724      	adds	r7, #36	; 0x24
 80219a6:	46bd      	mov	sp, r7
 80219a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219ac:	4770      	bx	lr
 80219ae:	bf00      	nop
 80219b0:	40023800 	.word	0x40023800
 80219b4:	40013800 	.word	0x40013800
 80219b8:	40020000 	.word	0x40020000
 80219bc:	40020400 	.word	0x40020400
 80219c0:	40020800 	.word	0x40020800
 80219c4:	40020c00 	.word	0x40020c00
 80219c8:	40021000 	.word	0x40021000
 80219cc:	40021400 	.word	0x40021400
 80219d0:	40021800 	.word	0x40021800
 80219d4:	40021c00 	.word	0x40021c00
 80219d8:	40022000 	.word	0x40022000
 80219dc:	40022400 	.word	0x40022400
 80219e0:	40013c00 	.word	0x40013c00

080219e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80219e4:	b480      	push	{r7}
 80219e6:	b083      	sub	sp, #12
 80219e8:	af00      	add	r7, sp, #0
 80219ea:	6078      	str	r0, [r7, #4]
 80219ec:	460b      	mov	r3, r1
 80219ee:	807b      	strh	r3, [r7, #2]
 80219f0:	4613      	mov	r3, r2
 80219f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80219f4:	787b      	ldrb	r3, [r7, #1]
 80219f6:	2b00      	cmp	r3, #0
 80219f8:	d003      	beq.n	8021a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80219fa:	887a      	ldrh	r2, [r7, #2]
 80219fc:	687b      	ldr	r3, [r7, #4]
 80219fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8021a00:	e003      	b.n	8021a0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8021a02:	887b      	ldrh	r3, [r7, #2]
 8021a04:	041a      	lsls	r2, r3, #16
 8021a06:	687b      	ldr	r3, [r7, #4]
 8021a08:	619a      	str	r2, [r3, #24]
}
 8021a0a:	bf00      	nop
 8021a0c:	370c      	adds	r7, #12
 8021a0e:	46bd      	mov	sp, r7
 8021a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a14:	4770      	bx	lr

08021a16 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8021a16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021a18:	b08f      	sub	sp, #60	; 0x3c
 8021a1a:	af0a      	add	r7, sp, #40	; 0x28
 8021a1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8021a1e:	687b      	ldr	r3, [r7, #4]
 8021a20:	2b00      	cmp	r3, #0
 8021a22:	d101      	bne.n	8021a28 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8021a24:	2301      	movs	r3, #1
 8021a26:	e116      	b.n	8021c56 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8021a28:	687b      	ldr	r3, [r7, #4]
 8021a2a:	681b      	ldr	r3, [r3, #0]
 8021a2c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8021a2e:	687b      	ldr	r3, [r7, #4]
 8021a30:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8021a34:	b2db      	uxtb	r3, r3
 8021a36:	2b00      	cmp	r3, #0
 8021a38:	d106      	bne.n	8021a48 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8021a3a:	687b      	ldr	r3, [r7, #4]
 8021a3c:	2200      	movs	r2, #0
 8021a3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8021a42:	6878      	ldr	r0, [r7, #4]
 8021a44:	f7ff f8b2 	bl	8020bac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8021a48:	687b      	ldr	r3, [r7, #4]
 8021a4a:	2203      	movs	r2, #3
 8021a4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8021a50:	68bb      	ldr	r3, [r7, #8]
 8021a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021a58:	2b00      	cmp	r3, #0
 8021a5a:	d102      	bne.n	8021a62 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8021a5c:	687b      	ldr	r3, [r7, #4]
 8021a5e:	2200      	movs	r2, #0
 8021a60:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8021a62:	687b      	ldr	r3, [r7, #4]
 8021a64:	681b      	ldr	r3, [r3, #0]
 8021a66:	4618      	mov	r0, r3
 8021a68:	f001 ff3a 	bl	80238e0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8021a6c:	687b      	ldr	r3, [r7, #4]
 8021a6e:	681b      	ldr	r3, [r3, #0]
 8021a70:	603b      	str	r3, [r7, #0]
 8021a72:	687e      	ldr	r6, [r7, #4]
 8021a74:	466d      	mov	r5, sp
 8021a76:	f106 0410 	add.w	r4, r6, #16
 8021a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8021a7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8021a7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8021a80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8021a82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8021a86:	e885 0003 	stmia.w	r5, {r0, r1}
 8021a8a:	1d33      	adds	r3, r6, #4
 8021a8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8021a8e:	6838      	ldr	r0, [r7, #0]
 8021a90:	f001 fece 	bl	8023830 <USB_CoreInit>
 8021a94:	4603      	mov	r3, r0
 8021a96:	2b00      	cmp	r3, #0
 8021a98:	d005      	beq.n	8021aa6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8021a9a:	687b      	ldr	r3, [r7, #4]
 8021a9c:	2202      	movs	r2, #2
 8021a9e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8021aa2:	2301      	movs	r3, #1
 8021aa4:	e0d7      	b.n	8021c56 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8021aa6:	687b      	ldr	r3, [r7, #4]
 8021aa8:	681b      	ldr	r3, [r3, #0]
 8021aaa:	2100      	movs	r1, #0
 8021aac:	4618      	mov	r0, r3
 8021aae:	f001 ff28 	bl	8023902 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8021ab2:	2300      	movs	r3, #0
 8021ab4:	73fb      	strb	r3, [r7, #15]
 8021ab6:	e04a      	b.n	8021b4e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8021ab8:	7bfa      	ldrb	r2, [r7, #15]
 8021aba:	6879      	ldr	r1, [r7, #4]
 8021abc:	4613      	mov	r3, r2
 8021abe:	00db      	lsls	r3, r3, #3
 8021ac0:	4413      	add	r3, r2
 8021ac2:	009b      	lsls	r3, r3, #2
 8021ac4:	440b      	add	r3, r1
 8021ac6:	333d      	adds	r3, #61	; 0x3d
 8021ac8:	2201      	movs	r2, #1
 8021aca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8021acc:	7bfa      	ldrb	r2, [r7, #15]
 8021ace:	6879      	ldr	r1, [r7, #4]
 8021ad0:	4613      	mov	r3, r2
 8021ad2:	00db      	lsls	r3, r3, #3
 8021ad4:	4413      	add	r3, r2
 8021ad6:	009b      	lsls	r3, r3, #2
 8021ad8:	440b      	add	r3, r1
 8021ada:	333c      	adds	r3, #60	; 0x3c
 8021adc:	7bfa      	ldrb	r2, [r7, #15]
 8021ade:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8021ae0:	7bfa      	ldrb	r2, [r7, #15]
 8021ae2:	7bfb      	ldrb	r3, [r7, #15]
 8021ae4:	b298      	uxth	r0, r3
 8021ae6:	6879      	ldr	r1, [r7, #4]
 8021ae8:	4613      	mov	r3, r2
 8021aea:	00db      	lsls	r3, r3, #3
 8021aec:	4413      	add	r3, r2
 8021aee:	009b      	lsls	r3, r3, #2
 8021af0:	440b      	add	r3, r1
 8021af2:	3344      	adds	r3, #68	; 0x44
 8021af4:	4602      	mov	r2, r0
 8021af6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8021af8:	7bfa      	ldrb	r2, [r7, #15]
 8021afa:	6879      	ldr	r1, [r7, #4]
 8021afc:	4613      	mov	r3, r2
 8021afe:	00db      	lsls	r3, r3, #3
 8021b00:	4413      	add	r3, r2
 8021b02:	009b      	lsls	r3, r3, #2
 8021b04:	440b      	add	r3, r1
 8021b06:	3340      	adds	r3, #64	; 0x40
 8021b08:	2200      	movs	r2, #0
 8021b0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8021b0c:	7bfa      	ldrb	r2, [r7, #15]
 8021b0e:	6879      	ldr	r1, [r7, #4]
 8021b10:	4613      	mov	r3, r2
 8021b12:	00db      	lsls	r3, r3, #3
 8021b14:	4413      	add	r3, r2
 8021b16:	009b      	lsls	r3, r3, #2
 8021b18:	440b      	add	r3, r1
 8021b1a:	3348      	adds	r3, #72	; 0x48
 8021b1c:	2200      	movs	r2, #0
 8021b1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8021b20:	7bfa      	ldrb	r2, [r7, #15]
 8021b22:	6879      	ldr	r1, [r7, #4]
 8021b24:	4613      	mov	r3, r2
 8021b26:	00db      	lsls	r3, r3, #3
 8021b28:	4413      	add	r3, r2
 8021b2a:	009b      	lsls	r3, r3, #2
 8021b2c:	440b      	add	r3, r1
 8021b2e:	334c      	adds	r3, #76	; 0x4c
 8021b30:	2200      	movs	r2, #0
 8021b32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8021b34:	7bfa      	ldrb	r2, [r7, #15]
 8021b36:	6879      	ldr	r1, [r7, #4]
 8021b38:	4613      	mov	r3, r2
 8021b3a:	00db      	lsls	r3, r3, #3
 8021b3c:	4413      	add	r3, r2
 8021b3e:	009b      	lsls	r3, r3, #2
 8021b40:	440b      	add	r3, r1
 8021b42:	3354      	adds	r3, #84	; 0x54
 8021b44:	2200      	movs	r2, #0
 8021b46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8021b48:	7bfb      	ldrb	r3, [r7, #15]
 8021b4a:	3301      	adds	r3, #1
 8021b4c:	73fb      	strb	r3, [r7, #15]
 8021b4e:	7bfa      	ldrb	r2, [r7, #15]
 8021b50:	687b      	ldr	r3, [r7, #4]
 8021b52:	685b      	ldr	r3, [r3, #4]
 8021b54:	429a      	cmp	r2, r3
 8021b56:	d3af      	bcc.n	8021ab8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8021b58:	2300      	movs	r3, #0
 8021b5a:	73fb      	strb	r3, [r7, #15]
 8021b5c:	e044      	b.n	8021be8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8021b5e:	7bfa      	ldrb	r2, [r7, #15]
 8021b60:	6879      	ldr	r1, [r7, #4]
 8021b62:	4613      	mov	r3, r2
 8021b64:	00db      	lsls	r3, r3, #3
 8021b66:	4413      	add	r3, r2
 8021b68:	009b      	lsls	r3, r3, #2
 8021b6a:	440b      	add	r3, r1
 8021b6c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8021b70:	2200      	movs	r2, #0
 8021b72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8021b74:	7bfa      	ldrb	r2, [r7, #15]
 8021b76:	6879      	ldr	r1, [r7, #4]
 8021b78:	4613      	mov	r3, r2
 8021b7a:	00db      	lsls	r3, r3, #3
 8021b7c:	4413      	add	r3, r2
 8021b7e:	009b      	lsls	r3, r3, #2
 8021b80:	440b      	add	r3, r1
 8021b82:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8021b86:	7bfa      	ldrb	r2, [r7, #15]
 8021b88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8021b8a:	7bfa      	ldrb	r2, [r7, #15]
 8021b8c:	6879      	ldr	r1, [r7, #4]
 8021b8e:	4613      	mov	r3, r2
 8021b90:	00db      	lsls	r3, r3, #3
 8021b92:	4413      	add	r3, r2
 8021b94:	009b      	lsls	r3, r3, #2
 8021b96:	440b      	add	r3, r1
 8021b98:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8021b9c:	2200      	movs	r2, #0
 8021b9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8021ba0:	7bfa      	ldrb	r2, [r7, #15]
 8021ba2:	6879      	ldr	r1, [r7, #4]
 8021ba4:	4613      	mov	r3, r2
 8021ba6:	00db      	lsls	r3, r3, #3
 8021ba8:	4413      	add	r3, r2
 8021baa:	009b      	lsls	r3, r3, #2
 8021bac:	440b      	add	r3, r1
 8021bae:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8021bb2:	2200      	movs	r2, #0
 8021bb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8021bb6:	7bfa      	ldrb	r2, [r7, #15]
 8021bb8:	6879      	ldr	r1, [r7, #4]
 8021bba:	4613      	mov	r3, r2
 8021bbc:	00db      	lsls	r3, r3, #3
 8021bbe:	4413      	add	r3, r2
 8021bc0:	009b      	lsls	r3, r3, #2
 8021bc2:	440b      	add	r3, r1
 8021bc4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8021bc8:	2200      	movs	r2, #0
 8021bca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8021bcc:	7bfa      	ldrb	r2, [r7, #15]
 8021bce:	6879      	ldr	r1, [r7, #4]
 8021bd0:	4613      	mov	r3, r2
 8021bd2:	00db      	lsls	r3, r3, #3
 8021bd4:	4413      	add	r3, r2
 8021bd6:	009b      	lsls	r3, r3, #2
 8021bd8:	440b      	add	r3, r1
 8021bda:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8021bde:	2200      	movs	r2, #0
 8021be0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8021be2:	7bfb      	ldrb	r3, [r7, #15]
 8021be4:	3301      	adds	r3, #1
 8021be6:	73fb      	strb	r3, [r7, #15]
 8021be8:	7bfa      	ldrb	r2, [r7, #15]
 8021bea:	687b      	ldr	r3, [r7, #4]
 8021bec:	685b      	ldr	r3, [r3, #4]
 8021bee:	429a      	cmp	r2, r3
 8021bf0:	d3b5      	bcc.n	8021b5e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8021bf2:	687b      	ldr	r3, [r7, #4]
 8021bf4:	681b      	ldr	r3, [r3, #0]
 8021bf6:	603b      	str	r3, [r7, #0]
 8021bf8:	687e      	ldr	r6, [r7, #4]
 8021bfa:	466d      	mov	r5, sp
 8021bfc:	f106 0410 	add.w	r4, r6, #16
 8021c00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8021c02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8021c04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8021c06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8021c08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8021c0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8021c10:	1d33      	adds	r3, r6, #4
 8021c12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8021c14:	6838      	ldr	r0, [r7, #0]
 8021c16:	f001 fec1 	bl	802399c <USB_DevInit>
 8021c1a:	4603      	mov	r3, r0
 8021c1c:	2b00      	cmp	r3, #0
 8021c1e:	d005      	beq.n	8021c2c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8021c20:	687b      	ldr	r3, [r7, #4]
 8021c22:	2202      	movs	r2, #2
 8021c24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8021c28:	2301      	movs	r3, #1
 8021c2a:	e014      	b.n	8021c56 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8021c2c:	687b      	ldr	r3, [r7, #4]
 8021c2e:	2200      	movs	r2, #0
 8021c30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8021c34:	687b      	ldr	r3, [r7, #4]
 8021c36:	2201      	movs	r2, #1
 8021c38:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8021c3c:	687b      	ldr	r3, [r7, #4]
 8021c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021c40:	2b01      	cmp	r3, #1
 8021c42:	d102      	bne.n	8021c4a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8021c44:	6878      	ldr	r0, [r7, #4]
 8021c46:	f000 f80b 	bl	8021c60 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8021c4a:	687b      	ldr	r3, [r7, #4]
 8021c4c:	681b      	ldr	r3, [r3, #0]
 8021c4e:	4618      	mov	r0, r3
 8021c50:	f002 f87f 	bl	8023d52 <USB_DevDisconnect>

  return HAL_OK;
 8021c54:	2300      	movs	r3, #0
}
 8021c56:	4618      	mov	r0, r3
 8021c58:	3714      	adds	r7, #20
 8021c5a:	46bd      	mov	sp, r7
 8021c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08021c60 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8021c60:	b480      	push	{r7}
 8021c62:	b085      	sub	sp, #20
 8021c64:	af00      	add	r7, sp, #0
 8021c66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8021c68:	687b      	ldr	r3, [r7, #4]
 8021c6a:	681b      	ldr	r3, [r3, #0]
 8021c6c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8021c6e:	687b      	ldr	r3, [r7, #4]
 8021c70:	2201      	movs	r2, #1
 8021c72:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8021c76:	687b      	ldr	r3, [r7, #4]
 8021c78:	2200      	movs	r2, #0
 8021c7a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8021c7e:	68fb      	ldr	r3, [r7, #12]
 8021c80:	699b      	ldr	r3, [r3, #24]
 8021c82:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8021c86:	68fb      	ldr	r3, [r7, #12]
 8021c88:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8021c8a:	68fb      	ldr	r3, [r7, #12]
 8021c8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8021c8e:	4b05      	ldr	r3, [pc, #20]	; (8021ca4 <HAL_PCDEx_ActivateLPM+0x44>)
 8021c90:	4313      	orrs	r3, r2
 8021c92:	68fa      	ldr	r2, [r7, #12]
 8021c94:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8021c96:	2300      	movs	r3, #0
}
 8021c98:	4618      	mov	r0, r3
 8021c9a:	3714      	adds	r7, #20
 8021c9c:	46bd      	mov	sp, r7
 8021c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ca2:	4770      	bx	lr
 8021ca4:	10000003 	.word	0x10000003

08021ca8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8021ca8:	b480      	push	{r7}
 8021caa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8021cac:	4b05      	ldr	r3, [pc, #20]	; (8021cc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8021cae:	681b      	ldr	r3, [r3, #0]
 8021cb0:	4a04      	ldr	r2, [pc, #16]	; (8021cc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8021cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021cb6:	6013      	str	r3, [r2, #0]
}
 8021cb8:	bf00      	nop
 8021cba:	46bd      	mov	sp, r7
 8021cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cc0:	4770      	bx	lr
 8021cc2:	bf00      	nop
 8021cc4:	40007000 	.word	0x40007000

08021cc8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8021cc8:	b580      	push	{r7, lr}
 8021cca:	b082      	sub	sp, #8
 8021ccc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8021cce:	2300      	movs	r3, #0
 8021cd0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8021cd2:	4b23      	ldr	r3, [pc, #140]	; (8021d60 <HAL_PWREx_EnableOverDrive+0x98>)
 8021cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021cd6:	4a22      	ldr	r2, [pc, #136]	; (8021d60 <HAL_PWREx_EnableOverDrive+0x98>)
 8021cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8021cde:	4b20      	ldr	r3, [pc, #128]	; (8021d60 <HAL_PWREx_EnableOverDrive+0x98>)
 8021ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021ce6:	603b      	str	r3, [r7, #0]
 8021ce8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8021cea:	4b1e      	ldr	r3, [pc, #120]	; (8021d64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8021cec:	681b      	ldr	r3, [r3, #0]
 8021cee:	4a1d      	ldr	r2, [pc, #116]	; (8021d64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8021cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8021cf4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8021cf6:	f7ff f88d 	bl	8020e14 <HAL_GetTick>
 8021cfa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8021cfc:	e009      	b.n	8021d12 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8021cfe:	f7ff f889 	bl	8020e14 <HAL_GetTick>
 8021d02:	4602      	mov	r2, r0
 8021d04:	687b      	ldr	r3, [r7, #4]
 8021d06:	1ad3      	subs	r3, r2, r3
 8021d08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8021d0c:	d901      	bls.n	8021d12 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8021d0e:	2303      	movs	r3, #3
 8021d10:	e022      	b.n	8021d58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8021d12:	4b14      	ldr	r3, [pc, #80]	; (8021d64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8021d14:	685b      	ldr	r3, [r3, #4]
 8021d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8021d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021d1e:	d1ee      	bne.n	8021cfe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8021d20:	4b10      	ldr	r3, [pc, #64]	; (8021d64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8021d22:	681b      	ldr	r3, [r3, #0]
 8021d24:	4a0f      	ldr	r2, [pc, #60]	; (8021d64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8021d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8021d2a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8021d2c:	f7ff f872 	bl	8020e14 <HAL_GetTick>
 8021d30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8021d32:	e009      	b.n	8021d48 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8021d34:	f7ff f86e 	bl	8020e14 <HAL_GetTick>
 8021d38:	4602      	mov	r2, r0
 8021d3a:	687b      	ldr	r3, [r7, #4]
 8021d3c:	1ad3      	subs	r3, r2, r3
 8021d3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8021d42:	d901      	bls.n	8021d48 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8021d44:	2303      	movs	r3, #3
 8021d46:	e007      	b.n	8021d58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8021d48:	4b06      	ldr	r3, [pc, #24]	; (8021d64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8021d4a:	685b      	ldr	r3, [r3, #4]
 8021d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021d50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8021d54:	d1ee      	bne.n	8021d34 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8021d56:	2300      	movs	r3, #0
}
 8021d58:	4618      	mov	r0, r3
 8021d5a:	3708      	adds	r7, #8
 8021d5c:	46bd      	mov	sp, r7
 8021d5e:	bd80      	pop	{r7, pc}
 8021d60:	40023800 	.word	0x40023800
 8021d64:	40007000 	.word	0x40007000

08021d68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8021d68:	b580      	push	{r7, lr}
 8021d6a:	b086      	sub	sp, #24
 8021d6c:	af00      	add	r7, sp, #0
 8021d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8021d70:	2300      	movs	r3, #0
 8021d72:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8021d74:	687b      	ldr	r3, [r7, #4]
 8021d76:	2b00      	cmp	r3, #0
 8021d78:	d101      	bne.n	8021d7e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8021d7a:	2301      	movs	r3, #1
 8021d7c:	e29b      	b.n	80222b6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8021d7e:	687b      	ldr	r3, [r7, #4]
 8021d80:	681b      	ldr	r3, [r3, #0]
 8021d82:	f003 0301 	and.w	r3, r3, #1
 8021d86:	2b00      	cmp	r3, #0
 8021d88:	f000 8087 	beq.w	8021e9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8021d8c:	4b96      	ldr	r3, [pc, #600]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021d8e:	689b      	ldr	r3, [r3, #8]
 8021d90:	f003 030c 	and.w	r3, r3, #12
 8021d94:	2b04      	cmp	r3, #4
 8021d96:	d00c      	beq.n	8021db2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8021d98:	4b93      	ldr	r3, [pc, #588]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021d9a:	689b      	ldr	r3, [r3, #8]
 8021d9c:	f003 030c 	and.w	r3, r3, #12
 8021da0:	2b08      	cmp	r3, #8
 8021da2:	d112      	bne.n	8021dca <HAL_RCC_OscConfig+0x62>
 8021da4:	4b90      	ldr	r3, [pc, #576]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021da6:	685b      	ldr	r3, [r3, #4]
 8021da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8021dac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8021db0:	d10b      	bne.n	8021dca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021db2:	4b8d      	ldr	r3, [pc, #564]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021db4:	681b      	ldr	r3, [r3, #0]
 8021db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021dba:	2b00      	cmp	r3, #0
 8021dbc:	d06c      	beq.n	8021e98 <HAL_RCC_OscConfig+0x130>
 8021dbe:	687b      	ldr	r3, [r7, #4]
 8021dc0:	685b      	ldr	r3, [r3, #4]
 8021dc2:	2b00      	cmp	r3, #0
 8021dc4:	d168      	bne.n	8021e98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8021dc6:	2301      	movs	r3, #1
 8021dc8:	e275      	b.n	80222b6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8021dca:	687b      	ldr	r3, [r7, #4]
 8021dcc:	685b      	ldr	r3, [r3, #4]
 8021dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021dd2:	d106      	bne.n	8021de2 <HAL_RCC_OscConfig+0x7a>
 8021dd4:	4b84      	ldr	r3, [pc, #528]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021dd6:	681b      	ldr	r3, [r3, #0]
 8021dd8:	4a83      	ldr	r2, [pc, #524]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8021dde:	6013      	str	r3, [r2, #0]
 8021de0:	e02e      	b.n	8021e40 <HAL_RCC_OscConfig+0xd8>
 8021de2:	687b      	ldr	r3, [r7, #4]
 8021de4:	685b      	ldr	r3, [r3, #4]
 8021de6:	2b00      	cmp	r3, #0
 8021de8:	d10c      	bne.n	8021e04 <HAL_RCC_OscConfig+0x9c>
 8021dea:	4b7f      	ldr	r3, [pc, #508]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021dec:	681b      	ldr	r3, [r3, #0]
 8021dee:	4a7e      	ldr	r2, [pc, #504]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8021df4:	6013      	str	r3, [r2, #0]
 8021df6:	4b7c      	ldr	r3, [pc, #496]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021df8:	681b      	ldr	r3, [r3, #0]
 8021dfa:	4a7b      	ldr	r2, [pc, #492]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021dfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8021e00:	6013      	str	r3, [r2, #0]
 8021e02:	e01d      	b.n	8021e40 <HAL_RCC_OscConfig+0xd8>
 8021e04:	687b      	ldr	r3, [r7, #4]
 8021e06:	685b      	ldr	r3, [r3, #4]
 8021e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8021e0c:	d10c      	bne.n	8021e28 <HAL_RCC_OscConfig+0xc0>
 8021e0e:	4b76      	ldr	r3, [pc, #472]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021e10:	681b      	ldr	r3, [r3, #0]
 8021e12:	4a75      	ldr	r2, [pc, #468]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8021e18:	6013      	str	r3, [r2, #0]
 8021e1a:	4b73      	ldr	r3, [pc, #460]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021e1c:	681b      	ldr	r3, [r3, #0]
 8021e1e:	4a72      	ldr	r2, [pc, #456]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8021e24:	6013      	str	r3, [r2, #0]
 8021e26:	e00b      	b.n	8021e40 <HAL_RCC_OscConfig+0xd8>
 8021e28:	4b6f      	ldr	r3, [pc, #444]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021e2a:	681b      	ldr	r3, [r3, #0]
 8021e2c:	4a6e      	ldr	r2, [pc, #440]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8021e32:	6013      	str	r3, [r2, #0]
 8021e34:	4b6c      	ldr	r3, [pc, #432]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021e36:	681b      	ldr	r3, [r3, #0]
 8021e38:	4a6b      	ldr	r2, [pc, #428]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8021e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8021e40:	687b      	ldr	r3, [r7, #4]
 8021e42:	685b      	ldr	r3, [r3, #4]
 8021e44:	2b00      	cmp	r3, #0
 8021e46:	d013      	beq.n	8021e70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021e48:	f7fe ffe4 	bl	8020e14 <HAL_GetTick>
 8021e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8021e4e:	e008      	b.n	8021e62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8021e50:	f7fe ffe0 	bl	8020e14 <HAL_GetTick>
 8021e54:	4602      	mov	r2, r0
 8021e56:	693b      	ldr	r3, [r7, #16]
 8021e58:	1ad3      	subs	r3, r2, r3
 8021e5a:	2b64      	cmp	r3, #100	; 0x64
 8021e5c:	d901      	bls.n	8021e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8021e5e:	2303      	movs	r3, #3
 8021e60:	e229      	b.n	80222b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8021e62:	4b61      	ldr	r3, [pc, #388]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021e64:	681b      	ldr	r3, [r3, #0]
 8021e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021e6a:	2b00      	cmp	r3, #0
 8021e6c:	d0f0      	beq.n	8021e50 <HAL_RCC_OscConfig+0xe8>
 8021e6e:	e014      	b.n	8021e9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021e70:	f7fe ffd0 	bl	8020e14 <HAL_GetTick>
 8021e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8021e76:	e008      	b.n	8021e8a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8021e78:	f7fe ffcc 	bl	8020e14 <HAL_GetTick>
 8021e7c:	4602      	mov	r2, r0
 8021e7e:	693b      	ldr	r3, [r7, #16]
 8021e80:	1ad3      	subs	r3, r2, r3
 8021e82:	2b64      	cmp	r3, #100	; 0x64
 8021e84:	d901      	bls.n	8021e8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8021e86:	2303      	movs	r3, #3
 8021e88:	e215      	b.n	80222b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8021e8a:	4b57      	ldr	r3, [pc, #348]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021e8c:	681b      	ldr	r3, [r3, #0]
 8021e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021e92:	2b00      	cmp	r3, #0
 8021e94:	d1f0      	bne.n	8021e78 <HAL_RCC_OscConfig+0x110>
 8021e96:	e000      	b.n	8021e9a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8021e9a:	687b      	ldr	r3, [r7, #4]
 8021e9c:	681b      	ldr	r3, [r3, #0]
 8021e9e:	f003 0302 	and.w	r3, r3, #2
 8021ea2:	2b00      	cmp	r3, #0
 8021ea4:	d069      	beq.n	8021f7a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8021ea6:	4b50      	ldr	r3, [pc, #320]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021ea8:	689b      	ldr	r3, [r3, #8]
 8021eaa:	f003 030c 	and.w	r3, r3, #12
 8021eae:	2b00      	cmp	r3, #0
 8021eb0:	d00b      	beq.n	8021eca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8021eb2:	4b4d      	ldr	r3, [pc, #308]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021eb4:	689b      	ldr	r3, [r3, #8]
 8021eb6:	f003 030c 	and.w	r3, r3, #12
 8021eba:	2b08      	cmp	r3, #8
 8021ebc:	d11c      	bne.n	8021ef8 <HAL_RCC_OscConfig+0x190>
 8021ebe:	4b4a      	ldr	r3, [pc, #296]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021ec0:	685b      	ldr	r3, [r3, #4]
 8021ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8021ec6:	2b00      	cmp	r3, #0
 8021ec8:	d116      	bne.n	8021ef8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8021eca:	4b47      	ldr	r3, [pc, #284]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021ecc:	681b      	ldr	r3, [r3, #0]
 8021ece:	f003 0302 	and.w	r3, r3, #2
 8021ed2:	2b00      	cmp	r3, #0
 8021ed4:	d005      	beq.n	8021ee2 <HAL_RCC_OscConfig+0x17a>
 8021ed6:	687b      	ldr	r3, [r7, #4]
 8021ed8:	68db      	ldr	r3, [r3, #12]
 8021eda:	2b01      	cmp	r3, #1
 8021edc:	d001      	beq.n	8021ee2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8021ede:	2301      	movs	r3, #1
 8021ee0:	e1e9      	b.n	80222b6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021ee2:	4b41      	ldr	r3, [pc, #260]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021ee4:	681b      	ldr	r3, [r3, #0]
 8021ee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8021eea:	687b      	ldr	r3, [r7, #4]
 8021eec:	691b      	ldr	r3, [r3, #16]
 8021eee:	00db      	lsls	r3, r3, #3
 8021ef0:	493d      	ldr	r1, [pc, #244]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021ef2:	4313      	orrs	r3, r2
 8021ef4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8021ef6:	e040      	b.n	8021f7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8021ef8:	687b      	ldr	r3, [r7, #4]
 8021efa:	68db      	ldr	r3, [r3, #12]
 8021efc:	2b00      	cmp	r3, #0
 8021efe:	d023      	beq.n	8021f48 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8021f00:	4b39      	ldr	r3, [pc, #228]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021f02:	681b      	ldr	r3, [r3, #0]
 8021f04:	4a38      	ldr	r2, [pc, #224]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021f06:	f043 0301 	orr.w	r3, r3, #1
 8021f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021f0c:	f7fe ff82 	bl	8020e14 <HAL_GetTick>
 8021f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8021f12:	e008      	b.n	8021f26 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8021f14:	f7fe ff7e 	bl	8020e14 <HAL_GetTick>
 8021f18:	4602      	mov	r2, r0
 8021f1a:	693b      	ldr	r3, [r7, #16]
 8021f1c:	1ad3      	subs	r3, r2, r3
 8021f1e:	2b02      	cmp	r3, #2
 8021f20:	d901      	bls.n	8021f26 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8021f22:	2303      	movs	r3, #3
 8021f24:	e1c7      	b.n	80222b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8021f26:	4b30      	ldr	r3, [pc, #192]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021f28:	681b      	ldr	r3, [r3, #0]
 8021f2a:	f003 0302 	and.w	r3, r3, #2
 8021f2e:	2b00      	cmp	r3, #0
 8021f30:	d0f0      	beq.n	8021f14 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021f32:	4b2d      	ldr	r3, [pc, #180]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021f34:	681b      	ldr	r3, [r3, #0]
 8021f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8021f3a:	687b      	ldr	r3, [r7, #4]
 8021f3c:	691b      	ldr	r3, [r3, #16]
 8021f3e:	00db      	lsls	r3, r3, #3
 8021f40:	4929      	ldr	r1, [pc, #164]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021f42:	4313      	orrs	r3, r2
 8021f44:	600b      	str	r3, [r1, #0]
 8021f46:	e018      	b.n	8021f7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8021f48:	4b27      	ldr	r3, [pc, #156]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021f4a:	681b      	ldr	r3, [r3, #0]
 8021f4c:	4a26      	ldr	r2, [pc, #152]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021f4e:	f023 0301 	bic.w	r3, r3, #1
 8021f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021f54:	f7fe ff5e 	bl	8020e14 <HAL_GetTick>
 8021f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8021f5a:	e008      	b.n	8021f6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8021f5c:	f7fe ff5a 	bl	8020e14 <HAL_GetTick>
 8021f60:	4602      	mov	r2, r0
 8021f62:	693b      	ldr	r3, [r7, #16]
 8021f64:	1ad3      	subs	r3, r2, r3
 8021f66:	2b02      	cmp	r3, #2
 8021f68:	d901      	bls.n	8021f6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8021f6a:	2303      	movs	r3, #3
 8021f6c:	e1a3      	b.n	80222b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8021f6e:	4b1e      	ldr	r3, [pc, #120]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021f70:	681b      	ldr	r3, [r3, #0]
 8021f72:	f003 0302 	and.w	r3, r3, #2
 8021f76:	2b00      	cmp	r3, #0
 8021f78:	d1f0      	bne.n	8021f5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8021f7a:	687b      	ldr	r3, [r7, #4]
 8021f7c:	681b      	ldr	r3, [r3, #0]
 8021f7e:	f003 0308 	and.w	r3, r3, #8
 8021f82:	2b00      	cmp	r3, #0
 8021f84:	d038      	beq.n	8021ff8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8021f86:	687b      	ldr	r3, [r7, #4]
 8021f88:	695b      	ldr	r3, [r3, #20]
 8021f8a:	2b00      	cmp	r3, #0
 8021f8c:	d019      	beq.n	8021fc2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8021f8e:	4b16      	ldr	r3, [pc, #88]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8021f92:	4a15      	ldr	r2, [pc, #84]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021f94:	f043 0301 	orr.w	r3, r3, #1
 8021f98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021f9a:	f7fe ff3b 	bl	8020e14 <HAL_GetTick>
 8021f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8021fa0:	e008      	b.n	8021fb4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8021fa2:	f7fe ff37 	bl	8020e14 <HAL_GetTick>
 8021fa6:	4602      	mov	r2, r0
 8021fa8:	693b      	ldr	r3, [r7, #16]
 8021faa:	1ad3      	subs	r3, r2, r3
 8021fac:	2b02      	cmp	r3, #2
 8021fae:	d901      	bls.n	8021fb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8021fb0:	2303      	movs	r3, #3
 8021fb2:	e180      	b.n	80222b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8021fb4:	4b0c      	ldr	r3, [pc, #48]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8021fb8:	f003 0302 	and.w	r3, r3, #2
 8021fbc:	2b00      	cmp	r3, #0
 8021fbe:	d0f0      	beq.n	8021fa2 <HAL_RCC_OscConfig+0x23a>
 8021fc0:	e01a      	b.n	8021ff8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8021fc2:	4b09      	ldr	r3, [pc, #36]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8021fc6:	4a08      	ldr	r2, [pc, #32]	; (8021fe8 <HAL_RCC_OscConfig+0x280>)
 8021fc8:	f023 0301 	bic.w	r3, r3, #1
 8021fcc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021fce:	f7fe ff21 	bl	8020e14 <HAL_GetTick>
 8021fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8021fd4:	e00a      	b.n	8021fec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8021fd6:	f7fe ff1d 	bl	8020e14 <HAL_GetTick>
 8021fda:	4602      	mov	r2, r0
 8021fdc:	693b      	ldr	r3, [r7, #16]
 8021fde:	1ad3      	subs	r3, r2, r3
 8021fe0:	2b02      	cmp	r3, #2
 8021fe2:	d903      	bls.n	8021fec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8021fe4:	2303      	movs	r3, #3
 8021fe6:	e166      	b.n	80222b6 <HAL_RCC_OscConfig+0x54e>
 8021fe8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8021fec:	4b92      	ldr	r3, [pc, #584]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 8021fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8021ff0:	f003 0302 	and.w	r3, r3, #2
 8021ff4:	2b00      	cmp	r3, #0
 8021ff6:	d1ee      	bne.n	8021fd6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8021ff8:	687b      	ldr	r3, [r7, #4]
 8021ffa:	681b      	ldr	r3, [r3, #0]
 8021ffc:	f003 0304 	and.w	r3, r3, #4
 8022000:	2b00      	cmp	r3, #0
 8022002:	f000 80a4 	beq.w	802214e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8022006:	4b8c      	ldr	r3, [pc, #560]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 8022008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802200e:	2b00      	cmp	r3, #0
 8022010:	d10d      	bne.n	802202e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8022012:	4b89      	ldr	r3, [pc, #548]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 8022014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022016:	4a88      	ldr	r2, [pc, #544]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 8022018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802201c:	6413      	str	r3, [r2, #64]	; 0x40
 802201e:	4b86      	ldr	r3, [pc, #536]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 8022020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022026:	60bb      	str	r3, [r7, #8]
 8022028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 802202a:	2301      	movs	r3, #1
 802202c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 802202e:	4b83      	ldr	r3, [pc, #524]	; (802223c <HAL_RCC_OscConfig+0x4d4>)
 8022030:	681b      	ldr	r3, [r3, #0]
 8022032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022036:	2b00      	cmp	r3, #0
 8022038:	d118      	bne.n	802206c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 802203a:	4b80      	ldr	r3, [pc, #512]	; (802223c <HAL_RCC_OscConfig+0x4d4>)
 802203c:	681b      	ldr	r3, [r3, #0]
 802203e:	4a7f      	ldr	r2, [pc, #508]	; (802223c <HAL_RCC_OscConfig+0x4d4>)
 8022040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8022044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8022046:	f7fe fee5 	bl	8020e14 <HAL_GetTick>
 802204a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 802204c:	e008      	b.n	8022060 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802204e:	f7fe fee1 	bl	8020e14 <HAL_GetTick>
 8022052:	4602      	mov	r2, r0
 8022054:	693b      	ldr	r3, [r7, #16]
 8022056:	1ad3      	subs	r3, r2, r3
 8022058:	2b64      	cmp	r3, #100	; 0x64
 802205a:	d901      	bls.n	8022060 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 802205c:	2303      	movs	r3, #3
 802205e:	e12a      	b.n	80222b6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8022060:	4b76      	ldr	r3, [pc, #472]	; (802223c <HAL_RCC_OscConfig+0x4d4>)
 8022062:	681b      	ldr	r3, [r3, #0]
 8022064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022068:	2b00      	cmp	r3, #0
 802206a:	d0f0      	beq.n	802204e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802206c:	687b      	ldr	r3, [r7, #4]
 802206e:	689b      	ldr	r3, [r3, #8]
 8022070:	2b01      	cmp	r3, #1
 8022072:	d106      	bne.n	8022082 <HAL_RCC_OscConfig+0x31a>
 8022074:	4b70      	ldr	r3, [pc, #448]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 8022076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022078:	4a6f      	ldr	r2, [pc, #444]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 802207a:	f043 0301 	orr.w	r3, r3, #1
 802207e:	6713      	str	r3, [r2, #112]	; 0x70
 8022080:	e02d      	b.n	80220de <HAL_RCC_OscConfig+0x376>
 8022082:	687b      	ldr	r3, [r7, #4]
 8022084:	689b      	ldr	r3, [r3, #8]
 8022086:	2b00      	cmp	r3, #0
 8022088:	d10c      	bne.n	80220a4 <HAL_RCC_OscConfig+0x33c>
 802208a:	4b6b      	ldr	r3, [pc, #428]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 802208c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802208e:	4a6a      	ldr	r2, [pc, #424]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 8022090:	f023 0301 	bic.w	r3, r3, #1
 8022094:	6713      	str	r3, [r2, #112]	; 0x70
 8022096:	4b68      	ldr	r3, [pc, #416]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 8022098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802209a:	4a67      	ldr	r2, [pc, #412]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 802209c:	f023 0304 	bic.w	r3, r3, #4
 80220a0:	6713      	str	r3, [r2, #112]	; 0x70
 80220a2:	e01c      	b.n	80220de <HAL_RCC_OscConfig+0x376>
 80220a4:	687b      	ldr	r3, [r7, #4]
 80220a6:	689b      	ldr	r3, [r3, #8]
 80220a8:	2b05      	cmp	r3, #5
 80220aa:	d10c      	bne.n	80220c6 <HAL_RCC_OscConfig+0x35e>
 80220ac:	4b62      	ldr	r3, [pc, #392]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 80220ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80220b0:	4a61      	ldr	r2, [pc, #388]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 80220b2:	f043 0304 	orr.w	r3, r3, #4
 80220b6:	6713      	str	r3, [r2, #112]	; 0x70
 80220b8:	4b5f      	ldr	r3, [pc, #380]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 80220ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80220bc:	4a5e      	ldr	r2, [pc, #376]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 80220be:	f043 0301 	orr.w	r3, r3, #1
 80220c2:	6713      	str	r3, [r2, #112]	; 0x70
 80220c4:	e00b      	b.n	80220de <HAL_RCC_OscConfig+0x376>
 80220c6:	4b5c      	ldr	r3, [pc, #368]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 80220c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80220ca:	4a5b      	ldr	r2, [pc, #364]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 80220cc:	f023 0301 	bic.w	r3, r3, #1
 80220d0:	6713      	str	r3, [r2, #112]	; 0x70
 80220d2:	4b59      	ldr	r3, [pc, #356]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 80220d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80220d6:	4a58      	ldr	r2, [pc, #352]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 80220d8:	f023 0304 	bic.w	r3, r3, #4
 80220dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80220de:	687b      	ldr	r3, [r7, #4]
 80220e0:	689b      	ldr	r3, [r3, #8]
 80220e2:	2b00      	cmp	r3, #0
 80220e4:	d015      	beq.n	8022112 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80220e6:	f7fe fe95 	bl	8020e14 <HAL_GetTick>
 80220ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80220ec:	e00a      	b.n	8022104 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80220ee:	f7fe fe91 	bl	8020e14 <HAL_GetTick>
 80220f2:	4602      	mov	r2, r0
 80220f4:	693b      	ldr	r3, [r7, #16]
 80220f6:	1ad3      	subs	r3, r2, r3
 80220f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80220fc:	4293      	cmp	r3, r2
 80220fe:	d901      	bls.n	8022104 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8022100:	2303      	movs	r3, #3
 8022102:	e0d8      	b.n	80222b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8022104:	4b4c      	ldr	r3, [pc, #304]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 8022106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022108:	f003 0302 	and.w	r3, r3, #2
 802210c:	2b00      	cmp	r3, #0
 802210e:	d0ee      	beq.n	80220ee <HAL_RCC_OscConfig+0x386>
 8022110:	e014      	b.n	802213c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8022112:	f7fe fe7f 	bl	8020e14 <HAL_GetTick>
 8022116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8022118:	e00a      	b.n	8022130 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802211a:	f7fe fe7b 	bl	8020e14 <HAL_GetTick>
 802211e:	4602      	mov	r2, r0
 8022120:	693b      	ldr	r3, [r7, #16]
 8022122:	1ad3      	subs	r3, r2, r3
 8022124:	f241 3288 	movw	r2, #5000	; 0x1388
 8022128:	4293      	cmp	r3, r2
 802212a:	d901      	bls.n	8022130 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 802212c:	2303      	movs	r3, #3
 802212e:	e0c2      	b.n	80222b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8022130:	4b41      	ldr	r3, [pc, #260]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 8022132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022134:	f003 0302 	and.w	r3, r3, #2
 8022138:	2b00      	cmp	r3, #0
 802213a:	d1ee      	bne.n	802211a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 802213c:	7dfb      	ldrb	r3, [r7, #23]
 802213e:	2b01      	cmp	r3, #1
 8022140:	d105      	bne.n	802214e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8022142:	4b3d      	ldr	r3, [pc, #244]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 8022144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022146:	4a3c      	ldr	r2, [pc, #240]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 8022148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802214c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 802214e:	687b      	ldr	r3, [r7, #4]
 8022150:	699b      	ldr	r3, [r3, #24]
 8022152:	2b00      	cmp	r3, #0
 8022154:	f000 80ae 	beq.w	80222b4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8022158:	4b37      	ldr	r3, [pc, #220]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 802215a:	689b      	ldr	r3, [r3, #8]
 802215c:	f003 030c 	and.w	r3, r3, #12
 8022160:	2b08      	cmp	r3, #8
 8022162:	d06d      	beq.n	8022240 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8022164:	687b      	ldr	r3, [r7, #4]
 8022166:	699b      	ldr	r3, [r3, #24]
 8022168:	2b02      	cmp	r3, #2
 802216a:	d14b      	bne.n	8022204 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802216c:	4b32      	ldr	r3, [pc, #200]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 802216e:	681b      	ldr	r3, [r3, #0]
 8022170:	4a31      	ldr	r2, [pc, #196]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 8022172:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8022176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8022178:	f7fe fe4c 	bl	8020e14 <HAL_GetTick>
 802217c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802217e:	e008      	b.n	8022192 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8022180:	f7fe fe48 	bl	8020e14 <HAL_GetTick>
 8022184:	4602      	mov	r2, r0
 8022186:	693b      	ldr	r3, [r7, #16]
 8022188:	1ad3      	subs	r3, r2, r3
 802218a:	2b02      	cmp	r3, #2
 802218c:	d901      	bls.n	8022192 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 802218e:	2303      	movs	r3, #3
 8022190:	e091      	b.n	80222b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8022192:	4b29      	ldr	r3, [pc, #164]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 8022194:	681b      	ldr	r3, [r3, #0]
 8022196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802219a:	2b00      	cmp	r3, #0
 802219c:	d1f0      	bne.n	8022180 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 802219e:	687b      	ldr	r3, [r7, #4]
 80221a0:	69da      	ldr	r2, [r3, #28]
 80221a2:	687b      	ldr	r3, [r7, #4]
 80221a4:	6a1b      	ldr	r3, [r3, #32]
 80221a6:	431a      	orrs	r2, r3
 80221a8:	687b      	ldr	r3, [r7, #4]
 80221aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80221ac:	019b      	lsls	r3, r3, #6
 80221ae:	431a      	orrs	r2, r3
 80221b0:	687b      	ldr	r3, [r7, #4]
 80221b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80221b4:	085b      	lsrs	r3, r3, #1
 80221b6:	3b01      	subs	r3, #1
 80221b8:	041b      	lsls	r3, r3, #16
 80221ba:	431a      	orrs	r2, r3
 80221bc:	687b      	ldr	r3, [r7, #4]
 80221be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80221c0:	061b      	lsls	r3, r3, #24
 80221c2:	431a      	orrs	r2, r3
 80221c4:	687b      	ldr	r3, [r7, #4]
 80221c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80221c8:	071b      	lsls	r3, r3, #28
 80221ca:	491b      	ldr	r1, [pc, #108]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 80221cc:	4313      	orrs	r3, r2
 80221ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80221d0:	4b19      	ldr	r3, [pc, #100]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 80221d2:	681b      	ldr	r3, [r3, #0]
 80221d4:	4a18      	ldr	r2, [pc, #96]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 80221d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80221da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80221dc:	f7fe fe1a 	bl	8020e14 <HAL_GetTick>
 80221e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80221e2:	e008      	b.n	80221f6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80221e4:	f7fe fe16 	bl	8020e14 <HAL_GetTick>
 80221e8:	4602      	mov	r2, r0
 80221ea:	693b      	ldr	r3, [r7, #16]
 80221ec:	1ad3      	subs	r3, r2, r3
 80221ee:	2b02      	cmp	r3, #2
 80221f0:	d901      	bls.n	80221f6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80221f2:	2303      	movs	r3, #3
 80221f4:	e05f      	b.n	80222b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80221f6:	4b10      	ldr	r3, [pc, #64]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 80221f8:	681b      	ldr	r3, [r3, #0]
 80221fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80221fe:	2b00      	cmp	r3, #0
 8022200:	d0f0      	beq.n	80221e4 <HAL_RCC_OscConfig+0x47c>
 8022202:	e057      	b.n	80222b4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8022204:	4b0c      	ldr	r3, [pc, #48]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 8022206:	681b      	ldr	r3, [r3, #0]
 8022208:	4a0b      	ldr	r2, [pc, #44]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 802220a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 802220e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8022210:	f7fe fe00 	bl	8020e14 <HAL_GetTick>
 8022214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8022216:	e008      	b.n	802222a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8022218:	f7fe fdfc 	bl	8020e14 <HAL_GetTick>
 802221c:	4602      	mov	r2, r0
 802221e:	693b      	ldr	r3, [r7, #16]
 8022220:	1ad3      	subs	r3, r2, r3
 8022222:	2b02      	cmp	r3, #2
 8022224:	d901      	bls.n	802222a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8022226:	2303      	movs	r3, #3
 8022228:	e045      	b.n	80222b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802222a:	4b03      	ldr	r3, [pc, #12]	; (8022238 <HAL_RCC_OscConfig+0x4d0>)
 802222c:	681b      	ldr	r3, [r3, #0]
 802222e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8022232:	2b00      	cmp	r3, #0
 8022234:	d1f0      	bne.n	8022218 <HAL_RCC_OscConfig+0x4b0>
 8022236:	e03d      	b.n	80222b4 <HAL_RCC_OscConfig+0x54c>
 8022238:	40023800 	.word	0x40023800
 802223c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8022240:	4b1f      	ldr	r3, [pc, #124]	; (80222c0 <HAL_RCC_OscConfig+0x558>)
 8022242:	685b      	ldr	r3, [r3, #4]
 8022244:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8022246:	687b      	ldr	r3, [r7, #4]
 8022248:	699b      	ldr	r3, [r3, #24]
 802224a:	2b01      	cmp	r3, #1
 802224c:	d030      	beq.n	80222b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802224e:	68fb      	ldr	r3, [r7, #12]
 8022250:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8022254:	687b      	ldr	r3, [r7, #4]
 8022256:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8022258:	429a      	cmp	r2, r3
 802225a:	d129      	bne.n	80222b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 802225c:	68fb      	ldr	r3, [r7, #12]
 802225e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8022262:	687b      	ldr	r3, [r7, #4]
 8022264:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8022266:	429a      	cmp	r2, r3
 8022268:	d122      	bne.n	80222b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 802226a:	68fa      	ldr	r2, [r7, #12]
 802226c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8022270:	4013      	ands	r3, r2
 8022272:	687a      	ldr	r2, [r7, #4]
 8022274:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8022276:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8022278:	4293      	cmp	r3, r2
 802227a:	d119      	bne.n	80222b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 802227c:	68fb      	ldr	r3, [r7, #12]
 802227e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8022282:	687b      	ldr	r3, [r7, #4]
 8022284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022286:	085b      	lsrs	r3, r3, #1
 8022288:	3b01      	subs	r3, #1
 802228a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 802228c:	429a      	cmp	r2, r3
 802228e:	d10f      	bne.n	80222b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8022290:	68fb      	ldr	r3, [r7, #12]
 8022292:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8022296:	687b      	ldr	r3, [r7, #4]
 8022298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802229a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 802229c:	429a      	cmp	r2, r3
 802229e:	d107      	bne.n	80222b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80222a0:	68fb      	ldr	r3, [r7, #12]
 80222a2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80222a6:	687b      	ldr	r3, [r7, #4]
 80222a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80222aa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80222ac:	429a      	cmp	r2, r3
 80222ae:	d001      	beq.n	80222b4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80222b0:	2301      	movs	r3, #1
 80222b2:	e000      	b.n	80222b6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80222b4:	2300      	movs	r3, #0
}
 80222b6:	4618      	mov	r0, r3
 80222b8:	3718      	adds	r7, #24
 80222ba:	46bd      	mov	sp, r7
 80222bc:	bd80      	pop	{r7, pc}
 80222be:	bf00      	nop
 80222c0:	40023800 	.word	0x40023800

080222c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80222c4:	b580      	push	{r7, lr}
 80222c6:	b084      	sub	sp, #16
 80222c8:	af00      	add	r7, sp, #0
 80222ca:	6078      	str	r0, [r7, #4]
 80222cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80222ce:	2300      	movs	r3, #0
 80222d0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80222d2:	687b      	ldr	r3, [r7, #4]
 80222d4:	2b00      	cmp	r3, #0
 80222d6:	d101      	bne.n	80222dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80222d8:	2301      	movs	r3, #1
 80222da:	e0d0      	b.n	802247e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80222dc:	4b6a      	ldr	r3, [pc, #424]	; (8022488 <HAL_RCC_ClockConfig+0x1c4>)
 80222de:	681b      	ldr	r3, [r3, #0]
 80222e0:	f003 030f 	and.w	r3, r3, #15
 80222e4:	683a      	ldr	r2, [r7, #0]
 80222e6:	429a      	cmp	r2, r3
 80222e8:	d910      	bls.n	802230c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80222ea:	4b67      	ldr	r3, [pc, #412]	; (8022488 <HAL_RCC_ClockConfig+0x1c4>)
 80222ec:	681b      	ldr	r3, [r3, #0]
 80222ee:	f023 020f 	bic.w	r2, r3, #15
 80222f2:	4965      	ldr	r1, [pc, #404]	; (8022488 <HAL_RCC_ClockConfig+0x1c4>)
 80222f4:	683b      	ldr	r3, [r7, #0]
 80222f6:	4313      	orrs	r3, r2
 80222f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80222fa:	4b63      	ldr	r3, [pc, #396]	; (8022488 <HAL_RCC_ClockConfig+0x1c4>)
 80222fc:	681b      	ldr	r3, [r3, #0]
 80222fe:	f003 030f 	and.w	r3, r3, #15
 8022302:	683a      	ldr	r2, [r7, #0]
 8022304:	429a      	cmp	r2, r3
 8022306:	d001      	beq.n	802230c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8022308:	2301      	movs	r3, #1
 802230a:	e0b8      	b.n	802247e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802230c:	687b      	ldr	r3, [r7, #4]
 802230e:	681b      	ldr	r3, [r3, #0]
 8022310:	f003 0302 	and.w	r3, r3, #2
 8022314:	2b00      	cmp	r3, #0
 8022316:	d020      	beq.n	802235a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8022318:	687b      	ldr	r3, [r7, #4]
 802231a:	681b      	ldr	r3, [r3, #0]
 802231c:	f003 0304 	and.w	r3, r3, #4
 8022320:	2b00      	cmp	r3, #0
 8022322:	d005      	beq.n	8022330 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8022324:	4b59      	ldr	r3, [pc, #356]	; (802248c <HAL_RCC_ClockConfig+0x1c8>)
 8022326:	689b      	ldr	r3, [r3, #8]
 8022328:	4a58      	ldr	r2, [pc, #352]	; (802248c <HAL_RCC_ClockConfig+0x1c8>)
 802232a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 802232e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8022330:	687b      	ldr	r3, [r7, #4]
 8022332:	681b      	ldr	r3, [r3, #0]
 8022334:	f003 0308 	and.w	r3, r3, #8
 8022338:	2b00      	cmp	r3, #0
 802233a:	d005      	beq.n	8022348 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 802233c:	4b53      	ldr	r3, [pc, #332]	; (802248c <HAL_RCC_ClockConfig+0x1c8>)
 802233e:	689b      	ldr	r3, [r3, #8]
 8022340:	4a52      	ldr	r2, [pc, #328]	; (802248c <HAL_RCC_ClockConfig+0x1c8>)
 8022342:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8022346:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8022348:	4b50      	ldr	r3, [pc, #320]	; (802248c <HAL_RCC_ClockConfig+0x1c8>)
 802234a:	689b      	ldr	r3, [r3, #8]
 802234c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8022350:	687b      	ldr	r3, [r7, #4]
 8022352:	689b      	ldr	r3, [r3, #8]
 8022354:	494d      	ldr	r1, [pc, #308]	; (802248c <HAL_RCC_ClockConfig+0x1c8>)
 8022356:	4313      	orrs	r3, r2
 8022358:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802235a:	687b      	ldr	r3, [r7, #4]
 802235c:	681b      	ldr	r3, [r3, #0]
 802235e:	f003 0301 	and.w	r3, r3, #1
 8022362:	2b00      	cmp	r3, #0
 8022364:	d040      	beq.n	80223e8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8022366:	687b      	ldr	r3, [r7, #4]
 8022368:	685b      	ldr	r3, [r3, #4]
 802236a:	2b01      	cmp	r3, #1
 802236c:	d107      	bne.n	802237e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802236e:	4b47      	ldr	r3, [pc, #284]	; (802248c <HAL_RCC_ClockConfig+0x1c8>)
 8022370:	681b      	ldr	r3, [r3, #0]
 8022372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8022376:	2b00      	cmp	r3, #0
 8022378:	d115      	bne.n	80223a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 802237a:	2301      	movs	r3, #1
 802237c:	e07f      	b.n	802247e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 802237e:	687b      	ldr	r3, [r7, #4]
 8022380:	685b      	ldr	r3, [r3, #4]
 8022382:	2b02      	cmp	r3, #2
 8022384:	d107      	bne.n	8022396 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8022386:	4b41      	ldr	r3, [pc, #260]	; (802248c <HAL_RCC_ClockConfig+0x1c8>)
 8022388:	681b      	ldr	r3, [r3, #0]
 802238a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802238e:	2b00      	cmp	r3, #0
 8022390:	d109      	bne.n	80223a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8022392:	2301      	movs	r3, #1
 8022394:	e073      	b.n	802247e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8022396:	4b3d      	ldr	r3, [pc, #244]	; (802248c <HAL_RCC_ClockConfig+0x1c8>)
 8022398:	681b      	ldr	r3, [r3, #0]
 802239a:	f003 0302 	and.w	r3, r3, #2
 802239e:	2b00      	cmp	r3, #0
 80223a0:	d101      	bne.n	80223a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80223a2:	2301      	movs	r3, #1
 80223a4:	e06b      	b.n	802247e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80223a6:	4b39      	ldr	r3, [pc, #228]	; (802248c <HAL_RCC_ClockConfig+0x1c8>)
 80223a8:	689b      	ldr	r3, [r3, #8]
 80223aa:	f023 0203 	bic.w	r2, r3, #3
 80223ae:	687b      	ldr	r3, [r7, #4]
 80223b0:	685b      	ldr	r3, [r3, #4]
 80223b2:	4936      	ldr	r1, [pc, #216]	; (802248c <HAL_RCC_ClockConfig+0x1c8>)
 80223b4:	4313      	orrs	r3, r2
 80223b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80223b8:	f7fe fd2c 	bl	8020e14 <HAL_GetTick>
 80223bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80223be:	e00a      	b.n	80223d6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80223c0:	f7fe fd28 	bl	8020e14 <HAL_GetTick>
 80223c4:	4602      	mov	r2, r0
 80223c6:	68fb      	ldr	r3, [r7, #12]
 80223c8:	1ad3      	subs	r3, r2, r3
 80223ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80223ce:	4293      	cmp	r3, r2
 80223d0:	d901      	bls.n	80223d6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80223d2:	2303      	movs	r3, #3
 80223d4:	e053      	b.n	802247e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80223d6:	4b2d      	ldr	r3, [pc, #180]	; (802248c <HAL_RCC_ClockConfig+0x1c8>)
 80223d8:	689b      	ldr	r3, [r3, #8]
 80223da:	f003 020c 	and.w	r2, r3, #12
 80223de:	687b      	ldr	r3, [r7, #4]
 80223e0:	685b      	ldr	r3, [r3, #4]
 80223e2:	009b      	lsls	r3, r3, #2
 80223e4:	429a      	cmp	r2, r3
 80223e6:	d1eb      	bne.n	80223c0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80223e8:	4b27      	ldr	r3, [pc, #156]	; (8022488 <HAL_RCC_ClockConfig+0x1c4>)
 80223ea:	681b      	ldr	r3, [r3, #0]
 80223ec:	f003 030f 	and.w	r3, r3, #15
 80223f0:	683a      	ldr	r2, [r7, #0]
 80223f2:	429a      	cmp	r2, r3
 80223f4:	d210      	bcs.n	8022418 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80223f6:	4b24      	ldr	r3, [pc, #144]	; (8022488 <HAL_RCC_ClockConfig+0x1c4>)
 80223f8:	681b      	ldr	r3, [r3, #0]
 80223fa:	f023 020f 	bic.w	r2, r3, #15
 80223fe:	4922      	ldr	r1, [pc, #136]	; (8022488 <HAL_RCC_ClockConfig+0x1c4>)
 8022400:	683b      	ldr	r3, [r7, #0]
 8022402:	4313      	orrs	r3, r2
 8022404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8022406:	4b20      	ldr	r3, [pc, #128]	; (8022488 <HAL_RCC_ClockConfig+0x1c4>)
 8022408:	681b      	ldr	r3, [r3, #0]
 802240a:	f003 030f 	and.w	r3, r3, #15
 802240e:	683a      	ldr	r2, [r7, #0]
 8022410:	429a      	cmp	r2, r3
 8022412:	d001      	beq.n	8022418 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8022414:	2301      	movs	r3, #1
 8022416:	e032      	b.n	802247e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8022418:	687b      	ldr	r3, [r7, #4]
 802241a:	681b      	ldr	r3, [r3, #0]
 802241c:	f003 0304 	and.w	r3, r3, #4
 8022420:	2b00      	cmp	r3, #0
 8022422:	d008      	beq.n	8022436 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8022424:	4b19      	ldr	r3, [pc, #100]	; (802248c <HAL_RCC_ClockConfig+0x1c8>)
 8022426:	689b      	ldr	r3, [r3, #8]
 8022428:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 802242c:	687b      	ldr	r3, [r7, #4]
 802242e:	68db      	ldr	r3, [r3, #12]
 8022430:	4916      	ldr	r1, [pc, #88]	; (802248c <HAL_RCC_ClockConfig+0x1c8>)
 8022432:	4313      	orrs	r3, r2
 8022434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8022436:	687b      	ldr	r3, [r7, #4]
 8022438:	681b      	ldr	r3, [r3, #0]
 802243a:	f003 0308 	and.w	r3, r3, #8
 802243e:	2b00      	cmp	r3, #0
 8022440:	d009      	beq.n	8022456 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8022442:	4b12      	ldr	r3, [pc, #72]	; (802248c <HAL_RCC_ClockConfig+0x1c8>)
 8022444:	689b      	ldr	r3, [r3, #8]
 8022446:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 802244a:	687b      	ldr	r3, [r7, #4]
 802244c:	691b      	ldr	r3, [r3, #16]
 802244e:	00db      	lsls	r3, r3, #3
 8022450:	490e      	ldr	r1, [pc, #56]	; (802248c <HAL_RCC_ClockConfig+0x1c8>)
 8022452:	4313      	orrs	r3, r2
 8022454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8022456:	f000 f821 	bl	802249c <HAL_RCC_GetSysClockFreq>
 802245a:	4602      	mov	r2, r0
 802245c:	4b0b      	ldr	r3, [pc, #44]	; (802248c <HAL_RCC_ClockConfig+0x1c8>)
 802245e:	689b      	ldr	r3, [r3, #8]
 8022460:	091b      	lsrs	r3, r3, #4
 8022462:	f003 030f 	and.w	r3, r3, #15
 8022466:	490a      	ldr	r1, [pc, #40]	; (8022490 <HAL_RCC_ClockConfig+0x1cc>)
 8022468:	5ccb      	ldrb	r3, [r1, r3]
 802246a:	fa22 f303 	lsr.w	r3, r2, r3
 802246e:	4a09      	ldr	r2, [pc, #36]	; (8022494 <HAL_RCC_ClockConfig+0x1d0>)
 8022470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8022472:	4b09      	ldr	r3, [pc, #36]	; (8022498 <HAL_RCC_ClockConfig+0x1d4>)
 8022474:	681b      	ldr	r3, [r3, #0]
 8022476:	4618      	mov	r0, r3
 8022478:	f7fe fc88 	bl	8020d8c <HAL_InitTick>

  return HAL_OK;
 802247c:	2300      	movs	r3, #0
}
 802247e:	4618      	mov	r0, r3
 8022480:	3710      	adds	r7, #16
 8022482:	46bd      	mov	sp, r7
 8022484:	bd80      	pop	{r7, pc}
 8022486:	bf00      	nop
 8022488:	40023c00 	.word	0x40023c00
 802248c:	40023800 	.word	0x40023800
 8022490:	08023e88 	.word	0x08023e88
 8022494:	20000000 	.word	0x20000000
 8022498:	20000004 	.word	0x20000004

0802249c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 802249c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80224a0:	b094      	sub	sp, #80	; 0x50
 80224a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80224a4:	2300      	movs	r3, #0
 80224a6:	647b      	str	r3, [r7, #68]	; 0x44
 80224a8:	2300      	movs	r3, #0
 80224aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80224ac:	2300      	movs	r3, #0
 80224ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80224b0:	2300      	movs	r3, #0
 80224b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80224b4:	4b79      	ldr	r3, [pc, #484]	; (802269c <HAL_RCC_GetSysClockFreq+0x200>)
 80224b6:	689b      	ldr	r3, [r3, #8]
 80224b8:	f003 030c 	and.w	r3, r3, #12
 80224bc:	2b08      	cmp	r3, #8
 80224be:	d00d      	beq.n	80224dc <HAL_RCC_GetSysClockFreq+0x40>
 80224c0:	2b08      	cmp	r3, #8
 80224c2:	f200 80e1 	bhi.w	8022688 <HAL_RCC_GetSysClockFreq+0x1ec>
 80224c6:	2b00      	cmp	r3, #0
 80224c8:	d002      	beq.n	80224d0 <HAL_RCC_GetSysClockFreq+0x34>
 80224ca:	2b04      	cmp	r3, #4
 80224cc:	d003      	beq.n	80224d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80224ce:	e0db      	b.n	8022688 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80224d0:	4b73      	ldr	r3, [pc, #460]	; (80226a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80224d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80224d4:	e0db      	b.n	802268e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80224d6:	4b73      	ldr	r3, [pc, #460]	; (80226a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80224d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80224da:	e0d8      	b.n	802268e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80224dc:	4b6f      	ldr	r3, [pc, #444]	; (802269c <HAL_RCC_GetSysClockFreq+0x200>)
 80224de:	685b      	ldr	r3, [r3, #4]
 80224e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80224e4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80224e6:	4b6d      	ldr	r3, [pc, #436]	; (802269c <HAL_RCC_GetSysClockFreq+0x200>)
 80224e8:	685b      	ldr	r3, [r3, #4]
 80224ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80224ee:	2b00      	cmp	r3, #0
 80224f0:	d063      	beq.n	80225ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80224f2:	4b6a      	ldr	r3, [pc, #424]	; (802269c <HAL_RCC_GetSysClockFreq+0x200>)
 80224f4:	685b      	ldr	r3, [r3, #4]
 80224f6:	099b      	lsrs	r3, r3, #6
 80224f8:	2200      	movs	r2, #0
 80224fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80224fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80224fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022504:	633b      	str	r3, [r7, #48]	; 0x30
 8022506:	2300      	movs	r3, #0
 8022508:	637b      	str	r3, [r7, #52]	; 0x34
 802250a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 802250e:	4622      	mov	r2, r4
 8022510:	462b      	mov	r3, r5
 8022512:	f04f 0000 	mov.w	r0, #0
 8022516:	f04f 0100 	mov.w	r1, #0
 802251a:	0159      	lsls	r1, r3, #5
 802251c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8022520:	0150      	lsls	r0, r2, #5
 8022522:	4602      	mov	r2, r0
 8022524:	460b      	mov	r3, r1
 8022526:	4621      	mov	r1, r4
 8022528:	1a51      	subs	r1, r2, r1
 802252a:	6139      	str	r1, [r7, #16]
 802252c:	4629      	mov	r1, r5
 802252e:	eb63 0301 	sbc.w	r3, r3, r1
 8022532:	617b      	str	r3, [r7, #20]
 8022534:	f04f 0200 	mov.w	r2, #0
 8022538:	f04f 0300 	mov.w	r3, #0
 802253c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8022540:	4659      	mov	r1, fp
 8022542:	018b      	lsls	r3, r1, #6
 8022544:	4651      	mov	r1, sl
 8022546:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 802254a:	4651      	mov	r1, sl
 802254c:	018a      	lsls	r2, r1, #6
 802254e:	4651      	mov	r1, sl
 8022550:	ebb2 0801 	subs.w	r8, r2, r1
 8022554:	4659      	mov	r1, fp
 8022556:	eb63 0901 	sbc.w	r9, r3, r1
 802255a:	f04f 0200 	mov.w	r2, #0
 802255e:	f04f 0300 	mov.w	r3, #0
 8022562:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8022566:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 802256a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 802256e:	4690      	mov	r8, r2
 8022570:	4699      	mov	r9, r3
 8022572:	4623      	mov	r3, r4
 8022574:	eb18 0303 	adds.w	r3, r8, r3
 8022578:	60bb      	str	r3, [r7, #8]
 802257a:	462b      	mov	r3, r5
 802257c:	eb49 0303 	adc.w	r3, r9, r3
 8022580:	60fb      	str	r3, [r7, #12]
 8022582:	f04f 0200 	mov.w	r2, #0
 8022586:	f04f 0300 	mov.w	r3, #0
 802258a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 802258e:	4629      	mov	r1, r5
 8022590:	024b      	lsls	r3, r1, #9
 8022592:	4621      	mov	r1, r4
 8022594:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8022598:	4621      	mov	r1, r4
 802259a:	024a      	lsls	r2, r1, #9
 802259c:	4610      	mov	r0, r2
 802259e:	4619      	mov	r1, r3
 80225a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80225a2:	2200      	movs	r2, #0
 80225a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80225a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80225a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80225ac:	f7fd fe44 	bl	8020238 <__aeabi_uldivmod>
 80225b0:	4602      	mov	r2, r0
 80225b2:	460b      	mov	r3, r1
 80225b4:	4613      	mov	r3, r2
 80225b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80225b8:	e058      	b.n	802266c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80225ba:	4b38      	ldr	r3, [pc, #224]	; (802269c <HAL_RCC_GetSysClockFreq+0x200>)
 80225bc:	685b      	ldr	r3, [r3, #4]
 80225be:	099b      	lsrs	r3, r3, #6
 80225c0:	2200      	movs	r2, #0
 80225c2:	4618      	mov	r0, r3
 80225c4:	4611      	mov	r1, r2
 80225c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80225ca:	623b      	str	r3, [r7, #32]
 80225cc:	2300      	movs	r3, #0
 80225ce:	627b      	str	r3, [r7, #36]	; 0x24
 80225d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80225d4:	4642      	mov	r2, r8
 80225d6:	464b      	mov	r3, r9
 80225d8:	f04f 0000 	mov.w	r0, #0
 80225dc:	f04f 0100 	mov.w	r1, #0
 80225e0:	0159      	lsls	r1, r3, #5
 80225e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80225e6:	0150      	lsls	r0, r2, #5
 80225e8:	4602      	mov	r2, r0
 80225ea:	460b      	mov	r3, r1
 80225ec:	4641      	mov	r1, r8
 80225ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80225f2:	4649      	mov	r1, r9
 80225f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80225f8:	f04f 0200 	mov.w	r2, #0
 80225fc:	f04f 0300 	mov.w	r3, #0
 8022600:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8022604:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8022608:	ea4f 128a 	mov.w	r2, sl, lsl #6
 802260c:	ebb2 040a 	subs.w	r4, r2, sl
 8022610:	eb63 050b 	sbc.w	r5, r3, fp
 8022614:	f04f 0200 	mov.w	r2, #0
 8022618:	f04f 0300 	mov.w	r3, #0
 802261c:	00eb      	lsls	r3, r5, #3
 802261e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8022622:	00e2      	lsls	r2, r4, #3
 8022624:	4614      	mov	r4, r2
 8022626:	461d      	mov	r5, r3
 8022628:	4643      	mov	r3, r8
 802262a:	18e3      	adds	r3, r4, r3
 802262c:	603b      	str	r3, [r7, #0]
 802262e:	464b      	mov	r3, r9
 8022630:	eb45 0303 	adc.w	r3, r5, r3
 8022634:	607b      	str	r3, [r7, #4]
 8022636:	f04f 0200 	mov.w	r2, #0
 802263a:	f04f 0300 	mov.w	r3, #0
 802263e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8022642:	4629      	mov	r1, r5
 8022644:	028b      	lsls	r3, r1, #10
 8022646:	4621      	mov	r1, r4
 8022648:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 802264c:	4621      	mov	r1, r4
 802264e:	028a      	lsls	r2, r1, #10
 8022650:	4610      	mov	r0, r2
 8022652:	4619      	mov	r1, r3
 8022654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8022656:	2200      	movs	r2, #0
 8022658:	61bb      	str	r3, [r7, #24]
 802265a:	61fa      	str	r2, [r7, #28]
 802265c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8022660:	f7fd fdea 	bl	8020238 <__aeabi_uldivmod>
 8022664:	4602      	mov	r2, r0
 8022666:	460b      	mov	r3, r1
 8022668:	4613      	mov	r3, r2
 802266a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 802266c:	4b0b      	ldr	r3, [pc, #44]	; (802269c <HAL_RCC_GetSysClockFreq+0x200>)
 802266e:	685b      	ldr	r3, [r3, #4]
 8022670:	0c1b      	lsrs	r3, r3, #16
 8022672:	f003 0303 	and.w	r3, r3, #3
 8022676:	3301      	adds	r3, #1
 8022678:	005b      	lsls	r3, r3, #1
 802267a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 802267c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802267e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8022680:	fbb2 f3f3 	udiv	r3, r2, r3
 8022684:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8022686:	e002      	b.n	802268e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8022688:	4b05      	ldr	r3, [pc, #20]	; (80226a0 <HAL_RCC_GetSysClockFreq+0x204>)
 802268a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 802268c:	bf00      	nop
    }
  }
  return sysclockfreq;
 802268e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8022690:	4618      	mov	r0, r3
 8022692:	3750      	adds	r7, #80	; 0x50
 8022694:	46bd      	mov	sp, r7
 8022696:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802269a:	bf00      	nop
 802269c:	40023800 	.word	0x40023800
 80226a0:	00f42400 	.word	0x00f42400
 80226a4:	007a1200 	.word	0x007a1200

080226a8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80226a8:	b480      	push	{r7}
 80226aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80226ac:	4b03      	ldr	r3, [pc, #12]	; (80226bc <HAL_RCC_GetHCLKFreq+0x14>)
 80226ae:	681b      	ldr	r3, [r3, #0]
}
 80226b0:	4618      	mov	r0, r3
 80226b2:	46bd      	mov	sp, r7
 80226b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226b8:	4770      	bx	lr
 80226ba:	bf00      	nop
 80226bc:	20000000 	.word	0x20000000

080226c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80226c0:	b580      	push	{r7, lr}
 80226c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80226c4:	f7ff fff0 	bl	80226a8 <HAL_RCC_GetHCLKFreq>
 80226c8:	4602      	mov	r2, r0
 80226ca:	4b05      	ldr	r3, [pc, #20]	; (80226e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80226cc:	689b      	ldr	r3, [r3, #8]
 80226ce:	0a9b      	lsrs	r3, r3, #10
 80226d0:	f003 0307 	and.w	r3, r3, #7
 80226d4:	4903      	ldr	r1, [pc, #12]	; (80226e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80226d6:	5ccb      	ldrb	r3, [r1, r3]
 80226d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80226dc:	4618      	mov	r0, r3
 80226de:	bd80      	pop	{r7, pc}
 80226e0:	40023800 	.word	0x40023800
 80226e4:	08023e98 	.word	0x08023e98

080226e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80226e8:	b580      	push	{r7, lr}
 80226ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80226ec:	f7ff ffdc 	bl	80226a8 <HAL_RCC_GetHCLKFreq>
 80226f0:	4602      	mov	r2, r0
 80226f2:	4b05      	ldr	r3, [pc, #20]	; (8022708 <HAL_RCC_GetPCLK2Freq+0x20>)
 80226f4:	689b      	ldr	r3, [r3, #8]
 80226f6:	0b5b      	lsrs	r3, r3, #13
 80226f8:	f003 0307 	and.w	r3, r3, #7
 80226fc:	4903      	ldr	r1, [pc, #12]	; (802270c <HAL_RCC_GetPCLK2Freq+0x24>)
 80226fe:	5ccb      	ldrb	r3, [r1, r3]
 8022700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8022704:	4618      	mov	r0, r3
 8022706:	bd80      	pop	{r7, pc}
 8022708:	40023800 	.word	0x40023800
 802270c:	08023e98 	.word	0x08023e98

08022710 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8022710:	b580      	push	{r7, lr}
 8022712:	b088      	sub	sp, #32
 8022714:	af00      	add	r7, sp, #0
 8022716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8022718:	2300      	movs	r3, #0
 802271a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 802271c:	2300      	movs	r3, #0
 802271e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8022720:	2300      	movs	r3, #0
 8022722:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8022724:	2300      	movs	r3, #0
 8022726:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8022728:	2300      	movs	r3, #0
 802272a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 802272c:	687b      	ldr	r3, [r7, #4]
 802272e:	681b      	ldr	r3, [r3, #0]
 8022730:	f003 0301 	and.w	r3, r3, #1
 8022734:	2b00      	cmp	r3, #0
 8022736:	d012      	beq.n	802275e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8022738:	4b69      	ldr	r3, [pc, #420]	; (80228e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802273a:	689b      	ldr	r3, [r3, #8]
 802273c:	4a68      	ldr	r2, [pc, #416]	; (80228e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802273e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8022742:	6093      	str	r3, [r2, #8]
 8022744:	4b66      	ldr	r3, [pc, #408]	; (80228e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8022746:	689a      	ldr	r2, [r3, #8]
 8022748:	687b      	ldr	r3, [r7, #4]
 802274a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802274c:	4964      	ldr	r1, [pc, #400]	; (80228e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802274e:	4313      	orrs	r3, r2
 8022750:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8022752:	687b      	ldr	r3, [r7, #4]
 8022754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022756:	2b00      	cmp	r3, #0
 8022758:	d101      	bne.n	802275e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 802275a:	2301      	movs	r3, #1
 802275c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 802275e:	687b      	ldr	r3, [r7, #4]
 8022760:	681b      	ldr	r3, [r3, #0]
 8022762:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8022766:	2b00      	cmp	r3, #0
 8022768:	d017      	beq.n	802279a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 802276a:	4b5d      	ldr	r3, [pc, #372]	; (80228e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802276c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8022770:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8022774:	687b      	ldr	r3, [r7, #4]
 8022776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8022778:	4959      	ldr	r1, [pc, #356]	; (80228e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802277a:	4313      	orrs	r3, r2
 802277c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8022780:	687b      	ldr	r3, [r7, #4]
 8022782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8022784:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8022788:	d101      	bne.n	802278e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 802278a:	2301      	movs	r3, #1
 802278c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 802278e:	687b      	ldr	r3, [r7, #4]
 8022790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8022792:	2b00      	cmp	r3, #0
 8022794:	d101      	bne.n	802279a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8022796:	2301      	movs	r3, #1
 8022798:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 802279a:	687b      	ldr	r3, [r7, #4]
 802279c:	681b      	ldr	r3, [r3, #0]
 802279e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80227a2:	2b00      	cmp	r3, #0
 80227a4:	d017      	beq.n	80227d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80227a6:	4b4e      	ldr	r3, [pc, #312]	; (80228e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80227a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80227ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80227b0:	687b      	ldr	r3, [r7, #4]
 80227b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80227b4:	494a      	ldr	r1, [pc, #296]	; (80228e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80227b6:	4313      	orrs	r3, r2
 80227b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80227bc:	687b      	ldr	r3, [r7, #4]
 80227be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80227c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80227c4:	d101      	bne.n	80227ca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80227c6:	2301      	movs	r3, #1
 80227c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80227ca:	687b      	ldr	r3, [r7, #4]
 80227cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80227ce:	2b00      	cmp	r3, #0
 80227d0:	d101      	bne.n	80227d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80227d2:	2301      	movs	r3, #1
 80227d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80227d6:	687b      	ldr	r3, [r7, #4]
 80227d8:	681b      	ldr	r3, [r3, #0]
 80227da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80227de:	2b00      	cmp	r3, #0
 80227e0:	d001      	beq.n	80227e6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80227e2:	2301      	movs	r3, #1
 80227e4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80227e6:	687b      	ldr	r3, [r7, #4]
 80227e8:	681b      	ldr	r3, [r3, #0]
 80227ea:	f003 0320 	and.w	r3, r3, #32
 80227ee:	2b00      	cmp	r3, #0
 80227f0:	f000 808b 	beq.w	802290a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80227f4:	4b3a      	ldr	r3, [pc, #232]	; (80228e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80227f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80227f8:	4a39      	ldr	r2, [pc, #228]	; (80228e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80227fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80227fe:	6413      	str	r3, [r2, #64]	; 0x40
 8022800:	4b37      	ldr	r3, [pc, #220]	; (80228e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8022802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022808:	60bb      	str	r3, [r7, #8]
 802280a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 802280c:	4b35      	ldr	r3, [pc, #212]	; (80228e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 802280e:	681b      	ldr	r3, [r3, #0]
 8022810:	4a34      	ldr	r2, [pc, #208]	; (80228e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8022812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8022816:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8022818:	f7fe fafc 	bl	8020e14 <HAL_GetTick>
 802281c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 802281e:	e008      	b.n	8022832 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8022820:	f7fe faf8 	bl	8020e14 <HAL_GetTick>
 8022824:	4602      	mov	r2, r0
 8022826:	697b      	ldr	r3, [r7, #20]
 8022828:	1ad3      	subs	r3, r2, r3
 802282a:	2b64      	cmp	r3, #100	; 0x64
 802282c:	d901      	bls.n	8022832 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 802282e:	2303      	movs	r3, #3
 8022830:	e38f      	b.n	8022f52 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8022832:	4b2c      	ldr	r3, [pc, #176]	; (80228e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8022834:	681b      	ldr	r3, [r3, #0]
 8022836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802283a:	2b00      	cmp	r3, #0
 802283c:	d0f0      	beq.n	8022820 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 802283e:	4b28      	ldr	r3, [pc, #160]	; (80228e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8022840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8022846:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8022848:	693b      	ldr	r3, [r7, #16]
 802284a:	2b00      	cmp	r3, #0
 802284c:	d035      	beq.n	80228ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 802284e:	687b      	ldr	r3, [r7, #4]
 8022850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8022856:	693a      	ldr	r2, [r7, #16]
 8022858:	429a      	cmp	r2, r3
 802285a:	d02e      	beq.n	80228ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 802285c:	4b20      	ldr	r3, [pc, #128]	; (80228e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802285e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8022864:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8022866:	4b1e      	ldr	r3, [pc, #120]	; (80228e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8022868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802286a:	4a1d      	ldr	r2, [pc, #116]	; (80228e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 802286c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8022870:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8022872:	4b1b      	ldr	r3, [pc, #108]	; (80228e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8022874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022876:	4a1a      	ldr	r2, [pc, #104]	; (80228e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8022878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802287c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 802287e:	4a18      	ldr	r2, [pc, #96]	; (80228e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8022880:	693b      	ldr	r3, [r7, #16]
 8022882:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8022884:	4b16      	ldr	r3, [pc, #88]	; (80228e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8022886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022888:	f003 0301 	and.w	r3, r3, #1
 802288c:	2b01      	cmp	r3, #1
 802288e:	d114      	bne.n	80228ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8022890:	f7fe fac0 	bl	8020e14 <HAL_GetTick>
 8022894:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8022896:	e00a      	b.n	80228ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8022898:	f7fe fabc 	bl	8020e14 <HAL_GetTick>
 802289c:	4602      	mov	r2, r0
 802289e:	697b      	ldr	r3, [r7, #20]
 80228a0:	1ad3      	subs	r3, r2, r3
 80228a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80228a6:	4293      	cmp	r3, r2
 80228a8:	d901      	bls.n	80228ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80228aa:	2303      	movs	r3, #3
 80228ac:	e351      	b.n	8022f52 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80228ae:	4b0c      	ldr	r3, [pc, #48]	; (80228e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80228b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80228b2:	f003 0302 	and.w	r3, r3, #2
 80228b6:	2b00      	cmp	r3, #0
 80228b8:	d0ee      	beq.n	8022898 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80228ba:	687b      	ldr	r3, [r7, #4]
 80228bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80228be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80228c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80228c6:	d111      	bne.n	80228ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80228c8:	4b05      	ldr	r3, [pc, #20]	; (80228e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80228ca:	689b      	ldr	r3, [r3, #8]
 80228cc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80228d0:	687b      	ldr	r3, [r7, #4]
 80228d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80228d4:	4b04      	ldr	r3, [pc, #16]	; (80228e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80228d6:	400b      	ands	r3, r1
 80228d8:	4901      	ldr	r1, [pc, #4]	; (80228e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80228da:	4313      	orrs	r3, r2
 80228dc:	608b      	str	r3, [r1, #8]
 80228de:	e00b      	b.n	80228f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80228e0:	40023800 	.word	0x40023800
 80228e4:	40007000 	.word	0x40007000
 80228e8:	0ffffcff 	.word	0x0ffffcff
 80228ec:	4bac      	ldr	r3, [pc, #688]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80228ee:	689b      	ldr	r3, [r3, #8]
 80228f0:	4aab      	ldr	r2, [pc, #684]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80228f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80228f6:	6093      	str	r3, [r2, #8]
 80228f8:	4ba9      	ldr	r3, [pc, #676]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80228fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80228fc:	687b      	ldr	r3, [r7, #4]
 80228fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022904:	49a6      	ldr	r1, [pc, #664]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022906:	4313      	orrs	r3, r2
 8022908:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 802290a:	687b      	ldr	r3, [r7, #4]
 802290c:	681b      	ldr	r3, [r3, #0]
 802290e:	f003 0310 	and.w	r3, r3, #16
 8022912:	2b00      	cmp	r3, #0
 8022914:	d010      	beq.n	8022938 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8022916:	4ba2      	ldr	r3, [pc, #648]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 802291c:	4aa0      	ldr	r2, [pc, #640]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802291e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8022922:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8022926:	4b9e      	ldr	r3, [pc, #632]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022928:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 802292c:	687b      	ldr	r3, [r7, #4]
 802292e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022930:	499b      	ldr	r1, [pc, #620]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022932:	4313      	orrs	r3, r2
 8022934:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8022938:	687b      	ldr	r3, [r7, #4]
 802293a:	681b      	ldr	r3, [r3, #0]
 802293c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022940:	2b00      	cmp	r3, #0
 8022942:	d00a      	beq.n	802295a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8022944:	4b96      	ldr	r3, [pc, #600]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802294a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 802294e:	687b      	ldr	r3, [r7, #4]
 8022950:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8022952:	4993      	ldr	r1, [pc, #588]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022954:	4313      	orrs	r3, r2
 8022956:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 802295a:	687b      	ldr	r3, [r7, #4]
 802295c:	681b      	ldr	r3, [r3, #0]
 802295e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8022962:	2b00      	cmp	r3, #0
 8022964:	d00a      	beq.n	802297c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8022966:	4b8e      	ldr	r3, [pc, #568]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802296c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8022970:	687b      	ldr	r3, [r7, #4]
 8022972:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8022974:	498a      	ldr	r1, [pc, #552]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022976:	4313      	orrs	r3, r2
 8022978:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 802297c:	687b      	ldr	r3, [r7, #4]
 802297e:	681b      	ldr	r3, [r3, #0]
 8022980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8022984:	2b00      	cmp	r3, #0
 8022986:	d00a      	beq.n	802299e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8022988:	4b85      	ldr	r3, [pc, #532]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 802298a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802298e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8022992:	687b      	ldr	r3, [r7, #4]
 8022994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022996:	4982      	ldr	r1, [pc, #520]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022998:	4313      	orrs	r3, r2
 802299a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 802299e:	687b      	ldr	r3, [r7, #4]
 80229a0:	681b      	ldr	r3, [r3, #0]
 80229a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80229a6:	2b00      	cmp	r3, #0
 80229a8:	d00a      	beq.n	80229c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80229aa:	4b7d      	ldr	r3, [pc, #500]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80229ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80229b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80229b4:	687b      	ldr	r3, [r7, #4]
 80229b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80229b8:	4979      	ldr	r1, [pc, #484]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80229ba:	4313      	orrs	r3, r2
 80229bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80229c0:	687b      	ldr	r3, [r7, #4]
 80229c2:	681b      	ldr	r3, [r3, #0]
 80229c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80229c8:	2b00      	cmp	r3, #0
 80229ca:	d00a      	beq.n	80229e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80229cc:	4b74      	ldr	r3, [pc, #464]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80229ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80229d2:	f023 0203 	bic.w	r2, r3, #3
 80229d6:	687b      	ldr	r3, [r7, #4]
 80229d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80229da:	4971      	ldr	r1, [pc, #452]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80229dc:	4313      	orrs	r3, r2
 80229de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80229e2:	687b      	ldr	r3, [r7, #4]
 80229e4:	681b      	ldr	r3, [r3, #0]
 80229e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80229ea:	2b00      	cmp	r3, #0
 80229ec:	d00a      	beq.n	8022a04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80229ee:	4b6c      	ldr	r3, [pc, #432]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80229f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80229f4:	f023 020c 	bic.w	r2, r3, #12
 80229f8:	687b      	ldr	r3, [r7, #4]
 80229fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80229fc:	4968      	ldr	r1, [pc, #416]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80229fe:	4313      	orrs	r3, r2
 8022a00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8022a04:	687b      	ldr	r3, [r7, #4]
 8022a06:	681b      	ldr	r3, [r3, #0]
 8022a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022a0c:	2b00      	cmp	r3, #0
 8022a0e:	d00a      	beq.n	8022a26 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8022a10:	4b63      	ldr	r3, [pc, #396]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8022a16:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8022a1a:	687b      	ldr	r3, [r7, #4]
 8022a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022a1e:	4960      	ldr	r1, [pc, #384]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022a20:	4313      	orrs	r3, r2
 8022a22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8022a26:	687b      	ldr	r3, [r7, #4]
 8022a28:	681b      	ldr	r3, [r3, #0]
 8022a2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8022a2e:	2b00      	cmp	r3, #0
 8022a30:	d00a      	beq.n	8022a48 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8022a32:	4b5b      	ldr	r3, [pc, #364]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8022a38:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8022a3c:	687b      	ldr	r3, [r7, #4]
 8022a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022a40:	4957      	ldr	r1, [pc, #348]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022a42:	4313      	orrs	r3, r2
 8022a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8022a48:	687b      	ldr	r3, [r7, #4]
 8022a4a:	681b      	ldr	r3, [r3, #0]
 8022a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8022a50:	2b00      	cmp	r3, #0
 8022a52:	d00a      	beq.n	8022a6a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8022a54:	4b52      	ldr	r3, [pc, #328]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8022a5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8022a5e:	687b      	ldr	r3, [r7, #4]
 8022a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8022a62:	494f      	ldr	r1, [pc, #316]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022a64:	4313      	orrs	r3, r2
 8022a66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8022a6a:	687b      	ldr	r3, [r7, #4]
 8022a6c:	681b      	ldr	r3, [r3, #0]
 8022a6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8022a72:	2b00      	cmp	r3, #0
 8022a74:	d00a      	beq.n	8022a8c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8022a76:	4b4a      	ldr	r3, [pc, #296]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8022a7c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8022a80:	687b      	ldr	r3, [r7, #4]
 8022a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8022a84:	4946      	ldr	r1, [pc, #280]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022a86:	4313      	orrs	r3, r2
 8022a88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8022a8c:	687b      	ldr	r3, [r7, #4]
 8022a8e:	681b      	ldr	r3, [r3, #0]
 8022a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8022a94:	2b00      	cmp	r3, #0
 8022a96:	d00a      	beq.n	8022aae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8022a98:	4b41      	ldr	r3, [pc, #260]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8022a9e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8022aa2:	687b      	ldr	r3, [r7, #4]
 8022aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8022aa6:	493e      	ldr	r1, [pc, #248]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022aa8:	4313      	orrs	r3, r2
 8022aaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8022aae:	687b      	ldr	r3, [r7, #4]
 8022ab0:	681b      	ldr	r3, [r3, #0]
 8022ab2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8022ab6:	2b00      	cmp	r3, #0
 8022ab8:	d00a      	beq.n	8022ad0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8022aba:	4b39      	ldr	r3, [pc, #228]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8022ac0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8022ac4:	687b      	ldr	r3, [r7, #4]
 8022ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8022ac8:	4935      	ldr	r1, [pc, #212]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022aca:	4313      	orrs	r3, r2
 8022acc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8022ad0:	687b      	ldr	r3, [r7, #4]
 8022ad2:	681b      	ldr	r3, [r3, #0]
 8022ad4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8022ad8:	2b00      	cmp	r3, #0
 8022ada:	d00a      	beq.n	8022af2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8022adc:	4b30      	ldr	r3, [pc, #192]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8022ae2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8022ae6:	687b      	ldr	r3, [r7, #4]
 8022ae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8022aea:	492d      	ldr	r1, [pc, #180]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022aec:	4313      	orrs	r3, r2
 8022aee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8022af2:	687b      	ldr	r3, [r7, #4]
 8022af4:	681b      	ldr	r3, [r3, #0]
 8022af6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8022afa:	2b00      	cmp	r3, #0
 8022afc:	d011      	beq.n	8022b22 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8022afe:	4b28      	ldr	r3, [pc, #160]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8022b04:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8022b08:	687b      	ldr	r3, [r7, #4]
 8022b0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8022b0c:	4924      	ldr	r1, [pc, #144]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022b0e:	4313      	orrs	r3, r2
 8022b10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8022b14:	687b      	ldr	r3, [r7, #4]
 8022b16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8022b18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8022b1c:	d101      	bne.n	8022b22 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8022b1e:	2301      	movs	r3, #1
 8022b20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8022b22:	687b      	ldr	r3, [r7, #4]
 8022b24:	681b      	ldr	r3, [r3, #0]
 8022b26:	f003 0308 	and.w	r3, r3, #8
 8022b2a:	2b00      	cmp	r3, #0
 8022b2c:	d001      	beq.n	8022b32 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8022b2e:	2301      	movs	r3, #1
 8022b30:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8022b32:	687b      	ldr	r3, [r7, #4]
 8022b34:	681b      	ldr	r3, [r3, #0]
 8022b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8022b3a:	2b00      	cmp	r3, #0
 8022b3c:	d00a      	beq.n	8022b54 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8022b3e:	4b18      	ldr	r3, [pc, #96]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8022b44:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8022b48:	687b      	ldr	r3, [r7, #4]
 8022b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8022b4c:	4914      	ldr	r1, [pc, #80]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022b4e:	4313      	orrs	r3, r2
 8022b50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8022b54:	687b      	ldr	r3, [r7, #4]
 8022b56:	681b      	ldr	r3, [r3, #0]
 8022b58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8022b5c:	2b00      	cmp	r3, #0
 8022b5e:	d00b      	beq.n	8022b78 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8022b60:	4b0f      	ldr	r3, [pc, #60]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8022b66:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8022b6a:	687b      	ldr	r3, [r7, #4]
 8022b6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8022b70:	490b      	ldr	r1, [pc, #44]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022b72:	4313      	orrs	r3, r2
 8022b74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8022b78:	687b      	ldr	r3, [r7, #4]
 8022b7a:	681b      	ldr	r3, [r3, #0]
 8022b7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8022b80:	2b00      	cmp	r3, #0
 8022b82:	d00f      	beq.n	8022ba4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8022b84:	4b06      	ldr	r3, [pc, #24]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8022b8a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8022b8e:	687b      	ldr	r3, [r7, #4]
 8022b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8022b94:	4902      	ldr	r1, [pc, #8]	; (8022ba0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8022b96:	4313      	orrs	r3, r2
 8022b98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8022b9c:	e002      	b.n	8022ba4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8022b9e:	bf00      	nop
 8022ba0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8022ba4:	687b      	ldr	r3, [r7, #4]
 8022ba6:	681b      	ldr	r3, [r3, #0]
 8022ba8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8022bac:	2b00      	cmp	r3, #0
 8022bae:	d00b      	beq.n	8022bc8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8022bb0:	4b8a      	ldr	r3, [pc, #552]	; (8022ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8022bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8022bb6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8022bba:	687b      	ldr	r3, [r7, #4]
 8022bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022bc0:	4986      	ldr	r1, [pc, #536]	; (8022ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8022bc2:	4313      	orrs	r3, r2
 8022bc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8022bc8:	687b      	ldr	r3, [r7, #4]
 8022bca:	681b      	ldr	r3, [r3, #0]
 8022bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022bd0:	2b00      	cmp	r3, #0
 8022bd2:	d00b      	beq.n	8022bec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8022bd4:	4b81      	ldr	r3, [pc, #516]	; (8022ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8022bd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8022bda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8022bde:	687b      	ldr	r3, [r7, #4]
 8022be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8022be4:	497d      	ldr	r1, [pc, #500]	; (8022ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8022be6:	4313      	orrs	r3, r2
 8022be8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8022bec:	69fb      	ldr	r3, [r7, #28]
 8022bee:	2b01      	cmp	r3, #1
 8022bf0:	d006      	beq.n	8022c00 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8022bf2:	687b      	ldr	r3, [r7, #4]
 8022bf4:	681b      	ldr	r3, [r3, #0]
 8022bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8022bfa:	2b00      	cmp	r3, #0
 8022bfc:	f000 80d6 	beq.w	8022dac <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8022c00:	4b76      	ldr	r3, [pc, #472]	; (8022ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8022c02:	681b      	ldr	r3, [r3, #0]
 8022c04:	4a75      	ldr	r2, [pc, #468]	; (8022ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8022c06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8022c0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8022c0c:	f7fe f902 	bl	8020e14 <HAL_GetTick>
 8022c10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8022c12:	e008      	b.n	8022c26 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8022c14:	f7fe f8fe 	bl	8020e14 <HAL_GetTick>
 8022c18:	4602      	mov	r2, r0
 8022c1a:	697b      	ldr	r3, [r7, #20]
 8022c1c:	1ad3      	subs	r3, r2, r3
 8022c1e:	2b64      	cmp	r3, #100	; 0x64
 8022c20:	d901      	bls.n	8022c26 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8022c22:	2303      	movs	r3, #3
 8022c24:	e195      	b.n	8022f52 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8022c26:	4b6d      	ldr	r3, [pc, #436]	; (8022ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8022c28:	681b      	ldr	r3, [r3, #0]
 8022c2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8022c2e:	2b00      	cmp	r3, #0
 8022c30:	d1f0      	bne.n	8022c14 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8022c32:	687b      	ldr	r3, [r7, #4]
 8022c34:	681b      	ldr	r3, [r3, #0]
 8022c36:	f003 0301 	and.w	r3, r3, #1
 8022c3a:	2b00      	cmp	r3, #0
 8022c3c:	d021      	beq.n	8022c82 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8022c3e:	687b      	ldr	r3, [r7, #4]
 8022c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022c42:	2b00      	cmp	r3, #0
 8022c44:	d11d      	bne.n	8022c82 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8022c46:	4b65      	ldr	r3, [pc, #404]	; (8022ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8022c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8022c4c:	0c1b      	lsrs	r3, r3, #16
 8022c4e:	f003 0303 	and.w	r3, r3, #3
 8022c52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8022c54:	4b61      	ldr	r3, [pc, #388]	; (8022ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8022c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8022c5a:	0e1b      	lsrs	r3, r3, #24
 8022c5c:	f003 030f 	and.w	r3, r3, #15
 8022c60:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8022c62:	687b      	ldr	r3, [r7, #4]
 8022c64:	685b      	ldr	r3, [r3, #4]
 8022c66:	019a      	lsls	r2, r3, #6
 8022c68:	693b      	ldr	r3, [r7, #16]
 8022c6a:	041b      	lsls	r3, r3, #16
 8022c6c:	431a      	orrs	r2, r3
 8022c6e:	68fb      	ldr	r3, [r7, #12]
 8022c70:	061b      	lsls	r3, r3, #24
 8022c72:	431a      	orrs	r2, r3
 8022c74:	687b      	ldr	r3, [r7, #4]
 8022c76:	689b      	ldr	r3, [r3, #8]
 8022c78:	071b      	lsls	r3, r3, #28
 8022c7a:	4958      	ldr	r1, [pc, #352]	; (8022ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8022c7c:	4313      	orrs	r3, r2
 8022c7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8022c82:	687b      	ldr	r3, [r7, #4]
 8022c84:	681b      	ldr	r3, [r3, #0]
 8022c86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8022c8a:	2b00      	cmp	r3, #0
 8022c8c:	d004      	beq.n	8022c98 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8022c8e:	687b      	ldr	r3, [r7, #4]
 8022c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8022c92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8022c96:	d00a      	beq.n	8022cae <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8022c98:	687b      	ldr	r3, [r7, #4]
 8022c9a:	681b      	ldr	r3, [r3, #0]
 8022c9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8022ca0:	2b00      	cmp	r3, #0
 8022ca2:	d02e      	beq.n	8022d02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8022ca4:	687b      	ldr	r3, [r7, #4]
 8022ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022ca8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8022cac:	d129      	bne.n	8022d02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8022cae:	4b4b      	ldr	r3, [pc, #300]	; (8022ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8022cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8022cb4:	0c1b      	lsrs	r3, r3, #16
 8022cb6:	f003 0303 	and.w	r3, r3, #3
 8022cba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8022cbc:	4b47      	ldr	r3, [pc, #284]	; (8022ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8022cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8022cc2:	0f1b      	lsrs	r3, r3, #28
 8022cc4:	f003 0307 	and.w	r3, r3, #7
 8022cc8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8022cca:	687b      	ldr	r3, [r7, #4]
 8022ccc:	685b      	ldr	r3, [r3, #4]
 8022cce:	019a      	lsls	r2, r3, #6
 8022cd0:	693b      	ldr	r3, [r7, #16]
 8022cd2:	041b      	lsls	r3, r3, #16
 8022cd4:	431a      	orrs	r2, r3
 8022cd6:	687b      	ldr	r3, [r7, #4]
 8022cd8:	68db      	ldr	r3, [r3, #12]
 8022cda:	061b      	lsls	r3, r3, #24
 8022cdc:	431a      	orrs	r2, r3
 8022cde:	68fb      	ldr	r3, [r7, #12]
 8022ce0:	071b      	lsls	r3, r3, #28
 8022ce2:	493e      	ldr	r1, [pc, #248]	; (8022ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8022ce4:	4313      	orrs	r3, r2
 8022ce6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8022cea:	4b3c      	ldr	r3, [pc, #240]	; (8022ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8022cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8022cf0:	f023 021f 	bic.w	r2, r3, #31
 8022cf4:	687b      	ldr	r3, [r7, #4]
 8022cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022cf8:	3b01      	subs	r3, #1
 8022cfa:	4938      	ldr	r1, [pc, #224]	; (8022ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8022cfc:	4313      	orrs	r3, r2
 8022cfe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8022d02:	687b      	ldr	r3, [r7, #4]
 8022d04:	681b      	ldr	r3, [r3, #0]
 8022d06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8022d0a:	2b00      	cmp	r3, #0
 8022d0c:	d01d      	beq.n	8022d4a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8022d0e:	4b33      	ldr	r3, [pc, #204]	; (8022ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8022d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8022d14:	0e1b      	lsrs	r3, r3, #24
 8022d16:	f003 030f 	and.w	r3, r3, #15
 8022d1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8022d1c:	4b2f      	ldr	r3, [pc, #188]	; (8022ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8022d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8022d22:	0f1b      	lsrs	r3, r3, #28
 8022d24:	f003 0307 	and.w	r3, r3, #7
 8022d28:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8022d2a:	687b      	ldr	r3, [r7, #4]
 8022d2c:	685b      	ldr	r3, [r3, #4]
 8022d2e:	019a      	lsls	r2, r3, #6
 8022d30:	687b      	ldr	r3, [r7, #4]
 8022d32:	691b      	ldr	r3, [r3, #16]
 8022d34:	041b      	lsls	r3, r3, #16
 8022d36:	431a      	orrs	r2, r3
 8022d38:	693b      	ldr	r3, [r7, #16]
 8022d3a:	061b      	lsls	r3, r3, #24
 8022d3c:	431a      	orrs	r2, r3
 8022d3e:	68fb      	ldr	r3, [r7, #12]
 8022d40:	071b      	lsls	r3, r3, #28
 8022d42:	4926      	ldr	r1, [pc, #152]	; (8022ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8022d44:	4313      	orrs	r3, r2
 8022d46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8022d4a:	687b      	ldr	r3, [r7, #4]
 8022d4c:	681b      	ldr	r3, [r3, #0]
 8022d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8022d52:	2b00      	cmp	r3, #0
 8022d54:	d011      	beq.n	8022d7a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8022d56:	687b      	ldr	r3, [r7, #4]
 8022d58:	685b      	ldr	r3, [r3, #4]
 8022d5a:	019a      	lsls	r2, r3, #6
 8022d5c:	687b      	ldr	r3, [r7, #4]
 8022d5e:	691b      	ldr	r3, [r3, #16]
 8022d60:	041b      	lsls	r3, r3, #16
 8022d62:	431a      	orrs	r2, r3
 8022d64:	687b      	ldr	r3, [r7, #4]
 8022d66:	68db      	ldr	r3, [r3, #12]
 8022d68:	061b      	lsls	r3, r3, #24
 8022d6a:	431a      	orrs	r2, r3
 8022d6c:	687b      	ldr	r3, [r7, #4]
 8022d6e:	689b      	ldr	r3, [r3, #8]
 8022d70:	071b      	lsls	r3, r3, #28
 8022d72:	491a      	ldr	r1, [pc, #104]	; (8022ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8022d74:	4313      	orrs	r3, r2
 8022d76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8022d7a:	4b18      	ldr	r3, [pc, #96]	; (8022ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8022d7c:	681b      	ldr	r3, [r3, #0]
 8022d7e:	4a17      	ldr	r2, [pc, #92]	; (8022ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8022d80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8022d84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8022d86:	f7fe f845 	bl	8020e14 <HAL_GetTick>
 8022d8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8022d8c:	e008      	b.n	8022da0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8022d8e:	f7fe f841 	bl	8020e14 <HAL_GetTick>
 8022d92:	4602      	mov	r2, r0
 8022d94:	697b      	ldr	r3, [r7, #20]
 8022d96:	1ad3      	subs	r3, r2, r3
 8022d98:	2b64      	cmp	r3, #100	; 0x64
 8022d9a:	d901      	bls.n	8022da0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8022d9c:	2303      	movs	r3, #3
 8022d9e:	e0d8      	b.n	8022f52 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8022da0:	4b0e      	ldr	r3, [pc, #56]	; (8022ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8022da2:	681b      	ldr	r3, [r3, #0]
 8022da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8022da8:	2b00      	cmp	r3, #0
 8022daa:	d0f0      	beq.n	8022d8e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8022dac:	69bb      	ldr	r3, [r7, #24]
 8022dae:	2b01      	cmp	r3, #1
 8022db0:	f040 80ce 	bne.w	8022f50 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8022db4:	4b09      	ldr	r3, [pc, #36]	; (8022ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8022db6:	681b      	ldr	r3, [r3, #0]
 8022db8:	4a08      	ldr	r2, [pc, #32]	; (8022ddc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8022dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8022dbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8022dc0:	f7fe f828 	bl	8020e14 <HAL_GetTick>
 8022dc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8022dc6:	e00b      	b.n	8022de0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8022dc8:	f7fe f824 	bl	8020e14 <HAL_GetTick>
 8022dcc:	4602      	mov	r2, r0
 8022dce:	697b      	ldr	r3, [r7, #20]
 8022dd0:	1ad3      	subs	r3, r2, r3
 8022dd2:	2b64      	cmp	r3, #100	; 0x64
 8022dd4:	d904      	bls.n	8022de0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8022dd6:	2303      	movs	r3, #3
 8022dd8:	e0bb      	b.n	8022f52 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8022dda:	bf00      	nop
 8022ddc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8022de0:	4b5e      	ldr	r3, [pc, #376]	; (8022f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8022de2:	681b      	ldr	r3, [r3, #0]
 8022de4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8022de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8022dec:	d0ec      	beq.n	8022dc8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8022dee:	687b      	ldr	r3, [r7, #4]
 8022df0:	681b      	ldr	r3, [r3, #0]
 8022df2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8022df6:	2b00      	cmp	r3, #0
 8022df8:	d003      	beq.n	8022e02 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8022dfa:	687b      	ldr	r3, [r7, #4]
 8022dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8022dfe:	2b00      	cmp	r3, #0
 8022e00:	d009      	beq.n	8022e16 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8022e02:	687b      	ldr	r3, [r7, #4]
 8022e04:	681b      	ldr	r3, [r3, #0]
 8022e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8022e0a:	2b00      	cmp	r3, #0
 8022e0c:	d02e      	beq.n	8022e6c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8022e0e:	687b      	ldr	r3, [r7, #4]
 8022e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022e12:	2b00      	cmp	r3, #0
 8022e14:	d12a      	bne.n	8022e6c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8022e16:	4b51      	ldr	r3, [pc, #324]	; (8022f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8022e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022e1c:	0c1b      	lsrs	r3, r3, #16
 8022e1e:	f003 0303 	and.w	r3, r3, #3
 8022e22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8022e24:	4b4d      	ldr	r3, [pc, #308]	; (8022f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8022e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022e2a:	0f1b      	lsrs	r3, r3, #28
 8022e2c:	f003 0307 	and.w	r3, r3, #7
 8022e30:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8022e32:	687b      	ldr	r3, [r7, #4]
 8022e34:	695b      	ldr	r3, [r3, #20]
 8022e36:	019a      	lsls	r2, r3, #6
 8022e38:	693b      	ldr	r3, [r7, #16]
 8022e3a:	041b      	lsls	r3, r3, #16
 8022e3c:	431a      	orrs	r2, r3
 8022e3e:	687b      	ldr	r3, [r7, #4]
 8022e40:	699b      	ldr	r3, [r3, #24]
 8022e42:	061b      	lsls	r3, r3, #24
 8022e44:	431a      	orrs	r2, r3
 8022e46:	68fb      	ldr	r3, [r7, #12]
 8022e48:	071b      	lsls	r3, r3, #28
 8022e4a:	4944      	ldr	r1, [pc, #272]	; (8022f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8022e4c:	4313      	orrs	r3, r2
 8022e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8022e52:	4b42      	ldr	r3, [pc, #264]	; (8022f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8022e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8022e58:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8022e5c:	687b      	ldr	r3, [r7, #4]
 8022e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022e60:	3b01      	subs	r3, #1
 8022e62:	021b      	lsls	r3, r3, #8
 8022e64:	493d      	ldr	r1, [pc, #244]	; (8022f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8022e66:	4313      	orrs	r3, r2
 8022e68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8022e6c:	687b      	ldr	r3, [r7, #4]
 8022e6e:	681b      	ldr	r3, [r3, #0]
 8022e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8022e74:	2b00      	cmp	r3, #0
 8022e76:	d022      	beq.n	8022ebe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8022e78:	687b      	ldr	r3, [r7, #4]
 8022e7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8022e7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8022e80:	d11d      	bne.n	8022ebe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8022e82:	4b36      	ldr	r3, [pc, #216]	; (8022f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8022e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022e88:	0e1b      	lsrs	r3, r3, #24
 8022e8a:	f003 030f 	and.w	r3, r3, #15
 8022e8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8022e90:	4b32      	ldr	r3, [pc, #200]	; (8022f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8022e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022e96:	0f1b      	lsrs	r3, r3, #28
 8022e98:	f003 0307 	and.w	r3, r3, #7
 8022e9c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8022e9e:	687b      	ldr	r3, [r7, #4]
 8022ea0:	695b      	ldr	r3, [r3, #20]
 8022ea2:	019a      	lsls	r2, r3, #6
 8022ea4:	687b      	ldr	r3, [r7, #4]
 8022ea6:	6a1b      	ldr	r3, [r3, #32]
 8022ea8:	041b      	lsls	r3, r3, #16
 8022eaa:	431a      	orrs	r2, r3
 8022eac:	693b      	ldr	r3, [r7, #16]
 8022eae:	061b      	lsls	r3, r3, #24
 8022eb0:	431a      	orrs	r2, r3
 8022eb2:	68fb      	ldr	r3, [r7, #12]
 8022eb4:	071b      	lsls	r3, r3, #28
 8022eb6:	4929      	ldr	r1, [pc, #164]	; (8022f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8022eb8:	4313      	orrs	r3, r2
 8022eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8022ebe:	687b      	ldr	r3, [r7, #4]
 8022ec0:	681b      	ldr	r3, [r3, #0]
 8022ec2:	f003 0308 	and.w	r3, r3, #8
 8022ec6:	2b00      	cmp	r3, #0
 8022ec8:	d028      	beq.n	8022f1c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8022eca:	4b24      	ldr	r3, [pc, #144]	; (8022f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8022ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022ed0:	0e1b      	lsrs	r3, r3, #24
 8022ed2:	f003 030f 	and.w	r3, r3, #15
 8022ed6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8022ed8:	4b20      	ldr	r3, [pc, #128]	; (8022f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8022eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022ede:	0c1b      	lsrs	r3, r3, #16
 8022ee0:	f003 0303 	and.w	r3, r3, #3
 8022ee4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8022ee6:	687b      	ldr	r3, [r7, #4]
 8022ee8:	695b      	ldr	r3, [r3, #20]
 8022eea:	019a      	lsls	r2, r3, #6
 8022eec:	68fb      	ldr	r3, [r7, #12]
 8022eee:	041b      	lsls	r3, r3, #16
 8022ef0:	431a      	orrs	r2, r3
 8022ef2:	693b      	ldr	r3, [r7, #16]
 8022ef4:	061b      	lsls	r3, r3, #24
 8022ef6:	431a      	orrs	r2, r3
 8022ef8:	687b      	ldr	r3, [r7, #4]
 8022efa:	69db      	ldr	r3, [r3, #28]
 8022efc:	071b      	lsls	r3, r3, #28
 8022efe:	4917      	ldr	r1, [pc, #92]	; (8022f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8022f00:	4313      	orrs	r3, r2
 8022f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8022f06:	4b15      	ldr	r3, [pc, #84]	; (8022f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8022f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8022f0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8022f10:	687b      	ldr	r3, [r7, #4]
 8022f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022f14:	4911      	ldr	r1, [pc, #68]	; (8022f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8022f16:	4313      	orrs	r3, r2
 8022f18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8022f1c:	4b0f      	ldr	r3, [pc, #60]	; (8022f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8022f1e:	681b      	ldr	r3, [r3, #0]
 8022f20:	4a0e      	ldr	r2, [pc, #56]	; (8022f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8022f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8022f26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8022f28:	f7fd ff74 	bl	8020e14 <HAL_GetTick>
 8022f2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8022f2e:	e008      	b.n	8022f42 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8022f30:	f7fd ff70 	bl	8020e14 <HAL_GetTick>
 8022f34:	4602      	mov	r2, r0
 8022f36:	697b      	ldr	r3, [r7, #20]
 8022f38:	1ad3      	subs	r3, r2, r3
 8022f3a:	2b64      	cmp	r3, #100	; 0x64
 8022f3c:	d901      	bls.n	8022f42 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8022f3e:	2303      	movs	r3, #3
 8022f40:	e007      	b.n	8022f52 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8022f42:	4b06      	ldr	r3, [pc, #24]	; (8022f5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8022f44:	681b      	ldr	r3, [r3, #0]
 8022f46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8022f4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8022f4e:	d1ef      	bne.n	8022f30 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8022f50:	2300      	movs	r3, #0
}
 8022f52:	4618      	mov	r0, r3
 8022f54:	3720      	adds	r7, #32
 8022f56:	46bd      	mov	sp, r7
 8022f58:	bd80      	pop	{r7, pc}
 8022f5a:	bf00      	nop
 8022f5c:	40023800 	.word	0x40023800

08022f60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8022f60:	b580      	push	{r7, lr}
 8022f62:	b082      	sub	sp, #8
 8022f64:	af00      	add	r7, sp, #0
 8022f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8022f68:	687b      	ldr	r3, [r7, #4]
 8022f6a:	2b00      	cmp	r3, #0
 8022f6c:	d101      	bne.n	8022f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8022f6e:	2301      	movs	r3, #1
 8022f70:	e040      	b.n	8022ff4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8022f72:	687b      	ldr	r3, [r7, #4]
 8022f74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8022f76:	2b00      	cmp	r3, #0
 8022f78:	d106      	bne.n	8022f88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8022f7a:	687b      	ldr	r3, [r7, #4]
 8022f7c:	2200      	movs	r2, #0
 8022f7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8022f82:	6878      	ldr	r0, [r7, #4]
 8022f84:	f7fd fdb2 	bl	8020aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8022f88:	687b      	ldr	r3, [r7, #4]
 8022f8a:	2224      	movs	r2, #36	; 0x24
 8022f8c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8022f8e:	687b      	ldr	r3, [r7, #4]
 8022f90:	681b      	ldr	r3, [r3, #0]
 8022f92:	681a      	ldr	r2, [r3, #0]
 8022f94:	687b      	ldr	r3, [r7, #4]
 8022f96:	681b      	ldr	r3, [r3, #0]
 8022f98:	f022 0201 	bic.w	r2, r2, #1
 8022f9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8022f9e:	6878      	ldr	r0, [r7, #4]
 8022fa0:	f000 f82c 	bl	8022ffc <UART_SetConfig>
 8022fa4:	4603      	mov	r3, r0
 8022fa6:	2b01      	cmp	r3, #1
 8022fa8:	d101      	bne.n	8022fae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8022faa:	2301      	movs	r3, #1
 8022fac:	e022      	b.n	8022ff4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8022fae:	687b      	ldr	r3, [r7, #4]
 8022fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022fb2:	2b00      	cmp	r3, #0
 8022fb4:	d002      	beq.n	8022fbc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8022fb6:	6878      	ldr	r0, [r7, #4]
 8022fb8:	f000 fa84 	bl	80234c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8022fbc:	687b      	ldr	r3, [r7, #4]
 8022fbe:	681b      	ldr	r3, [r3, #0]
 8022fc0:	685a      	ldr	r2, [r3, #4]
 8022fc2:	687b      	ldr	r3, [r7, #4]
 8022fc4:	681b      	ldr	r3, [r3, #0]
 8022fc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8022fca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8022fcc:	687b      	ldr	r3, [r7, #4]
 8022fce:	681b      	ldr	r3, [r3, #0]
 8022fd0:	689a      	ldr	r2, [r3, #8]
 8022fd2:	687b      	ldr	r3, [r7, #4]
 8022fd4:	681b      	ldr	r3, [r3, #0]
 8022fd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8022fda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8022fdc:	687b      	ldr	r3, [r7, #4]
 8022fde:	681b      	ldr	r3, [r3, #0]
 8022fe0:	681a      	ldr	r2, [r3, #0]
 8022fe2:	687b      	ldr	r3, [r7, #4]
 8022fe4:	681b      	ldr	r3, [r3, #0]
 8022fe6:	f042 0201 	orr.w	r2, r2, #1
 8022fea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8022fec:	6878      	ldr	r0, [r7, #4]
 8022fee:	f000 fb0b 	bl	8023608 <UART_CheckIdleState>
 8022ff2:	4603      	mov	r3, r0
}
 8022ff4:	4618      	mov	r0, r3
 8022ff6:	3708      	adds	r7, #8
 8022ff8:	46bd      	mov	sp, r7
 8022ffa:	bd80      	pop	{r7, pc}

08022ffc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8022ffc:	b580      	push	{r7, lr}
 8022ffe:	b088      	sub	sp, #32
 8023000:	af00      	add	r7, sp, #0
 8023002:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8023004:	2300      	movs	r3, #0
 8023006:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8023008:	687b      	ldr	r3, [r7, #4]
 802300a:	689a      	ldr	r2, [r3, #8]
 802300c:	687b      	ldr	r3, [r7, #4]
 802300e:	691b      	ldr	r3, [r3, #16]
 8023010:	431a      	orrs	r2, r3
 8023012:	687b      	ldr	r3, [r7, #4]
 8023014:	695b      	ldr	r3, [r3, #20]
 8023016:	431a      	orrs	r2, r3
 8023018:	687b      	ldr	r3, [r7, #4]
 802301a:	69db      	ldr	r3, [r3, #28]
 802301c:	4313      	orrs	r3, r2
 802301e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8023020:	687b      	ldr	r3, [r7, #4]
 8023022:	681b      	ldr	r3, [r3, #0]
 8023024:	681a      	ldr	r2, [r3, #0]
 8023026:	4ba6      	ldr	r3, [pc, #664]	; (80232c0 <UART_SetConfig+0x2c4>)
 8023028:	4013      	ands	r3, r2
 802302a:	687a      	ldr	r2, [r7, #4]
 802302c:	6812      	ldr	r2, [r2, #0]
 802302e:	6979      	ldr	r1, [r7, #20]
 8023030:	430b      	orrs	r3, r1
 8023032:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8023034:	687b      	ldr	r3, [r7, #4]
 8023036:	681b      	ldr	r3, [r3, #0]
 8023038:	685b      	ldr	r3, [r3, #4]
 802303a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 802303e:	687b      	ldr	r3, [r7, #4]
 8023040:	68da      	ldr	r2, [r3, #12]
 8023042:	687b      	ldr	r3, [r7, #4]
 8023044:	681b      	ldr	r3, [r3, #0]
 8023046:	430a      	orrs	r2, r1
 8023048:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 802304a:	687b      	ldr	r3, [r7, #4]
 802304c:	699b      	ldr	r3, [r3, #24]
 802304e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8023050:	687b      	ldr	r3, [r7, #4]
 8023052:	6a1b      	ldr	r3, [r3, #32]
 8023054:	697a      	ldr	r2, [r7, #20]
 8023056:	4313      	orrs	r3, r2
 8023058:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 802305a:	687b      	ldr	r3, [r7, #4]
 802305c:	681b      	ldr	r3, [r3, #0]
 802305e:	689b      	ldr	r3, [r3, #8]
 8023060:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8023064:	687b      	ldr	r3, [r7, #4]
 8023066:	681b      	ldr	r3, [r3, #0]
 8023068:	697a      	ldr	r2, [r7, #20]
 802306a:	430a      	orrs	r2, r1
 802306c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 802306e:	687b      	ldr	r3, [r7, #4]
 8023070:	681b      	ldr	r3, [r3, #0]
 8023072:	4a94      	ldr	r2, [pc, #592]	; (80232c4 <UART_SetConfig+0x2c8>)
 8023074:	4293      	cmp	r3, r2
 8023076:	d120      	bne.n	80230ba <UART_SetConfig+0xbe>
 8023078:	4b93      	ldr	r3, [pc, #588]	; (80232c8 <UART_SetConfig+0x2cc>)
 802307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802307e:	f003 0303 	and.w	r3, r3, #3
 8023082:	2b03      	cmp	r3, #3
 8023084:	d816      	bhi.n	80230b4 <UART_SetConfig+0xb8>
 8023086:	a201      	add	r2, pc, #4	; (adr r2, 802308c <UART_SetConfig+0x90>)
 8023088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802308c:	0802309d 	.word	0x0802309d
 8023090:	080230a9 	.word	0x080230a9
 8023094:	080230a3 	.word	0x080230a3
 8023098:	080230af 	.word	0x080230af
 802309c:	2301      	movs	r3, #1
 802309e:	77fb      	strb	r3, [r7, #31]
 80230a0:	e150      	b.n	8023344 <UART_SetConfig+0x348>
 80230a2:	2302      	movs	r3, #2
 80230a4:	77fb      	strb	r3, [r7, #31]
 80230a6:	e14d      	b.n	8023344 <UART_SetConfig+0x348>
 80230a8:	2304      	movs	r3, #4
 80230aa:	77fb      	strb	r3, [r7, #31]
 80230ac:	e14a      	b.n	8023344 <UART_SetConfig+0x348>
 80230ae:	2308      	movs	r3, #8
 80230b0:	77fb      	strb	r3, [r7, #31]
 80230b2:	e147      	b.n	8023344 <UART_SetConfig+0x348>
 80230b4:	2310      	movs	r3, #16
 80230b6:	77fb      	strb	r3, [r7, #31]
 80230b8:	e144      	b.n	8023344 <UART_SetConfig+0x348>
 80230ba:	687b      	ldr	r3, [r7, #4]
 80230bc:	681b      	ldr	r3, [r3, #0]
 80230be:	4a83      	ldr	r2, [pc, #524]	; (80232cc <UART_SetConfig+0x2d0>)
 80230c0:	4293      	cmp	r3, r2
 80230c2:	d132      	bne.n	802312a <UART_SetConfig+0x12e>
 80230c4:	4b80      	ldr	r3, [pc, #512]	; (80232c8 <UART_SetConfig+0x2cc>)
 80230c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80230ca:	f003 030c 	and.w	r3, r3, #12
 80230ce:	2b0c      	cmp	r3, #12
 80230d0:	d828      	bhi.n	8023124 <UART_SetConfig+0x128>
 80230d2:	a201      	add	r2, pc, #4	; (adr r2, 80230d8 <UART_SetConfig+0xdc>)
 80230d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80230d8:	0802310d 	.word	0x0802310d
 80230dc:	08023125 	.word	0x08023125
 80230e0:	08023125 	.word	0x08023125
 80230e4:	08023125 	.word	0x08023125
 80230e8:	08023119 	.word	0x08023119
 80230ec:	08023125 	.word	0x08023125
 80230f0:	08023125 	.word	0x08023125
 80230f4:	08023125 	.word	0x08023125
 80230f8:	08023113 	.word	0x08023113
 80230fc:	08023125 	.word	0x08023125
 8023100:	08023125 	.word	0x08023125
 8023104:	08023125 	.word	0x08023125
 8023108:	0802311f 	.word	0x0802311f
 802310c:	2300      	movs	r3, #0
 802310e:	77fb      	strb	r3, [r7, #31]
 8023110:	e118      	b.n	8023344 <UART_SetConfig+0x348>
 8023112:	2302      	movs	r3, #2
 8023114:	77fb      	strb	r3, [r7, #31]
 8023116:	e115      	b.n	8023344 <UART_SetConfig+0x348>
 8023118:	2304      	movs	r3, #4
 802311a:	77fb      	strb	r3, [r7, #31]
 802311c:	e112      	b.n	8023344 <UART_SetConfig+0x348>
 802311e:	2308      	movs	r3, #8
 8023120:	77fb      	strb	r3, [r7, #31]
 8023122:	e10f      	b.n	8023344 <UART_SetConfig+0x348>
 8023124:	2310      	movs	r3, #16
 8023126:	77fb      	strb	r3, [r7, #31]
 8023128:	e10c      	b.n	8023344 <UART_SetConfig+0x348>
 802312a:	687b      	ldr	r3, [r7, #4]
 802312c:	681b      	ldr	r3, [r3, #0]
 802312e:	4a68      	ldr	r2, [pc, #416]	; (80232d0 <UART_SetConfig+0x2d4>)
 8023130:	4293      	cmp	r3, r2
 8023132:	d120      	bne.n	8023176 <UART_SetConfig+0x17a>
 8023134:	4b64      	ldr	r3, [pc, #400]	; (80232c8 <UART_SetConfig+0x2cc>)
 8023136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802313a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 802313e:	2b30      	cmp	r3, #48	; 0x30
 8023140:	d013      	beq.n	802316a <UART_SetConfig+0x16e>
 8023142:	2b30      	cmp	r3, #48	; 0x30
 8023144:	d814      	bhi.n	8023170 <UART_SetConfig+0x174>
 8023146:	2b20      	cmp	r3, #32
 8023148:	d009      	beq.n	802315e <UART_SetConfig+0x162>
 802314a:	2b20      	cmp	r3, #32
 802314c:	d810      	bhi.n	8023170 <UART_SetConfig+0x174>
 802314e:	2b00      	cmp	r3, #0
 8023150:	d002      	beq.n	8023158 <UART_SetConfig+0x15c>
 8023152:	2b10      	cmp	r3, #16
 8023154:	d006      	beq.n	8023164 <UART_SetConfig+0x168>
 8023156:	e00b      	b.n	8023170 <UART_SetConfig+0x174>
 8023158:	2300      	movs	r3, #0
 802315a:	77fb      	strb	r3, [r7, #31]
 802315c:	e0f2      	b.n	8023344 <UART_SetConfig+0x348>
 802315e:	2302      	movs	r3, #2
 8023160:	77fb      	strb	r3, [r7, #31]
 8023162:	e0ef      	b.n	8023344 <UART_SetConfig+0x348>
 8023164:	2304      	movs	r3, #4
 8023166:	77fb      	strb	r3, [r7, #31]
 8023168:	e0ec      	b.n	8023344 <UART_SetConfig+0x348>
 802316a:	2308      	movs	r3, #8
 802316c:	77fb      	strb	r3, [r7, #31]
 802316e:	e0e9      	b.n	8023344 <UART_SetConfig+0x348>
 8023170:	2310      	movs	r3, #16
 8023172:	77fb      	strb	r3, [r7, #31]
 8023174:	e0e6      	b.n	8023344 <UART_SetConfig+0x348>
 8023176:	687b      	ldr	r3, [r7, #4]
 8023178:	681b      	ldr	r3, [r3, #0]
 802317a:	4a56      	ldr	r2, [pc, #344]	; (80232d4 <UART_SetConfig+0x2d8>)
 802317c:	4293      	cmp	r3, r2
 802317e:	d120      	bne.n	80231c2 <UART_SetConfig+0x1c6>
 8023180:	4b51      	ldr	r3, [pc, #324]	; (80232c8 <UART_SetConfig+0x2cc>)
 8023182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8023186:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 802318a:	2bc0      	cmp	r3, #192	; 0xc0
 802318c:	d013      	beq.n	80231b6 <UART_SetConfig+0x1ba>
 802318e:	2bc0      	cmp	r3, #192	; 0xc0
 8023190:	d814      	bhi.n	80231bc <UART_SetConfig+0x1c0>
 8023192:	2b80      	cmp	r3, #128	; 0x80
 8023194:	d009      	beq.n	80231aa <UART_SetConfig+0x1ae>
 8023196:	2b80      	cmp	r3, #128	; 0x80
 8023198:	d810      	bhi.n	80231bc <UART_SetConfig+0x1c0>
 802319a:	2b00      	cmp	r3, #0
 802319c:	d002      	beq.n	80231a4 <UART_SetConfig+0x1a8>
 802319e:	2b40      	cmp	r3, #64	; 0x40
 80231a0:	d006      	beq.n	80231b0 <UART_SetConfig+0x1b4>
 80231a2:	e00b      	b.n	80231bc <UART_SetConfig+0x1c0>
 80231a4:	2300      	movs	r3, #0
 80231a6:	77fb      	strb	r3, [r7, #31]
 80231a8:	e0cc      	b.n	8023344 <UART_SetConfig+0x348>
 80231aa:	2302      	movs	r3, #2
 80231ac:	77fb      	strb	r3, [r7, #31]
 80231ae:	e0c9      	b.n	8023344 <UART_SetConfig+0x348>
 80231b0:	2304      	movs	r3, #4
 80231b2:	77fb      	strb	r3, [r7, #31]
 80231b4:	e0c6      	b.n	8023344 <UART_SetConfig+0x348>
 80231b6:	2308      	movs	r3, #8
 80231b8:	77fb      	strb	r3, [r7, #31]
 80231ba:	e0c3      	b.n	8023344 <UART_SetConfig+0x348>
 80231bc:	2310      	movs	r3, #16
 80231be:	77fb      	strb	r3, [r7, #31]
 80231c0:	e0c0      	b.n	8023344 <UART_SetConfig+0x348>
 80231c2:	687b      	ldr	r3, [r7, #4]
 80231c4:	681b      	ldr	r3, [r3, #0]
 80231c6:	4a44      	ldr	r2, [pc, #272]	; (80232d8 <UART_SetConfig+0x2dc>)
 80231c8:	4293      	cmp	r3, r2
 80231ca:	d125      	bne.n	8023218 <UART_SetConfig+0x21c>
 80231cc:	4b3e      	ldr	r3, [pc, #248]	; (80232c8 <UART_SetConfig+0x2cc>)
 80231ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80231d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80231d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80231da:	d017      	beq.n	802320c <UART_SetConfig+0x210>
 80231dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80231e0:	d817      	bhi.n	8023212 <UART_SetConfig+0x216>
 80231e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80231e6:	d00b      	beq.n	8023200 <UART_SetConfig+0x204>
 80231e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80231ec:	d811      	bhi.n	8023212 <UART_SetConfig+0x216>
 80231ee:	2b00      	cmp	r3, #0
 80231f0:	d003      	beq.n	80231fa <UART_SetConfig+0x1fe>
 80231f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80231f6:	d006      	beq.n	8023206 <UART_SetConfig+0x20a>
 80231f8:	e00b      	b.n	8023212 <UART_SetConfig+0x216>
 80231fa:	2300      	movs	r3, #0
 80231fc:	77fb      	strb	r3, [r7, #31]
 80231fe:	e0a1      	b.n	8023344 <UART_SetConfig+0x348>
 8023200:	2302      	movs	r3, #2
 8023202:	77fb      	strb	r3, [r7, #31]
 8023204:	e09e      	b.n	8023344 <UART_SetConfig+0x348>
 8023206:	2304      	movs	r3, #4
 8023208:	77fb      	strb	r3, [r7, #31]
 802320a:	e09b      	b.n	8023344 <UART_SetConfig+0x348>
 802320c:	2308      	movs	r3, #8
 802320e:	77fb      	strb	r3, [r7, #31]
 8023210:	e098      	b.n	8023344 <UART_SetConfig+0x348>
 8023212:	2310      	movs	r3, #16
 8023214:	77fb      	strb	r3, [r7, #31]
 8023216:	e095      	b.n	8023344 <UART_SetConfig+0x348>
 8023218:	687b      	ldr	r3, [r7, #4]
 802321a:	681b      	ldr	r3, [r3, #0]
 802321c:	4a2f      	ldr	r2, [pc, #188]	; (80232dc <UART_SetConfig+0x2e0>)
 802321e:	4293      	cmp	r3, r2
 8023220:	d125      	bne.n	802326e <UART_SetConfig+0x272>
 8023222:	4b29      	ldr	r3, [pc, #164]	; (80232c8 <UART_SetConfig+0x2cc>)
 8023224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8023228:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 802322c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8023230:	d017      	beq.n	8023262 <UART_SetConfig+0x266>
 8023232:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8023236:	d817      	bhi.n	8023268 <UART_SetConfig+0x26c>
 8023238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802323c:	d00b      	beq.n	8023256 <UART_SetConfig+0x25a>
 802323e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8023242:	d811      	bhi.n	8023268 <UART_SetConfig+0x26c>
 8023244:	2b00      	cmp	r3, #0
 8023246:	d003      	beq.n	8023250 <UART_SetConfig+0x254>
 8023248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802324c:	d006      	beq.n	802325c <UART_SetConfig+0x260>
 802324e:	e00b      	b.n	8023268 <UART_SetConfig+0x26c>
 8023250:	2301      	movs	r3, #1
 8023252:	77fb      	strb	r3, [r7, #31]
 8023254:	e076      	b.n	8023344 <UART_SetConfig+0x348>
 8023256:	2302      	movs	r3, #2
 8023258:	77fb      	strb	r3, [r7, #31]
 802325a:	e073      	b.n	8023344 <UART_SetConfig+0x348>
 802325c:	2304      	movs	r3, #4
 802325e:	77fb      	strb	r3, [r7, #31]
 8023260:	e070      	b.n	8023344 <UART_SetConfig+0x348>
 8023262:	2308      	movs	r3, #8
 8023264:	77fb      	strb	r3, [r7, #31]
 8023266:	e06d      	b.n	8023344 <UART_SetConfig+0x348>
 8023268:	2310      	movs	r3, #16
 802326a:	77fb      	strb	r3, [r7, #31]
 802326c:	e06a      	b.n	8023344 <UART_SetConfig+0x348>
 802326e:	687b      	ldr	r3, [r7, #4]
 8023270:	681b      	ldr	r3, [r3, #0]
 8023272:	4a1b      	ldr	r2, [pc, #108]	; (80232e0 <UART_SetConfig+0x2e4>)
 8023274:	4293      	cmp	r3, r2
 8023276:	d138      	bne.n	80232ea <UART_SetConfig+0x2ee>
 8023278:	4b13      	ldr	r3, [pc, #76]	; (80232c8 <UART_SetConfig+0x2cc>)
 802327a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 802327e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8023282:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8023286:	d017      	beq.n	80232b8 <UART_SetConfig+0x2bc>
 8023288:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 802328c:	d82a      	bhi.n	80232e4 <UART_SetConfig+0x2e8>
 802328e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8023292:	d00b      	beq.n	80232ac <UART_SetConfig+0x2b0>
 8023294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8023298:	d824      	bhi.n	80232e4 <UART_SetConfig+0x2e8>
 802329a:	2b00      	cmp	r3, #0
 802329c:	d003      	beq.n	80232a6 <UART_SetConfig+0x2aa>
 802329e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80232a2:	d006      	beq.n	80232b2 <UART_SetConfig+0x2b6>
 80232a4:	e01e      	b.n	80232e4 <UART_SetConfig+0x2e8>
 80232a6:	2300      	movs	r3, #0
 80232a8:	77fb      	strb	r3, [r7, #31]
 80232aa:	e04b      	b.n	8023344 <UART_SetConfig+0x348>
 80232ac:	2302      	movs	r3, #2
 80232ae:	77fb      	strb	r3, [r7, #31]
 80232b0:	e048      	b.n	8023344 <UART_SetConfig+0x348>
 80232b2:	2304      	movs	r3, #4
 80232b4:	77fb      	strb	r3, [r7, #31]
 80232b6:	e045      	b.n	8023344 <UART_SetConfig+0x348>
 80232b8:	2308      	movs	r3, #8
 80232ba:	77fb      	strb	r3, [r7, #31]
 80232bc:	e042      	b.n	8023344 <UART_SetConfig+0x348>
 80232be:	bf00      	nop
 80232c0:	efff69f3 	.word	0xefff69f3
 80232c4:	40011000 	.word	0x40011000
 80232c8:	40023800 	.word	0x40023800
 80232cc:	40004400 	.word	0x40004400
 80232d0:	40004800 	.word	0x40004800
 80232d4:	40004c00 	.word	0x40004c00
 80232d8:	40005000 	.word	0x40005000
 80232dc:	40011400 	.word	0x40011400
 80232e0:	40007800 	.word	0x40007800
 80232e4:	2310      	movs	r3, #16
 80232e6:	77fb      	strb	r3, [r7, #31]
 80232e8:	e02c      	b.n	8023344 <UART_SetConfig+0x348>
 80232ea:	687b      	ldr	r3, [r7, #4]
 80232ec:	681b      	ldr	r3, [r3, #0]
 80232ee:	4a72      	ldr	r2, [pc, #456]	; (80234b8 <UART_SetConfig+0x4bc>)
 80232f0:	4293      	cmp	r3, r2
 80232f2:	d125      	bne.n	8023340 <UART_SetConfig+0x344>
 80232f4:	4b71      	ldr	r3, [pc, #452]	; (80234bc <UART_SetConfig+0x4c0>)
 80232f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80232fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80232fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8023302:	d017      	beq.n	8023334 <UART_SetConfig+0x338>
 8023304:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8023308:	d817      	bhi.n	802333a <UART_SetConfig+0x33e>
 802330a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802330e:	d00b      	beq.n	8023328 <UART_SetConfig+0x32c>
 8023310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8023314:	d811      	bhi.n	802333a <UART_SetConfig+0x33e>
 8023316:	2b00      	cmp	r3, #0
 8023318:	d003      	beq.n	8023322 <UART_SetConfig+0x326>
 802331a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 802331e:	d006      	beq.n	802332e <UART_SetConfig+0x332>
 8023320:	e00b      	b.n	802333a <UART_SetConfig+0x33e>
 8023322:	2300      	movs	r3, #0
 8023324:	77fb      	strb	r3, [r7, #31]
 8023326:	e00d      	b.n	8023344 <UART_SetConfig+0x348>
 8023328:	2302      	movs	r3, #2
 802332a:	77fb      	strb	r3, [r7, #31]
 802332c:	e00a      	b.n	8023344 <UART_SetConfig+0x348>
 802332e:	2304      	movs	r3, #4
 8023330:	77fb      	strb	r3, [r7, #31]
 8023332:	e007      	b.n	8023344 <UART_SetConfig+0x348>
 8023334:	2308      	movs	r3, #8
 8023336:	77fb      	strb	r3, [r7, #31]
 8023338:	e004      	b.n	8023344 <UART_SetConfig+0x348>
 802333a:	2310      	movs	r3, #16
 802333c:	77fb      	strb	r3, [r7, #31]
 802333e:	e001      	b.n	8023344 <UART_SetConfig+0x348>
 8023340:	2310      	movs	r3, #16
 8023342:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8023344:	687b      	ldr	r3, [r7, #4]
 8023346:	69db      	ldr	r3, [r3, #28]
 8023348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802334c:	d15b      	bne.n	8023406 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 802334e:	7ffb      	ldrb	r3, [r7, #31]
 8023350:	2b08      	cmp	r3, #8
 8023352:	d828      	bhi.n	80233a6 <UART_SetConfig+0x3aa>
 8023354:	a201      	add	r2, pc, #4	; (adr r2, 802335c <UART_SetConfig+0x360>)
 8023356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802335a:	bf00      	nop
 802335c:	08023381 	.word	0x08023381
 8023360:	08023389 	.word	0x08023389
 8023364:	08023391 	.word	0x08023391
 8023368:	080233a7 	.word	0x080233a7
 802336c:	08023397 	.word	0x08023397
 8023370:	080233a7 	.word	0x080233a7
 8023374:	080233a7 	.word	0x080233a7
 8023378:	080233a7 	.word	0x080233a7
 802337c:	0802339f 	.word	0x0802339f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8023380:	f7ff f99e 	bl	80226c0 <HAL_RCC_GetPCLK1Freq>
 8023384:	61b8      	str	r0, [r7, #24]
        break;
 8023386:	e013      	b.n	80233b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8023388:	f7ff f9ae 	bl	80226e8 <HAL_RCC_GetPCLK2Freq>
 802338c:	61b8      	str	r0, [r7, #24]
        break;
 802338e:	e00f      	b.n	80233b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8023390:	4b4b      	ldr	r3, [pc, #300]	; (80234c0 <UART_SetConfig+0x4c4>)
 8023392:	61bb      	str	r3, [r7, #24]
        break;
 8023394:	e00c      	b.n	80233b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8023396:	f7ff f881 	bl	802249c <HAL_RCC_GetSysClockFreq>
 802339a:	61b8      	str	r0, [r7, #24]
        break;
 802339c:	e008      	b.n	80233b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802339e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80233a2:	61bb      	str	r3, [r7, #24]
        break;
 80233a4:	e004      	b.n	80233b0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80233a6:	2300      	movs	r3, #0
 80233a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80233aa:	2301      	movs	r3, #1
 80233ac:	77bb      	strb	r3, [r7, #30]
        break;
 80233ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80233b0:	69bb      	ldr	r3, [r7, #24]
 80233b2:	2b00      	cmp	r3, #0
 80233b4:	d074      	beq.n	80234a0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80233b6:	69bb      	ldr	r3, [r7, #24]
 80233b8:	005a      	lsls	r2, r3, #1
 80233ba:	687b      	ldr	r3, [r7, #4]
 80233bc:	685b      	ldr	r3, [r3, #4]
 80233be:	085b      	lsrs	r3, r3, #1
 80233c0:	441a      	add	r2, r3
 80233c2:	687b      	ldr	r3, [r7, #4]
 80233c4:	685b      	ldr	r3, [r3, #4]
 80233c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80233ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80233cc:	693b      	ldr	r3, [r7, #16]
 80233ce:	2b0f      	cmp	r3, #15
 80233d0:	d916      	bls.n	8023400 <UART_SetConfig+0x404>
 80233d2:	693b      	ldr	r3, [r7, #16]
 80233d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80233d8:	d212      	bcs.n	8023400 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80233da:	693b      	ldr	r3, [r7, #16]
 80233dc:	b29b      	uxth	r3, r3
 80233de:	f023 030f 	bic.w	r3, r3, #15
 80233e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80233e4:	693b      	ldr	r3, [r7, #16]
 80233e6:	085b      	lsrs	r3, r3, #1
 80233e8:	b29b      	uxth	r3, r3
 80233ea:	f003 0307 	and.w	r3, r3, #7
 80233ee:	b29a      	uxth	r2, r3
 80233f0:	89fb      	ldrh	r3, [r7, #14]
 80233f2:	4313      	orrs	r3, r2
 80233f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80233f6:	687b      	ldr	r3, [r7, #4]
 80233f8:	681b      	ldr	r3, [r3, #0]
 80233fa:	89fa      	ldrh	r2, [r7, #14]
 80233fc:	60da      	str	r2, [r3, #12]
 80233fe:	e04f      	b.n	80234a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8023400:	2301      	movs	r3, #1
 8023402:	77bb      	strb	r3, [r7, #30]
 8023404:	e04c      	b.n	80234a0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8023406:	7ffb      	ldrb	r3, [r7, #31]
 8023408:	2b08      	cmp	r3, #8
 802340a:	d828      	bhi.n	802345e <UART_SetConfig+0x462>
 802340c:	a201      	add	r2, pc, #4	; (adr r2, 8023414 <UART_SetConfig+0x418>)
 802340e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023412:	bf00      	nop
 8023414:	08023439 	.word	0x08023439
 8023418:	08023441 	.word	0x08023441
 802341c:	08023449 	.word	0x08023449
 8023420:	0802345f 	.word	0x0802345f
 8023424:	0802344f 	.word	0x0802344f
 8023428:	0802345f 	.word	0x0802345f
 802342c:	0802345f 	.word	0x0802345f
 8023430:	0802345f 	.word	0x0802345f
 8023434:	08023457 	.word	0x08023457
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8023438:	f7ff f942 	bl	80226c0 <HAL_RCC_GetPCLK1Freq>
 802343c:	61b8      	str	r0, [r7, #24]
        break;
 802343e:	e013      	b.n	8023468 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8023440:	f7ff f952 	bl	80226e8 <HAL_RCC_GetPCLK2Freq>
 8023444:	61b8      	str	r0, [r7, #24]
        break;
 8023446:	e00f      	b.n	8023468 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8023448:	4b1d      	ldr	r3, [pc, #116]	; (80234c0 <UART_SetConfig+0x4c4>)
 802344a:	61bb      	str	r3, [r7, #24]
        break;
 802344c:	e00c      	b.n	8023468 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 802344e:	f7ff f825 	bl	802249c <HAL_RCC_GetSysClockFreq>
 8023452:	61b8      	str	r0, [r7, #24]
        break;
 8023454:	e008      	b.n	8023468 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8023456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802345a:	61bb      	str	r3, [r7, #24]
        break;
 802345c:	e004      	b.n	8023468 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 802345e:	2300      	movs	r3, #0
 8023460:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8023462:	2301      	movs	r3, #1
 8023464:	77bb      	strb	r3, [r7, #30]
        break;
 8023466:	bf00      	nop
    }

    if (pclk != 0U)
 8023468:	69bb      	ldr	r3, [r7, #24]
 802346a:	2b00      	cmp	r3, #0
 802346c:	d018      	beq.n	80234a0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 802346e:	687b      	ldr	r3, [r7, #4]
 8023470:	685b      	ldr	r3, [r3, #4]
 8023472:	085a      	lsrs	r2, r3, #1
 8023474:	69bb      	ldr	r3, [r7, #24]
 8023476:	441a      	add	r2, r3
 8023478:	687b      	ldr	r3, [r7, #4]
 802347a:	685b      	ldr	r3, [r3, #4]
 802347c:	fbb2 f3f3 	udiv	r3, r2, r3
 8023480:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8023482:	693b      	ldr	r3, [r7, #16]
 8023484:	2b0f      	cmp	r3, #15
 8023486:	d909      	bls.n	802349c <UART_SetConfig+0x4a0>
 8023488:	693b      	ldr	r3, [r7, #16]
 802348a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802348e:	d205      	bcs.n	802349c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8023490:	693b      	ldr	r3, [r7, #16]
 8023492:	b29a      	uxth	r2, r3
 8023494:	687b      	ldr	r3, [r7, #4]
 8023496:	681b      	ldr	r3, [r3, #0]
 8023498:	60da      	str	r2, [r3, #12]
 802349a:	e001      	b.n	80234a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 802349c:	2301      	movs	r3, #1
 802349e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80234a0:	687b      	ldr	r3, [r7, #4]
 80234a2:	2200      	movs	r2, #0
 80234a4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80234a6:	687b      	ldr	r3, [r7, #4]
 80234a8:	2200      	movs	r2, #0
 80234aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80234ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80234ae:	4618      	mov	r0, r3
 80234b0:	3720      	adds	r7, #32
 80234b2:	46bd      	mov	sp, r7
 80234b4:	bd80      	pop	{r7, pc}
 80234b6:	bf00      	nop
 80234b8:	40007c00 	.word	0x40007c00
 80234bc:	40023800 	.word	0x40023800
 80234c0:	00f42400 	.word	0x00f42400

080234c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80234c4:	b480      	push	{r7}
 80234c6:	b083      	sub	sp, #12
 80234c8:	af00      	add	r7, sp, #0
 80234ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80234cc:	687b      	ldr	r3, [r7, #4]
 80234ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80234d0:	f003 0301 	and.w	r3, r3, #1
 80234d4:	2b00      	cmp	r3, #0
 80234d6:	d00a      	beq.n	80234ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80234d8:	687b      	ldr	r3, [r7, #4]
 80234da:	681b      	ldr	r3, [r3, #0]
 80234dc:	685b      	ldr	r3, [r3, #4]
 80234de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80234e2:	687b      	ldr	r3, [r7, #4]
 80234e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80234e6:	687b      	ldr	r3, [r7, #4]
 80234e8:	681b      	ldr	r3, [r3, #0]
 80234ea:	430a      	orrs	r2, r1
 80234ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80234ee:	687b      	ldr	r3, [r7, #4]
 80234f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80234f2:	f003 0302 	and.w	r3, r3, #2
 80234f6:	2b00      	cmp	r3, #0
 80234f8:	d00a      	beq.n	8023510 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80234fa:	687b      	ldr	r3, [r7, #4]
 80234fc:	681b      	ldr	r3, [r3, #0]
 80234fe:	685b      	ldr	r3, [r3, #4]
 8023500:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8023504:	687b      	ldr	r3, [r7, #4]
 8023506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023508:	687b      	ldr	r3, [r7, #4]
 802350a:	681b      	ldr	r3, [r3, #0]
 802350c:	430a      	orrs	r2, r1
 802350e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8023510:	687b      	ldr	r3, [r7, #4]
 8023512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023514:	f003 0304 	and.w	r3, r3, #4
 8023518:	2b00      	cmp	r3, #0
 802351a:	d00a      	beq.n	8023532 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 802351c:	687b      	ldr	r3, [r7, #4]
 802351e:	681b      	ldr	r3, [r3, #0]
 8023520:	685b      	ldr	r3, [r3, #4]
 8023522:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8023526:	687b      	ldr	r3, [r7, #4]
 8023528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802352a:	687b      	ldr	r3, [r7, #4]
 802352c:	681b      	ldr	r3, [r3, #0]
 802352e:	430a      	orrs	r2, r1
 8023530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8023532:	687b      	ldr	r3, [r7, #4]
 8023534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023536:	f003 0308 	and.w	r3, r3, #8
 802353a:	2b00      	cmp	r3, #0
 802353c:	d00a      	beq.n	8023554 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 802353e:	687b      	ldr	r3, [r7, #4]
 8023540:	681b      	ldr	r3, [r3, #0]
 8023542:	685b      	ldr	r3, [r3, #4]
 8023544:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8023548:	687b      	ldr	r3, [r7, #4]
 802354a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802354c:	687b      	ldr	r3, [r7, #4]
 802354e:	681b      	ldr	r3, [r3, #0]
 8023550:	430a      	orrs	r2, r1
 8023552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8023554:	687b      	ldr	r3, [r7, #4]
 8023556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023558:	f003 0310 	and.w	r3, r3, #16
 802355c:	2b00      	cmp	r3, #0
 802355e:	d00a      	beq.n	8023576 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8023560:	687b      	ldr	r3, [r7, #4]
 8023562:	681b      	ldr	r3, [r3, #0]
 8023564:	689b      	ldr	r3, [r3, #8]
 8023566:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 802356a:	687b      	ldr	r3, [r7, #4]
 802356c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802356e:	687b      	ldr	r3, [r7, #4]
 8023570:	681b      	ldr	r3, [r3, #0]
 8023572:	430a      	orrs	r2, r1
 8023574:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8023576:	687b      	ldr	r3, [r7, #4]
 8023578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802357a:	f003 0320 	and.w	r3, r3, #32
 802357e:	2b00      	cmp	r3, #0
 8023580:	d00a      	beq.n	8023598 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8023582:	687b      	ldr	r3, [r7, #4]
 8023584:	681b      	ldr	r3, [r3, #0]
 8023586:	689b      	ldr	r3, [r3, #8]
 8023588:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 802358c:	687b      	ldr	r3, [r7, #4]
 802358e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8023590:	687b      	ldr	r3, [r7, #4]
 8023592:	681b      	ldr	r3, [r3, #0]
 8023594:	430a      	orrs	r2, r1
 8023596:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8023598:	687b      	ldr	r3, [r7, #4]
 802359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802359c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80235a0:	2b00      	cmp	r3, #0
 80235a2:	d01a      	beq.n	80235da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80235a4:	687b      	ldr	r3, [r7, #4]
 80235a6:	681b      	ldr	r3, [r3, #0]
 80235a8:	685b      	ldr	r3, [r3, #4]
 80235aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80235ae:	687b      	ldr	r3, [r7, #4]
 80235b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80235b2:	687b      	ldr	r3, [r7, #4]
 80235b4:	681b      	ldr	r3, [r3, #0]
 80235b6:	430a      	orrs	r2, r1
 80235b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80235ba:	687b      	ldr	r3, [r7, #4]
 80235bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80235be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80235c2:	d10a      	bne.n	80235da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80235c4:	687b      	ldr	r3, [r7, #4]
 80235c6:	681b      	ldr	r3, [r3, #0]
 80235c8:	685b      	ldr	r3, [r3, #4]
 80235ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80235ce:	687b      	ldr	r3, [r7, #4]
 80235d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80235d2:	687b      	ldr	r3, [r7, #4]
 80235d4:	681b      	ldr	r3, [r3, #0]
 80235d6:	430a      	orrs	r2, r1
 80235d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80235da:	687b      	ldr	r3, [r7, #4]
 80235dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80235de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80235e2:	2b00      	cmp	r3, #0
 80235e4:	d00a      	beq.n	80235fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80235e6:	687b      	ldr	r3, [r7, #4]
 80235e8:	681b      	ldr	r3, [r3, #0]
 80235ea:	685b      	ldr	r3, [r3, #4]
 80235ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80235f0:	687b      	ldr	r3, [r7, #4]
 80235f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80235f4:	687b      	ldr	r3, [r7, #4]
 80235f6:	681b      	ldr	r3, [r3, #0]
 80235f8:	430a      	orrs	r2, r1
 80235fa:	605a      	str	r2, [r3, #4]
  }
}
 80235fc:	bf00      	nop
 80235fe:	370c      	adds	r7, #12
 8023600:	46bd      	mov	sp, r7
 8023602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023606:	4770      	bx	lr

08023608 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8023608:	b580      	push	{r7, lr}
 802360a:	b086      	sub	sp, #24
 802360c:	af02      	add	r7, sp, #8
 802360e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8023610:	687b      	ldr	r3, [r7, #4]
 8023612:	2200      	movs	r2, #0
 8023614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8023618:	f7fd fbfc 	bl	8020e14 <HAL_GetTick>
 802361c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 802361e:	687b      	ldr	r3, [r7, #4]
 8023620:	681b      	ldr	r3, [r3, #0]
 8023622:	681b      	ldr	r3, [r3, #0]
 8023624:	f003 0308 	and.w	r3, r3, #8
 8023628:	2b08      	cmp	r3, #8
 802362a:	d10e      	bne.n	802364a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 802362c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8023630:	9300      	str	r3, [sp, #0]
 8023632:	68fb      	ldr	r3, [r7, #12]
 8023634:	2200      	movs	r2, #0
 8023636:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 802363a:	6878      	ldr	r0, [r7, #4]
 802363c:	f000 f831 	bl	80236a2 <UART_WaitOnFlagUntilTimeout>
 8023640:	4603      	mov	r3, r0
 8023642:	2b00      	cmp	r3, #0
 8023644:	d001      	beq.n	802364a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8023646:	2303      	movs	r3, #3
 8023648:	e027      	b.n	802369a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 802364a:	687b      	ldr	r3, [r7, #4]
 802364c:	681b      	ldr	r3, [r3, #0]
 802364e:	681b      	ldr	r3, [r3, #0]
 8023650:	f003 0304 	and.w	r3, r3, #4
 8023654:	2b04      	cmp	r3, #4
 8023656:	d10e      	bne.n	8023676 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8023658:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 802365c:	9300      	str	r3, [sp, #0]
 802365e:	68fb      	ldr	r3, [r7, #12]
 8023660:	2200      	movs	r2, #0
 8023662:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8023666:	6878      	ldr	r0, [r7, #4]
 8023668:	f000 f81b 	bl	80236a2 <UART_WaitOnFlagUntilTimeout>
 802366c:	4603      	mov	r3, r0
 802366e:	2b00      	cmp	r3, #0
 8023670:	d001      	beq.n	8023676 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8023672:	2303      	movs	r3, #3
 8023674:	e011      	b.n	802369a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8023676:	687b      	ldr	r3, [r7, #4]
 8023678:	2220      	movs	r2, #32
 802367a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 802367c:	687b      	ldr	r3, [r7, #4]
 802367e:	2220      	movs	r2, #32
 8023680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8023684:	687b      	ldr	r3, [r7, #4]
 8023686:	2200      	movs	r2, #0
 8023688:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 802368a:	687b      	ldr	r3, [r7, #4]
 802368c:	2200      	movs	r2, #0
 802368e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8023690:	687b      	ldr	r3, [r7, #4]
 8023692:	2200      	movs	r2, #0
 8023694:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8023698:	2300      	movs	r3, #0
}
 802369a:	4618      	mov	r0, r3
 802369c:	3710      	adds	r7, #16
 802369e:	46bd      	mov	sp, r7
 80236a0:	bd80      	pop	{r7, pc}

080236a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80236a2:	b580      	push	{r7, lr}
 80236a4:	b09c      	sub	sp, #112	; 0x70
 80236a6:	af00      	add	r7, sp, #0
 80236a8:	60f8      	str	r0, [r7, #12]
 80236aa:	60b9      	str	r1, [r7, #8]
 80236ac:	603b      	str	r3, [r7, #0]
 80236ae:	4613      	mov	r3, r2
 80236b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80236b2:	e0a7      	b.n	8023804 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80236b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80236b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80236ba:	f000 80a3 	beq.w	8023804 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80236be:	f7fd fba9 	bl	8020e14 <HAL_GetTick>
 80236c2:	4602      	mov	r2, r0
 80236c4:	683b      	ldr	r3, [r7, #0]
 80236c6:	1ad3      	subs	r3, r2, r3
 80236c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80236ca:	429a      	cmp	r2, r3
 80236cc:	d302      	bcc.n	80236d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80236ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80236d0:	2b00      	cmp	r3, #0
 80236d2:	d13f      	bne.n	8023754 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80236d4:	68fb      	ldr	r3, [r7, #12]
 80236d6:	681b      	ldr	r3, [r3, #0]
 80236d8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80236da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80236dc:	e853 3f00 	ldrex	r3, [r3]
 80236e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80236e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80236e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80236e8:	667b      	str	r3, [r7, #100]	; 0x64
 80236ea:	68fb      	ldr	r3, [r7, #12]
 80236ec:	681b      	ldr	r3, [r3, #0]
 80236ee:	461a      	mov	r2, r3
 80236f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80236f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80236f4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80236f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80236f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80236fa:	e841 2300 	strex	r3, r2, [r1]
 80236fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8023700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8023702:	2b00      	cmp	r3, #0
 8023704:	d1e6      	bne.n	80236d4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8023706:	68fb      	ldr	r3, [r7, #12]
 8023708:	681b      	ldr	r3, [r3, #0]
 802370a:	3308      	adds	r3, #8
 802370c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802370e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023710:	e853 3f00 	ldrex	r3, [r3]
 8023714:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8023716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023718:	f023 0301 	bic.w	r3, r3, #1
 802371c:	663b      	str	r3, [r7, #96]	; 0x60
 802371e:	68fb      	ldr	r3, [r7, #12]
 8023720:	681b      	ldr	r3, [r3, #0]
 8023722:	3308      	adds	r3, #8
 8023724:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8023726:	64ba      	str	r2, [r7, #72]	; 0x48
 8023728:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802372a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 802372c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802372e:	e841 2300 	strex	r3, r2, [r1]
 8023732:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8023734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8023736:	2b00      	cmp	r3, #0
 8023738:	d1e5      	bne.n	8023706 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 802373a:	68fb      	ldr	r3, [r7, #12]
 802373c:	2220      	movs	r2, #32
 802373e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8023740:	68fb      	ldr	r3, [r7, #12]
 8023742:	2220      	movs	r2, #32
 8023744:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8023748:	68fb      	ldr	r3, [r7, #12]
 802374a:	2200      	movs	r2, #0
 802374c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8023750:	2303      	movs	r3, #3
 8023752:	e068      	b.n	8023826 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8023754:	68fb      	ldr	r3, [r7, #12]
 8023756:	681b      	ldr	r3, [r3, #0]
 8023758:	681b      	ldr	r3, [r3, #0]
 802375a:	f003 0304 	and.w	r3, r3, #4
 802375e:	2b00      	cmp	r3, #0
 8023760:	d050      	beq.n	8023804 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8023762:	68fb      	ldr	r3, [r7, #12]
 8023764:	681b      	ldr	r3, [r3, #0]
 8023766:	69db      	ldr	r3, [r3, #28]
 8023768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802376c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8023770:	d148      	bne.n	8023804 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8023772:	68fb      	ldr	r3, [r7, #12]
 8023774:	681b      	ldr	r3, [r3, #0]
 8023776:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802377a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 802377c:	68fb      	ldr	r3, [r7, #12]
 802377e:	681b      	ldr	r3, [r3, #0]
 8023780:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023784:	e853 3f00 	ldrex	r3, [r3]
 8023788:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802378c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8023790:	66fb      	str	r3, [r7, #108]	; 0x6c
 8023792:	68fb      	ldr	r3, [r7, #12]
 8023794:	681b      	ldr	r3, [r3, #0]
 8023796:	461a      	mov	r2, r3
 8023798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802379a:	637b      	str	r3, [r7, #52]	; 0x34
 802379c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802379e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80237a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80237a2:	e841 2300 	strex	r3, r2, [r1]
 80237a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80237a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80237aa:	2b00      	cmp	r3, #0
 80237ac:	d1e6      	bne.n	802377c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80237ae:	68fb      	ldr	r3, [r7, #12]
 80237b0:	681b      	ldr	r3, [r3, #0]
 80237b2:	3308      	adds	r3, #8
 80237b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80237b6:	697b      	ldr	r3, [r7, #20]
 80237b8:	e853 3f00 	ldrex	r3, [r3]
 80237bc:	613b      	str	r3, [r7, #16]
   return(result);
 80237be:	693b      	ldr	r3, [r7, #16]
 80237c0:	f023 0301 	bic.w	r3, r3, #1
 80237c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80237c6:	68fb      	ldr	r3, [r7, #12]
 80237c8:	681b      	ldr	r3, [r3, #0]
 80237ca:	3308      	adds	r3, #8
 80237cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80237ce:	623a      	str	r2, [r7, #32]
 80237d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80237d2:	69f9      	ldr	r1, [r7, #28]
 80237d4:	6a3a      	ldr	r2, [r7, #32]
 80237d6:	e841 2300 	strex	r3, r2, [r1]
 80237da:	61bb      	str	r3, [r7, #24]
   return(result);
 80237dc:	69bb      	ldr	r3, [r7, #24]
 80237de:	2b00      	cmp	r3, #0
 80237e0:	d1e5      	bne.n	80237ae <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80237e2:	68fb      	ldr	r3, [r7, #12]
 80237e4:	2220      	movs	r2, #32
 80237e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80237e8:	68fb      	ldr	r3, [r7, #12]
 80237ea:	2220      	movs	r2, #32
 80237ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80237f0:	68fb      	ldr	r3, [r7, #12]
 80237f2:	2220      	movs	r2, #32
 80237f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80237f8:	68fb      	ldr	r3, [r7, #12]
 80237fa:	2200      	movs	r2, #0
 80237fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8023800:	2303      	movs	r3, #3
 8023802:	e010      	b.n	8023826 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8023804:	68fb      	ldr	r3, [r7, #12]
 8023806:	681b      	ldr	r3, [r3, #0]
 8023808:	69da      	ldr	r2, [r3, #28]
 802380a:	68bb      	ldr	r3, [r7, #8]
 802380c:	4013      	ands	r3, r2
 802380e:	68ba      	ldr	r2, [r7, #8]
 8023810:	429a      	cmp	r2, r3
 8023812:	bf0c      	ite	eq
 8023814:	2301      	moveq	r3, #1
 8023816:	2300      	movne	r3, #0
 8023818:	b2db      	uxtb	r3, r3
 802381a:	461a      	mov	r2, r3
 802381c:	79fb      	ldrb	r3, [r7, #7]
 802381e:	429a      	cmp	r2, r3
 8023820:	f43f af48 	beq.w	80236b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8023824:	2300      	movs	r3, #0
}
 8023826:	4618      	mov	r0, r3
 8023828:	3770      	adds	r7, #112	; 0x70
 802382a:	46bd      	mov	sp, r7
 802382c:	bd80      	pop	{r7, pc}
	...

08023830 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8023830:	b084      	sub	sp, #16
 8023832:	b580      	push	{r7, lr}
 8023834:	b084      	sub	sp, #16
 8023836:	af00      	add	r7, sp, #0
 8023838:	6078      	str	r0, [r7, #4]
 802383a:	f107 001c 	add.w	r0, r7, #28
 802383e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8023842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023844:	2b01      	cmp	r3, #1
 8023846:	d120      	bne.n	802388a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8023848:	687b      	ldr	r3, [r7, #4]
 802384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802384c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8023850:	687b      	ldr	r3, [r7, #4]
 8023852:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8023854:	687b      	ldr	r3, [r7, #4]
 8023856:	68da      	ldr	r2, [r3, #12]
 8023858:	4b20      	ldr	r3, [pc, #128]	; (80238dc <USB_CoreInit+0xac>)
 802385a:	4013      	ands	r3, r2
 802385c:	687a      	ldr	r2, [r7, #4]
 802385e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8023860:	687b      	ldr	r3, [r7, #4]
 8023862:	68db      	ldr	r3, [r3, #12]
 8023864:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8023868:	687b      	ldr	r3, [r7, #4]
 802386a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 802386c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802386e:	2b01      	cmp	r3, #1
 8023870:	d105      	bne.n	802387e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8023872:	687b      	ldr	r3, [r7, #4]
 8023874:	68db      	ldr	r3, [r3, #12]
 8023876:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 802387a:	687b      	ldr	r3, [r7, #4]
 802387c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802387e:	6878      	ldr	r0, [r7, #4]
 8023880:	f000 fa96 	bl	8023db0 <USB_CoreReset>
 8023884:	4603      	mov	r3, r0
 8023886:	73fb      	strb	r3, [r7, #15]
 8023888:	e010      	b.n	80238ac <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 802388a:	687b      	ldr	r3, [r7, #4]
 802388c:	68db      	ldr	r3, [r3, #12]
 802388e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8023892:	687b      	ldr	r3, [r7, #4]
 8023894:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8023896:	6878      	ldr	r0, [r7, #4]
 8023898:	f000 fa8a 	bl	8023db0 <USB_CoreReset>
 802389c:	4603      	mov	r3, r0
 802389e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80238a0:	687b      	ldr	r3, [r7, #4]
 80238a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80238a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80238a8:	687b      	ldr	r3, [r7, #4]
 80238aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80238ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80238ae:	2b01      	cmp	r3, #1
 80238b0:	d10b      	bne.n	80238ca <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80238b2:	687b      	ldr	r3, [r7, #4]
 80238b4:	689b      	ldr	r3, [r3, #8]
 80238b6:	f043 0206 	orr.w	r2, r3, #6
 80238ba:	687b      	ldr	r3, [r7, #4]
 80238bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80238be:	687b      	ldr	r3, [r7, #4]
 80238c0:	689b      	ldr	r3, [r3, #8]
 80238c2:	f043 0220 	orr.w	r2, r3, #32
 80238c6:	687b      	ldr	r3, [r7, #4]
 80238c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80238ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80238cc:	4618      	mov	r0, r3
 80238ce:	3710      	adds	r7, #16
 80238d0:	46bd      	mov	sp, r7
 80238d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80238d6:	b004      	add	sp, #16
 80238d8:	4770      	bx	lr
 80238da:	bf00      	nop
 80238dc:	ffbdffbf 	.word	0xffbdffbf

080238e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80238e0:	b480      	push	{r7}
 80238e2:	b083      	sub	sp, #12
 80238e4:	af00      	add	r7, sp, #0
 80238e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80238e8:	687b      	ldr	r3, [r7, #4]
 80238ea:	689b      	ldr	r3, [r3, #8]
 80238ec:	f023 0201 	bic.w	r2, r3, #1
 80238f0:	687b      	ldr	r3, [r7, #4]
 80238f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80238f4:	2300      	movs	r3, #0
}
 80238f6:	4618      	mov	r0, r3
 80238f8:	370c      	adds	r7, #12
 80238fa:	46bd      	mov	sp, r7
 80238fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023900:	4770      	bx	lr

08023902 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8023902:	b580      	push	{r7, lr}
 8023904:	b084      	sub	sp, #16
 8023906:	af00      	add	r7, sp, #0
 8023908:	6078      	str	r0, [r7, #4]
 802390a:	460b      	mov	r3, r1
 802390c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 802390e:	2300      	movs	r3, #0
 8023910:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8023912:	687b      	ldr	r3, [r7, #4]
 8023914:	68db      	ldr	r3, [r3, #12]
 8023916:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 802391a:	687b      	ldr	r3, [r7, #4]
 802391c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 802391e:	78fb      	ldrb	r3, [r7, #3]
 8023920:	2b01      	cmp	r3, #1
 8023922:	d115      	bne.n	8023950 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8023924:	687b      	ldr	r3, [r7, #4]
 8023926:	68db      	ldr	r3, [r3, #12]
 8023928:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 802392c:	687b      	ldr	r3, [r7, #4]
 802392e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8023930:	2001      	movs	r0, #1
 8023932:	f7fd fa7b 	bl	8020e2c <HAL_Delay>
      ms++;
 8023936:	68fb      	ldr	r3, [r7, #12]
 8023938:	3301      	adds	r3, #1
 802393a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 802393c:	6878      	ldr	r0, [r7, #4]
 802393e:	f000 fa29 	bl	8023d94 <USB_GetMode>
 8023942:	4603      	mov	r3, r0
 8023944:	2b01      	cmp	r3, #1
 8023946:	d01e      	beq.n	8023986 <USB_SetCurrentMode+0x84>
 8023948:	68fb      	ldr	r3, [r7, #12]
 802394a:	2b31      	cmp	r3, #49	; 0x31
 802394c:	d9f0      	bls.n	8023930 <USB_SetCurrentMode+0x2e>
 802394e:	e01a      	b.n	8023986 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8023950:	78fb      	ldrb	r3, [r7, #3]
 8023952:	2b00      	cmp	r3, #0
 8023954:	d115      	bne.n	8023982 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8023956:	687b      	ldr	r3, [r7, #4]
 8023958:	68db      	ldr	r3, [r3, #12]
 802395a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 802395e:	687b      	ldr	r3, [r7, #4]
 8023960:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8023962:	2001      	movs	r0, #1
 8023964:	f7fd fa62 	bl	8020e2c <HAL_Delay>
      ms++;
 8023968:	68fb      	ldr	r3, [r7, #12]
 802396a:	3301      	adds	r3, #1
 802396c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 802396e:	6878      	ldr	r0, [r7, #4]
 8023970:	f000 fa10 	bl	8023d94 <USB_GetMode>
 8023974:	4603      	mov	r3, r0
 8023976:	2b00      	cmp	r3, #0
 8023978:	d005      	beq.n	8023986 <USB_SetCurrentMode+0x84>
 802397a:	68fb      	ldr	r3, [r7, #12]
 802397c:	2b31      	cmp	r3, #49	; 0x31
 802397e:	d9f0      	bls.n	8023962 <USB_SetCurrentMode+0x60>
 8023980:	e001      	b.n	8023986 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8023982:	2301      	movs	r3, #1
 8023984:	e005      	b.n	8023992 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8023986:	68fb      	ldr	r3, [r7, #12]
 8023988:	2b32      	cmp	r3, #50	; 0x32
 802398a:	d101      	bne.n	8023990 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 802398c:	2301      	movs	r3, #1
 802398e:	e000      	b.n	8023992 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8023990:	2300      	movs	r3, #0
}
 8023992:	4618      	mov	r0, r3
 8023994:	3710      	adds	r7, #16
 8023996:	46bd      	mov	sp, r7
 8023998:	bd80      	pop	{r7, pc}
	...

0802399c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802399c:	b084      	sub	sp, #16
 802399e:	b580      	push	{r7, lr}
 80239a0:	b086      	sub	sp, #24
 80239a2:	af00      	add	r7, sp, #0
 80239a4:	6078      	str	r0, [r7, #4]
 80239a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80239aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80239ae:	2300      	movs	r3, #0
 80239b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80239b2:	687b      	ldr	r3, [r7, #4]
 80239b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80239b6:	2300      	movs	r3, #0
 80239b8:	613b      	str	r3, [r7, #16]
 80239ba:	e009      	b.n	80239d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80239bc:	687a      	ldr	r2, [r7, #4]
 80239be:	693b      	ldr	r3, [r7, #16]
 80239c0:	3340      	adds	r3, #64	; 0x40
 80239c2:	009b      	lsls	r3, r3, #2
 80239c4:	4413      	add	r3, r2
 80239c6:	2200      	movs	r2, #0
 80239c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80239ca:	693b      	ldr	r3, [r7, #16]
 80239cc:	3301      	adds	r3, #1
 80239ce:	613b      	str	r3, [r7, #16]
 80239d0:	693b      	ldr	r3, [r7, #16]
 80239d2:	2b0e      	cmp	r3, #14
 80239d4:	d9f2      	bls.n	80239bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80239d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80239d8:	2b00      	cmp	r3, #0
 80239da:	d11c      	bne.n	8023a16 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80239dc:	68fb      	ldr	r3, [r7, #12]
 80239de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80239e2:	685b      	ldr	r3, [r3, #4]
 80239e4:	68fa      	ldr	r2, [r7, #12]
 80239e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80239ea:	f043 0302 	orr.w	r3, r3, #2
 80239ee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80239f0:	687b      	ldr	r3, [r7, #4]
 80239f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80239f4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80239f8:	687b      	ldr	r3, [r7, #4]
 80239fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80239fc:	687b      	ldr	r3, [r7, #4]
 80239fe:	681b      	ldr	r3, [r3, #0]
 8023a00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8023a04:	687b      	ldr	r3, [r7, #4]
 8023a06:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8023a08:	687b      	ldr	r3, [r7, #4]
 8023a0a:	681b      	ldr	r3, [r3, #0]
 8023a0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8023a10:	687b      	ldr	r3, [r7, #4]
 8023a12:	601a      	str	r2, [r3, #0]
 8023a14:	e005      	b.n	8023a22 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8023a16:	687b      	ldr	r3, [r7, #4]
 8023a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023a1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8023a1e:	687b      	ldr	r3, [r7, #4]
 8023a20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8023a22:	68fb      	ldr	r3, [r7, #12]
 8023a24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8023a28:	461a      	mov	r2, r3
 8023a2a:	2300      	movs	r3, #0
 8023a2c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8023a2e:	68fb      	ldr	r3, [r7, #12]
 8023a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8023a34:	4619      	mov	r1, r3
 8023a36:	68fb      	ldr	r3, [r7, #12]
 8023a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8023a3c:	461a      	mov	r2, r3
 8023a3e:	680b      	ldr	r3, [r1, #0]
 8023a40:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8023a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a44:	2b01      	cmp	r3, #1
 8023a46:	d10c      	bne.n	8023a62 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8023a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023a4a:	2b00      	cmp	r3, #0
 8023a4c:	d104      	bne.n	8023a58 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8023a4e:	2100      	movs	r1, #0
 8023a50:	6878      	ldr	r0, [r7, #4]
 8023a52:	f000 f965 	bl	8023d20 <USB_SetDevSpeed>
 8023a56:	e008      	b.n	8023a6a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8023a58:	2101      	movs	r1, #1
 8023a5a:	6878      	ldr	r0, [r7, #4]
 8023a5c:	f000 f960 	bl	8023d20 <USB_SetDevSpeed>
 8023a60:	e003      	b.n	8023a6a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8023a62:	2103      	movs	r1, #3
 8023a64:	6878      	ldr	r0, [r7, #4]
 8023a66:	f000 f95b 	bl	8023d20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8023a6a:	2110      	movs	r1, #16
 8023a6c:	6878      	ldr	r0, [r7, #4]
 8023a6e:	f000 f8f3 	bl	8023c58 <USB_FlushTxFifo>
 8023a72:	4603      	mov	r3, r0
 8023a74:	2b00      	cmp	r3, #0
 8023a76:	d001      	beq.n	8023a7c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8023a78:	2301      	movs	r3, #1
 8023a7a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8023a7c:	6878      	ldr	r0, [r7, #4]
 8023a7e:	f000 f91f 	bl	8023cc0 <USB_FlushRxFifo>
 8023a82:	4603      	mov	r3, r0
 8023a84:	2b00      	cmp	r3, #0
 8023a86:	d001      	beq.n	8023a8c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8023a88:	2301      	movs	r3, #1
 8023a8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8023a8c:	68fb      	ldr	r3, [r7, #12]
 8023a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8023a92:	461a      	mov	r2, r3
 8023a94:	2300      	movs	r3, #0
 8023a96:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8023a98:	68fb      	ldr	r3, [r7, #12]
 8023a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8023a9e:	461a      	mov	r2, r3
 8023aa0:	2300      	movs	r3, #0
 8023aa2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8023aa4:	68fb      	ldr	r3, [r7, #12]
 8023aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8023aaa:	461a      	mov	r2, r3
 8023aac:	2300      	movs	r3, #0
 8023aae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8023ab0:	2300      	movs	r3, #0
 8023ab2:	613b      	str	r3, [r7, #16]
 8023ab4:	e043      	b.n	8023b3e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8023ab6:	693b      	ldr	r3, [r7, #16]
 8023ab8:	015a      	lsls	r2, r3, #5
 8023aba:	68fb      	ldr	r3, [r7, #12]
 8023abc:	4413      	add	r3, r2
 8023abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8023ac2:	681b      	ldr	r3, [r3, #0]
 8023ac4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8023ac8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023acc:	d118      	bne.n	8023b00 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8023ace:	693b      	ldr	r3, [r7, #16]
 8023ad0:	2b00      	cmp	r3, #0
 8023ad2:	d10a      	bne.n	8023aea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8023ad4:	693b      	ldr	r3, [r7, #16]
 8023ad6:	015a      	lsls	r2, r3, #5
 8023ad8:	68fb      	ldr	r3, [r7, #12]
 8023ada:	4413      	add	r3, r2
 8023adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8023ae0:	461a      	mov	r2, r3
 8023ae2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8023ae6:	6013      	str	r3, [r2, #0]
 8023ae8:	e013      	b.n	8023b12 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8023aea:	693b      	ldr	r3, [r7, #16]
 8023aec:	015a      	lsls	r2, r3, #5
 8023aee:	68fb      	ldr	r3, [r7, #12]
 8023af0:	4413      	add	r3, r2
 8023af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8023af6:	461a      	mov	r2, r3
 8023af8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8023afc:	6013      	str	r3, [r2, #0]
 8023afe:	e008      	b.n	8023b12 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8023b00:	693b      	ldr	r3, [r7, #16]
 8023b02:	015a      	lsls	r2, r3, #5
 8023b04:	68fb      	ldr	r3, [r7, #12]
 8023b06:	4413      	add	r3, r2
 8023b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8023b0c:	461a      	mov	r2, r3
 8023b0e:	2300      	movs	r3, #0
 8023b10:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8023b12:	693b      	ldr	r3, [r7, #16]
 8023b14:	015a      	lsls	r2, r3, #5
 8023b16:	68fb      	ldr	r3, [r7, #12]
 8023b18:	4413      	add	r3, r2
 8023b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8023b1e:	461a      	mov	r2, r3
 8023b20:	2300      	movs	r3, #0
 8023b22:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8023b24:	693b      	ldr	r3, [r7, #16]
 8023b26:	015a      	lsls	r2, r3, #5
 8023b28:	68fb      	ldr	r3, [r7, #12]
 8023b2a:	4413      	add	r3, r2
 8023b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8023b30:	461a      	mov	r2, r3
 8023b32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8023b36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8023b38:	693b      	ldr	r3, [r7, #16]
 8023b3a:	3301      	adds	r3, #1
 8023b3c:	613b      	str	r3, [r7, #16]
 8023b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023b40:	693a      	ldr	r2, [r7, #16]
 8023b42:	429a      	cmp	r2, r3
 8023b44:	d3b7      	bcc.n	8023ab6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8023b46:	2300      	movs	r3, #0
 8023b48:	613b      	str	r3, [r7, #16]
 8023b4a:	e043      	b.n	8023bd4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8023b4c:	693b      	ldr	r3, [r7, #16]
 8023b4e:	015a      	lsls	r2, r3, #5
 8023b50:	68fb      	ldr	r3, [r7, #12]
 8023b52:	4413      	add	r3, r2
 8023b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8023b58:	681b      	ldr	r3, [r3, #0]
 8023b5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8023b5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8023b62:	d118      	bne.n	8023b96 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8023b64:	693b      	ldr	r3, [r7, #16]
 8023b66:	2b00      	cmp	r3, #0
 8023b68:	d10a      	bne.n	8023b80 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8023b6a:	693b      	ldr	r3, [r7, #16]
 8023b6c:	015a      	lsls	r2, r3, #5
 8023b6e:	68fb      	ldr	r3, [r7, #12]
 8023b70:	4413      	add	r3, r2
 8023b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8023b76:	461a      	mov	r2, r3
 8023b78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8023b7c:	6013      	str	r3, [r2, #0]
 8023b7e:	e013      	b.n	8023ba8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8023b80:	693b      	ldr	r3, [r7, #16]
 8023b82:	015a      	lsls	r2, r3, #5
 8023b84:	68fb      	ldr	r3, [r7, #12]
 8023b86:	4413      	add	r3, r2
 8023b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8023b8c:	461a      	mov	r2, r3
 8023b8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8023b92:	6013      	str	r3, [r2, #0]
 8023b94:	e008      	b.n	8023ba8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8023b96:	693b      	ldr	r3, [r7, #16]
 8023b98:	015a      	lsls	r2, r3, #5
 8023b9a:	68fb      	ldr	r3, [r7, #12]
 8023b9c:	4413      	add	r3, r2
 8023b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8023ba2:	461a      	mov	r2, r3
 8023ba4:	2300      	movs	r3, #0
 8023ba6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8023ba8:	693b      	ldr	r3, [r7, #16]
 8023baa:	015a      	lsls	r2, r3, #5
 8023bac:	68fb      	ldr	r3, [r7, #12]
 8023bae:	4413      	add	r3, r2
 8023bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8023bb4:	461a      	mov	r2, r3
 8023bb6:	2300      	movs	r3, #0
 8023bb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8023bba:	693b      	ldr	r3, [r7, #16]
 8023bbc:	015a      	lsls	r2, r3, #5
 8023bbe:	68fb      	ldr	r3, [r7, #12]
 8023bc0:	4413      	add	r3, r2
 8023bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8023bc6:	461a      	mov	r2, r3
 8023bc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8023bcc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8023bce:	693b      	ldr	r3, [r7, #16]
 8023bd0:	3301      	adds	r3, #1
 8023bd2:	613b      	str	r3, [r7, #16]
 8023bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023bd6:	693a      	ldr	r2, [r7, #16]
 8023bd8:	429a      	cmp	r2, r3
 8023bda:	d3b7      	bcc.n	8023b4c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8023bdc:	68fb      	ldr	r3, [r7, #12]
 8023bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8023be2:	691b      	ldr	r3, [r3, #16]
 8023be4:	68fa      	ldr	r2, [r7, #12]
 8023be6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8023bea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8023bee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8023bf0:	687b      	ldr	r3, [r7, #4]
 8023bf2:	2200      	movs	r2, #0
 8023bf4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8023bf6:	687b      	ldr	r3, [r7, #4]
 8023bf8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8023bfc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8023bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023c00:	2b00      	cmp	r3, #0
 8023c02:	d105      	bne.n	8023c10 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8023c04:	687b      	ldr	r3, [r7, #4]
 8023c06:	699b      	ldr	r3, [r3, #24]
 8023c08:	f043 0210 	orr.w	r2, r3, #16
 8023c0c:	687b      	ldr	r3, [r7, #4]
 8023c0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8023c10:	687b      	ldr	r3, [r7, #4]
 8023c12:	699a      	ldr	r2, [r3, #24]
 8023c14:	4b0e      	ldr	r3, [pc, #56]	; (8023c50 <USB_DevInit+0x2b4>)
 8023c16:	4313      	orrs	r3, r2
 8023c18:	687a      	ldr	r2, [r7, #4]
 8023c1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8023c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023c1e:	2b00      	cmp	r3, #0
 8023c20:	d005      	beq.n	8023c2e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8023c22:	687b      	ldr	r3, [r7, #4]
 8023c24:	699b      	ldr	r3, [r3, #24]
 8023c26:	f043 0208 	orr.w	r2, r3, #8
 8023c2a:	687b      	ldr	r3, [r7, #4]
 8023c2c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8023c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023c30:	2b01      	cmp	r3, #1
 8023c32:	d105      	bne.n	8023c40 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8023c34:	687b      	ldr	r3, [r7, #4]
 8023c36:	699a      	ldr	r2, [r3, #24]
 8023c38:	4b06      	ldr	r3, [pc, #24]	; (8023c54 <USB_DevInit+0x2b8>)
 8023c3a:	4313      	orrs	r3, r2
 8023c3c:	687a      	ldr	r2, [r7, #4]
 8023c3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8023c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8023c42:	4618      	mov	r0, r3
 8023c44:	3718      	adds	r7, #24
 8023c46:	46bd      	mov	sp, r7
 8023c48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8023c4c:	b004      	add	sp, #16
 8023c4e:	4770      	bx	lr
 8023c50:	803c3800 	.word	0x803c3800
 8023c54:	40000004 	.word	0x40000004

08023c58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8023c58:	b480      	push	{r7}
 8023c5a:	b085      	sub	sp, #20
 8023c5c:	af00      	add	r7, sp, #0
 8023c5e:	6078      	str	r0, [r7, #4]
 8023c60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8023c62:	2300      	movs	r3, #0
 8023c64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8023c66:	68fb      	ldr	r3, [r7, #12]
 8023c68:	3301      	adds	r3, #1
 8023c6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8023c6c:	68fb      	ldr	r3, [r7, #12]
 8023c6e:	4a13      	ldr	r2, [pc, #76]	; (8023cbc <USB_FlushTxFifo+0x64>)
 8023c70:	4293      	cmp	r3, r2
 8023c72:	d901      	bls.n	8023c78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8023c74:	2303      	movs	r3, #3
 8023c76:	e01b      	b.n	8023cb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8023c78:	687b      	ldr	r3, [r7, #4]
 8023c7a:	691b      	ldr	r3, [r3, #16]
 8023c7c:	2b00      	cmp	r3, #0
 8023c7e:	daf2      	bge.n	8023c66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8023c80:	2300      	movs	r3, #0
 8023c82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8023c84:	683b      	ldr	r3, [r7, #0]
 8023c86:	019b      	lsls	r3, r3, #6
 8023c88:	f043 0220 	orr.w	r2, r3, #32
 8023c8c:	687b      	ldr	r3, [r7, #4]
 8023c8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8023c90:	68fb      	ldr	r3, [r7, #12]
 8023c92:	3301      	adds	r3, #1
 8023c94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8023c96:	68fb      	ldr	r3, [r7, #12]
 8023c98:	4a08      	ldr	r2, [pc, #32]	; (8023cbc <USB_FlushTxFifo+0x64>)
 8023c9a:	4293      	cmp	r3, r2
 8023c9c:	d901      	bls.n	8023ca2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8023c9e:	2303      	movs	r3, #3
 8023ca0:	e006      	b.n	8023cb0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8023ca2:	687b      	ldr	r3, [r7, #4]
 8023ca4:	691b      	ldr	r3, [r3, #16]
 8023ca6:	f003 0320 	and.w	r3, r3, #32
 8023caa:	2b20      	cmp	r3, #32
 8023cac:	d0f0      	beq.n	8023c90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8023cae:	2300      	movs	r3, #0
}
 8023cb0:	4618      	mov	r0, r3
 8023cb2:	3714      	adds	r7, #20
 8023cb4:	46bd      	mov	sp, r7
 8023cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023cba:	4770      	bx	lr
 8023cbc:	00030d40 	.word	0x00030d40

08023cc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8023cc0:	b480      	push	{r7}
 8023cc2:	b085      	sub	sp, #20
 8023cc4:	af00      	add	r7, sp, #0
 8023cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8023cc8:	2300      	movs	r3, #0
 8023cca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8023ccc:	68fb      	ldr	r3, [r7, #12]
 8023cce:	3301      	adds	r3, #1
 8023cd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8023cd2:	68fb      	ldr	r3, [r7, #12]
 8023cd4:	4a11      	ldr	r2, [pc, #68]	; (8023d1c <USB_FlushRxFifo+0x5c>)
 8023cd6:	4293      	cmp	r3, r2
 8023cd8:	d901      	bls.n	8023cde <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8023cda:	2303      	movs	r3, #3
 8023cdc:	e018      	b.n	8023d10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8023cde:	687b      	ldr	r3, [r7, #4]
 8023ce0:	691b      	ldr	r3, [r3, #16]
 8023ce2:	2b00      	cmp	r3, #0
 8023ce4:	daf2      	bge.n	8023ccc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8023ce6:	2300      	movs	r3, #0
 8023ce8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8023cea:	687b      	ldr	r3, [r7, #4]
 8023cec:	2210      	movs	r2, #16
 8023cee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8023cf0:	68fb      	ldr	r3, [r7, #12]
 8023cf2:	3301      	adds	r3, #1
 8023cf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8023cf6:	68fb      	ldr	r3, [r7, #12]
 8023cf8:	4a08      	ldr	r2, [pc, #32]	; (8023d1c <USB_FlushRxFifo+0x5c>)
 8023cfa:	4293      	cmp	r3, r2
 8023cfc:	d901      	bls.n	8023d02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8023cfe:	2303      	movs	r3, #3
 8023d00:	e006      	b.n	8023d10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8023d02:	687b      	ldr	r3, [r7, #4]
 8023d04:	691b      	ldr	r3, [r3, #16]
 8023d06:	f003 0310 	and.w	r3, r3, #16
 8023d0a:	2b10      	cmp	r3, #16
 8023d0c:	d0f0      	beq.n	8023cf0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8023d0e:	2300      	movs	r3, #0
}
 8023d10:	4618      	mov	r0, r3
 8023d12:	3714      	adds	r7, #20
 8023d14:	46bd      	mov	sp, r7
 8023d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d1a:	4770      	bx	lr
 8023d1c:	00030d40 	.word	0x00030d40

08023d20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8023d20:	b480      	push	{r7}
 8023d22:	b085      	sub	sp, #20
 8023d24:	af00      	add	r7, sp, #0
 8023d26:	6078      	str	r0, [r7, #4]
 8023d28:	460b      	mov	r3, r1
 8023d2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8023d2c:	687b      	ldr	r3, [r7, #4]
 8023d2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8023d30:	68fb      	ldr	r3, [r7, #12]
 8023d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8023d36:	681a      	ldr	r2, [r3, #0]
 8023d38:	78fb      	ldrb	r3, [r7, #3]
 8023d3a:	68f9      	ldr	r1, [r7, #12]
 8023d3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8023d40:	4313      	orrs	r3, r2
 8023d42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8023d44:	2300      	movs	r3, #0
}
 8023d46:	4618      	mov	r0, r3
 8023d48:	3714      	adds	r7, #20
 8023d4a:	46bd      	mov	sp, r7
 8023d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d50:	4770      	bx	lr

08023d52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8023d52:	b480      	push	{r7}
 8023d54:	b085      	sub	sp, #20
 8023d56:	af00      	add	r7, sp, #0
 8023d58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8023d5a:	687b      	ldr	r3, [r7, #4]
 8023d5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8023d5e:	68fb      	ldr	r3, [r7, #12]
 8023d60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8023d64:	681b      	ldr	r3, [r3, #0]
 8023d66:	68fa      	ldr	r2, [r7, #12]
 8023d68:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8023d6c:	f023 0303 	bic.w	r3, r3, #3
 8023d70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8023d72:	68fb      	ldr	r3, [r7, #12]
 8023d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8023d78:	685b      	ldr	r3, [r3, #4]
 8023d7a:	68fa      	ldr	r2, [r7, #12]
 8023d7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8023d80:	f043 0302 	orr.w	r3, r3, #2
 8023d84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8023d86:	2300      	movs	r3, #0
}
 8023d88:	4618      	mov	r0, r3
 8023d8a:	3714      	adds	r7, #20
 8023d8c:	46bd      	mov	sp, r7
 8023d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d92:	4770      	bx	lr

08023d94 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8023d94:	b480      	push	{r7}
 8023d96:	b083      	sub	sp, #12
 8023d98:	af00      	add	r7, sp, #0
 8023d9a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8023d9c:	687b      	ldr	r3, [r7, #4]
 8023d9e:	695b      	ldr	r3, [r3, #20]
 8023da0:	f003 0301 	and.w	r3, r3, #1
}
 8023da4:	4618      	mov	r0, r3
 8023da6:	370c      	adds	r7, #12
 8023da8:	46bd      	mov	sp, r7
 8023daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023dae:	4770      	bx	lr

08023db0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8023db0:	b480      	push	{r7}
 8023db2:	b085      	sub	sp, #20
 8023db4:	af00      	add	r7, sp, #0
 8023db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8023db8:	2300      	movs	r3, #0
 8023dba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8023dbc:	68fb      	ldr	r3, [r7, #12]
 8023dbe:	3301      	adds	r3, #1
 8023dc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8023dc2:	68fb      	ldr	r3, [r7, #12]
 8023dc4:	4a13      	ldr	r2, [pc, #76]	; (8023e14 <USB_CoreReset+0x64>)
 8023dc6:	4293      	cmp	r3, r2
 8023dc8:	d901      	bls.n	8023dce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8023dca:	2303      	movs	r3, #3
 8023dcc:	e01b      	b.n	8023e06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8023dce:	687b      	ldr	r3, [r7, #4]
 8023dd0:	691b      	ldr	r3, [r3, #16]
 8023dd2:	2b00      	cmp	r3, #0
 8023dd4:	daf2      	bge.n	8023dbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8023dd6:	2300      	movs	r3, #0
 8023dd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8023dda:	687b      	ldr	r3, [r7, #4]
 8023ddc:	691b      	ldr	r3, [r3, #16]
 8023dde:	f043 0201 	orr.w	r2, r3, #1
 8023de2:	687b      	ldr	r3, [r7, #4]
 8023de4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8023de6:	68fb      	ldr	r3, [r7, #12]
 8023de8:	3301      	adds	r3, #1
 8023dea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8023dec:	68fb      	ldr	r3, [r7, #12]
 8023dee:	4a09      	ldr	r2, [pc, #36]	; (8023e14 <USB_CoreReset+0x64>)
 8023df0:	4293      	cmp	r3, r2
 8023df2:	d901      	bls.n	8023df8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8023df4:	2303      	movs	r3, #3
 8023df6:	e006      	b.n	8023e06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8023df8:	687b      	ldr	r3, [r7, #4]
 8023dfa:	691b      	ldr	r3, [r3, #16]
 8023dfc:	f003 0301 	and.w	r3, r3, #1
 8023e00:	2b01      	cmp	r3, #1
 8023e02:	d0f0      	beq.n	8023de6 <USB_CoreReset+0x36>

  return HAL_OK;
 8023e04:	2300      	movs	r3, #0
}
 8023e06:	4618      	mov	r0, r3
 8023e08:	3714      	adds	r7, #20
 8023e0a:	46bd      	mov	sp, r7
 8023e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e10:	4770      	bx	lr
 8023e12:	bf00      	nop
 8023e14:	00030d40 	.word	0x00030d40

08023e18 <memset>:
 8023e18:	4402      	add	r2, r0
 8023e1a:	4603      	mov	r3, r0
 8023e1c:	4293      	cmp	r3, r2
 8023e1e:	d100      	bne.n	8023e22 <memset+0xa>
 8023e20:	4770      	bx	lr
 8023e22:	f803 1b01 	strb.w	r1, [r3], #1
 8023e26:	e7f9      	b.n	8023e1c <memset+0x4>

08023e28 <__libc_init_array>:
 8023e28:	b570      	push	{r4, r5, r6, lr}
 8023e2a:	4d0d      	ldr	r5, [pc, #52]	; (8023e60 <__libc_init_array+0x38>)
 8023e2c:	4c0d      	ldr	r4, [pc, #52]	; (8023e64 <__libc_init_array+0x3c>)
 8023e2e:	1b64      	subs	r4, r4, r5
 8023e30:	10a4      	asrs	r4, r4, #2
 8023e32:	2600      	movs	r6, #0
 8023e34:	42a6      	cmp	r6, r4
 8023e36:	d109      	bne.n	8023e4c <__libc_init_array+0x24>
 8023e38:	4d0b      	ldr	r5, [pc, #44]	; (8023e68 <__libc_init_array+0x40>)
 8023e3a:	4c0c      	ldr	r4, [pc, #48]	; (8023e6c <__libc_init_array+0x44>)
 8023e3c:	f000 f818 	bl	8023e70 <_init>
 8023e40:	1b64      	subs	r4, r4, r5
 8023e42:	10a4      	asrs	r4, r4, #2
 8023e44:	2600      	movs	r6, #0
 8023e46:	42a6      	cmp	r6, r4
 8023e48:	d105      	bne.n	8023e56 <__libc_init_array+0x2e>
 8023e4a:	bd70      	pop	{r4, r5, r6, pc}
 8023e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8023e50:	4798      	blx	r3
 8023e52:	3601      	adds	r6, #1
 8023e54:	e7ee      	b.n	8023e34 <__libc_init_array+0xc>
 8023e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8023e5a:	4798      	blx	r3
 8023e5c:	3601      	adds	r6, #1
 8023e5e:	e7f2      	b.n	8023e46 <__libc_init_array+0x1e>
 8023e60:	08023ea8 	.word	0x08023ea8
 8023e64:	08023ea8 	.word	0x08023ea8
 8023e68:	08023ea8 	.word	0x08023ea8
 8023e6c:	08023eac 	.word	0x08023eac

08023e70 <_init>:
 8023e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023e72:	bf00      	nop
 8023e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023e76:	bc08      	pop	{r3}
 8023e78:	469e      	mov	lr, r3
 8023e7a:	4770      	bx	lr

08023e7c <_fini>:
 8023e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023e7e:	bf00      	nop
 8023e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023e82:	bc08      	pop	{r3}
 8023e84:	469e      	mov	lr, r3
 8023e86:	4770      	bx	lr
