
STM32F767_ethernet_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000120b8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c34  080122b8  080122b8  000222b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014eec  08014eec  000301c8  2**0
                  CONTENTS
  4 .ARM          00000008  08014eec  08014eec  00024eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014ef4  08014ef4  000301c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014ef4  08014ef4  00024ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014ef8  08014ef8  00024ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08014efc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  08014f84  00030088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  08015024  00030128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008918  200001c8  080150c4  000301c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20008ae0  080150c4  00038ae0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000301f6  2**0
                  CONTENTS, READONLY
 15 .debug_info   00027dee  00000000  00000000  00030239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000638b  00000000  00000000  00058027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001e50  00000000  00000000  0005e3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000182a  00000000  00000000  00060208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000360c2  00000000  00000000  00061a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003136f  00000000  00000000  00097af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00117599  00000000  00000000  000c8e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008880  00000000  00000000  001e03fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000063  00000000  00000000  001e8c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001c8 	.word	0x200001c8
 800021c:	00000000 	.word	0x00000000
 8000220:	080122a0 	.word	0x080122a0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001cc 	.word	0x200001cc
 800023c:	080122a0 	.word	0x080122a0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 ff86 	bl	80014f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f814 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f92e 	bl	8000848 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005ec:	f000 f8ce 	bl	800078c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f0:	f000 f8fc 	bl	80007ec <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 80005f4:	f005 fa90 	bl	8005b18 <MX_LWIP_Init>
  MX_TIM2_Init();
 80005f8:	f000 f87a 	bl	80006f0 <MX_TIM2_Init>
#elif defined udp_echo_server
  udp_echoserver_init();
#elif defined tcp_echo_server
  tcp_echoserver_init();
#elif defined tcp_client_raw
  HAL_TIM_Base_Start_IT(&htim2);
 80005fc:	4803      	ldr	r0, [pc, #12]	; (800060c <main+0x30>)
 80005fe:	f003 febf 	bl	8004380 <HAL_TIM_Base_Start_IT>
  tcp_client_init();
 8000602:	f000 fc3d 	bl	8000e80 <tcp_client_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8000606:	f005 fbc7 	bl	8005d98 <MX_LWIP_Process>
 800060a:	e7fc      	b.n	8000606 <main+0x2a>
 800060c:	200001e4 	.word	0x200001e4

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	2234      	movs	r2, #52	; 0x34
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f010 fe03 	bl	801122a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000634:	f002 fcf0 	bl	8003018 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <SystemClock_Config+0xd8>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a2a      	ldr	r2, [pc, #168]	; (80006e8 <SystemClock_Config+0xd8>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemClock_Config+0xd8>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	4b26      	ldr	r3, [pc, #152]	; (80006ec <SystemClock_Config+0xdc>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a25      	ldr	r2, [pc, #148]	; (80006ec <SystemClock_Config+0xdc>)
 8000656:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b23      	ldr	r3, [pc, #140]	; (80006ec <SystemClock_Config+0xdc>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000668:	2301      	movs	r3, #1
 800066a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800066c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000670:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	2302      	movs	r3, #2
 8000674:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000676:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800067c:	2304      	movs	r3, #4
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000680:	23d8      	movs	r3, #216	; 0xd8
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000688:	2309      	movs	r3, #9
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800068c:	2302      	movs	r3, #2
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4618      	mov	r0, r3
 8000696:	f002 fd1f 	bl	80030d8 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a0:	f000 f974 	bl	800098c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006a4:	f002 fcc8 	bl	8003038 <HAL_PWREx_EnableOverDrive>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006ae:	f000 f96d 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b2:	230f      	movs	r3, #15
 80006b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	2302      	movs	r3, #2
 80006b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	2107      	movs	r1, #7
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 ffaf 	bl	8003634 <HAL_RCC_ClockConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006dc:	f000 f956 	bl	800098c <Error_Handler>
  }
}
 80006e0:	bf00      	nop
 80006e2:	3750      	adds	r7, #80	; 0x50
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f6:	f107 0310 	add.w	r3, r7, #16
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800070e:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <MX_TIM2_Init+0x98>)
 8000710:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000714:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10400-1;
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <MX_TIM2_Init+0x98>)
 8000718:	f642 029f 	movw	r2, #10399	; 0x289f
 800071c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <MX_TIM2_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <MX_TIM2_Init+0x98>)
 8000726:	f242 720f 	movw	r2, #9999	; 0x270f
 800072a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072c:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MX_TIM2_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_TIM2_Init+0x98>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000738:	4813      	ldr	r0, [pc, #76]	; (8000788 <MX_TIM2_Init+0x98>)
 800073a:	f003 fdc9 	bl	80042d0 <HAL_TIM_Base_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000744:	f000 f922 	bl	800098c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800074e:	f107 0310 	add.w	r3, r7, #16
 8000752:	4619      	mov	r1, r3
 8000754:	480c      	ldr	r0, [pc, #48]	; (8000788 <MX_TIM2_Init+0x98>)
 8000756:	f003 ffab 	bl	80046b0 <HAL_TIM_ConfigClockSource>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000760:	f000 f914 	bl	800098c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	4619      	mov	r1, r3
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_TIM2_Init+0x98>)
 8000772:	f004 f9c9 	bl	8004b08 <HAL_TIMEx_MasterConfigSynchronization>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800077c:	f000 f906 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	3720      	adds	r7, #32
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200001e4 	.word	0x200001e4

0800078c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 8000792:	4a15      	ldr	r2, [pc, #84]	; (80007e8 <MX_USART3_UART_Init+0x5c>)
 8000794:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 8000798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800079c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 80007d0:	f004 fa46 	bl	8004c60 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007da:	f000 f8d7 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000230 	.word	0x20000230
 80007e8:	40004800 	.word	0x40004800

080007ec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fa:	2206      	movs	r2, #6
 80007fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000800:	2202      	movs	r2, #2
 8000802:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080c:	2202      	movs	r2, #2
 800080e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000812:	2201      	movs	r2, #1
 8000814:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000824:	2201      	movs	r2, #1
 8000826:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000830:	f002 faa9 	bl	8002d86 <HAL_PCD_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800083a:	f000 f8a7 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200002b8 	.word	0x200002b8

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08c      	sub	sp, #48	; 0x30
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	4b47      	ldr	r3, [pc, #284]	; (800097c <MX_GPIO_Init+0x134>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a46      	ldr	r2, [pc, #280]	; (800097c <MX_GPIO_Init+0x134>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b44      	ldr	r3, [pc, #272]	; (800097c <MX_GPIO_Init+0x134>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	61bb      	str	r3, [r7, #24]
 8000874:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000876:	4b41      	ldr	r3, [pc, #260]	; (800097c <MX_GPIO_Init+0x134>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a40      	ldr	r2, [pc, #256]	; (800097c <MX_GPIO_Init+0x134>)
 800087c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b3e      	ldr	r3, [pc, #248]	; (800097c <MX_GPIO_Init+0x134>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088a:	617b      	str	r3, [r7, #20]
 800088c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	4b3b      	ldr	r3, [pc, #236]	; (800097c <MX_GPIO_Init+0x134>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a3a      	ldr	r2, [pc, #232]	; (800097c <MX_GPIO_Init+0x134>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b38      	ldr	r3, [pc, #224]	; (800097c <MX_GPIO_Init+0x134>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	4b35      	ldr	r3, [pc, #212]	; (800097c <MX_GPIO_Init+0x134>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a34      	ldr	r2, [pc, #208]	; (800097c <MX_GPIO_Init+0x134>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b32      	ldr	r3, [pc, #200]	; (800097c <MX_GPIO_Init+0x134>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008be:	4b2f      	ldr	r3, [pc, #188]	; (800097c <MX_GPIO_Init+0x134>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a2e      	ldr	r2, [pc, #184]	; (800097c <MX_GPIO_Init+0x134>)
 80008c4:	f043 0308 	orr.w	r3, r3, #8
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b2c      	ldr	r3, [pc, #176]	; (800097c <MX_GPIO_Init+0x134>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0308 	and.w	r3, r3, #8
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008d6:	4b29      	ldr	r3, [pc, #164]	; (800097c <MX_GPIO_Init+0x134>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a28      	ldr	r2, [pc, #160]	; (800097c <MX_GPIO_Init+0x134>)
 80008dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b26      	ldr	r3, [pc, #152]	; (800097c <MX_GPIO_Init+0x134>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80008f4:	4822      	ldr	r0, [pc, #136]	; (8000980 <MX_GPIO_Init+0x138>)
 80008f6:	f002 fa2d 	bl	8002d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2140      	movs	r1, #64	; 0x40
 80008fe:	4821      	ldr	r0, [pc, #132]	; (8000984 <MX_GPIO_Init+0x13c>)
 8000900:	f002 fa28 	bl	8002d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000904:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800090a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	481b      	ldr	r0, [pc, #108]	; (8000988 <MX_GPIO_Init+0x140>)
 800091c:	f002 f86e 	bl	80029fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000920:	f244 0381 	movw	r3, #16513	; 0x4081
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4811      	ldr	r0, [pc, #68]	; (8000980 <MX_GPIO_Init+0x138>)
 800093a:	f002 f85f 	bl	80029fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800093e:	2340      	movs	r3, #64	; 0x40
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	480b      	ldr	r0, [pc, #44]	; (8000984 <MX_GPIO_Init+0x13c>)
 8000956:	f002 f851 	bl	80029fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800095a:	2380      	movs	r3, #128	; 0x80
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_GPIO_Init+0x13c>)
 800096e:	f002 f845 	bl	80029fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000972:	bf00      	nop
 8000974:	3730      	adds	r7, #48	; 0x30
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800
 8000980:	40020400 	.word	0x40020400
 8000984:	40021800 	.word	0x40021800
 8000988:	40020800 	.word	0x40020800

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <HAL_MspInit+0x44>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a0e      	ldr	r2, [pc, #56]	; (80009dc <HAL_MspInit+0x44>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <HAL_MspInit+0x44>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_MspInit+0x44>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	4a08      	ldr	r2, [pc, #32]	; (80009dc <HAL_MspInit+0x44>)
 80009bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c0:	6453      	str	r3, [r2, #68]	; 0x44
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_MspInit+0x44>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800

080009e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009f0:	d113      	bne.n	8000a1a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <HAL_TIM_Base_MspInit+0x44>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <HAL_TIM_Base_MspInit+0x44>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6413      	str	r3, [r2, #64]	; 0x40
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <HAL_TIM_Base_MspInit+0x44>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	201c      	movs	r0, #28
 8000a10:	f000 fecb 	bl	80017aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a14:	201c      	movs	r0, #28
 8000a16:	f000 fee4 	bl	80017e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800

08000a28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b0ae      	sub	sp, #184	; 0xb8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2290      	movs	r2, #144	; 0x90
 8000a46:	2100      	movs	r1, #0
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f010 fbee 	bl	801122a <memset>
  if(huart->Instance==USART3)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a22      	ldr	r2, [pc, #136]	; (8000adc <HAL_UART_MspInit+0xb4>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d13c      	bne.n	8000ad2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	4618      	mov	r0, r3
 8000a68:	f003 f80a 	bl	8003a80 <HAL_RCCEx_PeriphCLKConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a72:	f7ff ff8b 	bl	800098c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a76:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <HAL_UART_MspInit+0xb8>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	4a19      	ldr	r2, [pc, #100]	; (8000ae0 <HAL_UART_MspInit+0xb8>)
 8000a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a80:	6413      	str	r3, [r2, #64]	; 0x40
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <HAL_UART_MspInit+0xb8>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8e:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <HAL_UART_MspInit+0xb8>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <HAL_UART_MspInit+0xb8>)
 8000a94:	f043 0308 	orr.w	r3, r3, #8
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_UART_MspInit+0xb8>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0308 	and.w	r3, r3, #8
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000aa6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aba:	2303      	movs	r3, #3
 8000abc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ac0:	2307      	movs	r3, #7
 8000ac2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000aca:	4619      	mov	r1, r3
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <HAL_UART_MspInit+0xbc>)
 8000ace:	f001 ff95 	bl	80029fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ad2:	bf00      	nop
 8000ad4:	37b8      	adds	r7, #184	; 0xb8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40004800 	.word	0x40004800
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020c00 	.word	0x40020c00

08000ae8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b0ae      	sub	sp, #184	; 0xb8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2290      	movs	r2, #144	; 0x90
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f010 fb8e 	bl	801122a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b16:	d159      	bne.n	8000bcc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000b18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000b1c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f002 ffa9 	bl	8003a80 <HAL_RCCEx_PeriphCLKConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000b34:	f7ff ff2a 	bl	800098c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b38:	4b26      	ldr	r3, [pc, #152]	; (8000bd4 <HAL_PCD_MspInit+0xec>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	4a25      	ldr	r2, [pc, #148]	; (8000bd4 <HAL_PCD_MspInit+0xec>)
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	6313      	str	r3, [r2, #48]	; 0x30
 8000b44:	4b23      	ldr	r3, [pc, #140]	; (8000bd4 <HAL_PCD_MspInit+0xec>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b50:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b64:	2303      	movs	r3, #3
 8000b66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b6a:	230a      	movs	r3, #10
 8000b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b74:	4619      	mov	r1, r3
 8000b76:	4818      	ldr	r0, [pc, #96]	; (8000bd8 <HAL_PCD_MspInit+0xf0>)
 8000b78:	f001 ff40 	bl	80029fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b84:	2300      	movs	r3, #0
 8000b86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b94:	4619      	mov	r1, r3
 8000b96:	4810      	ldr	r0, [pc, #64]	; (8000bd8 <HAL_PCD_MspInit+0xf0>)
 8000b98:	f001 ff30 	bl	80029fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	; (8000bd4 <HAL_PCD_MspInit+0xec>)
 8000b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ba0:	4a0c      	ldr	r2, [pc, #48]	; (8000bd4 <HAL_PCD_MspInit+0xec>)
 8000ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba6:	6353      	str	r3, [r2, #52]	; 0x34
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <HAL_PCD_MspInit+0xec>)
 8000baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <HAL_PCD_MspInit+0xec>)
 8000bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb8:	4a06      	ldr	r2, [pc, #24]	; (8000bd4 <HAL_PCD_MspInit+0xec>)
 8000bba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bbe:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <HAL_PCD_MspInit+0xec>)
 8000bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000bcc:	bf00      	nop
 8000bce:	37b8      	adds	r7, #184	; 0xb8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020000 	.word	0x40020000

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be0:	e7fe      	b.n	8000be0 <NMI_Handler+0x4>

08000be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <MemManage_Handler+0x4>

08000bee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c28:	f000 fca0 	bl	800156c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <TIM2_IRQHandler+0x10>)
 8000c36:	f003 fc1b 	bl	8004470 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200001e4 	.word	0x200001e4

08000c44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return 1;
 8000c48:	2301      	movs	r3, #1
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <_kill>:

int _kill(int pid, int sig)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c5e:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <_kill+0x20>)
 8000c60:	2216      	movs	r2, #22
 8000c62:	601a      	str	r2, [r3, #0]
  return -1;
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	20008ad0 	.word	0x20008ad0

08000c78 <_exit>:

void _exit (int status)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c80:	f04f 31ff 	mov.w	r1, #4294967295
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff ffe5 	bl	8000c54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c8a:	e7fe      	b.n	8000c8a <_exit+0x12>

08000c8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	e00a      	b.n	8000cb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c9e:	f3af 8000 	nop.w
 8000ca2:	4601      	mov	r1, r0
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	60ba      	str	r2, [r7, #8]
 8000caa:	b2ca      	uxtb	r2, r1
 8000cac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	dbf0      	blt.n	8000c9e <_read+0x12>
  }

  return len;
 8000cbc:	687b      	ldr	r3, [r7, #4]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b086      	sub	sp, #24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	60f8      	str	r0, [r7, #12]
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	e009      	b.n	8000cec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	1c5a      	adds	r2, r3, #1
 8000cdc:	60ba      	str	r2, [r7, #8]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	dbf1      	blt.n	8000cd8 <_write+0x12>
  }
  return len;
 8000cf4:	687b      	ldr	r3, [r7, #4]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <_close>:

int _close(int file)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
 8000d1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d26:	605a      	str	r2, [r3, #4]
  return 0;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <_isatty>:

int _isatty(int file)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d3e:	2301      	movs	r3, #1
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b087      	sub	sp, #28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d70:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <_sbrk+0x5c>)
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <_sbrk+0x60>)
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d102      	bne.n	8000d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <_sbrk+0x64>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <_sbrk+0x68>)
 8000d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <_sbrk+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d205      	bcs.n	8000da4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d98:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <_sbrk+0x6c>)
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000da2:	e009      	b.n	8000db8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <_sbrk+0x64>)
 8000db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db6:	68fb      	ldr	r3, [r7, #12]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	371c      	adds	r7, #28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	20080000 	.word	0x20080000
 8000dc8:	00000400 	.word	0x00000400
 8000dcc:	200007c0 	.word	0x200007c0
 8000dd0:	20008ae0 	.word	0x20008ae0
 8000dd4:	20008ad0 	.word	0x20008ad0

08000dd8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <SystemInit+0x20>)
 8000dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de2:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <SystemInit+0x20>)
 8000de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <HAL_TIM_PeriodElapsedCallback>:
struct tcp_client_struct *esTx = 0;

struct tcp_pcb *pcbTx = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dfc:	b590      	push	{r4, r7, lr}
 8000dfe:	b09d      	sub	sp, #116	; 0x74
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	char buf[100];

	/* Prepare the first message to send to the server */
	int len = sprintf (buf, "Sending TCPclient Message %d\n", counter);
 8000e04:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	f107 0308 	add.w	r3, r7, #8
 8000e0c:	4919      	ldr	r1, [pc, #100]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f010 f97e 	bl	8011110 <siprintf>
 8000e14:	66f8      	str	r0, [r7, #108]	; 0x6c

	if (counter !=0)
 8000e16:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d023      	beq.n	8000e66 <HAL_TIM_PeriodElapsedCallback+0x6a>
	{
		/* allocate pbuf */
		esTx->p = pbuf_alloc(PBUF_TRANSPORT, len , PBUF_POOL);
 8000e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	4a15      	ldr	r2, [pc, #84]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000e24:	6814      	ldr	r4, [r2, #0]
 8000e26:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	2036      	movs	r0, #54	; 0x36
 8000e2e:	f006 fc3d 	bl	80076ac <pbuf_alloc>
 8000e32:	4603      	mov	r3, r0
 8000e34:	60a3      	str	r3, [r4, #8]


		/* copy data to pbuf */
		pbuf_take(esTx->p, (char*)buf, len);
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000e3e:	b292      	uxth	r2, r2
 8000e40:	f107 0108 	add.w	r1, r7, #8
 8000e44:	4618      	mov	r0, r3
 8000e46:	f007 f971 	bl	800812c <pbuf_take>

		tcp_client_send(pcbTx, esTx);
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000e50:	6812      	ldr	r2, [r2, #0]
 8000e52:	4611      	mov	r1, r2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 f926 	bl	80010a6 <tcp_client_send>

		pbuf_free(esTx->p);
 8000e5a:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f006 ff07 	bl	8007c74 <pbuf_free>
	}

}
 8000e66:	bf00      	nop
 8000e68:	3774      	adds	r7, #116	; 0x74
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd90      	pop	{r4, r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200007c4 	.word	0x200007c4
 8000e74:	080122b8 	.word	0x080122b8
 8000e78:	200007c8 	.word	0x200007c8
 8000e7c:	200007cc 	.word	0x200007cc

08000e80 <tcp_client_init>:
2. connect to the server
3. start communicating
*/

void tcp_client_init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 8000e86:	f008 fd45 	bl	8009914 <tcp_new>
 8000e8a:	6078      	str	r0, [r7, #4]

	/* 2. Connect to the server */
	ip_addr_t destIPADDR;
	IP_ADDR4(&destIPADDR, 192, 168, 0, 29);
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <tcp_client_init+0x24>)
 8000e8e:	603b      	str	r3, [r7, #0]
	tcp_connect(tpcb, &destIPADDR, 31, tcp_client_connected);
 8000e90:	4639      	mov	r1, r7
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <tcp_client_init+0x28>)
 8000e94:	221f      	movs	r2, #31
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f007 fe02 	bl	8008aa0 <tcp_connect>
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	1d00a8c0 	.word	0x1d00a8c0
 8000ea8:	08000ead 	.word	0x08000ead

08000eac <tcp_client_connected>:
/** This callback is called, when the client is connected to the server
 * Here we will initialise few other callbacks
 * and in the end, call the client handle function
  */
static err_t tcp_client_connected(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_client_struct *)mem_malloc(sizeof(struct tcp_client_struct));
 8000eba:	200c      	movs	r0, #12
 8000ebc:	f005 fe64 	bl	8006b88 <mem_malloc>
 8000ec0:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d023      	beq.n	8000f10 <tcp_client_connected+0x64>
  {
    es->state = ES_CONNECTED;
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	68ba      	ldr	r2, [r7, #8]
 8000ed2:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8000ee0:	6939      	ldr	r1, [r7, #16]
 8000ee2:	68b8      	ldr	r0, [r7, #8]
 8000ee4:	f008 fd1e 	bl	8009924 <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_client_recv);
 8000ee8:	490f      	ldr	r1, [pc, #60]	; (8000f28 <tcp_client_connected+0x7c>)
 8000eea:	68b8      	ldr	r0, [r7, #8]
 8000eec:	f008 fd2c 	bl	8009948 <tcp_recv>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_client_poll, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	490e      	ldr	r1, [pc, #56]	; (8000f2c <tcp_client_connected+0x80>)
 8000ef4:	68b8      	ldr	r0, [r7, #8]
 8000ef6:	f008 fd8d 	bl	8009a14 <tcp_poll>


    /* initialize LwIP tcp_sent callback function */
    tcp_sent(newpcb, tcp_client_sent);
 8000efa:	490d      	ldr	r1, [pc, #52]	; (8000f30 <tcp_client_connected+0x84>)
 8000efc:	68b8      	ldr	r0, [r7, #8]
 8000efe:	f008 fd45 	bl	800998c <tcp_sent>

    /* handle the TCP data */
    tcp_client_handle(newpcb, es);
 8000f02:	6939      	ldr	r1, [r7, #16]
 8000f04:	68b8      	ldr	r0, [r7, #8]
 8000f06:	f000 f943 	bl	8001190 <tcp_client_handle>

    ret_err = ERR_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	75fb      	strb	r3, [r7, #23]
 8000f0e:	e005      	b.n	8000f1c <tcp_client_connected+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_client_connection_close(newpcb, es);
 8000f10:	6939      	ldr	r1, [r7, #16]
 8000f12:	68b8      	ldr	r0, [r7, #8]
 8000f14:	f000 f915 	bl	8001142 <tcp_client_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8000f18:	23ff      	movs	r3, #255	; 0xff
 8000f1a:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8000f1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	08000f35 	.word	0x08000f35
 8000f2c:	08001025 	.word	0x08001025
 8000f30:	0800106d 	.word	0x0800106d

08000f34 <tcp_client_recv>:

/** This callback is called, when the client receives some data from the server
 * if the data received is valid, we will handle the data in the client handle function
  */
static err_t tcp_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
 8000f40:	70fb      	strb	r3, [r7, #3]
  struct tcp_client_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d105      	bne.n	8000f54 <tcp_client_recv+0x20>
 8000f48:	4b33      	ldr	r3, [pc, #204]	; (8001018 <tcp_client_recv+0xe4>)
 8000f4a:	22e0      	movs	r2, #224	; 0xe0
 8000f4c:	4933      	ldr	r1, [pc, #204]	; (800101c <tcp_client_recv+0xe8>)
 8000f4e:	4834      	ldr	r0, [pc, #208]	; (8001020 <tcp_client_recv+0xec>)
 8000f50:	f010 f8cc 	bl	80110ec <iprintf>

  es = (struct tcp_client_struct *)arg;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	613b      	str	r3, [r7, #16]

  /* if we receive an empty tcp frame from server => close connection */
  if (p == NULL)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10d      	bne.n	8000f7a <tcp_client_recv+0x46>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	2203      	movs	r2, #3
 8000f62:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d103      	bne.n	8000f74 <tcp_client_recv+0x40>
    {
       /* we're done sending, close connection */
       tcp_client_connection_close(tpcb, es);
 8000f6c:	6939      	ldr	r1, [r7, #16]
 8000f6e:	68b8      	ldr	r0, [r7, #8]
 8000f70:	f000 f8e7 	bl	8001142 <tcp_client_connection_close>
//      tcp_sent(tpcb, tcp_client_sent);

      /* send remaining data*/
//      tcp_client_send(tpcb, es);
    }
    ret_err = ERR_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	75fb      	strb	r3, [r7, #23]
 8000f78:	e047      	b.n	800100a <tcp_client_recv+0xd6>
  }
  /* else : a non empty frame was received from server but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8000f7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00b      	beq.n	8000f9a <tcp_client_recv+0x66>
  {
    /* free received pbuf*/
    if (p != NULL)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d005      	beq.n	8000f94 <tcp_client_recv+0x60>
    {
      es->p = NULL;
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f006 fe70 	bl	8007c74 <pbuf_free>
    }
    ret_err = err;
 8000f94:	78fb      	ldrb	r3, [r7, #3]
 8000f96:	75fb      	strb	r3, [r7, #23]
 8000f98:	e037      	b.n	800100a <tcp_client_recv+0xd6>
  }
  else if(es->state == ES_CONNECTED)
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d112      	bne.n	8000fc8 <tcp_client_recv+0x94>
  {
   /* store reference to incoming pbuf (chain) */
    es->p = p;
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
    // tcp_sent has already been initialized in the beginning.
//    /* initialize LwIP tcp_sent callback function */
//    tcp_sent(tpcb, tcp_client_sent);

    /* Acknowledge the received data */
    tcp_recved(tpcb, p->tot_len);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	891b      	ldrh	r3, [r3, #8]
 8000fac:	4619      	mov	r1, r3
 8000fae:	68b8      	ldr	r0, [r7, #8]
 8000fb0:	f007 fce0 	bl	8008974 <tcp_recved>

    /* handle the received data */
    tcp_client_handle(tpcb, es);
 8000fb4:	6939      	ldr	r1, [r7, #16]
 8000fb6:	68b8      	ldr	r0, [r7, #8]
 8000fb8:	f000 f8ea 	bl	8001190 <tcp_client_handle>

    pbuf_free(p);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f006 fe59 	bl	8007c74 <pbuf_free>

    ret_err = ERR_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	75fb      	strb	r3, [r7, #23]
 8000fc6:	e020      	b.n	800100a <tcp_client_recv+0xd6>
  }
  else if(es->state == ES_CLOSING)
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d10e      	bne.n	8000fee <tcp_client_recv+0xba>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	891b      	ldrh	r3, [r3, #8]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	68b8      	ldr	r0, [r7, #8]
 8000fd8:	f007 fccc 	bl	8008974 <tcp_recved>
    es->p = NULL;
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f006 fe46 	bl	8007c74 <pbuf_free>
    ret_err = ERR_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	75fb      	strb	r3, [r7, #23]
 8000fec:	e00d      	b.n	800100a <tcp_client_recv+0xd6>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	891b      	ldrh	r3, [r3, #8]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	68b8      	ldr	r0, [r7, #8]
 8000ff6:	f007 fcbd 	bl	8008974 <tcp_recved>
    es->p = NULL;
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f006 fe37 	bl	8007c74 <pbuf_free>
    ret_err = ERR_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 800100a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	080122d8 	.word	0x080122d8
 800101c:	080122f4 	.word	0x080122f4
 8001020:	08012300 	.word	0x08012300

08001024 <tcp_client_poll>:


static err_t tcp_client_poll(void *arg, struct tcp_pcb *tpcb)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_client_struct *es;

  es = (struct tcp_client_struct *)arg;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d00e      	beq.n	8001056 <tcp_client_poll+0x32>
  {
    if (es->p != NULL)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d107      	bne.n	8001050 <tcp_client_poll+0x2c>
//      tcp_client_send(tpcb, es);
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b03      	cmp	r3, #3
 8001046:	d103      	bne.n	8001050 <tcp_client_poll+0x2c>
      {
        /*  close tcp connection */
        tcp_client_connection_close(tpcb, es);
 8001048:	68b9      	ldr	r1, [r7, #8]
 800104a:	6838      	ldr	r0, [r7, #0]
 800104c:	f000 f879 	bl	8001142 <tcp_client_connection_close>
      }
    }
    ret_err = ERR_OK;
 8001050:	2300      	movs	r3, #0
 8001052:	73fb      	strb	r3, [r7, #15]
 8001054:	e004      	b.n	8001060 <tcp_client_poll+0x3c>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8001056:	6838      	ldr	r0, [r7, #0]
 8001058:	f007 fc26 	bl	80088a8 <tcp_abort>
    ret_err = ERR_ABRT;
 800105c:	23f3      	movs	r3, #243	; 0xf3
 800105e:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8001060:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <tcp_client_sent>:

/** This callback is called, when the server acknowledges the data sent by the client
 * If there is no more data left to sent, we will simply close the connection
  */
static err_t tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	4613      	mov	r3, r2
 8001078:	80fb      	strh	r3, [r7, #6]
  struct tcp_client_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_client_struct *)arg;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	2200      	movs	r2, #0
 8001082:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d107      	bne.n	800109c <tcp_client_sent+0x30>
//    tcp_client_send(tpcb, es);
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b03      	cmp	r3, #3
 8001092:	d103      	bne.n	800109c <tcp_client_sent+0x30>
      tcp_client_connection_close(tpcb, es);
 8001094:	6979      	ldr	r1, [r7, #20]
 8001096:	68b8      	ldr	r0, [r7, #8]
 8001098:	f000 f853 	bl	8001142 <tcp_client_connection_close>
  }
  return ERR_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <tcp_client_send>:


/** A function to send the data to the server
  */
static void tcp_client_send(struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 80010b4:	e031      	b.n	800111a <tcp_client_send+0x74>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	6859      	ldr	r1, [r3, #4]
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	895a      	ldrh	r2, [r3, #10]
 80010c4:	2301      	movs	r3, #1
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f00b fb56 	bl	800c778 <tcp_write>
 80010cc:	4603      	mov	r3, r0
 80010ce:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 80010d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d118      	bne.n	800110a <tcp_client_send+0x64>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	895b      	ldrh	r3, [r3, #10]
 80010dc:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d004      	beq.n	80010f8 <tcp_client_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f006 fe5e 	bl	8007db4 <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 80010f8:	6938      	ldr	r0, [r7, #16]
 80010fa:	f006 fdbb 	bl	8007c74 <pbuf_free>
 80010fe:	4603      	mov	r3, r0
 8001100:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8001102:	7b7b      	ldrb	r3, [r7, #13]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0f7      	beq.n	80010f8 <tcp_client_send+0x52>
 8001108:	e007      	b.n	800111a <tcp_client_send+0x74>
     /* we can read more data now */
//     tcp_recved(tpcb, plen);
   }
   else if(wr_err == ERR_MEM)
 800110a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800110e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001112:	d102      	bne.n	800111a <tcp_client_send+0x74>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	609a      	str	r2, [r3, #8]
         (es->p != NULL) &&
 800111a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10b      	bne.n	800113a <tcp_client_send+0x94>
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8001126:	2b00      	cmp	r3, #0
 8001128:	d007      	beq.n	800113a <tcp_client_send+0x94>
         (es->p->len <= tcp_sndbuf(tpcb)))
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	895a      	ldrh	r2, [r3, #10]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 8001136:	429a      	cmp	r2, r3
 8001138:	d9bd      	bls.n	80010b6 <tcp_client_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 800113a:	bf00      	nop
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <tcp_client_connection_close>:


static void tcp_client_connection_close(struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 800114c:	2100      	movs	r1, #0
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f008 fbe8 	bl	8009924 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8001154:	2100      	movs	r1, #0
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f008 fc18 	bl	800998c <tcp_sent>
  tcp_recv(tpcb, NULL);
 800115c:	2100      	movs	r1, #0
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f008 fbf2 	bl	8009948 <tcp_recv>
  tcp_err(tpcb, NULL);
 8001164:	2100      	movs	r1, #0
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f008 fc32 	bl	80099d0 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2100      	movs	r1, #0
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f008 fc4f 	bl	8009a14 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d002      	beq.n	8001182 <tcp_client_connection_close+0x40>
  {
    mem_free(es);
 800117c:	6838      	ldr	r0, [r7, #0]
 800117e:	f005 fb9d 	bl	80068bc <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f007 faa6 	bl	80086d4 <tcp_close>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <tcp_client_handle>:

/* Handle the incoming TCP Data */

static void tcp_client_handle (struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	60fb      	str	r3, [r7, #12]
	uint16_t inPort = tpcb->remote_port;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	8b1b      	ldrh	r3, [r3, #24]
 80011a4:	82fb      	strh	r3, [r7, #22]

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 80011a6:	f107 030c 	add.w	r3, r7, #12
 80011aa:	4618      	mov	r0, r3
 80011ac:	f00e fefa 	bl	800ffa4 <ip4addr_ntoa>
 80011b0:	6138      	str	r0, [r7, #16]

//	esTx->state = es->state;
//	esTx->pcb = es->pcb;
//	esTx->p = es->p;

	esTx = es;
 80011b2:	4a07      	ldr	r2, [pc, #28]	; (80011d0 <tcp_client_handle+0x40>)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	6013      	str	r3, [r2, #0]
	pcbTx = tpcb;
 80011b8:	4a06      	ldr	r2, [pc, #24]	; (80011d4 <tcp_client_handle+0x44>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6013      	str	r3, [r2, #0]

	counter++;
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <tcp_client_handle+0x48>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	3301      	adds	r3, #1
 80011c4:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <tcp_client_handle+0x48>)
 80011c6:	6013      	str	r3, [r2, #0]

}
 80011c8:	bf00      	nop
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200007c8 	.word	0x200007c8
 80011d4:	200007cc 	.word	0x200007cc
 80011d8:	200007c4 	.word	0x200007c4

080011dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001214 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011e0:	480d      	ldr	r0, [pc, #52]	; (8001218 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011e2:	490e      	ldr	r1, [pc, #56]	; (800121c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011e4:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e8:	e002      	b.n	80011f0 <LoopCopyDataInit>

080011ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ee:	3304      	adds	r3, #4

080011f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f4:	d3f9      	bcc.n	80011ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f6:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011f8:	4c0b      	ldr	r4, [pc, #44]	; (8001228 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011fc:	e001      	b.n	8001202 <LoopFillZerobss>

080011fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001200:	3204      	adds	r2, #4

08001202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001204:	d3fb      	bcc.n	80011fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001206:	f7ff fde7 	bl	8000dd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800120a:	f010 f85d 	bl	80112c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800120e:	f7ff f9e5 	bl	80005dc <main>
  bx  lr    
 8001212:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001214:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800121c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001220:	08014efc 	.word	0x08014efc
  ldr r2, =_sbss
 8001224:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8001228:	20008ae0 	.word	0x20008ae0

0800122c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800122c:	e7fe      	b.n	800122c <ADC_IRQHandler>

0800122e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d00b      	beq.n	8001256 <LAN8742_RegisterBusIO+0x28>
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d007      	beq.n	8001256 <LAN8742_RegisterBusIO+0x28>
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <LAN8742_RegisterBusIO+0x28>
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d102      	bne.n	800125c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	e014      	b.n	8001286 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	68da      	ldr	r2, [r3, #12]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	691a      	ldr	r2, [r3, #16]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001292:	b580      	push	{r7, lr}
 8001294:	b086      	sub	sp, #24
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d17c      	bne.n	80013ac <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d002      	beq.n	80012c0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2220      	movs	r2, #32
 80012c4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	e01c      	b.n	8001306 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	f107 0208 	add.w	r2, r7, #8
 80012d4:	2112      	movs	r1, #18
 80012d6:	6978      	ldr	r0, [r7, #20]
 80012d8:	4798      	blx	r3
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	da03      	bge.n	80012e8 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80012e0:	f06f 0304 	mvn.w	r3, #4
 80012e4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80012e6:	e00b      	b.n	8001300 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	f003 031f 	and.w	r3, r3, #31
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d105      	bne.n	8001300 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
         break;
 80012fe:	e005      	b.n	800130c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	3301      	adds	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	2b1f      	cmp	r3, #31
 800130a:	d9df      	bls.n	80012cc <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b1f      	cmp	r3, #31
 8001312:	d902      	bls.n	800131a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001314:	f06f 0302 	mvn.w	r3, #2
 8001318:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d145      	bne.n	80013ac <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6810      	ldr	r0, [r2, #0]
 8001328:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800132c:	2100      	movs	r1, #0
 800132e:	4798      	blx	r3
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	db37      	blt.n	80013a6 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	6810      	ldr	r0, [r2, #0]
 800133e:	f107 0208 	add.w	r2, r7, #8
 8001342:	2100      	movs	r1, #0
 8001344:	4798      	blx	r3
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	db28      	blt.n	800139e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4798      	blx	r3
 8001352:	4603      	mov	r3, r0
 8001354:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001356:	e01c      	b.n	8001392 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4798      	blx	r3
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800136a:	d80e      	bhi.n	800138a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	6810      	ldr	r0, [r2, #0]
 8001374:	f107 0208 	add.w	r2, r7, #8
 8001378:	2100      	movs	r1, #0
 800137a:	4798      	blx	r3
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	da07      	bge.n	8001392 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001382:	f06f 0304 	mvn.w	r3, #4
 8001386:	613b      	str	r3, [r7, #16]
                 break;
 8001388:	e010      	b.n	80013ac <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800138a:	f06f 0301 	mvn.w	r3, #1
 800138e:	613b      	str	r3, [r7, #16]
               break;
 8001390:	e00c      	b.n	80013ac <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1dd      	bne.n	8001358 <LAN8742_Init+0xc6>
 800139c:	e006      	b.n	80013ac <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800139e:	f06f 0304 	mvn.w	r3, #4
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	e002      	b.n	80013ac <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80013a6:	f06f 0303 	mvn.w	r3, #3
 80013aa:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d112      	bne.n	80013d8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	4798      	blx	r3
 80013b8:	4603      	mov	r3, r0
 80013ba:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80013bc:	bf00      	nop
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	4798      	blx	r3
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80013d0:	d9f5      	bls.n	80013be <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2201      	movs	r2, #1
 80013d6:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80013d8:	693b      	ldr	r3, [r7, #16]
 }
 80013da:	4618      	mov	r0, r3
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b084      	sub	sp, #16
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	6810      	ldr	r0, [r2, #0]
 80013f6:	f107 020c 	add.w	r2, r7, #12
 80013fa:	2101      	movs	r1, #1
 80013fc:	4798      	blx	r3
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	da02      	bge.n	800140a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001404:	f06f 0304 	mvn.w	r3, #4
 8001408:	e06e      	b.n	80014e8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6810      	ldr	r0, [r2, #0]
 8001412:	f107 020c 	add.w	r2, r7, #12
 8001416:	2101      	movs	r1, #1
 8001418:	4798      	blx	r3
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	da02      	bge.n	8001426 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001420:	f06f 0304 	mvn.w	r3, #4
 8001424:	e060      	b.n	80014e8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001430:	2301      	movs	r3, #1
 8001432:	e059      	b.n	80014e8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	6810      	ldr	r0, [r2, #0]
 800143c:	f107 020c 	add.w	r2, r7, #12
 8001440:	2100      	movs	r1, #0
 8001442:	4798      	blx	r3
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	da02      	bge.n	8001450 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800144a:	f06f 0304 	mvn.w	r3, #4
 800144e:	e04b      	b.n	80014e8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d11b      	bne.n	8001492 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d006      	beq.n	8001472 <LAN8742_GetLinkState+0x90>
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800146e:	2302      	movs	r3, #2
 8001470:	e03a      	b.n	80014e8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800147c:	2303      	movs	r3, #3
 800147e:	e033      	b.n	80014e8 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800148a:	2304      	movs	r3, #4
 800148c:	e02c      	b.n	80014e8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800148e:	2305      	movs	r3, #5
 8001490:	e02a      	b.n	80014e8 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	6810      	ldr	r0, [r2, #0]
 800149a:	f107 020c 	add.w	r2, r7, #12
 800149e:	211f      	movs	r1, #31
 80014a0:	4798      	blx	r3
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	da02      	bge.n	80014ae <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80014a8:	f06f 0304 	mvn.w	r3, #4
 80014ac:	e01c      	b.n	80014e8 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80014b8:	2306      	movs	r3, #6
 80014ba:	e015      	b.n	80014e8 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f003 031c 	and.w	r3, r3, #28
 80014c2:	2b18      	cmp	r3, #24
 80014c4:	d101      	bne.n	80014ca <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80014c6:	2302      	movs	r3, #2
 80014c8:	e00e      	b.n	80014e8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f003 031c 	and.w	r3, r3, #28
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d101      	bne.n	80014d8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e007      	b.n	80014e8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f003 031c 	and.w	r3, r3, #28
 80014de:	2b14      	cmp	r3, #20
 80014e0:	d101      	bne.n	80014e6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80014e2:	2304      	movs	r3, #4
 80014e4:	e000      	b.n	80014e8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80014e6:	2305      	movs	r3, #5
    }				
  }
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f4:	2003      	movs	r0, #3
 80014f6:	f000 f94d 	bl	8001794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014fa:	2000      	movs	r0, #0
 80014fc:	f000 f806 	bl	800150c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001500:	f7ff fa4a 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_InitTick+0x54>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_InitTick+0x58>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001522:	fbb3 f3f1 	udiv	r3, r3, r1
 8001526:	fbb2 f3f3 	udiv	r3, r2, r3
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f967 	bl	80017fe <HAL_SYSTICK_Config>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e00e      	b.n	8001558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b0f      	cmp	r3, #15
 800153e:	d80a      	bhi.n	8001556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001540:	2200      	movs	r2, #0
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f000 f92f 	bl	80017aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800154c:	4a06      	ldr	r2, [pc, #24]	; (8001568 <HAL_InitTick+0x5c>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	e000      	b.n	8001558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000000 	.word	0x20000000
 8001564:	20000008 	.word	0x20000008
 8001568:	20000004 	.word	0x20000004

0800156c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_IncTick+0x20>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_IncTick+0x24>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4413      	add	r3, r2
 800157c:	4a04      	ldr	r2, [pc, #16]	; (8001590 <HAL_IncTick+0x24>)
 800157e:	6013      	str	r3, [r2, #0]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000008 	.word	0x20000008
 8001590:	200007d0 	.word	0x200007d0

08001594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return uwTick;
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <HAL_GetTick+0x14>)
 800159a:	681b      	ldr	r3, [r3, #0]
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	200007d0 	.word	0x200007d0

080015ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b4:	f7ff ffee 	bl	8001594 <HAL_GetTick>
 80015b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c4:	d005      	beq.n	80015d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <HAL_Delay+0x44>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4413      	add	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015d2:	bf00      	nop
 80015d4:	f7ff ffde 	bl	8001594 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d8f7      	bhi.n	80015d4 <HAL_Delay+0x28>
  {
  }
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000008 	.word	0x20000008

080015f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <__NVIC_SetPriorityGrouping+0x40>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001610:	4013      	ands	r3, r2
 8001612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 800161e:	4313      	orrs	r3, r2
 8001620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001622:	4a04      	ldr	r2, [pc, #16]	; (8001634 <__NVIC_SetPriorityGrouping+0x40>)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	60d3      	str	r3, [r2, #12]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000ed00 	.word	0xe000ed00
 8001638:	05fa0000 	.word	0x05fa0000

0800163c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001640:	4b04      	ldr	r3, [pc, #16]	; (8001654 <__NVIC_GetPriorityGrouping+0x18>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	0a1b      	lsrs	r3, r3, #8
 8001646:	f003 0307 	and.w	r3, r3, #7
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	2b00      	cmp	r3, #0
 8001668:	db0b      	blt.n	8001682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	f003 021f 	and.w	r2, r3, #31
 8001670:	4907      	ldr	r1, [pc, #28]	; (8001690 <__NVIC_EnableIRQ+0x38>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	095b      	lsrs	r3, r3, #5
 8001678:	2001      	movs	r0, #1
 800167a:	fa00 f202 	lsl.w	r2, r0, r2
 800167e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000e100 	.word	0xe000e100

08001694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	6039      	str	r1, [r7, #0]
 800169e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	db0a      	blt.n	80016be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	490c      	ldr	r1, [pc, #48]	; (80016e0 <__NVIC_SetPriority+0x4c>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	0112      	lsls	r2, r2, #4
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	440b      	add	r3, r1
 80016b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016bc:	e00a      	b.n	80016d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4908      	ldr	r1, [pc, #32]	; (80016e4 <__NVIC_SetPriority+0x50>)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	3b04      	subs	r3, #4
 80016cc:	0112      	lsls	r2, r2, #4
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	440b      	add	r3, r1
 80016d2:	761a      	strb	r2, [r3, #24]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000e100 	.word	0xe000e100
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b089      	sub	sp, #36	; 0x24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f1c3 0307 	rsb	r3, r3, #7
 8001702:	2b04      	cmp	r3, #4
 8001704:	bf28      	it	cs
 8001706:	2304      	movcs	r3, #4
 8001708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3304      	adds	r3, #4
 800170e:	2b06      	cmp	r3, #6
 8001710:	d902      	bls.n	8001718 <NVIC_EncodePriority+0x30>
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3b03      	subs	r3, #3
 8001716:	e000      	b.n	800171a <NVIC_EncodePriority+0x32>
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	f04f 32ff 	mov.w	r2, #4294967295
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43da      	mvns	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	401a      	ands	r2, r3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001730:	f04f 31ff 	mov.w	r1, #4294967295
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	43d9      	mvns	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	4313      	orrs	r3, r2
         );
}
 8001742:	4618      	mov	r0, r3
 8001744:	3724      	adds	r7, #36	; 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001760:	d301      	bcc.n	8001766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001762:	2301      	movs	r3, #1
 8001764:	e00f      	b.n	8001786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <SysTick_Config+0x40>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176e:	210f      	movs	r1, #15
 8001770:	f04f 30ff 	mov.w	r0, #4294967295
 8001774:	f7ff ff8e 	bl	8001694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <SysTick_Config+0x40>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177e:	4b04      	ldr	r3, [pc, #16]	; (8001790 <SysTick_Config+0x40>)
 8001780:	2207      	movs	r2, #7
 8001782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	e000e010 	.word	0xe000e010

08001794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ff29 	bl	80015f4 <__NVIC_SetPriorityGrouping>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b086      	sub	sp, #24
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017bc:	f7ff ff3e 	bl	800163c <__NVIC_GetPriorityGrouping>
 80017c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	68b9      	ldr	r1, [r7, #8]
 80017c6:	6978      	ldr	r0, [r7, #20]
 80017c8:	f7ff ff8e 	bl	80016e8 <NVIC_EncodePriority>
 80017cc:	4602      	mov	r2, r0
 80017ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff5d 	bl	8001694 <__NVIC_SetPriority>
}
 80017da:	bf00      	nop
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4603      	mov	r3, r0
 80017ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff31 	bl	8001658 <__NVIC_EnableIRQ>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff ffa2 	bl	8001750 <SysTick_Config>
 800180c:	4603      	mov	r3, r0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e06a      	b.n	8001900 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001830:	2b00      	cmp	r3, #0
 8001832:	d106      	bne.n	8001842 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2223      	movs	r2, #35	; 0x23
 8001838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f004 fcb7 	bl	80061b0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001842:	4b31      	ldr	r3, [pc, #196]	; (8001908 <HAL_ETH_Init+0xf0>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	4a30      	ldr	r2, [pc, #192]	; (8001908 <HAL_ETH_Init+0xf0>)
 8001848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800184c:	6453      	str	r3, [r2, #68]	; 0x44
 800184e:	4b2e      	ldr	r3, [pc, #184]	; (8001908 <HAL_ETH_Init+0xf0>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800185a:	4b2c      	ldr	r3, [pc, #176]	; (800190c <HAL_ETH_Init+0xf4>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4a2b      	ldr	r2, [pc, #172]	; (800190c <HAL_ETH_Init+0xf4>)
 8001860:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001864:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001866:	4b29      	ldr	r3, [pc, #164]	; (800190c <HAL_ETH_Init+0xf4>)
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	4927      	ldr	r1, [pc, #156]	; (800190c <HAL_ETH_Init+0xf4>)
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001874:	4b25      	ldr	r3, [pc, #148]	; (800190c <HAL_ETH_Init+0xf4>)
 8001876:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6812      	ldr	r2, [r2, #0]
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800188e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001890:	f7ff fe80 	bl	8001594 <HAL_GetTick>
 8001894:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001896:	e011      	b.n	80018bc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001898:	f7ff fe7c 	bl	8001594 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018a6:	d909      	bls.n	80018bc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2204      	movs	r2, #4
 80018ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	22e0      	movs	r2, #224	; 0xe0
 80018b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e021      	b.n	8001900 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1e4      	bne.n	8001898 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 fdf0 	bl	80024b4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 fe97 	bl	8002608 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 feed 	bl	80026ba <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	461a      	mov	r2, r3
 80018e6:	2100      	movs	r1, #0
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 fe55 	bl	8002598 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2210      	movs	r2, #16
 80018fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40023800 	.word	0x40023800
 800190c:	40013800 	.word	0x40013800

08001910 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800191e:	2b10      	cmp	r3, #16
 8001920:	d150      	bne.n	80019c4 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2223      	movs	r2, #35	; 0x23
 8001926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2204      	movs	r2, #4
 800192e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f9fd 	bl	8001d30 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f042 0208 	orr.w	r2, r2, #8
 8001944:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800194e:	2001      	movs	r0, #1
 8001950:	f7ff fe2c 	bl	80015ac <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0204 	orr.w	r2, r2, #4
 800196a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001974:	2001      	movs	r0, #1
 8001976:	f7ff fe19 	bl	80015ac <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 fc36 	bl	80021f4 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800199a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800199e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6812      	ldr	r2, [r2, #0]
 80019ae:	f043 0302 	orr.w	r3, r3, #2
 80019b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019b6:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2223      	movs	r2, #35	; 0x23
 80019bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	e000      	b.n	80019c6 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
  }
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019dc:	2b23      	cmp	r3, #35	; 0x23
 80019de:	d14a      	bne.n	8001a76 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2223      	movs	r2, #35	; 0x23
 80019e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6812      	ldr	r2, [r2, #0]
 80019f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80019fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019fe:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6812      	ldr	r2, [r2, #0]
 8001a0e:	f023 0302 	bic.w	r3, r3, #2
 8001a12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a16:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0204 	bic.w	r2, r2, #4
 8001a26:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a30:	2001      	movs	r0, #1
 8001a32:	f7ff fdbb 	bl	80015ac <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 fbd8 	bl	80021f4 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0208 	bic.w	r2, r2, #8
 8001a52:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	f7ff fda5 	bl	80015ac <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2210      	movs	r2, #16
 8001a6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	e000      	b.n	8001a78 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
  }
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d109      	bne.n	8001aa6 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a98:	f043 0201 	orr.w	r2, r3, #1
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e07c      	b.n	8001ba0 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001aac:	2b23      	cmp	r3, #35	; 0x23
 8001aae:	d176      	bne.n	8001b9e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	68b9      	ldr	r1, [r7, #8]
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f000 fe6d 	bl	8002794 <ETH_Prepare_Tx_Descriptors>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d009      	beq.n	8001ad4 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ac6:	f043 0202 	orr.w	r2, r3, #2
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e065      	b.n	8001ba0 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ad4:	f3bf 8f4f 	dsb	sy
}
 8001ad8:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	3206      	adds	r2, #6
 8001ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aec:	1c5a      	adds	r2, r3, #1
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	629a      	str	r2, [r3, #40]	; 0x28
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d904      	bls.n	8001b04 <HAL_ETH_Transmit+0x84>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afe:	1f1a      	subs	r2, r3, #4
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3106      	adds	r1, #6
 8001b10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b18:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001b1a:	f7ff fd3b 	bl	8001594 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001b20:	e037      	b.n	8001b92 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d011      	beq.n	8001b58 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3a:	f043 0208 	orr.w	r2, r3, #8
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b4c:	695a      	ldr	r2, [r3, #20]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e023      	b.n	8001ba0 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b5e:	d018      	beq.n	8001b92 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b60:	f7ff fd18 	bl	8001594 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d302      	bcc.n	8001b76 <HAL_ETH_Transmit+0xf6>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10d      	bne.n	8001b92 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7c:	f043 0204 	orr.w	r2, r3, #4
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001b8c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e006      	b.n	8001ba0 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	dbc3      	blt.n	8001b22 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	e000      	b.n	8001ba0 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
  }
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d109      	bne.n	8001bd4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc6:	f043 0201 	orr.w	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0a8      	b.n	8001d26 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bda:	2b23      	cmp	r3, #35	; 0x23
 8001bdc:	d001      	beq.n	8001be2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e0a1      	b.n	8001d26 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	3212      	adds	r2, #18
 8001bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bf8:	f1c3 0304 	rsb	r3, r3, #4
 8001bfc:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001bfe:	e06a      	b.n	8001cd6 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d007      	beq.n	8001c1c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	699a      	ldr	r2, [r3, #24]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	69da      	ldr	r2, [r3, #28]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d103      	bne.n	8001c30 <HAL_ETH_ReadData+0x88>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d040      	beq.n	8001cb2 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00c      	beq.n	8001c74 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	0c1b      	lsrs	r3, r3, #16
 8001c60:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001c64:	3b04      	subs	r3, #4
 8001c66:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001c70:	2301      	movs	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	f004 fc4f 	bl	8006534 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	441a      	add	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	61fb      	str	r3, [r7, #28]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d902      	bls.n	8001cc4 <HAL_ETH_ReadData+0x11c>
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3b04      	subs	r3, #4
 8001cc2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	3212      	adds	r2, #18
 8001cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cce:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	db06      	blt.n	8001cec <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d202      	bcs.n	8001cec <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d089      	beq.n	8001c00 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	441a      	add	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f815 	bl	8001d30 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69fa      	ldr	r2, [r7, #28]
 8001d0a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d108      	bne.n	8001d24 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001d20:	2300      	movs	r3, #0
 8001d22:	e000      	b.n	8001d26 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3720      	adds	r7, #32
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d44:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69fa      	ldr	r2, [r7, #28]
 8001d4a:	3212      	adds	r2, #18
 8001d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d50:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d56:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001d58:	e040      	b.n	8001ddc <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d112      	bne.n	8001d88 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001d62:	f107 030c 	add.w	r3, r7, #12
 8001d66:	4618      	mov	r0, r3
 8001d68:	f004 fbb4 	bl	80064d4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d102      	bne.n	8001d78 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	74fb      	strb	r3, [r7, #19]
 8001d76:	e007      	b.n	8001d88 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	461a      	mov	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001d88:	7cfb      	ldrb	r3, [r7, #19]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d026      	beq.n	8001ddc <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d103      	bne.n	8001d9e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	4a1e      	ldr	r2, [pc, #120]	; (8001e14 <ETH_UpdateDescriptor+0xe4>)
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	e003      	b.n	8001da6 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001da4:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001da6:	f3bf 8f5f 	dmb	sy
}
 8001daa:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d902      	bls.n	8001dca <ETH_UpdateDescriptor+0x9a>
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	3b04      	subs	r3, #4
 8001dc8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69fa      	ldr	r2, [r7, #28]
 8001dce:	3212      	adds	r2, #18
 8001dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd4:	617b      	str	r3, [r7, #20]
      desccount--;
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d002      	beq.n	8001de8 <ETH_UpdateDescriptor+0xb8>
 8001de2:	7cfb      	ldrb	r3, [r7, #19]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1b8      	bne.n	8001d5a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d00c      	beq.n	8001e0c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69fa      	ldr	r2, [r7, #28]
 8001e04:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	3720      	adds	r7, #32
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	80004600 	.word	0x80004600

08001e18 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f003 031c 	and.w	r3, r3, #28
 8001e34:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	02db      	lsls	r3, r3, #11
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	019b      	lsls	r3, r3, #6
 8001e46:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f023 0302 	bic.w	r3, r3, #2
 8001e56:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001e68:	f7ff fb94 	bl	8001594 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e6e:	e00d      	b.n	8001e8c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001e70:	f7ff fb90 	bl	8001594 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e7e:	d301      	bcc.n	8001e84 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e010      	b.n	8001ea6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1ec      	bne.n	8001e70 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f003 031c 	and.w	r3, r3, #28
 8001eca:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	02db      	lsls	r3, r3, #11
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	019b      	lsls	r3, r3, #6
 8001edc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f08:	f7ff fb44 	bl	8001594 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f0e:	e00d      	b.n	8001f2c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001f10:	f7ff fb40 	bl	8001594 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1e:	d301      	bcc.n	8001f24 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e009      	b.n	8001f38 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1ec      	bne.n	8001f10 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0d9      	b.n	8002108 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0310 	and.w	r3, r3, #16
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	bf14      	ite	ne
 8001f62:	2301      	movne	r3, #1
 8001f64:	2300      	moveq	r3, #0
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	461a      	mov	r2, r3
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	461a      	mov	r2, r3
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	bf14      	ite	ne
 8001fa8:	2301      	movne	r3, #1
 8001faa:	2300      	moveq	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	bf0c      	ite	eq
 8001fc2:	2301      	moveq	r3, #1
 8001fc4:	2300      	movne	r3, #0
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	bf14      	ite	ne
 8001fdc:	2301      	movne	r3, #1
 8001fde:	2300      	moveq	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800200e:	2b00      	cmp	r3, #0
 8002010:	bf0c      	ite	eq
 8002012:	2301      	moveq	r3, #1
 8002014:	2300      	movne	r3, #0
 8002016:	b2db      	uxtb	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002028:	2b00      	cmp	r3, #0
 800202a:	bf0c      	ite	eq
 800202c:	2301      	moveq	r3, #1
 800202e:	2300      	movne	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	461a      	mov	r2, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002042:	2b00      	cmp	r3, #0
 8002044:	bf14      	ite	ne
 8002046:	2301      	movne	r3, #1
 8002048:	2300      	moveq	r3, #0
 800204a:	b2db      	uxtb	r3, r3
 800204c:	461a      	mov	r2, r3
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206a:	2b00      	cmp	r3, #0
 800206c:	bf14      	ite	ne
 800206e:	2301      	movne	r3, #1
 8002070:	2300      	moveq	r3, #0
 8002072:	b2db      	uxtb	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	bf14      	ite	ne
 8002088:	2301      	movne	r3, #1
 800208a:	2300      	moveq	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	461a      	mov	r2, r3
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	bf0c      	ite	eq
 80020a4:	2301      	moveq	r3, #1
 80020a6:	2300      	movne	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	461a      	mov	r2, r3
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	0c1b      	lsrs	r3, r3, #16
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	bf14      	ite	ne
 80020dc:	2301      	movne	r3, #1
 80020de:	2300      	moveq	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	461a      	mov	r2, r3
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	bf14      	ite	ne
 80020f8:	2301      	movne	r3, #1
 80020fa:	2300      	moveq	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e00b      	b.n	8002140 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800212e:	2b10      	cmp	r3, #16
 8002130:	d105      	bne.n	800213e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002132:	6839      	ldr	r1, [r7, #0]
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f883 	bl	8002240 <ETH_SetMACConfig>

    return HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	e000      	b.n	8002140 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
  }
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f023 031c 	bic.w	r3, r3, #28
 800215e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002160:	f001 fc5a 	bl	8003a18 <HAL_RCC_GetHCLKFreq>
 8002164:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	4a1d      	ldr	r2, [pc, #116]	; (80021e0 <HAL_ETH_SetMDIOClockRange+0x98>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d908      	bls.n	8002180 <HAL_ETH_SetMDIOClockRange+0x38>
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	4a1c      	ldr	r2, [pc, #112]	; (80021e4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d804      	bhi.n	8002180 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f043 0308 	orr.w	r3, r3, #8
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	e027      	b.n	80021d0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	4a18      	ldr	r2, [pc, #96]	; (80021e4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d908      	bls.n	800219a <HAL_ETH_SetMDIOClockRange+0x52>
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	4a17      	ldr	r2, [pc, #92]	; (80021e8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d204      	bcs.n	800219a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f043 030c 	orr.w	r3, r3, #12
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	e01a      	b.n	80021d0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	4a12      	ldr	r2, [pc, #72]	; (80021e8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d303      	bcc.n	80021aa <HAL_ETH_SetMDIOClockRange+0x62>
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	4a11      	ldr	r2, [pc, #68]	; (80021ec <HAL_ETH_SetMDIOClockRange+0xa4>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d911      	bls.n	80021ce <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	4a0f      	ldr	r2, [pc, #60]	; (80021ec <HAL_ETH_SetMDIOClockRange+0xa4>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d908      	bls.n	80021c4 <HAL_ETH_SetMDIOClockRange+0x7c>
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	4a0e      	ldr	r2, [pc, #56]	; (80021f0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d804      	bhi.n	80021c4 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f043 0304 	orr.w	r3, r3, #4
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	e005      	b.n	80021d0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f043 0310 	orr.w	r3, r3, #16
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	e000      	b.n	80021d0 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80021ce:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	611a      	str	r2, [r3, #16]
}
 80021d8:	bf00      	nop
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	01312cff 	.word	0x01312cff
 80021e4:	02160ebf 	.word	0x02160ebf
 80021e8:	03938700 	.word	0x03938700
 80021ec:	05f5e0ff 	.word	0x05f5e0ff
 80021f0:	08f0d17f 	.word	0x08f0d17f

080021f4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6812      	ldr	r2, [r2, #0]
 800220e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002212:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002216:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002224:	2001      	movs	r0, #1
 8002226:	f7ff f9c1 	bl	80015ac <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002234:	6193      	str	r3, [r2, #24]
}
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4b51      	ldr	r3, [pc, #324]	; (800239c <ETH_SetMACConfig+0x15c>)
 8002256:	4013      	ands	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	7c1b      	ldrb	r3, [r3, #16]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d102      	bne.n	8002268 <ETH_SetMACConfig+0x28>
 8002262:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002266:	e000      	b.n	800226a <ETH_SetMACConfig+0x2a>
 8002268:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	7c5b      	ldrb	r3, [r3, #17]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d102      	bne.n	8002278 <ETH_SetMACConfig+0x38>
 8002272:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002276:	e000      	b.n	800227a <ETH_SetMACConfig+0x3a>
 8002278:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800227a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002280:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	7fdb      	ldrb	r3, [r3, #31]
 8002286:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002288:	431a      	orrs	r2, r3
                        macconf->Speed |
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800228e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	7f92      	ldrb	r2, [r2, #30]
 8002294:	2a00      	cmp	r2, #0
 8002296:	d102      	bne.n	800229e <ETH_SetMACConfig+0x5e>
 8002298:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800229c:	e000      	b.n	80022a0 <ETH_SetMACConfig+0x60>
 800229e:	2200      	movs	r2, #0
                        macconf->Speed |
 80022a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	7f1b      	ldrb	r3, [r3, #28]
 80022a6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022a8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022ae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	791b      	ldrb	r3, [r3, #4]
 80022b4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80022b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	f892 2020 	ldrb.w	r2, [r2, #32]
 80022be:	2a00      	cmp	r2, #0
 80022c0:	d102      	bne.n	80022c8 <ETH_SetMACConfig+0x88>
 80022c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022c6:	e000      	b.n	80022ca <ETH_SetMACConfig+0x8a>
 80022c8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80022ca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	7bdb      	ldrb	r3, [r3, #15]
 80022d0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80022d2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80022d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022e0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022e2:	4313      	orrs	r3, r2
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022fa:	2001      	movs	r0, #1
 80022fc:	f7ff f956 	bl	80015ac <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002316:	4013      	ands	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800231e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002326:	2a00      	cmp	r2, #0
 8002328:	d101      	bne.n	800232e <ETH_SetMACConfig+0xee>
 800232a:	2280      	movs	r2, #128	; 0x80
 800232c:	e000      	b.n	8002330 <ETH_SetMACConfig+0xf0>
 800232e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002330:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002336:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800233e:	2a01      	cmp	r2, #1
 8002340:	d101      	bne.n	8002346 <ETH_SetMACConfig+0x106>
 8002342:	2208      	movs	r2, #8
 8002344:	e000      	b.n	8002348 <ETH_SetMACConfig+0x108>
 8002346:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002348:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002350:	2a01      	cmp	r2, #1
 8002352:	d101      	bne.n	8002358 <ETH_SetMACConfig+0x118>
 8002354:	2204      	movs	r2, #4
 8002356:	e000      	b.n	800235a <ETH_SetMACConfig+0x11a>
 8002358:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800235a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002362:	2a01      	cmp	r2, #1
 8002364:	d101      	bne.n	800236a <ETH_SetMACConfig+0x12a>
 8002366:	2202      	movs	r2, #2
 8002368:	e000      	b.n	800236c <ETH_SetMACConfig+0x12c>
 800236a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800236c:	4313      	orrs	r3, r2
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	4313      	orrs	r3, r2
 8002372:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002384:	2001      	movs	r0, #1
 8002386:	f7ff f911 	bl	80015ac <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	619a      	str	r2, [r3, #24]
}
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	ff20810f 	.word	0xff20810f

080023a0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	4b3d      	ldr	r3, [pc, #244]	; (80024b0 <ETH_SetDMAConfig+0x110>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	7b1b      	ldrb	r3, [r3, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d102      	bne.n	80023cc <ETH_SetDMAConfig+0x2c>
 80023c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023ca:	e000      	b.n	80023ce <ETH_SetDMAConfig+0x2e>
 80023cc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	7b5b      	ldrb	r3, [r3, #13]
 80023d2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023d4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	7f52      	ldrb	r2, [r2, #29]
 80023da:	2a00      	cmp	r2, #0
 80023dc:	d102      	bne.n	80023e4 <ETH_SetDMAConfig+0x44>
 80023de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80023e2:	e000      	b.n	80023e6 <ETH_SetDMAConfig+0x46>
 80023e4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80023e6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	7b9b      	ldrb	r3, [r3, #14]
 80023ec:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80023ee:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80023f4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	7f1b      	ldrb	r3, [r3, #28]
 80023fa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80023fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	7f9b      	ldrb	r3, [r3, #30]
 8002402:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002404:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800240a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002412:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002414:	4313      	orrs	r3, r2
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	4313      	orrs	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002424:	461a      	mov	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002436:	2001      	movs	r0, #1
 8002438:	f7ff f8b8 	bl	80015ac <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002444:	461a      	mov	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	791b      	ldrb	r3, [r3, #4]
 800244e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002454:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800245a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002460:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002468:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800246a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002470:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002472:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002478:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6812      	ldr	r2, [r2, #0]
 800247e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002482:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002486:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002494:	2001      	movs	r0, #1
 8002496:	f7ff f889 	bl	80015ac <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a2:	461a      	mov	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6013      	str	r3, [r2, #0]
}
 80024a8:	bf00      	nop
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	f8de3f23 	.word	0xf8de3f23

080024b4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b0a6      	sub	sp, #152	; 0x98
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80024bc:	2301      	movs	r3, #1
 80024be:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80024c2:	2301      	movs	r3, #1
 80024c4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80024c8:	2300      	movs	r3, #0
 80024ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80024cc:	2300      	movs	r3, #0
 80024ce:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80024d2:	2301      	movs	r3, #1
 80024d4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80024d8:	2300      	movs	r3, #0
 80024da:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80024de:	2301      	movs	r3, #1
 80024e0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80024f0:	2300      	movs	r3, #0
 80024f2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80024fe:	2300      	movs	r3, #0
 8002500:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002504:	2300      	movs	r3, #0
 8002506:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800250a:	2300      	movs	r3, #0
 800250c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002510:	2300      	movs	r3, #0
 8002512:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002516:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800251a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800251c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002520:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002522:	2300      	movs	r3, #0
 8002524:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002528:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800252c:	4619      	mov	r1, r3
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff fe86 	bl	8002240 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002534:	2301      	movs	r3, #1
 8002536:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002538:	2301      	movs	r3, #1
 800253a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800253c:	2301      	movs	r3, #1
 800253e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002542:	2301      	movs	r3, #1
 8002544:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800254a:	2300      	movs	r3, #0
 800254c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002550:	2300      	movs	r3, #0
 8002552:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002556:	2300      	movs	r3, #0
 8002558:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800255a:	2301      	movs	r3, #1
 800255c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002560:	2301      	movs	r3, #1
 8002562:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002568:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800256a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800256e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002574:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002576:	2301      	movs	r3, #1
 8002578:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800257c:	2300      	movs	r3, #0
 800257e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002580:	2300      	movs	r3, #0
 8002582:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002584:	f107 0308 	add.w	r3, r7, #8
 8002588:	4619      	mov	r1, r3
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff ff08 	bl	80023a0 <ETH_SetDMAConfig>
}
 8002590:	bf00      	nop
 8002592:	3798      	adds	r7, #152	; 0x98
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002598:	b480      	push	{r7}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3305      	adds	r3, #5
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	021b      	lsls	r3, r3, #8
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	3204      	adds	r2, #4
 80025b0:	7812      	ldrb	r2, [r2, #0]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	4b11      	ldr	r3, [pc, #68]	; (8002600 <ETH_MACAddressConfig+0x68>)
 80025ba:	4413      	add	r3, r2
 80025bc:	461a      	mov	r2, r3
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3303      	adds	r3, #3
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	061a      	lsls	r2, r3, #24
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3302      	adds	r3, #2
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	041b      	lsls	r3, r3, #16
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3301      	adds	r3, #1
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	021b      	lsls	r3, r3, #8
 80025dc:	4313      	orrs	r3, r2
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	7812      	ldrb	r2, [r2, #0]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <ETH_MACAddressConfig+0x6c>)
 80025ea:	4413      	add	r3, r2
 80025ec:	461a      	mov	r2, r3
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	6013      	str	r3, [r2, #0]
}
 80025f2:	bf00      	nop
 80025f4:	371c      	adds	r7, #28
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40028040 	.word	0x40028040
 8002604:	40028044 	.word	0x40028044

08002608 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	e03e      	b.n	8002694 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68d9      	ldr	r1, [r3, #12]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	440b      	add	r3, r1
 8002626:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2200      	movs	r2, #0
 8002632:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2200      	movs	r2, #0
 8002638:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	2200      	movs	r2, #0
 800263e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002640:	68b9      	ldr	r1, [r7, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	3206      	adds	r2, #6
 8002648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d80c      	bhi.n	8002678 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68d9      	ldr	r1, [r3, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	4613      	mov	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	440b      	add	r3, r1
 8002670:	461a      	mov	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	e004      	b.n	8002682 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	461a      	mov	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	3301      	adds	r3, #1
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b03      	cmp	r3, #3
 8002698:	d9bd      	bls.n	8002616 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ac:	611a      	str	r2, [r3, #16]
}
 80026ae:	bf00      	nop
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b085      	sub	sp, #20
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	e046      	b.n	8002756 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6919      	ldr	r1, [r3, #16]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	440b      	add	r3, r1
 80026d8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2200      	movs	r2, #0
 80026e4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2200      	movs	r2, #0
 80026ea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2200      	movs	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2200      	movs	r2, #0
 80026f6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2200      	movs	r2, #0
 80026fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002704:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 800270c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800271a:	68b9      	ldr	r1, [r7, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	3212      	adds	r2, #18
 8002722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d80c      	bhi.n	8002746 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6919      	ldr	r1, [r3, #16]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	440b      	add	r3, r1
 800273e:	461a      	mov	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	60da      	str	r2, [r3, #12]
 8002744:	e004      	b.n	8002750 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	461a      	mov	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	3301      	adds	r3, #1
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b03      	cmp	r3, #3
 800275a:	d9b5      	bls.n	80026c8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002786:	60da      	str	r2, [r3, #12]
}
 8002788:	bf00      	nop
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002794:	b480      	push	{r7}
 8002796:	b08d      	sub	sp, #52	; 0x34
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	3318      	adds	r3, #24
 80027a4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027be:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027d6:	d007      	beq.n	80027e8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027dc:	3304      	adds	r3, #4
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80027e8:	2302      	movs	r3, #2
 80027ea:	e0ff      	b.n	80029ec <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	3301      	adds	r3, #1
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	4b7d      	ldr	r3, [pc, #500]	; (80029f8 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002802:	4013      	ands	r3, r2
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	6852      	ldr	r2, [r2, #4]
 8002808:	431a      	orrs	r2, r3
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d008      	beq.n	800282c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	431a      	orrs	r2, r3
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0320 	and.w	r3, r3, #32
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	431a      	orrs	r2, r3
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	2b00      	cmp	r3, #0
 8002854:	d005      	beq.n	8002862 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800285e:	6a3b      	ldr	r3, [r7, #32]
 8002860:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800286e:	f3bf 8f5f 	dmb	sy
}
 8002872:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002874:	6a3b      	ldr	r3, [r7, #32]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002880:	e082      	b.n	8002988 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d006      	beq.n	80028a2 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	e005      	b.n	80028ae <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80028ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b0:	3301      	adds	r3, #1
 80028b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d902      	bls.n	80028c0 <ETH_Prepare_Tx_Descriptors+0x12c>
 80028ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028bc:	3b04      	subs	r3, #4
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028e2:	d007      	beq.n	80028f4 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e8:	3304      	adds	r3, #4
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d029      	beq.n	8002948 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002900:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002902:	2300      	movs	r3, #0
 8002904:	62bb      	str	r3, [r7, #40]	; 0x28
 8002906:	e019      	b.n	800293c <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002908:	f3bf 8f5f 	dmb	sy
}
 800290c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800290e:	6a3b      	ldr	r3, [r7, #32]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800291a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291c:	3301      	adds	r3, #1
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002922:	2b03      	cmp	r3, #3
 8002924:	d902      	bls.n	800292c <ETH_Prepare_Tx_Descriptors+0x198>
 8002926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002928:	3b04      	subs	r3, #4
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002934:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002938:	3301      	adds	r3, #1
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
 800293c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	429a      	cmp	r2, r3
 8002942:	d3e1      	bcc.n	8002908 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002944:	2302      	movs	r3, #2
 8002946:	e051      	b.n	80029ec <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	3301      	adds	r3, #1
 800294c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	461a      	mov	r2, r3
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	4b25      	ldr	r3, [pc, #148]	; (80029f8 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002964:	4013      	ands	r3, r2
 8002966:	69fa      	ldr	r2, [r7, #28]
 8002968:	6852      	ldr	r2, [r2, #4]
 800296a:	431a      	orrs	r2, r3
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	3301      	adds	r3, #1
 8002974:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002976:	f3bf 8f5f 	dmb	sy
}
 800297a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	f47f af78 	bne.w	8002882 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d006      	beq.n	80029a6 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	e005      	b.n	80029b2 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029c2:	6979      	ldr	r1, [r7, #20]
 80029c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c6:	3304      	adds	r3, #4
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029d2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80029d4:	b672      	cpsid	i
}
 80029d6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	4413      	add	r3, r2
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80029e6:	b662      	cpsie	i
}
 80029e8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3734      	adds	r7, #52	; 0x34
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	ffffe000 	.word	0xffffe000

080029fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b089      	sub	sp, #36	; 0x24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	e175      	b.n	8002d08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	f040 8164 	bne.w	8002d02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d005      	beq.n	8002a52 <HAL_GPIO_Init+0x56>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d130      	bne.n	8002ab4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a88:	2201      	movs	r2, #1
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f003 0201 	and.w	r2, r3, #1
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d017      	beq.n	8002af0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	2203      	movs	r2, #3
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d123      	bne.n	8002b44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	08da      	lsrs	r2, r3, #3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3208      	adds	r2, #8
 8002b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	220f      	movs	r2, #15
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	08da      	lsrs	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3208      	adds	r2, #8
 8002b3e:	69b9      	ldr	r1, [r7, #24]
 8002b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	2203      	movs	r2, #3
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0203 	and.w	r2, r3, #3
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 80be 	beq.w	8002d02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b86:	4b66      	ldr	r3, [pc, #408]	; (8002d20 <HAL_GPIO_Init+0x324>)
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	4a65      	ldr	r2, [pc, #404]	; (8002d20 <HAL_GPIO_Init+0x324>)
 8002b8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b90:	6453      	str	r3, [r2, #68]	; 0x44
 8002b92:	4b63      	ldr	r3, [pc, #396]	; (8002d20 <HAL_GPIO_Init+0x324>)
 8002b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b9e:	4a61      	ldr	r2, [pc, #388]	; (8002d24 <HAL_GPIO_Init+0x328>)
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	089b      	lsrs	r3, r3, #2
 8002ba4:	3302      	adds	r3, #2
 8002ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	220f      	movs	r2, #15
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a58      	ldr	r2, [pc, #352]	; (8002d28 <HAL_GPIO_Init+0x32c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d037      	beq.n	8002c3a <HAL_GPIO_Init+0x23e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a57      	ldr	r2, [pc, #348]	; (8002d2c <HAL_GPIO_Init+0x330>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d031      	beq.n	8002c36 <HAL_GPIO_Init+0x23a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a56      	ldr	r2, [pc, #344]	; (8002d30 <HAL_GPIO_Init+0x334>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d02b      	beq.n	8002c32 <HAL_GPIO_Init+0x236>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a55      	ldr	r2, [pc, #340]	; (8002d34 <HAL_GPIO_Init+0x338>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d025      	beq.n	8002c2e <HAL_GPIO_Init+0x232>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a54      	ldr	r2, [pc, #336]	; (8002d38 <HAL_GPIO_Init+0x33c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d01f      	beq.n	8002c2a <HAL_GPIO_Init+0x22e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a53      	ldr	r2, [pc, #332]	; (8002d3c <HAL_GPIO_Init+0x340>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d019      	beq.n	8002c26 <HAL_GPIO_Init+0x22a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a52      	ldr	r2, [pc, #328]	; (8002d40 <HAL_GPIO_Init+0x344>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d013      	beq.n	8002c22 <HAL_GPIO_Init+0x226>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a51      	ldr	r2, [pc, #324]	; (8002d44 <HAL_GPIO_Init+0x348>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00d      	beq.n	8002c1e <HAL_GPIO_Init+0x222>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a50      	ldr	r2, [pc, #320]	; (8002d48 <HAL_GPIO_Init+0x34c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d007      	beq.n	8002c1a <HAL_GPIO_Init+0x21e>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a4f      	ldr	r2, [pc, #316]	; (8002d4c <HAL_GPIO_Init+0x350>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d101      	bne.n	8002c16 <HAL_GPIO_Init+0x21a>
 8002c12:	2309      	movs	r3, #9
 8002c14:	e012      	b.n	8002c3c <HAL_GPIO_Init+0x240>
 8002c16:	230a      	movs	r3, #10
 8002c18:	e010      	b.n	8002c3c <HAL_GPIO_Init+0x240>
 8002c1a:	2308      	movs	r3, #8
 8002c1c:	e00e      	b.n	8002c3c <HAL_GPIO_Init+0x240>
 8002c1e:	2307      	movs	r3, #7
 8002c20:	e00c      	b.n	8002c3c <HAL_GPIO_Init+0x240>
 8002c22:	2306      	movs	r3, #6
 8002c24:	e00a      	b.n	8002c3c <HAL_GPIO_Init+0x240>
 8002c26:	2305      	movs	r3, #5
 8002c28:	e008      	b.n	8002c3c <HAL_GPIO_Init+0x240>
 8002c2a:	2304      	movs	r3, #4
 8002c2c:	e006      	b.n	8002c3c <HAL_GPIO_Init+0x240>
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e004      	b.n	8002c3c <HAL_GPIO_Init+0x240>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e002      	b.n	8002c3c <HAL_GPIO_Init+0x240>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <HAL_GPIO_Init+0x240>
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	69fa      	ldr	r2, [r7, #28]
 8002c3e:	f002 0203 	and.w	r2, r2, #3
 8002c42:	0092      	lsls	r2, r2, #2
 8002c44:	4093      	lsls	r3, r2
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c4c:	4935      	ldr	r1, [pc, #212]	; (8002d24 <HAL_GPIO_Init+0x328>)
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	089b      	lsrs	r3, r3, #2
 8002c52:	3302      	adds	r3, #2
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c5a:	4b3d      	ldr	r3, [pc, #244]	; (8002d50 <HAL_GPIO_Init+0x354>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	43db      	mvns	r3, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4013      	ands	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c7e:	4a34      	ldr	r2, [pc, #208]	; (8002d50 <HAL_GPIO_Init+0x354>)
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c84:	4b32      	ldr	r3, [pc, #200]	; (8002d50 <HAL_GPIO_Init+0x354>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4013      	ands	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ca8:	4a29      	ldr	r2, [pc, #164]	; (8002d50 <HAL_GPIO_Init+0x354>)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cae:	4b28      	ldr	r3, [pc, #160]	; (8002d50 <HAL_GPIO_Init+0x354>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cd2:	4a1f      	ldr	r2, [pc, #124]	; (8002d50 <HAL_GPIO_Init+0x354>)
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cd8:	4b1d      	ldr	r3, [pc, #116]	; (8002d50 <HAL_GPIO_Init+0x354>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cfc:	4a14      	ldr	r2, [pc, #80]	; (8002d50 <HAL_GPIO_Init+0x354>)
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	3301      	adds	r3, #1
 8002d06:	61fb      	str	r3, [r7, #28]
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	2b0f      	cmp	r3, #15
 8002d0c:	f67f ae86 	bls.w	8002a1c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	3724      	adds	r7, #36	; 0x24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40023800 	.word	0x40023800
 8002d24:	40013800 	.word	0x40013800
 8002d28:	40020000 	.word	0x40020000
 8002d2c:	40020400 	.word	0x40020400
 8002d30:	40020800 	.word	0x40020800
 8002d34:	40020c00 	.word	0x40020c00
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	40021400 	.word	0x40021400
 8002d40:	40021800 	.word	0x40021800
 8002d44:	40021c00 	.word	0x40021c00
 8002d48:	40022000 	.word	0x40022000
 8002d4c:	40022400 	.word	0x40022400
 8002d50:	40013c00 	.word	0x40013c00

08002d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	807b      	strh	r3, [r7, #2]
 8002d60:	4613      	mov	r3, r2
 8002d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d64:	787b      	ldrb	r3, [r7, #1]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d6a:	887a      	ldrh	r2, [r7, #2]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d70:	e003      	b.n	8002d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d72:	887b      	ldrh	r3, [r7, #2]
 8002d74:	041a      	lsls	r2, r3, #16
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	619a      	str	r2, [r3, #24]
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d88:	b08f      	sub	sp, #60	; 0x3c
 8002d8a:	af0a      	add	r7, sp, #40	; 0x28
 8002d8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e116      	b.n	8002fc6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d106      	bne.n	8002db8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7fd fe98 	bl	8000ae8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2203      	movs	r2, #3
 8002dbc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d102      	bne.n	8002dd2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f002 fc02 	bl	80055e0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	603b      	str	r3, [r7, #0]
 8002de2:	687e      	ldr	r6, [r7, #4]
 8002de4:	466d      	mov	r5, sp
 8002de6:	f106 0410 	add.w	r4, r6, #16
 8002dea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002df0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002df2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002df6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dfa:	1d33      	adds	r3, r6, #4
 8002dfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dfe:	6838      	ldr	r0, [r7, #0]
 8002e00:	f002 fb96 	bl	8005530 <USB_CoreInit>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d005      	beq.n	8002e16 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e0d7      	b.n	8002fc6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f002 fbf0 	bl	8005602 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e22:	2300      	movs	r3, #0
 8002e24:	73fb      	strb	r3, [r7, #15]
 8002e26:	e04a      	b.n	8002ebe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e28:	7bfa      	ldrb	r2, [r7, #15]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4413      	add	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	333d      	adds	r3, #61	; 0x3d
 8002e38:	2201      	movs	r2, #1
 8002e3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e3c:	7bfa      	ldrb	r2, [r7, #15]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	333c      	adds	r3, #60	; 0x3c
 8002e4c:	7bfa      	ldrb	r2, [r7, #15]
 8002e4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e50:	7bfa      	ldrb	r2, [r7, #15]
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
 8002e54:	b298      	uxth	r0, r3
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	3344      	adds	r3, #68	; 0x44
 8002e64:	4602      	mov	r2, r0
 8002e66:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e68:	7bfa      	ldrb	r2, [r7, #15]
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	3340      	adds	r3, #64	; 0x40
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e7c:	7bfa      	ldrb	r2, [r7, #15]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	3348      	adds	r3, #72	; 0x48
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e90:	7bfa      	ldrb	r2, [r7, #15]
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	4613      	mov	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	334c      	adds	r3, #76	; 0x4c
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ea4:	7bfa      	ldrb	r2, [r7, #15]
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	3354      	adds	r3, #84	; 0x54
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
 8002ebe:	7bfa      	ldrb	r2, [r7, #15]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d3af      	bcc.n	8002e28 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ec8:	2300      	movs	r3, #0
 8002eca:	73fb      	strb	r3, [r7, #15]
 8002ecc:	e044      	b.n	8002f58 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ece:	7bfa      	ldrb	r2, [r7, #15]
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ee4:	7bfa      	ldrb	r2, [r7, #15]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002ef6:	7bfa      	ldrb	r2, [r7, #15]
 8002ef8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002efa:	7bfa      	ldrb	r2, [r7, #15]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f10:	7bfa      	ldrb	r2, [r7, #15]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f26:	7bfa      	ldrb	r2, [r7, #15]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f3c:	7bfa      	ldrb	r2, [r7, #15]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	3301      	adds	r3, #1
 8002f56:	73fb      	strb	r3, [r7, #15]
 8002f58:	7bfa      	ldrb	r2, [r7, #15]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d3b5      	bcc.n	8002ece <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	687e      	ldr	r6, [r7, #4]
 8002f6a:	466d      	mov	r5, sp
 8002f6c:	f106 0410 	add.w	r4, r6, #16
 8002f70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f7c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f80:	1d33      	adds	r3, r6, #4
 8002f82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f84:	6838      	ldr	r0, [r7, #0]
 8002f86:	f002 fb89 	bl	800569c <USB_DevInit>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e014      	b.n	8002fc6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d102      	bne.n	8002fba <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f80b 	bl	8002fd0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f002 fd47 	bl	8005a52 <USB_DevDisconnect>

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002fd0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ffe:	4b05      	ldr	r3, [pc, #20]	; (8003014 <HAL_PCDEx_ActivateLPM+0x44>)
 8003000:	4313      	orrs	r3, r2
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	10000003 	.word	0x10000003

08003018 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800301c:	4b05      	ldr	r3, [pc, #20]	; (8003034 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a04      	ldr	r2, [pc, #16]	; (8003034 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003026:	6013      	str	r3, [r2, #0]
}
 8003028:	bf00      	nop
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40007000 	.word	0x40007000

08003038 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800303e:	2300      	movs	r3, #0
 8003040:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003042:	4b23      	ldr	r3, [pc, #140]	; (80030d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	4a22      	ldr	r2, [pc, #136]	; (80030d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800304c:	6413      	str	r3, [r2, #64]	; 0x40
 800304e:	4b20      	ldr	r3, [pc, #128]	; (80030d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800305a:	4b1e      	ldr	r3, [pc, #120]	; (80030d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a1d      	ldr	r2, [pc, #116]	; (80030d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003064:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003066:	f7fe fa95 	bl	8001594 <HAL_GetTick>
 800306a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800306c:	e009      	b.n	8003082 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800306e:	f7fe fa91 	bl	8001594 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800307c:	d901      	bls.n	8003082 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e022      	b.n	80030c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003082:	4b14      	ldr	r3, [pc, #80]	; (80030d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800308a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800308e:	d1ee      	bne.n	800306e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003090:	4b10      	ldr	r3, [pc, #64]	; (80030d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a0f      	ldr	r2, [pc, #60]	; (80030d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800309a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800309c:	f7fe fa7a 	bl	8001594 <HAL_GetTick>
 80030a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030a2:	e009      	b.n	80030b8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030a4:	f7fe fa76 	bl	8001594 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030b2:	d901      	bls.n	80030b8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e007      	b.n	80030c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030c4:	d1ee      	bne.n	80030a4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40023800 	.word	0x40023800
 80030d4:	40007000 	.word	0x40007000

080030d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80030e0:	2300      	movs	r3, #0
 80030e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e29b      	b.n	8003626 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 8087 	beq.w	800320a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030fc:	4b96      	ldr	r3, [pc, #600]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	2b04      	cmp	r3, #4
 8003106:	d00c      	beq.n	8003122 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003108:	4b93      	ldr	r3, [pc, #588]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 030c 	and.w	r3, r3, #12
 8003110:	2b08      	cmp	r3, #8
 8003112:	d112      	bne.n	800313a <HAL_RCC_OscConfig+0x62>
 8003114:	4b90      	ldr	r3, [pc, #576]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003120:	d10b      	bne.n	800313a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003122:	4b8d      	ldr	r3, [pc, #564]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d06c      	beq.n	8003208 <HAL_RCC_OscConfig+0x130>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d168      	bne.n	8003208 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e275      	b.n	8003626 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003142:	d106      	bne.n	8003152 <HAL_RCC_OscConfig+0x7a>
 8003144:	4b84      	ldr	r3, [pc, #528]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a83      	ldr	r2, [pc, #524]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 800314a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	e02e      	b.n	80031b0 <HAL_RCC_OscConfig+0xd8>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10c      	bne.n	8003174 <HAL_RCC_OscConfig+0x9c>
 800315a:	4b7f      	ldr	r3, [pc, #508]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a7e      	ldr	r2, [pc, #504]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	4b7c      	ldr	r3, [pc, #496]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a7b      	ldr	r2, [pc, #492]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 800316c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	e01d      	b.n	80031b0 <HAL_RCC_OscConfig+0xd8>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800317c:	d10c      	bne.n	8003198 <HAL_RCC_OscConfig+0xc0>
 800317e:	4b76      	ldr	r3, [pc, #472]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a75      	ldr	r2, [pc, #468]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	4b73      	ldr	r3, [pc, #460]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a72      	ldr	r2, [pc, #456]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	e00b      	b.n	80031b0 <HAL_RCC_OscConfig+0xd8>
 8003198:	4b6f      	ldr	r3, [pc, #444]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a6e      	ldr	r2, [pc, #440]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 800319e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a2:	6013      	str	r3, [r2, #0]
 80031a4:	4b6c      	ldr	r3, [pc, #432]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a6b      	ldr	r2, [pc, #428]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 80031aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d013      	beq.n	80031e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7fe f9ec 	bl	8001594 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c0:	f7fe f9e8 	bl	8001594 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	; 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e229      	b.n	8003626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d2:	4b61      	ldr	r3, [pc, #388]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0xe8>
 80031de:	e014      	b.n	800320a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fe f9d8 	bl	8001594 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e8:	f7fe f9d4 	bl	8001594 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b64      	cmp	r3, #100	; 0x64
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e215      	b.n	8003626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031fa:	4b57      	ldr	r3, [pc, #348]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x110>
 8003206:	e000      	b.n	800320a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d069      	beq.n	80032ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003216:	4b50      	ldr	r3, [pc, #320]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 030c 	and.w	r3, r3, #12
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00b      	beq.n	800323a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003222:	4b4d      	ldr	r3, [pc, #308]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b08      	cmp	r3, #8
 800322c:	d11c      	bne.n	8003268 <HAL_RCC_OscConfig+0x190>
 800322e:	4b4a      	ldr	r3, [pc, #296]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d116      	bne.n	8003268 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323a:	4b47      	ldr	r3, [pc, #284]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d005      	beq.n	8003252 <HAL_RCC_OscConfig+0x17a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d001      	beq.n	8003252 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e1e9      	b.n	8003626 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003252:	4b41      	ldr	r3, [pc, #260]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	493d      	ldr	r1, [pc, #244]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003262:	4313      	orrs	r3, r2
 8003264:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003266:	e040      	b.n	80032ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d023      	beq.n	80032b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003270:	4b39      	ldr	r3, [pc, #228]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a38      	ldr	r2, [pc, #224]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327c:	f7fe f98a 	bl	8001594 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003284:	f7fe f986 	bl	8001594 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e1c7      	b.n	8003626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003296:	4b30      	ldr	r3, [pc, #192]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d0f0      	beq.n	8003284 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a2:	4b2d      	ldr	r3, [pc, #180]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4929      	ldr	r1, [pc, #164]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	600b      	str	r3, [r1, #0]
 80032b6:	e018      	b.n	80032ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b8:	4b27      	ldr	r3, [pc, #156]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a26      	ldr	r2, [pc, #152]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 80032be:	f023 0301 	bic.w	r3, r3, #1
 80032c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fe f966 	bl	8001594 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032cc:	f7fe f962 	bl	8001594 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e1a3      	b.n	8003626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032de:	4b1e      	ldr	r3, [pc, #120]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d038      	beq.n	8003368 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d019      	beq.n	8003332 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032fe:	4b16      	ldr	r3, [pc, #88]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003302:	4a15      	ldr	r2, [pc, #84]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330a:	f7fe f943 	bl	8001594 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003312:	f7fe f93f 	bl	8001594 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e180      	b.n	8003626 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003324:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_RCC_OscConfig+0x23a>
 8003330:	e01a      	b.n	8003368 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003332:	4b09      	ldr	r3, [pc, #36]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003336:	4a08      	ldr	r2, [pc, #32]	; (8003358 <HAL_RCC_OscConfig+0x280>)
 8003338:	f023 0301 	bic.w	r3, r3, #1
 800333c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333e:	f7fe f929 	bl	8001594 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003344:	e00a      	b.n	800335c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003346:	f7fe f925 	bl	8001594 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d903      	bls.n	800335c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e166      	b.n	8003626 <HAL_RCC_OscConfig+0x54e>
 8003358:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800335c:	4b92      	ldr	r3, [pc, #584]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 800335e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1ee      	bne.n	8003346 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 80a4 	beq.w	80034be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003376:	4b8c      	ldr	r3, [pc, #560]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10d      	bne.n	800339e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003382:	4b89      	ldr	r3, [pc, #548]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	4a88      	ldr	r2, [pc, #544]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 8003388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800338c:	6413      	str	r3, [r2, #64]	; 0x40
 800338e:	4b86      	ldr	r3, [pc, #536]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003396:	60bb      	str	r3, [r7, #8]
 8003398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800339a:	2301      	movs	r3, #1
 800339c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800339e:	4b83      	ldr	r3, [pc, #524]	; (80035ac <HAL_RCC_OscConfig+0x4d4>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d118      	bne.n	80033dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80033aa:	4b80      	ldr	r3, [pc, #512]	; (80035ac <HAL_RCC_OscConfig+0x4d4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a7f      	ldr	r2, [pc, #508]	; (80035ac <HAL_RCC_OscConfig+0x4d4>)
 80033b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033b6:	f7fe f8ed 	bl	8001594 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033be:	f7fe f8e9 	bl	8001594 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b64      	cmp	r3, #100	; 0x64
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e12a      	b.n	8003626 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d0:	4b76      	ldr	r3, [pc, #472]	; (80035ac <HAL_RCC_OscConfig+0x4d4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0f0      	beq.n	80033be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d106      	bne.n	80033f2 <HAL_RCC_OscConfig+0x31a>
 80033e4:	4b70      	ldr	r3, [pc, #448]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 80033e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e8:	4a6f      	ldr	r2, [pc, #444]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	6713      	str	r3, [r2, #112]	; 0x70
 80033f0:	e02d      	b.n	800344e <HAL_RCC_OscConfig+0x376>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10c      	bne.n	8003414 <HAL_RCC_OscConfig+0x33c>
 80033fa:	4b6b      	ldr	r3, [pc, #428]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fe:	4a6a      	ldr	r2, [pc, #424]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 8003400:	f023 0301 	bic.w	r3, r3, #1
 8003404:	6713      	str	r3, [r2, #112]	; 0x70
 8003406:	4b68      	ldr	r3, [pc, #416]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 8003408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340a:	4a67      	ldr	r2, [pc, #412]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 800340c:	f023 0304 	bic.w	r3, r3, #4
 8003410:	6713      	str	r3, [r2, #112]	; 0x70
 8003412:	e01c      	b.n	800344e <HAL_RCC_OscConfig+0x376>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b05      	cmp	r3, #5
 800341a:	d10c      	bne.n	8003436 <HAL_RCC_OscConfig+0x35e>
 800341c:	4b62      	ldr	r3, [pc, #392]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 800341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003420:	4a61      	ldr	r2, [pc, #388]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 8003422:	f043 0304 	orr.w	r3, r3, #4
 8003426:	6713      	str	r3, [r2, #112]	; 0x70
 8003428:	4b5f      	ldr	r3, [pc, #380]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 800342a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342c:	4a5e      	ldr	r2, [pc, #376]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 800342e:	f043 0301 	orr.w	r3, r3, #1
 8003432:	6713      	str	r3, [r2, #112]	; 0x70
 8003434:	e00b      	b.n	800344e <HAL_RCC_OscConfig+0x376>
 8003436:	4b5c      	ldr	r3, [pc, #368]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343a:	4a5b      	ldr	r2, [pc, #364]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 800343c:	f023 0301 	bic.w	r3, r3, #1
 8003440:	6713      	str	r3, [r2, #112]	; 0x70
 8003442:	4b59      	ldr	r3, [pc, #356]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 8003444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003446:	4a58      	ldr	r2, [pc, #352]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 8003448:	f023 0304 	bic.w	r3, r3, #4
 800344c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d015      	beq.n	8003482 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003456:	f7fe f89d 	bl	8001594 <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800345c:	e00a      	b.n	8003474 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345e:	f7fe f899 	bl	8001594 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	f241 3288 	movw	r2, #5000	; 0x1388
 800346c:	4293      	cmp	r3, r2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e0d8      	b.n	8003626 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003474:	4b4c      	ldr	r3, [pc, #304]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 8003476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0ee      	beq.n	800345e <HAL_RCC_OscConfig+0x386>
 8003480:	e014      	b.n	80034ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003482:	f7fe f887 	bl	8001594 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003488:	e00a      	b.n	80034a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348a:	f7fe f883 	bl	8001594 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	f241 3288 	movw	r2, #5000	; 0x1388
 8003498:	4293      	cmp	r3, r2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e0c2      	b.n	8003626 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a0:	4b41      	ldr	r3, [pc, #260]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1ee      	bne.n	800348a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034ac:	7dfb      	ldrb	r3, [r7, #23]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d105      	bne.n	80034be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b2:	4b3d      	ldr	r3, [pc, #244]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	4a3c      	ldr	r2, [pc, #240]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 80034b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 80ae 	beq.w	8003624 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034c8:	4b37      	ldr	r3, [pc, #220]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f003 030c 	and.w	r3, r3, #12
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d06d      	beq.n	80035b0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d14b      	bne.n	8003574 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034dc:	4b32      	ldr	r3, [pc, #200]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a31      	ldr	r2, [pc, #196]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 80034e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e8:	f7fe f854 	bl	8001594 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f0:	f7fe f850 	bl	8001594 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e091      	b.n	8003626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003502:	4b29      	ldr	r3, [pc, #164]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f0      	bne.n	80034f0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69da      	ldr	r2, [r3, #28]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	019b      	lsls	r3, r3, #6
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003524:	085b      	lsrs	r3, r3, #1
 8003526:	3b01      	subs	r3, #1
 8003528:	041b      	lsls	r3, r3, #16
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003530:	061b      	lsls	r3, r3, #24
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003538:	071b      	lsls	r3, r3, #28
 800353a:	491b      	ldr	r1, [pc, #108]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 800353c:	4313      	orrs	r3, r2
 800353e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003540:	4b19      	ldr	r3, [pc, #100]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a18      	ldr	r2, [pc, #96]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 8003546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800354a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fe f822 	bl	8001594 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003554:	f7fe f81e 	bl	8001594 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e05f      	b.n	8003626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003566:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x47c>
 8003572:	e057      	b.n	8003624 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a0b      	ldr	r2, [pc, #44]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 800357a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800357e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003580:	f7fe f808 	bl	8001594 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003588:	f7fe f804 	bl	8001594 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e045      	b.n	8003626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359a:	4b03      	ldr	r3, [pc, #12]	; (80035a8 <HAL_RCC_OscConfig+0x4d0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f0      	bne.n	8003588 <HAL_RCC_OscConfig+0x4b0>
 80035a6:	e03d      	b.n	8003624 <HAL_RCC_OscConfig+0x54c>
 80035a8:	40023800 	.word	0x40023800
 80035ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80035b0:	4b1f      	ldr	r3, [pc, #124]	; (8003630 <HAL_RCC_OscConfig+0x558>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d030      	beq.n	8003620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d129      	bne.n	8003620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d122      	bne.n	8003620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035e0:	4013      	ands	r3, r2
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d119      	bne.n	8003620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f6:	085b      	lsrs	r3, r3, #1
 80035f8:	3b01      	subs	r3, #1
 80035fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d10f      	bne.n	8003620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800360c:	429a      	cmp	r2, r3
 800360e:	d107      	bne.n	8003620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800361c:	429a      	cmp	r2, r3
 800361e:	d001      	beq.n	8003624 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e000      	b.n	8003626 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40023800 	.word	0x40023800

08003634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0d0      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800364c:	4b6a      	ldr	r3, [pc, #424]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 030f 	and.w	r3, r3, #15
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d910      	bls.n	800367c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365a:	4b67      	ldr	r3, [pc, #412]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f023 020f 	bic.w	r2, r3, #15
 8003662:	4965      	ldr	r1, [pc, #404]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	4313      	orrs	r3, r2
 8003668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800366a:	4b63      	ldr	r3, [pc, #396]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	429a      	cmp	r2, r3
 8003676:	d001      	beq.n	800367c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e0b8      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d020      	beq.n	80036ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003694:	4b59      	ldr	r3, [pc, #356]	; (80037fc <HAL_RCC_ClockConfig+0x1c8>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	4a58      	ldr	r2, [pc, #352]	; (80037fc <HAL_RCC_ClockConfig+0x1c8>)
 800369a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800369e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0308 	and.w	r3, r3, #8
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036ac:	4b53      	ldr	r3, [pc, #332]	; (80037fc <HAL_RCC_ClockConfig+0x1c8>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	4a52      	ldr	r2, [pc, #328]	; (80037fc <HAL_RCC_ClockConfig+0x1c8>)
 80036b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b8:	4b50      	ldr	r3, [pc, #320]	; (80037fc <HAL_RCC_ClockConfig+0x1c8>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	494d      	ldr	r1, [pc, #308]	; (80037fc <HAL_RCC_ClockConfig+0x1c8>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d040      	beq.n	8003758 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d107      	bne.n	80036ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036de:	4b47      	ldr	r3, [pc, #284]	; (80037fc <HAL_RCC_ClockConfig+0x1c8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d115      	bne.n	8003716 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e07f      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d107      	bne.n	8003706 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f6:	4b41      	ldr	r3, [pc, #260]	; (80037fc <HAL_RCC_ClockConfig+0x1c8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d109      	bne.n	8003716 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e073      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003706:	4b3d      	ldr	r3, [pc, #244]	; (80037fc <HAL_RCC_ClockConfig+0x1c8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e06b      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003716:	4b39      	ldr	r3, [pc, #228]	; (80037fc <HAL_RCC_ClockConfig+0x1c8>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f023 0203 	bic.w	r2, r3, #3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4936      	ldr	r1, [pc, #216]	; (80037fc <HAL_RCC_ClockConfig+0x1c8>)
 8003724:	4313      	orrs	r3, r2
 8003726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003728:	f7fd ff34 	bl	8001594 <HAL_GetTick>
 800372c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372e:	e00a      	b.n	8003746 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003730:	f7fd ff30 	bl	8001594 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	f241 3288 	movw	r2, #5000	; 0x1388
 800373e:	4293      	cmp	r3, r2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e053      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003746:	4b2d      	ldr	r3, [pc, #180]	; (80037fc <HAL_RCC_ClockConfig+0x1c8>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 020c 	and.w	r2, r3, #12
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	429a      	cmp	r2, r3
 8003756:	d1eb      	bne.n	8003730 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003758:	4b27      	ldr	r3, [pc, #156]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d210      	bcs.n	8003788 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003766:	4b24      	ldr	r3, [pc, #144]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f023 020f 	bic.w	r2, r3, #15
 800376e:	4922      	ldr	r1, [pc, #136]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	4313      	orrs	r3, r2
 8003774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003776:	4b20      	ldr	r3, [pc, #128]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d001      	beq.n	8003788 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e032      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003794:	4b19      	ldr	r3, [pc, #100]	; (80037fc <HAL_RCC_ClockConfig+0x1c8>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	4916      	ldr	r1, [pc, #88]	; (80037fc <HAL_RCC_ClockConfig+0x1c8>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d009      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037b2:	4b12      	ldr	r3, [pc, #72]	; (80037fc <HAL_RCC_ClockConfig+0x1c8>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	490e      	ldr	r1, [pc, #56]	; (80037fc <HAL_RCC_ClockConfig+0x1c8>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037c6:	f000 f821 	bl	800380c <HAL_RCC_GetSysClockFreq>
 80037ca:	4602      	mov	r2, r0
 80037cc:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_RCC_ClockConfig+0x1c8>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	490a      	ldr	r1, [pc, #40]	; (8003800 <HAL_RCC_ClockConfig+0x1cc>)
 80037d8:	5ccb      	ldrb	r3, [r1, r3]
 80037da:	fa22 f303 	lsr.w	r3, r2, r3
 80037de:	4a09      	ldr	r2, [pc, #36]	; (8003804 <HAL_RCC_ClockConfig+0x1d0>)
 80037e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037e2:	4b09      	ldr	r3, [pc, #36]	; (8003808 <HAL_RCC_ClockConfig+0x1d4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fd fe90 	bl	800150c <HAL_InitTick>

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40023c00 	.word	0x40023c00
 80037fc:	40023800 	.word	0x40023800
 8003800:	08014d08 	.word	0x08014d08
 8003804:	20000000 	.word	0x20000000
 8003808:	20000004 	.word	0x20000004

0800380c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800380c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003810:	b094      	sub	sp, #80	; 0x50
 8003812:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003814:	2300      	movs	r3, #0
 8003816:	647b      	str	r3, [r7, #68]	; 0x44
 8003818:	2300      	movs	r3, #0
 800381a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800381c:	2300      	movs	r3, #0
 800381e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003820:	2300      	movs	r3, #0
 8003822:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003824:	4b79      	ldr	r3, [pc, #484]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 030c 	and.w	r3, r3, #12
 800382c:	2b08      	cmp	r3, #8
 800382e:	d00d      	beq.n	800384c <HAL_RCC_GetSysClockFreq+0x40>
 8003830:	2b08      	cmp	r3, #8
 8003832:	f200 80e1 	bhi.w	80039f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <HAL_RCC_GetSysClockFreq+0x34>
 800383a:	2b04      	cmp	r3, #4
 800383c:	d003      	beq.n	8003846 <HAL_RCC_GetSysClockFreq+0x3a>
 800383e:	e0db      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003840:	4b73      	ldr	r3, [pc, #460]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x204>)
 8003842:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003844:	e0db      	b.n	80039fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003846:	4b73      	ldr	r3, [pc, #460]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x208>)
 8003848:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800384a:	e0d8      	b.n	80039fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800384c:	4b6f      	ldr	r3, [pc, #444]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x200>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003854:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003856:	4b6d      	ldr	r3, [pc, #436]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d063      	beq.n	800392a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003862:	4b6a      	ldr	r3, [pc, #424]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	099b      	lsrs	r3, r3, #6
 8003868:	2200      	movs	r2, #0
 800386a:	63bb      	str	r3, [r7, #56]	; 0x38
 800386c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800386e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003874:	633b      	str	r3, [r7, #48]	; 0x30
 8003876:	2300      	movs	r3, #0
 8003878:	637b      	str	r3, [r7, #52]	; 0x34
 800387a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800387e:	4622      	mov	r2, r4
 8003880:	462b      	mov	r3, r5
 8003882:	f04f 0000 	mov.w	r0, #0
 8003886:	f04f 0100 	mov.w	r1, #0
 800388a:	0159      	lsls	r1, r3, #5
 800388c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003890:	0150      	lsls	r0, r2, #5
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4621      	mov	r1, r4
 8003898:	1a51      	subs	r1, r2, r1
 800389a:	6139      	str	r1, [r7, #16]
 800389c:	4629      	mov	r1, r5
 800389e:	eb63 0301 	sbc.w	r3, r3, r1
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038b0:	4659      	mov	r1, fp
 80038b2:	018b      	lsls	r3, r1, #6
 80038b4:	4651      	mov	r1, sl
 80038b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038ba:	4651      	mov	r1, sl
 80038bc:	018a      	lsls	r2, r1, #6
 80038be:	4651      	mov	r1, sl
 80038c0:	ebb2 0801 	subs.w	r8, r2, r1
 80038c4:	4659      	mov	r1, fp
 80038c6:	eb63 0901 	sbc.w	r9, r3, r1
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	f04f 0300 	mov.w	r3, #0
 80038d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038de:	4690      	mov	r8, r2
 80038e0:	4699      	mov	r9, r3
 80038e2:	4623      	mov	r3, r4
 80038e4:	eb18 0303 	adds.w	r3, r8, r3
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	462b      	mov	r3, r5
 80038ec:	eb49 0303 	adc.w	r3, r9, r3
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038fe:	4629      	mov	r1, r5
 8003900:	024b      	lsls	r3, r1, #9
 8003902:	4621      	mov	r1, r4
 8003904:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003908:	4621      	mov	r1, r4
 800390a:	024a      	lsls	r2, r1, #9
 800390c:	4610      	mov	r0, r2
 800390e:	4619      	mov	r1, r3
 8003910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003912:	2200      	movs	r2, #0
 8003914:	62bb      	str	r3, [r7, #40]	; 0x28
 8003916:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003918:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800391c:	f7fc fce0 	bl	80002e0 <__aeabi_uldivmod>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4613      	mov	r3, r2
 8003926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003928:	e058      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800392a:	4b38      	ldr	r3, [pc, #224]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x200>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	099b      	lsrs	r3, r3, #6
 8003930:	2200      	movs	r2, #0
 8003932:	4618      	mov	r0, r3
 8003934:	4611      	mov	r1, r2
 8003936:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800393a:	623b      	str	r3, [r7, #32]
 800393c:	2300      	movs	r3, #0
 800393e:	627b      	str	r3, [r7, #36]	; 0x24
 8003940:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003944:	4642      	mov	r2, r8
 8003946:	464b      	mov	r3, r9
 8003948:	f04f 0000 	mov.w	r0, #0
 800394c:	f04f 0100 	mov.w	r1, #0
 8003950:	0159      	lsls	r1, r3, #5
 8003952:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003956:	0150      	lsls	r0, r2, #5
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4641      	mov	r1, r8
 800395e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003962:	4649      	mov	r1, r9
 8003964:	eb63 0b01 	sbc.w	fp, r3, r1
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003974:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003978:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800397c:	ebb2 040a 	subs.w	r4, r2, sl
 8003980:	eb63 050b 	sbc.w	r5, r3, fp
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	00eb      	lsls	r3, r5, #3
 800398e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003992:	00e2      	lsls	r2, r4, #3
 8003994:	4614      	mov	r4, r2
 8003996:	461d      	mov	r5, r3
 8003998:	4643      	mov	r3, r8
 800399a:	18e3      	adds	r3, r4, r3
 800399c:	603b      	str	r3, [r7, #0]
 800399e:	464b      	mov	r3, r9
 80039a0:	eb45 0303 	adc.w	r3, r5, r3
 80039a4:	607b      	str	r3, [r7, #4]
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039b2:	4629      	mov	r1, r5
 80039b4:	028b      	lsls	r3, r1, #10
 80039b6:	4621      	mov	r1, r4
 80039b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039bc:	4621      	mov	r1, r4
 80039be:	028a      	lsls	r2, r1, #10
 80039c0:	4610      	mov	r0, r2
 80039c2:	4619      	mov	r1, r3
 80039c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039c6:	2200      	movs	r2, #0
 80039c8:	61bb      	str	r3, [r7, #24]
 80039ca:	61fa      	str	r2, [r7, #28]
 80039cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039d0:	f7fc fc86 	bl	80002e0 <__aeabi_uldivmod>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4613      	mov	r3, r2
 80039da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <HAL_RCC_GetSysClockFreq+0x200>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	0c1b      	lsrs	r3, r3, #16
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	3301      	adds	r3, #1
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80039ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039f6:	e002      	b.n	80039fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039f8:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x204>)
 80039fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3750      	adds	r7, #80	; 0x50
 8003a04:	46bd      	mov	sp, r7
 8003a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	00f42400 	.word	0x00f42400
 8003a14:	007a1200 	.word	0x007a1200

08003a18 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a1c:	4b03      	ldr	r3, [pc, #12]	; (8003a2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	20000000 	.word	0x20000000

08003a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a34:	f7ff fff0 	bl	8003a18 <HAL_RCC_GetHCLKFreq>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	0a9b      	lsrs	r3, r3, #10
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	4903      	ldr	r1, [pc, #12]	; (8003a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a46:	5ccb      	ldrb	r3, [r1, r3]
 8003a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40023800 	.word	0x40023800
 8003a54:	08014d18 	.word	0x08014d18

08003a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a5c:	f7ff ffdc 	bl	8003a18 <HAL_RCC_GetHCLKFreq>
 8003a60:	4602      	mov	r2, r0
 8003a62:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	0b5b      	lsrs	r3, r3, #13
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	4903      	ldr	r1, [pc, #12]	; (8003a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a6e:	5ccb      	ldrb	r3, [r1, r3]
 8003a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	08014d18 	.word	0x08014d18

08003a80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d012      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003aa8:	4b69      	ldr	r3, [pc, #420]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	4a68      	ldr	r2, [pc, #416]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003ab2:	6093      	str	r3, [r2, #8]
 8003ab4:	4b66      	ldr	r3, [pc, #408]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abc:	4964      	ldr	r1, [pc, #400]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003aca:	2301      	movs	r3, #1
 8003acc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d017      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ada:	4b5d      	ldr	r3, [pc, #372]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ae0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae8:	4959      	ldr	r1, [pc, #356]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003af8:	d101      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003afa:	2301      	movs	r3, #1
 8003afc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003b06:	2301      	movs	r3, #1
 8003b08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d017      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b16:	4b4e      	ldr	r3, [pc, #312]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	494a      	ldr	r1, [pc, #296]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b34:	d101      	bne.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003b36:	2301      	movs	r3, #1
 8003b38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003b42:	2301      	movs	r3, #1
 8003b44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003b52:	2301      	movs	r3, #1
 8003b54:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 808b 	beq.w	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b64:	4b3a      	ldr	r3, [pc, #232]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	4a39      	ldr	r2, [pc, #228]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8003b70:	4b37      	ldr	r3, [pc, #220]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b7c:	4b35      	ldr	r3, [pc, #212]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a34      	ldr	r2, [pc, #208]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b88:	f7fd fd04 	bl	8001594 <HAL_GetTick>
 8003b8c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b90:	f7fd fd00 	bl	8001594 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b64      	cmp	r3, #100	; 0x64
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e38f      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ba2:	4b2c      	ldr	r3, [pc, #176]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0f0      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bae:	4b28      	ldr	r3, [pc, #160]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d035      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d02e      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bcc:	4b20      	ldr	r3, [pc, #128]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bd6:	4b1e      	ldr	r3, [pc, #120]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bda:	4a1d      	ldr	r2, [pc, #116]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003be2:	4b1b      	ldr	r3, [pc, #108]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be6:	4a1a      	ldr	r2, [pc, #104]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003bee:	4a18      	ldr	r2, [pc, #96]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003bf4:	4b16      	ldr	r3, [pc, #88]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d114      	bne.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c00:	f7fd fcc8 	bl	8001594 <HAL_GetTick>
 8003c04:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c06:	e00a      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c08:	f7fd fcc4 	bl	8001594 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e351      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c1e:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0ee      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c36:	d111      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003c38:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c44:	4b04      	ldr	r3, [pc, #16]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c46:	400b      	ands	r3, r1
 8003c48:	4901      	ldr	r1, [pc, #4]	; (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]
 8003c4e:	e00b      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003c50:	40023800 	.word	0x40023800
 8003c54:	40007000 	.word	0x40007000
 8003c58:	0ffffcff 	.word	0x0ffffcff
 8003c5c:	4bac      	ldr	r3, [pc, #688]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	4aab      	ldr	r2, [pc, #684]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c62:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c66:	6093      	str	r3, [r2, #8]
 8003c68:	4ba9      	ldr	r3, [pc, #676]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c74:	49a6      	ldr	r1, [pc, #664]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d010      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c86:	4ba2      	ldr	r3, [pc, #648]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c8c:	4aa0      	ldr	r2, [pc, #640]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c92:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003c96:	4b9e      	ldr	r3, [pc, #632]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c98:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca0:	499b      	ldr	r1, [pc, #620]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cb4:	4b96      	ldr	r3, [pc, #600]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cc2:	4993      	ldr	r1, [pc, #588]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cd6:	4b8e      	ldr	r3, [pc, #568]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ce4:	498a      	ldr	r1, [pc, #552]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cf8:	4b85      	ldr	r3, [pc, #532]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d06:	4982      	ldr	r1, [pc, #520]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d1a:	4b7d      	ldr	r3, [pc, #500]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d28:	4979      	ldr	r1, [pc, #484]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d3c:	4b74      	ldr	r3, [pc, #464]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d42:	f023 0203 	bic.w	r2, r3, #3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	4971      	ldr	r1, [pc, #452]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d5e:	4b6c      	ldr	r3, [pc, #432]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d64:	f023 020c 	bic.w	r2, r3, #12
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d6c:	4968      	ldr	r1, [pc, #416]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d80:	4b63      	ldr	r3, [pc, #396]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d86:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8e:	4960      	ldr	r1, [pc, #384]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003da2:	4b5b      	ldr	r3, [pc, #364]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db0:	4957      	ldr	r1, [pc, #348]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003dc4:	4b52      	ldr	r3, [pc, #328]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd2:	494f      	ldr	r1, [pc, #316]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003de6:	4b4a      	ldr	r3, [pc, #296]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df4:	4946      	ldr	r1, [pc, #280]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00a      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e08:	4b41      	ldr	r3, [pc, #260]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e16:	493e      	ldr	r1, [pc, #248]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e2a:	4b39      	ldr	r3, [pc, #228]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e38:	4935      	ldr	r1, [pc, #212]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e4c:	4b30      	ldr	r3, [pc, #192]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e52:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e5a:	492d      	ldr	r1, [pc, #180]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d011      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e6e:	4b28      	ldr	r3, [pc, #160]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e74:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e7c:	4924      	ldr	r1, [pc, #144]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e8c:	d101      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eae:	4b18      	ldr	r3, [pc, #96]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ebc:	4914      	ldr	r1, [pc, #80]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00b      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ed0:	4b0f      	ldr	r3, [pc, #60]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ee0:	490b      	ldr	r1, [pc, #44]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00f      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003ef4:	4b06      	ldr	r3, [pc, #24]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f04:	4902      	ldr	r1, [pc, #8]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f0c:	e002      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003f0e:	bf00      	nop
 8003f10:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00b      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f20:	4b8a      	ldr	r3, [pc, #552]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f26:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f30:	4986      	ldr	r1, [pc, #536]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00b      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f44:	4b81      	ldr	r3, [pc, #516]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f4a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f54:	497d      	ldr	r1, [pc, #500]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d006      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 80d6 	beq.w	800411c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f70:	4b76      	ldr	r3, [pc, #472]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a75      	ldr	r2, [pc, #468]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f7c:	f7fd fb0a 	bl	8001594 <HAL_GetTick>
 8003f80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f84:	f7fd fb06 	bl	8001594 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b64      	cmp	r3, #100	; 0x64
 8003f90:	d901      	bls.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e195      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f96:	4b6d      	ldr	r3, [pc, #436]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d021      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d11d      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003fb6:	4b65      	ldr	r3, [pc, #404]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fbc:	0c1b      	lsrs	r3, r3, #16
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fc4:	4b61      	ldr	r3, [pc, #388]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fca:	0e1b      	lsrs	r3, r3, #24
 8003fcc:	f003 030f 	and.w	r3, r3, #15
 8003fd0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	019a      	lsls	r2, r3, #6
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	041b      	lsls	r3, r3, #16
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	061b      	lsls	r3, r3, #24
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	071b      	lsls	r3, r3, #28
 8003fea:	4958      	ldr	r1, [pc, #352]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d004      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004006:	d00a      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004010:	2b00      	cmp	r3, #0
 8004012:	d02e      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004018:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800401c:	d129      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800401e:	4b4b      	ldr	r3, [pc, #300]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004024:	0c1b      	lsrs	r3, r3, #16
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800402c:	4b47      	ldr	r3, [pc, #284]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800402e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004032:	0f1b      	lsrs	r3, r3, #28
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	019a      	lsls	r2, r3, #6
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	041b      	lsls	r3, r3, #16
 8004044:	431a      	orrs	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	061b      	lsls	r3, r3, #24
 800404c:	431a      	orrs	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	071b      	lsls	r3, r3, #28
 8004052:	493e      	ldr	r1, [pc, #248]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800405a:	4b3c      	ldr	r3, [pc, #240]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800405c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004060:	f023 021f 	bic.w	r2, r3, #31
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	3b01      	subs	r3, #1
 800406a:	4938      	ldr	r1, [pc, #224]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d01d      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800407e:	4b33      	ldr	r3, [pc, #204]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004084:	0e1b      	lsrs	r3, r3, #24
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800408c:	4b2f      	ldr	r3, [pc, #188]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800408e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004092:	0f1b      	lsrs	r3, r3, #28
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	019a      	lsls	r2, r3, #6
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	041b      	lsls	r3, r3, #16
 80040a6:	431a      	orrs	r2, r3
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	061b      	lsls	r3, r3, #24
 80040ac:	431a      	orrs	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	071b      	lsls	r3, r3, #28
 80040b2:	4926      	ldr	r1, [pc, #152]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d011      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	019a      	lsls	r2, r3, #6
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	041b      	lsls	r3, r3, #16
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	061b      	lsls	r3, r3, #24
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	071b      	lsls	r3, r3, #28
 80040e2:	491a      	ldr	r1, [pc, #104]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040ea:	4b18      	ldr	r3, [pc, #96]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a17      	ldr	r2, [pc, #92]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040f6:	f7fd fa4d 	bl	8001594 <HAL_GetTick>
 80040fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040fc:	e008      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80040fe:	f7fd fa49 	bl	8001594 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b64      	cmp	r3, #100	; 0x64
 800410a:	d901      	bls.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e0d8      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004110:	4b0e      	ldr	r3, [pc, #56]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0f0      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	2b01      	cmp	r3, #1
 8004120:	f040 80ce 	bne.w	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004124:	4b09      	ldr	r3, [pc, #36]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a08      	ldr	r2, [pc, #32]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800412a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800412e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004130:	f7fd fa30 	bl	8001594 <HAL_GetTick>
 8004134:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004136:	e00b      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004138:	f7fd fa2c 	bl	8001594 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b64      	cmp	r3, #100	; 0x64
 8004144:	d904      	bls.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e0bb      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800414a:	bf00      	nop
 800414c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004150:	4b5e      	ldr	r3, [pc, #376]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800415c:	d0ec      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416e:	2b00      	cmp	r3, #0
 8004170:	d009      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800417a:	2b00      	cmp	r3, #0
 800417c:	d02e      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	d12a      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004186:	4b51      	ldr	r3, [pc, #324]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418c:	0c1b      	lsrs	r3, r3, #16
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004194:	4b4d      	ldr	r3, [pc, #308]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419a:	0f1b      	lsrs	r3, r3, #28
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	019a      	lsls	r2, r3, #6
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	041b      	lsls	r3, r3, #16
 80041ac:	431a      	orrs	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	061b      	lsls	r3, r3, #24
 80041b4:	431a      	orrs	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	071b      	lsls	r3, r3, #28
 80041ba:	4944      	ldr	r1, [pc, #272]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80041c2:	4b42      	ldr	r3, [pc, #264]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d0:	3b01      	subs	r3, #1
 80041d2:	021b      	lsls	r3, r3, #8
 80041d4:	493d      	ldr	r1, [pc, #244]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d022      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041f0:	d11d      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041f2:	4b36      	ldr	r3, [pc, #216]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f8:	0e1b      	lsrs	r3, r3, #24
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004200:	4b32      	ldr	r3, [pc, #200]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004206:	0f1b      	lsrs	r3, r3, #28
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	019a      	lsls	r2, r3, #6
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	041b      	lsls	r3, r3, #16
 800421a:	431a      	orrs	r2, r3
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	061b      	lsls	r3, r3, #24
 8004220:	431a      	orrs	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	071b      	lsls	r3, r3, #28
 8004226:	4929      	ldr	r1, [pc, #164]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004228:	4313      	orrs	r3, r2
 800422a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d028      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800423a:	4b24      	ldr	r3, [pc, #144]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800423c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004240:	0e1b      	lsrs	r3, r3, #24
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004248:	4b20      	ldr	r3, [pc, #128]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424e:	0c1b      	lsrs	r3, r3, #16
 8004250:	f003 0303 	and.w	r3, r3, #3
 8004254:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	019a      	lsls	r2, r3, #6
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	041b      	lsls	r3, r3, #16
 8004260:	431a      	orrs	r2, r3
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	061b      	lsls	r3, r3, #24
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	071b      	lsls	r3, r3, #28
 800426e:	4917      	ldr	r1, [pc, #92]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004276:	4b15      	ldr	r3, [pc, #84]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800427c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004284:	4911      	ldr	r1, [pc, #68]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800428c:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a0e      	ldr	r2, [pc, #56]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004296:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004298:	f7fd f97c 	bl	8001594 <HAL_GetTick>
 800429c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800429e:	e008      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042a0:	f7fd f978 	bl	8001594 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b64      	cmp	r3, #100	; 0x64
 80042ac:	d901      	bls.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e007      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042b2:	4b06      	ldr	r3, [pc, #24]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042be:	d1ef      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3720      	adds	r7, #32
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	40023800 	.word	0x40023800

080042d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e049      	b.n	8004376 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d106      	bne.n	80042fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7fc fb72 	bl	80009e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3304      	adds	r3, #4
 800430c:	4619      	mov	r1, r3
 800430e:	4610      	mov	r0, r2
 8004310:	f000 fac0 	bl	8004894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
	...

08004380 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b01      	cmp	r3, #1
 8004392:	d001      	beq.n	8004398 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e054      	b.n	8004442 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0201 	orr.w	r2, r2, #1
 80043ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a26      	ldr	r2, [pc, #152]	; (8004450 <HAL_TIM_Base_Start_IT+0xd0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d022      	beq.n	8004400 <HAL_TIM_Base_Start_IT+0x80>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c2:	d01d      	beq.n	8004400 <HAL_TIM_Base_Start_IT+0x80>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a22      	ldr	r2, [pc, #136]	; (8004454 <HAL_TIM_Base_Start_IT+0xd4>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d018      	beq.n	8004400 <HAL_TIM_Base_Start_IT+0x80>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a21      	ldr	r2, [pc, #132]	; (8004458 <HAL_TIM_Base_Start_IT+0xd8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d013      	beq.n	8004400 <HAL_TIM_Base_Start_IT+0x80>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a1f      	ldr	r2, [pc, #124]	; (800445c <HAL_TIM_Base_Start_IT+0xdc>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00e      	beq.n	8004400 <HAL_TIM_Base_Start_IT+0x80>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a1e      	ldr	r2, [pc, #120]	; (8004460 <HAL_TIM_Base_Start_IT+0xe0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d009      	beq.n	8004400 <HAL_TIM_Base_Start_IT+0x80>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a1c      	ldr	r2, [pc, #112]	; (8004464 <HAL_TIM_Base_Start_IT+0xe4>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d004      	beq.n	8004400 <HAL_TIM_Base_Start_IT+0x80>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a1b      	ldr	r2, [pc, #108]	; (8004468 <HAL_TIM_Base_Start_IT+0xe8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d115      	bne.n	800442c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	4b19      	ldr	r3, [pc, #100]	; (800446c <HAL_TIM_Base_Start_IT+0xec>)
 8004408:	4013      	ands	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b06      	cmp	r3, #6
 8004410:	d015      	beq.n	800443e <HAL_TIM_Base_Start_IT+0xbe>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004418:	d011      	beq.n	800443e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 0201 	orr.w	r2, r2, #1
 8004428:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800442a:	e008      	b.n	800443e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	e000      	b.n	8004440 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800443e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40010000 	.word	0x40010000
 8004454:	40000400 	.word	0x40000400
 8004458:	40000800 	.word	0x40000800
 800445c:	40000c00 	.word	0x40000c00
 8004460:	40010400 	.word	0x40010400
 8004464:	40014000 	.word	0x40014000
 8004468:	40001800 	.word	0x40001800
 800446c:	00010007 	.word	0x00010007

08004470 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b02      	cmp	r3, #2
 8004484:	d122      	bne.n	80044cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b02      	cmp	r3, #2
 8004492:	d11b      	bne.n	80044cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f06f 0202 	mvn.w	r2, #2
 800449c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f9d0 	bl	8004858 <HAL_TIM_IC_CaptureCallback>
 80044b8:	e005      	b.n	80044c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f9c2 	bl	8004844 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f9d3 	bl	800486c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d122      	bne.n	8004520 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d11b      	bne.n	8004520 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f06f 0204 	mvn.w	r2, #4
 80044f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2202      	movs	r2, #2
 80044f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f9a6 	bl	8004858 <HAL_TIM_IC_CaptureCallback>
 800450c:	e005      	b.n	800451a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f998 	bl	8004844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f9a9 	bl	800486c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b08      	cmp	r3, #8
 800452c:	d122      	bne.n	8004574 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 0308 	and.w	r3, r3, #8
 8004538:	2b08      	cmp	r3, #8
 800453a:	d11b      	bne.n	8004574 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0208 	mvn.w	r2, #8
 8004544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2204      	movs	r2, #4
 800454a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f97c 	bl	8004858 <HAL_TIM_IC_CaptureCallback>
 8004560:	e005      	b.n	800456e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f96e 	bl	8004844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f97f 	bl	800486c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	f003 0310 	and.w	r3, r3, #16
 800457e:	2b10      	cmp	r3, #16
 8004580:	d122      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f003 0310 	and.w	r3, r3, #16
 800458c:	2b10      	cmp	r3, #16
 800458e:	d11b      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f06f 0210 	mvn.w	r2, #16
 8004598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2208      	movs	r2, #8
 800459e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f952 	bl	8004858 <HAL_TIM_IC_CaptureCallback>
 80045b4:	e005      	b.n	80045c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f944 	bl	8004844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f955 	bl	800486c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d10e      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d107      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f06f 0201 	mvn.w	r2, #1
 80045ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7fc fc04 	bl	8000dfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fe:	2b80      	cmp	r3, #128	; 0x80
 8004600:	d10e      	bne.n	8004620 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460c:	2b80      	cmp	r3, #128	; 0x80
 800460e:	d107      	bne.n	8004620 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fb0c 	bl	8004c38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800462e:	d10e      	bne.n	800464e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463a:	2b80      	cmp	r3, #128	; 0x80
 800463c:	d107      	bne.n	800464e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 faff 	bl	8004c4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004658:	2b40      	cmp	r3, #64	; 0x40
 800465a:	d10e      	bne.n	800467a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004666:	2b40      	cmp	r3, #64	; 0x40
 8004668:	d107      	bne.n	800467a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f903 	bl	8004880 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	f003 0320 	and.w	r3, r3, #32
 8004684:	2b20      	cmp	r3, #32
 8004686:	d10e      	bne.n	80046a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f003 0320 	and.w	r3, r3, #32
 8004692:	2b20      	cmp	r3, #32
 8004694:	d107      	bne.n	80046a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f06f 0220 	mvn.w	r2, #32
 800469e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 fabf 	bl	8004c24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046a6:	bf00      	nop
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_TIM_ConfigClockSource+0x1c>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e0b4      	b.n	8004836 <HAL_TIM_ConfigClockSource+0x186>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	4b56      	ldr	r3, [pc, #344]	; (8004840 <HAL_TIM_ConfigClockSource+0x190>)
 80046e8:	4013      	ands	r3, r2
 80046ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004704:	d03e      	beq.n	8004784 <HAL_TIM_ConfigClockSource+0xd4>
 8004706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800470a:	f200 8087 	bhi.w	800481c <HAL_TIM_ConfigClockSource+0x16c>
 800470e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004712:	f000 8086 	beq.w	8004822 <HAL_TIM_ConfigClockSource+0x172>
 8004716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800471a:	d87f      	bhi.n	800481c <HAL_TIM_ConfigClockSource+0x16c>
 800471c:	2b70      	cmp	r3, #112	; 0x70
 800471e:	d01a      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0xa6>
 8004720:	2b70      	cmp	r3, #112	; 0x70
 8004722:	d87b      	bhi.n	800481c <HAL_TIM_ConfigClockSource+0x16c>
 8004724:	2b60      	cmp	r3, #96	; 0x60
 8004726:	d050      	beq.n	80047ca <HAL_TIM_ConfigClockSource+0x11a>
 8004728:	2b60      	cmp	r3, #96	; 0x60
 800472a:	d877      	bhi.n	800481c <HAL_TIM_ConfigClockSource+0x16c>
 800472c:	2b50      	cmp	r3, #80	; 0x50
 800472e:	d03c      	beq.n	80047aa <HAL_TIM_ConfigClockSource+0xfa>
 8004730:	2b50      	cmp	r3, #80	; 0x50
 8004732:	d873      	bhi.n	800481c <HAL_TIM_ConfigClockSource+0x16c>
 8004734:	2b40      	cmp	r3, #64	; 0x40
 8004736:	d058      	beq.n	80047ea <HAL_TIM_ConfigClockSource+0x13a>
 8004738:	2b40      	cmp	r3, #64	; 0x40
 800473a:	d86f      	bhi.n	800481c <HAL_TIM_ConfigClockSource+0x16c>
 800473c:	2b30      	cmp	r3, #48	; 0x30
 800473e:	d064      	beq.n	800480a <HAL_TIM_ConfigClockSource+0x15a>
 8004740:	2b30      	cmp	r3, #48	; 0x30
 8004742:	d86b      	bhi.n	800481c <HAL_TIM_ConfigClockSource+0x16c>
 8004744:	2b20      	cmp	r3, #32
 8004746:	d060      	beq.n	800480a <HAL_TIM_ConfigClockSource+0x15a>
 8004748:	2b20      	cmp	r3, #32
 800474a:	d867      	bhi.n	800481c <HAL_TIM_ConfigClockSource+0x16c>
 800474c:	2b00      	cmp	r3, #0
 800474e:	d05c      	beq.n	800480a <HAL_TIM_ConfigClockSource+0x15a>
 8004750:	2b10      	cmp	r3, #16
 8004752:	d05a      	beq.n	800480a <HAL_TIM_ConfigClockSource+0x15a>
 8004754:	e062      	b.n	800481c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004766:	f000 f9af 	bl	8004ac8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004778:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	609a      	str	r2, [r3, #8]
      break;
 8004782:	e04f      	b.n	8004824 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004794:	f000 f998 	bl	8004ac8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047a6:	609a      	str	r2, [r3, #8]
      break;
 80047a8:	e03c      	b.n	8004824 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047b6:	461a      	mov	r2, r3
 80047b8:	f000 f90c 	bl	80049d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2150      	movs	r1, #80	; 0x50
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 f965 	bl	8004a92 <TIM_ITRx_SetConfig>
      break;
 80047c8:	e02c      	b.n	8004824 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047d6:	461a      	mov	r2, r3
 80047d8:	f000 f92b 	bl	8004a32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2160      	movs	r1, #96	; 0x60
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 f955 	bl	8004a92 <TIM_ITRx_SetConfig>
      break;
 80047e8:	e01c      	b.n	8004824 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f6:	461a      	mov	r2, r3
 80047f8:	f000 f8ec 	bl	80049d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2140      	movs	r1, #64	; 0x40
 8004802:	4618      	mov	r0, r3
 8004804:	f000 f945 	bl	8004a92 <TIM_ITRx_SetConfig>
      break;
 8004808:	e00c      	b.n	8004824 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4619      	mov	r1, r3
 8004814:	4610      	mov	r0, r2
 8004816:	f000 f93c 	bl	8004a92 <TIM_ITRx_SetConfig>
      break;
 800481a:	e003      	b.n	8004824 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	73fb      	strb	r3, [r7, #15]
      break;
 8004820:	e000      	b.n	8004824 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004822:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004834:	7bfb      	ldrb	r3, [r7, #15]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	fffeff88 	.word	0xfffeff88

08004844 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a40      	ldr	r2, [pc, #256]	; (80049a8 <TIM_Base_SetConfig+0x114>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d013      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b2:	d00f      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a3d      	ldr	r2, [pc, #244]	; (80049ac <TIM_Base_SetConfig+0x118>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d00b      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a3c      	ldr	r2, [pc, #240]	; (80049b0 <TIM_Base_SetConfig+0x11c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d007      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a3b      	ldr	r2, [pc, #236]	; (80049b4 <TIM_Base_SetConfig+0x120>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d003      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a3a      	ldr	r2, [pc, #232]	; (80049b8 <TIM_Base_SetConfig+0x124>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d108      	bne.n	80048e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a2f      	ldr	r2, [pc, #188]	; (80049a8 <TIM_Base_SetConfig+0x114>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d02b      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f4:	d027      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a2c      	ldr	r2, [pc, #176]	; (80049ac <TIM_Base_SetConfig+0x118>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d023      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a2b      	ldr	r2, [pc, #172]	; (80049b0 <TIM_Base_SetConfig+0x11c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d01f      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a2a      	ldr	r2, [pc, #168]	; (80049b4 <TIM_Base_SetConfig+0x120>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d01b      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a29      	ldr	r2, [pc, #164]	; (80049b8 <TIM_Base_SetConfig+0x124>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d017      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a28      	ldr	r2, [pc, #160]	; (80049bc <TIM_Base_SetConfig+0x128>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d013      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a27      	ldr	r2, [pc, #156]	; (80049c0 <TIM_Base_SetConfig+0x12c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00f      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a26      	ldr	r2, [pc, #152]	; (80049c4 <TIM_Base_SetConfig+0x130>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00b      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a25      	ldr	r2, [pc, #148]	; (80049c8 <TIM_Base_SetConfig+0x134>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d007      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a24      	ldr	r2, [pc, #144]	; (80049cc <TIM_Base_SetConfig+0x138>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d003      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a23      	ldr	r2, [pc, #140]	; (80049d0 <TIM_Base_SetConfig+0x13c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d108      	bne.n	8004958 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800494c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4313      	orrs	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a0a      	ldr	r2, [pc, #40]	; (80049a8 <TIM_Base_SetConfig+0x114>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d003      	beq.n	800498c <TIM_Base_SetConfig+0xf8>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a0c      	ldr	r2, [pc, #48]	; (80049b8 <TIM_Base_SetConfig+0x124>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d103      	bne.n	8004994 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	691a      	ldr	r2, [r3, #16]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	615a      	str	r2, [r3, #20]
}
 800499a:	bf00      	nop
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40010000 	.word	0x40010000
 80049ac:	40000400 	.word	0x40000400
 80049b0:	40000800 	.word	0x40000800
 80049b4:	40000c00 	.word	0x40000c00
 80049b8:	40010400 	.word	0x40010400
 80049bc:	40014000 	.word	0x40014000
 80049c0:	40014400 	.word	0x40014400
 80049c4:	40014800 	.word	0x40014800
 80049c8:	40001800 	.word	0x40001800
 80049cc:	40001c00 	.word	0x40001c00
 80049d0:	40002000 	.word	0x40002000

080049d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	f023 0201 	bic.w	r2, r3, #1
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	011b      	lsls	r3, r3, #4
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f023 030a 	bic.w	r3, r3, #10
 8004a10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	621a      	str	r2, [r3, #32]
}
 8004a26:	bf00      	nop
 8004a28:	371c      	adds	r7, #28
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b087      	sub	sp, #28
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	60f8      	str	r0, [r7, #12]
 8004a3a:	60b9      	str	r1, [r7, #8]
 8004a3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	f023 0210 	bic.w	r2, r3, #16
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	031b      	lsls	r3, r3, #12
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	621a      	str	r2, [r3, #32]
}
 8004a86:	bf00      	nop
 8004a88:	371c      	adds	r7, #28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b085      	sub	sp, #20
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f043 0307 	orr.w	r3, r3, #7
 8004ab4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	609a      	str	r2, [r3, #8]
}
 8004abc:	bf00      	nop
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ae2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	021a      	lsls	r2, r3, #8
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	431a      	orrs	r2, r3
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	609a      	str	r2, [r3, #8]
}
 8004afc:	bf00      	nop
 8004afe:	371c      	adds	r7, #28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d101      	bne.n	8004b20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	e06d      	b.n	8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a30      	ldr	r2, [pc, #192]	; (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d004      	beq.n	8004b54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a2f      	ldr	r2, [pc, #188]	; (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d108      	bne.n	8004b66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a20      	ldr	r2, [pc, #128]	; (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d022      	beq.n	8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b92:	d01d      	beq.n	8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a1d      	ldr	r2, [pc, #116]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d018      	beq.n	8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a1c      	ldr	r2, [pc, #112]	; (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d013      	beq.n	8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a1a      	ldr	r2, [pc, #104]	; (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00e      	beq.n	8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a15      	ldr	r2, [pc, #84]	; (8004c0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d009      	beq.n	8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a16      	ldr	r2, [pc, #88]	; (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d004      	beq.n	8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a15      	ldr	r2, [pc, #84]	; (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d10c      	bne.n	8004bea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	40010000 	.word	0x40010000
 8004c0c:	40010400 	.word	0x40010400
 8004c10:	40000400 	.word	0x40000400
 8004c14:	40000800 	.word	0x40000800
 8004c18:	40000c00 	.word	0x40000c00
 8004c1c:	40014000 	.word	0x40014000
 8004c20:	40001800 	.word	0x40001800

08004c24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e040      	b.n	8004cf4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d106      	bne.n	8004c88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7fb fed0 	bl	8000a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2224      	movs	r2, #36	; 0x24
 8004c8c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0201 	bic.w	r2, r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f82c 	bl	8004cfc <UART_SetConfig>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d101      	bne.n	8004cae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e022      	b.n	8004cf4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d002      	beq.n	8004cbc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 fa84 	bl	80051c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689a      	ldr	r2, [r3, #8]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0201 	orr.w	r2, r2, #1
 8004cea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 fb0b 	bl	8005308 <UART_CheckIdleState>
 8004cf2:	4603      	mov	r3, r0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b088      	sub	sp, #32
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d04:	2300      	movs	r3, #0
 8004d06:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	431a      	orrs	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	4ba6      	ldr	r3, [pc, #664]	; (8004fc0 <UART_SetConfig+0x2c4>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6812      	ldr	r2, [r2, #0]
 8004d2e:	6979      	ldr	r1, [r7, #20]
 8004d30:	430b      	orrs	r3, r1
 8004d32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a94      	ldr	r2, [pc, #592]	; (8004fc4 <UART_SetConfig+0x2c8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d120      	bne.n	8004dba <UART_SetConfig+0xbe>
 8004d78:	4b93      	ldr	r3, [pc, #588]	; (8004fc8 <UART_SetConfig+0x2cc>)
 8004d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7e:	f003 0303 	and.w	r3, r3, #3
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d816      	bhi.n	8004db4 <UART_SetConfig+0xb8>
 8004d86:	a201      	add	r2, pc, #4	; (adr r2, 8004d8c <UART_SetConfig+0x90>)
 8004d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8c:	08004d9d 	.word	0x08004d9d
 8004d90:	08004da9 	.word	0x08004da9
 8004d94:	08004da3 	.word	0x08004da3
 8004d98:	08004daf 	.word	0x08004daf
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	77fb      	strb	r3, [r7, #31]
 8004da0:	e150      	b.n	8005044 <UART_SetConfig+0x348>
 8004da2:	2302      	movs	r3, #2
 8004da4:	77fb      	strb	r3, [r7, #31]
 8004da6:	e14d      	b.n	8005044 <UART_SetConfig+0x348>
 8004da8:	2304      	movs	r3, #4
 8004daa:	77fb      	strb	r3, [r7, #31]
 8004dac:	e14a      	b.n	8005044 <UART_SetConfig+0x348>
 8004dae:	2308      	movs	r3, #8
 8004db0:	77fb      	strb	r3, [r7, #31]
 8004db2:	e147      	b.n	8005044 <UART_SetConfig+0x348>
 8004db4:	2310      	movs	r3, #16
 8004db6:	77fb      	strb	r3, [r7, #31]
 8004db8:	e144      	b.n	8005044 <UART_SetConfig+0x348>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a83      	ldr	r2, [pc, #524]	; (8004fcc <UART_SetConfig+0x2d0>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d132      	bne.n	8004e2a <UART_SetConfig+0x12e>
 8004dc4:	4b80      	ldr	r3, [pc, #512]	; (8004fc8 <UART_SetConfig+0x2cc>)
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dca:	f003 030c 	and.w	r3, r3, #12
 8004dce:	2b0c      	cmp	r3, #12
 8004dd0:	d828      	bhi.n	8004e24 <UART_SetConfig+0x128>
 8004dd2:	a201      	add	r2, pc, #4	; (adr r2, 8004dd8 <UART_SetConfig+0xdc>)
 8004dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd8:	08004e0d 	.word	0x08004e0d
 8004ddc:	08004e25 	.word	0x08004e25
 8004de0:	08004e25 	.word	0x08004e25
 8004de4:	08004e25 	.word	0x08004e25
 8004de8:	08004e19 	.word	0x08004e19
 8004dec:	08004e25 	.word	0x08004e25
 8004df0:	08004e25 	.word	0x08004e25
 8004df4:	08004e25 	.word	0x08004e25
 8004df8:	08004e13 	.word	0x08004e13
 8004dfc:	08004e25 	.word	0x08004e25
 8004e00:	08004e25 	.word	0x08004e25
 8004e04:	08004e25 	.word	0x08004e25
 8004e08:	08004e1f 	.word	0x08004e1f
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	77fb      	strb	r3, [r7, #31]
 8004e10:	e118      	b.n	8005044 <UART_SetConfig+0x348>
 8004e12:	2302      	movs	r3, #2
 8004e14:	77fb      	strb	r3, [r7, #31]
 8004e16:	e115      	b.n	8005044 <UART_SetConfig+0x348>
 8004e18:	2304      	movs	r3, #4
 8004e1a:	77fb      	strb	r3, [r7, #31]
 8004e1c:	e112      	b.n	8005044 <UART_SetConfig+0x348>
 8004e1e:	2308      	movs	r3, #8
 8004e20:	77fb      	strb	r3, [r7, #31]
 8004e22:	e10f      	b.n	8005044 <UART_SetConfig+0x348>
 8004e24:	2310      	movs	r3, #16
 8004e26:	77fb      	strb	r3, [r7, #31]
 8004e28:	e10c      	b.n	8005044 <UART_SetConfig+0x348>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a68      	ldr	r2, [pc, #416]	; (8004fd0 <UART_SetConfig+0x2d4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d120      	bne.n	8004e76 <UART_SetConfig+0x17a>
 8004e34:	4b64      	ldr	r3, [pc, #400]	; (8004fc8 <UART_SetConfig+0x2cc>)
 8004e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e3e:	2b30      	cmp	r3, #48	; 0x30
 8004e40:	d013      	beq.n	8004e6a <UART_SetConfig+0x16e>
 8004e42:	2b30      	cmp	r3, #48	; 0x30
 8004e44:	d814      	bhi.n	8004e70 <UART_SetConfig+0x174>
 8004e46:	2b20      	cmp	r3, #32
 8004e48:	d009      	beq.n	8004e5e <UART_SetConfig+0x162>
 8004e4a:	2b20      	cmp	r3, #32
 8004e4c:	d810      	bhi.n	8004e70 <UART_SetConfig+0x174>
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d002      	beq.n	8004e58 <UART_SetConfig+0x15c>
 8004e52:	2b10      	cmp	r3, #16
 8004e54:	d006      	beq.n	8004e64 <UART_SetConfig+0x168>
 8004e56:	e00b      	b.n	8004e70 <UART_SetConfig+0x174>
 8004e58:	2300      	movs	r3, #0
 8004e5a:	77fb      	strb	r3, [r7, #31]
 8004e5c:	e0f2      	b.n	8005044 <UART_SetConfig+0x348>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	77fb      	strb	r3, [r7, #31]
 8004e62:	e0ef      	b.n	8005044 <UART_SetConfig+0x348>
 8004e64:	2304      	movs	r3, #4
 8004e66:	77fb      	strb	r3, [r7, #31]
 8004e68:	e0ec      	b.n	8005044 <UART_SetConfig+0x348>
 8004e6a:	2308      	movs	r3, #8
 8004e6c:	77fb      	strb	r3, [r7, #31]
 8004e6e:	e0e9      	b.n	8005044 <UART_SetConfig+0x348>
 8004e70:	2310      	movs	r3, #16
 8004e72:	77fb      	strb	r3, [r7, #31]
 8004e74:	e0e6      	b.n	8005044 <UART_SetConfig+0x348>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a56      	ldr	r2, [pc, #344]	; (8004fd4 <UART_SetConfig+0x2d8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d120      	bne.n	8004ec2 <UART_SetConfig+0x1c6>
 8004e80:	4b51      	ldr	r3, [pc, #324]	; (8004fc8 <UART_SetConfig+0x2cc>)
 8004e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e8a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e8c:	d013      	beq.n	8004eb6 <UART_SetConfig+0x1ba>
 8004e8e:	2bc0      	cmp	r3, #192	; 0xc0
 8004e90:	d814      	bhi.n	8004ebc <UART_SetConfig+0x1c0>
 8004e92:	2b80      	cmp	r3, #128	; 0x80
 8004e94:	d009      	beq.n	8004eaa <UART_SetConfig+0x1ae>
 8004e96:	2b80      	cmp	r3, #128	; 0x80
 8004e98:	d810      	bhi.n	8004ebc <UART_SetConfig+0x1c0>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <UART_SetConfig+0x1a8>
 8004e9e:	2b40      	cmp	r3, #64	; 0x40
 8004ea0:	d006      	beq.n	8004eb0 <UART_SetConfig+0x1b4>
 8004ea2:	e00b      	b.n	8004ebc <UART_SetConfig+0x1c0>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	77fb      	strb	r3, [r7, #31]
 8004ea8:	e0cc      	b.n	8005044 <UART_SetConfig+0x348>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	77fb      	strb	r3, [r7, #31]
 8004eae:	e0c9      	b.n	8005044 <UART_SetConfig+0x348>
 8004eb0:	2304      	movs	r3, #4
 8004eb2:	77fb      	strb	r3, [r7, #31]
 8004eb4:	e0c6      	b.n	8005044 <UART_SetConfig+0x348>
 8004eb6:	2308      	movs	r3, #8
 8004eb8:	77fb      	strb	r3, [r7, #31]
 8004eba:	e0c3      	b.n	8005044 <UART_SetConfig+0x348>
 8004ebc:	2310      	movs	r3, #16
 8004ebe:	77fb      	strb	r3, [r7, #31]
 8004ec0:	e0c0      	b.n	8005044 <UART_SetConfig+0x348>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a44      	ldr	r2, [pc, #272]	; (8004fd8 <UART_SetConfig+0x2dc>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d125      	bne.n	8004f18 <UART_SetConfig+0x21c>
 8004ecc:	4b3e      	ldr	r3, [pc, #248]	; (8004fc8 <UART_SetConfig+0x2cc>)
 8004ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eda:	d017      	beq.n	8004f0c <UART_SetConfig+0x210>
 8004edc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ee0:	d817      	bhi.n	8004f12 <UART_SetConfig+0x216>
 8004ee2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ee6:	d00b      	beq.n	8004f00 <UART_SetConfig+0x204>
 8004ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eec:	d811      	bhi.n	8004f12 <UART_SetConfig+0x216>
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <UART_SetConfig+0x1fe>
 8004ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ef6:	d006      	beq.n	8004f06 <UART_SetConfig+0x20a>
 8004ef8:	e00b      	b.n	8004f12 <UART_SetConfig+0x216>
 8004efa:	2300      	movs	r3, #0
 8004efc:	77fb      	strb	r3, [r7, #31]
 8004efe:	e0a1      	b.n	8005044 <UART_SetConfig+0x348>
 8004f00:	2302      	movs	r3, #2
 8004f02:	77fb      	strb	r3, [r7, #31]
 8004f04:	e09e      	b.n	8005044 <UART_SetConfig+0x348>
 8004f06:	2304      	movs	r3, #4
 8004f08:	77fb      	strb	r3, [r7, #31]
 8004f0a:	e09b      	b.n	8005044 <UART_SetConfig+0x348>
 8004f0c:	2308      	movs	r3, #8
 8004f0e:	77fb      	strb	r3, [r7, #31]
 8004f10:	e098      	b.n	8005044 <UART_SetConfig+0x348>
 8004f12:	2310      	movs	r3, #16
 8004f14:	77fb      	strb	r3, [r7, #31]
 8004f16:	e095      	b.n	8005044 <UART_SetConfig+0x348>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a2f      	ldr	r2, [pc, #188]	; (8004fdc <UART_SetConfig+0x2e0>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d125      	bne.n	8004f6e <UART_SetConfig+0x272>
 8004f22:	4b29      	ldr	r3, [pc, #164]	; (8004fc8 <UART_SetConfig+0x2cc>)
 8004f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f30:	d017      	beq.n	8004f62 <UART_SetConfig+0x266>
 8004f32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f36:	d817      	bhi.n	8004f68 <UART_SetConfig+0x26c>
 8004f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f3c:	d00b      	beq.n	8004f56 <UART_SetConfig+0x25a>
 8004f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f42:	d811      	bhi.n	8004f68 <UART_SetConfig+0x26c>
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <UART_SetConfig+0x254>
 8004f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f4c:	d006      	beq.n	8004f5c <UART_SetConfig+0x260>
 8004f4e:	e00b      	b.n	8004f68 <UART_SetConfig+0x26c>
 8004f50:	2301      	movs	r3, #1
 8004f52:	77fb      	strb	r3, [r7, #31]
 8004f54:	e076      	b.n	8005044 <UART_SetConfig+0x348>
 8004f56:	2302      	movs	r3, #2
 8004f58:	77fb      	strb	r3, [r7, #31]
 8004f5a:	e073      	b.n	8005044 <UART_SetConfig+0x348>
 8004f5c:	2304      	movs	r3, #4
 8004f5e:	77fb      	strb	r3, [r7, #31]
 8004f60:	e070      	b.n	8005044 <UART_SetConfig+0x348>
 8004f62:	2308      	movs	r3, #8
 8004f64:	77fb      	strb	r3, [r7, #31]
 8004f66:	e06d      	b.n	8005044 <UART_SetConfig+0x348>
 8004f68:	2310      	movs	r3, #16
 8004f6a:	77fb      	strb	r3, [r7, #31]
 8004f6c:	e06a      	b.n	8005044 <UART_SetConfig+0x348>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a1b      	ldr	r2, [pc, #108]	; (8004fe0 <UART_SetConfig+0x2e4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d138      	bne.n	8004fea <UART_SetConfig+0x2ee>
 8004f78:	4b13      	ldr	r3, [pc, #76]	; (8004fc8 <UART_SetConfig+0x2cc>)
 8004f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004f82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f86:	d017      	beq.n	8004fb8 <UART_SetConfig+0x2bc>
 8004f88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f8c:	d82a      	bhi.n	8004fe4 <UART_SetConfig+0x2e8>
 8004f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f92:	d00b      	beq.n	8004fac <UART_SetConfig+0x2b0>
 8004f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f98:	d824      	bhi.n	8004fe4 <UART_SetConfig+0x2e8>
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <UART_SetConfig+0x2aa>
 8004f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fa2:	d006      	beq.n	8004fb2 <UART_SetConfig+0x2b6>
 8004fa4:	e01e      	b.n	8004fe4 <UART_SetConfig+0x2e8>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	77fb      	strb	r3, [r7, #31]
 8004faa:	e04b      	b.n	8005044 <UART_SetConfig+0x348>
 8004fac:	2302      	movs	r3, #2
 8004fae:	77fb      	strb	r3, [r7, #31]
 8004fb0:	e048      	b.n	8005044 <UART_SetConfig+0x348>
 8004fb2:	2304      	movs	r3, #4
 8004fb4:	77fb      	strb	r3, [r7, #31]
 8004fb6:	e045      	b.n	8005044 <UART_SetConfig+0x348>
 8004fb8:	2308      	movs	r3, #8
 8004fba:	77fb      	strb	r3, [r7, #31]
 8004fbc:	e042      	b.n	8005044 <UART_SetConfig+0x348>
 8004fbe:	bf00      	nop
 8004fc0:	efff69f3 	.word	0xefff69f3
 8004fc4:	40011000 	.word	0x40011000
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	40004400 	.word	0x40004400
 8004fd0:	40004800 	.word	0x40004800
 8004fd4:	40004c00 	.word	0x40004c00
 8004fd8:	40005000 	.word	0x40005000
 8004fdc:	40011400 	.word	0x40011400
 8004fe0:	40007800 	.word	0x40007800
 8004fe4:	2310      	movs	r3, #16
 8004fe6:	77fb      	strb	r3, [r7, #31]
 8004fe8:	e02c      	b.n	8005044 <UART_SetConfig+0x348>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a72      	ldr	r2, [pc, #456]	; (80051b8 <UART_SetConfig+0x4bc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d125      	bne.n	8005040 <UART_SetConfig+0x344>
 8004ff4:	4b71      	ldr	r3, [pc, #452]	; (80051bc <UART_SetConfig+0x4c0>)
 8004ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ffe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005002:	d017      	beq.n	8005034 <UART_SetConfig+0x338>
 8005004:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005008:	d817      	bhi.n	800503a <UART_SetConfig+0x33e>
 800500a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800500e:	d00b      	beq.n	8005028 <UART_SetConfig+0x32c>
 8005010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005014:	d811      	bhi.n	800503a <UART_SetConfig+0x33e>
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <UART_SetConfig+0x326>
 800501a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800501e:	d006      	beq.n	800502e <UART_SetConfig+0x332>
 8005020:	e00b      	b.n	800503a <UART_SetConfig+0x33e>
 8005022:	2300      	movs	r3, #0
 8005024:	77fb      	strb	r3, [r7, #31]
 8005026:	e00d      	b.n	8005044 <UART_SetConfig+0x348>
 8005028:	2302      	movs	r3, #2
 800502a:	77fb      	strb	r3, [r7, #31]
 800502c:	e00a      	b.n	8005044 <UART_SetConfig+0x348>
 800502e:	2304      	movs	r3, #4
 8005030:	77fb      	strb	r3, [r7, #31]
 8005032:	e007      	b.n	8005044 <UART_SetConfig+0x348>
 8005034:	2308      	movs	r3, #8
 8005036:	77fb      	strb	r3, [r7, #31]
 8005038:	e004      	b.n	8005044 <UART_SetConfig+0x348>
 800503a:	2310      	movs	r3, #16
 800503c:	77fb      	strb	r3, [r7, #31]
 800503e:	e001      	b.n	8005044 <UART_SetConfig+0x348>
 8005040:	2310      	movs	r3, #16
 8005042:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800504c:	d15b      	bne.n	8005106 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800504e:	7ffb      	ldrb	r3, [r7, #31]
 8005050:	2b08      	cmp	r3, #8
 8005052:	d828      	bhi.n	80050a6 <UART_SetConfig+0x3aa>
 8005054:	a201      	add	r2, pc, #4	; (adr r2, 800505c <UART_SetConfig+0x360>)
 8005056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505a:	bf00      	nop
 800505c:	08005081 	.word	0x08005081
 8005060:	08005089 	.word	0x08005089
 8005064:	08005091 	.word	0x08005091
 8005068:	080050a7 	.word	0x080050a7
 800506c:	08005097 	.word	0x08005097
 8005070:	080050a7 	.word	0x080050a7
 8005074:	080050a7 	.word	0x080050a7
 8005078:	080050a7 	.word	0x080050a7
 800507c:	0800509f 	.word	0x0800509f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005080:	f7fe fcd6 	bl	8003a30 <HAL_RCC_GetPCLK1Freq>
 8005084:	61b8      	str	r0, [r7, #24]
        break;
 8005086:	e013      	b.n	80050b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005088:	f7fe fce6 	bl	8003a58 <HAL_RCC_GetPCLK2Freq>
 800508c:	61b8      	str	r0, [r7, #24]
        break;
 800508e:	e00f      	b.n	80050b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005090:	4b4b      	ldr	r3, [pc, #300]	; (80051c0 <UART_SetConfig+0x4c4>)
 8005092:	61bb      	str	r3, [r7, #24]
        break;
 8005094:	e00c      	b.n	80050b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005096:	f7fe fbb9 	bl	800380c <HAL_RCC_GetSysClockFreq>
 800509a:	61b8      	str	r0, [r7, #24]
        break;
 800509c:	e008      	b.n	80050b0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800509e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050a2:	61bb      	str	r3, [r7, #24]
        break;
 80050a4:	e004      	b.n	80050b0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	77bb      	strb	r3, [r7, #30]
        break;
 80050ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d074      	beq.n	80051a0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	005a      	lsls	r2, r3, #1
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	085b      	lsrs	r3, r3, #1
 80050c0:	441a      	add	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	2b0f      	cmp	r3, #15
 80050d0:	d916      	bls.n	8005100 <UART_SetConfig+0x404>
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d8:	d212      	bcs.n	8005100 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	b29b      	uxth	r3, r3
 80050de:	f023 030f 	bic.w	r3, r3, #15
 80050e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	085b      	lsrs	r3, r3, #1
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	f003 0307 	and.w	r3, r3, #7
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	89fb      	ldrh	r3, [r7, #14]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	89fa      	ldrh	r2, [r7, #14]
 80050fc:	60da      	str	r2, [r3, #12]
 80050fe:	e04f      	b.n	80051a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	77bb      	strb	r3, [r7, #30]
 8005104:	e04c      	b.n	80051a0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005106:	7ffb      	ldrb	r3, [r7, #31]
 8005108:	2b08      	cmp	r3, #8
 800510a:	d828      	bhi.n	800515e <UART_SetConfig+0x462>
 800510c:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <UART_SetConfig+0x418>)
 800510e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005112:	bf00      	nop
 8005114:	08005139 	.word	0x08005139
 8005118:	08005141 	.word	0x08005141
 800511c:	08005149 	.word	0x08005149
 8005120:	0800515f 	.word	0x0800515f
 8005124:	0800514f 	.word	0x0800514f
 8005128:	0800515f 	.word	0x0800515f
 800512c:	0800515f 	.word	0x0800515f
 8005130:	0800515f 	.word	0x0800515f
 8005134:	08005157 	.word	0x08005157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005138:	f7fe fc7a 	bl	8003a30 <HAL_RCC_GetPCLK1Freq>
 800513c:	61b8      	str	r0, [r7, #24]
        break;
 800513e:	e013      	b.n	8005168 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005140:	f7fe fc8a 	bl	8003a58 <HAL_RCC_GetPCLK2Freq>
 8005144:	61b8      	str	r0, [r7, #24]
        break;
 8005146:	e00f      	b.n	8005168 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005148:	4b1d      	ldr	r3, [pc, #116]	; (80051c0 <UART_SetConfig+0x4c4>)
 800514a:	61bb      	str	r3, [r7, #24]
        break;
 800514c:	e00c      	b.n	8005168 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800514e:	f7fe fb5d 	bl	800380c <HAL_RCC_GetSysClockFreq>
 8005152:	61b8      	str	r0, [r7, #24]
        break;
 8005154:	e008      	b.n	8005168 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800515a:	61bb      	str	r3, [r7, #24]
        break;
 800515c:	e004      	b.n	8005168 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800515e:	2300      	movs	r3, #0
 8005160:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	77bb      	strb	r3, [r7, #30]
        break;
 8005166:	bf00      	nop
    }

    if (pclk != 0U)
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d018      	beq.n	80051a0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	085a      	lsrs	r2, r3, #1
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	441a      	add	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005180:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	2b0f      	cmp	r3, #15
 8005186:	d909      	bls.n	800519c <UART_SetConfig+0x4a0>
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800518e:	d205      	bcs.n	800519c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	b29a      	uxth	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	60da      	str	r2, [r3, #12]
 800519a:	e001      	b.n	80051a0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80051ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3720      	adds	r7, #32
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	40007c00 	.word	0x40007c00
 80051bc:	40023800 	.word	0x40023800
 80051c0:	00f42400 	.word	0x00f42400

080051c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00a      	beq.n	80051ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00a      	beq.n	8005232 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	f003 0310 	and.w	r3, r3, #16
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00a      	beq.n	8005276 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	f003 0320 	and.w	r3, r3, #32
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d01a      	beq.n	80052da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052c2:	d10a      	bne.n	80052da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	605a      	str	r2, [r3, #4]
  }
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af02      	add	r7, sp, #8
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005318:	f7fc f93c 	bl	8001594 <HAL_GetTick>
 800531c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0308 	and.w	r3, r3, #8
 8005328:	2b08      	cmp	r3, #8
 800532a:	d10e      	bne.n	800534a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800532c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f831 	bl	80053a2 <UART_WaitOnFlagUntilTimeout>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e027      	b.n	800539a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	2b04      	cmp	r3, #4
 8005356:	d10e      	bne.n	8005376 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005358:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f81b 	bl	80053a2 <UART_WaitOnFlagUntilTimeout>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e011      	b.n	800539a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2220      	movs	r2, #32
 800537a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2220      	movs	r2, #32
 8005380:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b09c      	sub	sp, #112	; 0x70
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	60f8      	str	r0, [r7, #12]
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	603b      	str	r3, [r7, #0]
 80053ae:	4613      	mov	r3, r2
 80053b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b2:	e0a7      	b.n	8005504 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ba:	f000 80a3 	beq.w	8005504 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053be:	f7fc f8e9 	bl	8001594 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d302      	bcc.n	80053d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80053ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d13f      	bne.n	8005454 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80053e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053e8:	667b      	str	r3, [r7, #100]	; 0x64
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053f4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80053f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053fa:	e841 2300 	strex	r3, r2, [r1]
 80053fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1e6      	bne.n	80053d4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3308      	adds	r3, #8
 800540c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005410:	e853 3f00 	ldrex	r3, [r3]
 8005414:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005418:	f023 0301 	bic.w	r3, r3, #1
 800541c:	663b      	str	r3, [r7, #96]	; 0x60
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3308      	adds	r3, #8
 8005424:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005426:	64ba      	str	r2, [r7, #72]	; 0x48
 8005428:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800542c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800542e:	e841 2300 	strex	r3, r2, [r1]
 8005432:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1e5      	bne.n	8005406 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2220      	movs	r2, #32
 800543e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2220      	movs	r2, #32
 8005444:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e068      	b.n	8005526 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0304 	and.w	r3, r3, #4
 800545e:	2b00      	cmp	r3, #0
 8005460:	d050      	beq.n	8005504 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800546c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005470:	d148      	bne.n	8005504 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800547a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005484:	e853 3f00 	ldrex	r3, [r3]
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005490:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800549a:	637b      	str	r3, [r7, #52]	; 0x34
 800549c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054a2:	e841 2300 	strex	r3, r2, [r1]
 80054a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1e6      	bne.n	800547c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3308      	adds	r3, #8
 80054b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	e853 3f00 	ldrex	r3, [r3]
 80054bc:	613b      	str	r3, [r7, #16]
   return(result);
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f023 0301 	bic.w	r3, r3, #1
 80054c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3308      	adds	r3, #8
 80054cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80054ce:	623a      	str	r2, [r7, #32]
 80054d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d2:	69f9      	ldr	r1, [r7, #28]
 80054d4:	6a3a      	ldr	r2, [r7, #32]
 80054d6:	e841 2300 	strex	r3, r2, [r1]
 80054da:	61bb      	str	r3, [r7, #24]
   return(result);
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1e5      	bne.n	80054ae <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2220      	movs	r2, #32
 80054e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e010      	b.n	8005526 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	69da      	ldr	r2, [r3, #28]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	4013      	ands	r3, r2
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	429a      	cmp	r2, r3
 8005512:	bf0c      	ite	eq
 8005514:	2301      	moveq	r3, #1
 8005516:	2300      	movne	r3, #0
 8005518:	b2db      	uxtb	r3, r3
 800551a:	461a      	mov	r2, r3
 800551c:	79fb      	ldrb	r3, [r7, #7]
 800551e:	429a      	cmp	r2, r3
 8005520:	f43f af48 	beq.w	80053b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3770      	adds	r7, #112	; 0x70
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
	...

08005530 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005530:	b084      	sub	sp, #16
 8005532:	b580      	push	{r7, lr}
 8005534:	b084      	sub	sp, #16
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
 800553a:	f107 001c 	add.w	r0, r7, #28
 800553e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005544:	2b01      	cmp	r3, #1
 8005546:	d120      	bne.n	800558a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68da      	ldr	r2, [r3, #12]
 8005558:	4b20      	ldr	r3, [pc, #128]	; (80055dc <USB_CoreInit+0xac>)
 800555a:	4013      	ands	r3, r2
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800556c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800556e:	2b01      	cmp	r3, #1
 8005570:	d105      	bne.n	800557e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 fa96 	bl	8005ab0 <USB_CoreReset>
 8005584:	4603      	mov	r3, r0
 8005586:	73fb      	strb	r3, [r7, #15]
 8005588:	e010      	b.n	80055ac <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fa8a 	bl	8005ab0 <USB_CoreReset>
 800559c:	4603      	mov	r3, r0
 800559e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d10b      	bne.n	80055ca <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f043 0206 	orr.w	r2, r3, #6
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f043 0220 	orr.w	r2, r3, #32
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055d6:	b004      	add	sp, #16
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	ffbdffbf 	.word	0xffbdffbf

080055e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f023 0201 	bic.w	r2, r3, #1
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b084      	sub	sp, #16
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	460b      	mov	r3, r1
 800560c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800561e:	78fb      	ldrb	r3, [r7, #3]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d115      	bne.n	8005650 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005630:	2001      	movs	r0, #1
 8005632:	f7fb ffbb 	bl	80015ac <HAL_Delay>
      ms++;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	3301      	adds	r3, #1
 800563a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 fa29 	bl	8005a94 <USB_GetMode>
 8005642:	4603      	mov	r3, r0
 8005644:	2b01      	cmp	r3, #1
 8005646:	d01e      	beq.n	8005686 <USB_SetCurrentMode+0x84>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b31      	cmp	r3, #49	; 0x31
 800564c:	d9f0      	bls.n	8005630 <USB_SetCurrentMode+0x2e>
 800564e:	e01a      	b.n	8005686 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005650:	78fb      	ldrb	r3, [r7, #3]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d115      	bne.n	8005682 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005662:	2001      	movs	r0, #1
 8005664:	f7fb ffa2 	bl	80015ac <HAL_Delay>
      ms++;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	3301      	adds	r3, #1
 800566c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fa10 	bl	8005a94 <USB_GetMode>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d005      	beq.n	8005686 <USB_SetCurrentMode+0x84>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b31      	cmp	r3, #49	; 0x31
 800567e:	d9f0      	bls.n	8005662 <USB_SetCurrentMode+0x60>
 8005680:	e001      	b.n	8005686 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e005      	b.n	8005692 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2b32      	cmp	r3, #50	; 0x32
 800568a:	d101      	bne.n	8005690 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e000      	b.n	8005692 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
	...

0800569c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800569c:	b084      	sub	sp, #16
 800569e:	b580      	push	{r7, lr}
 80056a0:	b086      	sub	sp, #24
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80056aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056b6:	2300      	movs	r3, #0
 80056b8:	613b      	str	r3, [r7, #16]
 80056ba:	e009      	b.n	80056d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	3340      	adds	r3, #64	; 0x40
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	2200      	movs	r2, #0
 80056c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	3301      	adds	r3, #1
 80056ce:	613b      	str	r3, [r7, #16]
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	2b0e      	cmp	r3, #14
 80056d4:	d9f2      	bls.n	80056bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80056d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d11c      	bne.n	8005716 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ea:	f043 0302 	orr.w	r3, r3, #2
 80056ee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	e005      	b.n	8005722 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005728:	461a      	mov	r2, r3
 800572a:	2300      	movs	r3, #0
 800572c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005734:	4619      	mov	r1, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800573c:	461a      	mov	r2, r3
 800573e:	680b      	ldr	r3, [r1, #0]
 8005740:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005744:	2b01      	cmp	r3, #1
 8005746:	d10c      	bne.n	8005762 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d104      	bne.n	8005758 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800574e:	2100      	movs	r1, #0
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f965 	bl	8005a20 <USB_SetDevSpeed>
 8005756:	e008      	b.n	800576a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005758:	2101      	movs	r1, #1
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f960 	bl	8005a20 <USB_SetDevSpeed>
 8005760:	e003      	b.n	800576a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005762:	2103      	movs	r1, #3
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f95b 	bl	8005a20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800576a:	2110      	movs	r1, #16
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f8f3 	bl	8005958 <USB_FlushTxFifo>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f91f 	bl	80059c0 <USB_FlushRxFifo>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005792:	461a      	mov	r2, r3
 8005794:	2300      	movs	r3, #0
 8005796:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800579e:	461a      	mov	r2, r3
 80057a0:	2300      	movs	r3, #0
 80057a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057aa:	461a      	mov	r2, r3
 80057ac:	2300      	movs	r3, #0
 80057ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057b0:	2300      	movs	r3, #0
 80057b2:	613b      	str	r3, [r7, #16]
 80057b4:	e043      	b.n	800583e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057cc:	d118      	bne.n	8005800 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10a      	bne.n	80057ea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e0:	461a      	mov	r2, r3
 80057e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057e6:	6013      	str	r3, [r2, #0]
 80057e8:	e013      	b.n	8005812 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f6:	461a      	mov	r2, r3
 80057f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057fc:	6013      	str	r3, [r2, #0]
 80057fe:	e008      	b.n	8005812 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580c:	461a      	mov	r2, r3
 800580e:	2300      	movs	r3, #0
 8005810:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4413      	add	r3, r2
 800581a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581e:	461a      	mov	r2, r3
 8005820:	2300      	movs	r3, #0
 8005822:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4413      	add	r3, r2
 800582c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005830:	461a      	mov	r2, r3
 8005832:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005836:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	3301      	adds	r3, #1
 800583c:	613b      	str	r3, [r7, #16]
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	429a      	cmp	r2, r3
 8005844:	d3b7      	bcc.n	80057b6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005846:	2300      	movs	r3, #0
 8005848:	613b      	str	r3, [r7, #16]
 800584a:	e043      	b.n	80058d4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800585e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005862:	d118      	bne.n	8005896 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10a      	bne.n	8005880 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	4413      	add	r3, r2
 8005872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005876:	461a      	mov	r2, r3
 8005878:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	e013      	b.n	80058a8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4413      	add	r3, r2
 8005888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588c:	461a      	mov	r2, r3
 800588e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005892:	6013      	str	r3, [r2, #0]
 8005894:	e008      	b.n	80058a8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	4413      	add	r3, r2
 800589e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a2:	461a      	mov	r2, r3
 80058a4:	2300      	movs	r3, #0
 80058a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b4:	461a      	mov	r2, r3
 80058b6:	2300      	movs	r3, #0
 80058b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c6:	461a      	mov	r2, r3
 80058c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	3301      	adds	r3, #1
 80058d2:	613b      	str	r3, [r7, #16]
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d3b7      	bcc.n	800584c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80058fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005900:	2b00      	cmp	r3, #0
 8005902:	d105      	bne.n	8005910 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	f043 0210 	orr.w	r2, r3, #16
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	699a      	ldr	r2, [r3, #24]
 8005914:	4b0e      	ldr	r3, [pc, #56]	; (8005950 <USB_DevInit+0x2b4>)
 8005916:	4313      	orrs	r3, r2
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800591c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800591e:	2b00      	cmp	r3, #0
 8005920:	d005      	beq.n	800592e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	f043 0208 	orr.w	r2, r3, #8
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800592e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005930:	2b01      	cmp	r3, #1
 8005932:	d105      	bne.n	8005940 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	699a      	ldr	r2, [r3, #24]
 8005938:	4b06      	ldr	r3, [pc, #24]	; (8005954 <USB_DevInit+0x2b8>)
 800593a:	4313      	orrs	r3, r2
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005940:	7dfb      	ldrb	r3, [r7, #23]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3718      	adds	r7, #24
 8005946:	46bd      	mov	sp, r7
 8005948:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800594c:	b004      	add	sp, #16
 800594e:	4770      	bx	lr
 8005950:	803c3800 	.word	0x803c3800
 8005954:	40000004 	.word	0x40000004

08005958 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	3301      	adds	r3, #1
 800596a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4a13      	ldr	r2, [pc, #76]	; (80059bc <USB_FlushTxFifo+0x64>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d901      	bls.n	8005978 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e01b      	b.n	80059b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	daf2      	bge.n	8005966 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	019b      	lsls	r3, r3, #6
 8005988:	f043 0220 	orr.w	r2, r3, #32
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	3301      	adds	r3, #1
 8005994:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	4a08      	ldr	r2, [pc, #32]	; (80059bc <USB_FlushTxFifo+0x64>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d901      	bls.n	80059a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e006      	b.n	80059b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f003 0320 	and.w	r3, r3, #32
 80059aa:	2b20      	cmp	r3, #32
 80059ac:	d0f0      	beq.n	8005990 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	00030d40 	.word	0x00030d40

080059c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3301      	adds	r3, #1
 80059d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4a11      	ldr	r2, [pc, #68]	; (8005a1c <USB_FlushRxFifo+0x5c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d901      	bls.n	80059de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e018      	b.n	8005a10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	daf2      	bge.n	80059cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2210      	movs	r2, #16
 80059ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	3301      	adds	r3, #1
 80059f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4a08      	ldr	r2, [pc, #32]	; (8005a1c <USB_FlushRxFifo+0x5c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d901      	bls.n	8005a02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e006      	b.n	8005a10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	f003 0310 	and.w	r3, r3, #16
 8005a0a:	2b10      	cmp	r3, #16
 8005a0c:	d0f0      	beq.n	80059f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr
 8005a1c:	00030d40 	.word	0x00030d40

08005a20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	78fb      	ldrb	r3, [r7, #3]
 8005a3a:	68f9      	ldr	r1, [r7, #12]
 8005a3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a40:	4313      	orrs	r3, r2
 8005a42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b085      	sub	sp, #20
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a6c:	f023 0303 	bic.w	r3, r3, #3
 8005a70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a80:	f043 0302 	orr.w	r3, r3, #2
 8005a84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	f003 0301 	and.w	r3, r3, #1
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4a13      	ldr	r2, [pc, #76]	; (8005b14 <USB_CoreReset+0x64>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d901      	bls.n	8005ace <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e01b      	b.n	8005b06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	daf2      	bge.n	8005abc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f043 0201 	orr.w	r2, r3, #1
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4a09      	ldr	r2, [pc, #36]	; (8005b14 <USB_CoreReset+0x64>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d901      	bls.n	8005af8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e006      	b.n	8005b06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d0f0      	beq.n	8005ae6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	00030d40 	.word	0x00030d40

08005b18 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005b1e:	4b87      	ldr	r3, [pc, #540]	; (8005d3c <MX_LWIP_Init+0x224>)
 8005b20:	22c0      	movs	r2, #192	; 0xc0
 8005b22:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005b24:	4b85      	ldr	r3, [pc, #532]	; (8005d3c <MX_LWIP_Init+0x224>)
 8005b26:	22a8      	movs	r2, #168	; 0xa8
 8005b28:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8005b2a:	4b84      	ldr	r3, [pc, #528]	; (8005d3c <MX_LWIP_Init+0x224>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 155;
 8005b30:	4b82      	ldr	r3, [pc, #520]	; (8005d3c <MX_LWIP_Init+0x224>)
 8005b32:	229b      	movs	r2, #155	; 0x9b
 8005b34:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005b36:	4b82      	ldr	r3, [pc, #520]	; (8005d40 <MX_LWIP_Init+0x228>)
 8005b38:	22ff      	movs	r2, #255	; 0xff
 8005b3a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005b3c:	4b80      	ldr	r3, [pc, #512]	; (8005d40 <MX_LWIP_Init+0x228>)
 8005b3e:	22ff      	movs	r2, #255	; 0xff
 8005b40:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005b42:	4b7f      	ldr	r3, [pc, #508]	; (8005d40 <MX_LWIP_Init+0x228>)
 8005b44:	22ff      	movs	r2, #255	; 0xff
 8005b46:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005b48:	4b7d      	ldr	r3, [pc, #500]	; (8005d40 <MX_LWIP_Init+0x228>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8005b4e:	4b7d      	ldr	r3, [pc, #500]	; (8005d44 <MX_LWIP_Init+0x22c>)
 8005b50:	22c0      	movs	r2, #192	; 0xc0
 8005b52:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005b54:	4b7b      	ldr	r3, [pc, #492]	; (8005d44 <MX_LWIP_Init+0x22c>)
 8005b56:	22a8      	movs	r2, #168	; 0xa8
 8005b58:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005b5a:	4b7a      	ldr	r3, [pc, #488]	; (8005d44 <MX_LWIP_Init+0x22c>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005b60:	4b78      	ldr	r3, [pc, #480]	; (8005d44 <MX_LWIP_Init+0x22c>)
 8005b62:	2201      	movs	r2, #1
 8005b64:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8005b66:	f000 fd55 	bl	8006614 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005b6a:	4b74      	ldr	r3, [pc, #464]	; (8005d3c <MX_LWIP_Init+0x224>)
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	061a      	lsls	r2, r3, #24
 8005b70:	4b72      	ldr	r3, [pc, #456]	; (8005d3c <MX_LWIP_Init+0x224>)
 8005b72:	785b      	ldrb	r3, [r3, #1]
 8005b74:	041b      	lsls	r3, r3, #16
 8005b76:	431a      	orrs	r2, r3
 8005b78:	4b70      	ldr	r3, [pc, #448]	; (8005d3c <MX_LWIP_Init+0x224>)
 8005b7a:	789b      	ldrb	r3, [r3, #2]
 8005b7c:	021b      	lsls	r3, r3, #8
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	4a6e      	ldr	r2, [pc, #440]	; (8005d3c <MX_LWIP_Init+0x224>)
 8005b82:	78d2      	ldrb	r2, [r2, #3]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	061a      	lsls	r2, r3, #24
 8005b88:	4b6c      	ldr	r3, [pc, #432]	; (8005d3c <MX_LWIP_Init+0x224>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	0619      	lsls	r1, r3, #24
 8005b8e:	4b6b      	ldr	r3, [pc, #428]	; (8005d3c <MX_LWIP_Init+0x224>)
 8005b90:	785b      	ldrb	r3, [r3, #1]
 8005b92:	041b      	lsls	r3, r3, #16
 8005b94:	4319      	orrs	r1, r3
 8005b96:	4b69      	ldr	r3, [pc, #420]	; (8005d3c <MX_LWIP_Init+0x224>)
 8005b98:	789b      	ldrb	r3, [r3, #2]
 8005b9a:	021b      	lsls	r3, r3, #8
 8005b9c:	430b      	orrs	r3, r1
 8005b9e:	4967      	ldr	r1, [pc, #412]	; (8005d3c <MX_LWIP_Init+0x224>)
 8005ba0:	78c9      	ldrb	r1, [r1, #3]
 8005ba2:	430b      	orrs	r3, r1
 8005ba4:	021b      	lsls	r3, r3, #8
 8005ba6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005baa:	431a      	orrs	r2, r3
 8005bac:	4b63      	ldr	r3, [pc, #396]	; (8005d3c <MX_LWIP_Init+0x224>)
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	0619      	lsls	r1, r3, #24
 8005bb2:	4b62      	ldr	r3, [pc, #392]	; (8005d3c <MX_LWIP_Init+0x224>)
 8005bb4:	785b      	ldrb	r3, [r3, #1]
 8005bb6:	041b      	lsls	r3, r3, #16
 8005bb8:	4319      	orrs	r1, r3
 8005bba:	4b60      	ldr	r3, [pc, #384]	; (8005d3c <MX_LWIP_Init+0x224>)
 8005bbc:	789b      	ldrb	r3, [r3, #2]
 8005bbe:	021b      	lsls	r3, r3, #8
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	495e      	ldr	r1, [pc, #376]	; (8005d3c <MX_LWIP_Init+0x224>)
 8005bc4:	78c9      	ldrb	r1, [r1, #3]
 8005bc6:	430b      	orrs	r3, r1
 8005bc8:	0a1b      	lsrs	r3, r3, #8
 8005bca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	4b5a      	ldr	r3, [pc, #360]	; (8005d3c <MX_LWIP_Init+0x224>)
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	0619      	lsls	r1, r3, #24
 8005bd6:	4b59      	ldr	r3, [pc, #356]	; (8005d3c <MX_LWIP_Init+0x224>)
 8005bd8:	785b      	ldrb	r3, [r3, #1]
 8005bda:	041b      	lsls	r3, r3, #16
 8005bdc:	4319      	orrs	r1, r3
 8005bde:	4b57      	ldr	r3, [pc, #348]	; (8005d3c <MX_LWIP_Init+0x224>)
 8005be0:	789b      	ldrb	r3, [r3, #2]
 8005be2:	021b      	lsls	r3, r3, #8
 8005be4:	430b      	orrs	r3, r1
 8005be6:	4955      	ldr	r1, [pc, #340]	; (8005d3c <MX_LWIP_Init+0x224>)
 8005be8:	78c9      	ldrb	r1, [r1, #3]
 8005bea:	430b      	orrs	r3, r1
 8005bec:	0e1b      	lsrs	r3, r3, #24
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	4a55      	ldr	r2, [pc, #340]	; (8005d48 <MX_LWIP_Init+0x230>)
 8005bf2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005bf4:	4b52      	ldr	r3, [pc, #328]	; (8005d40 <MX_LWIP_Init+0x228>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	061a      	lsls	r2, r3, #24
 8005bfa:	4b51      	ldr	r3, [pc, #324]	; (8005d40 <MX_LWIP_Init+0x228>)
 8005bfc:	785b      	ldrb	r3, [r3, #1]
 8005bfe:	041b      	lsls	r3, r3, #16
 8005c00:	431a      	orrs	r2, r3
 8005c02:	4b4f      	ldr	r3, [pc, #316]	; (8005d40 <MX_LWIP_Init+0x228>)
 8005c04:	789b      	ldrb	r3, [r3, #2]
 8005c06:	021b      	lsls	r3, r3, #8
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	4a4d      	ldr	r2, [pc, #308]	; (8005d40 <MX_LWIP_Init+0x228>)
 8005c0c:	78d2      	ldrb	r2, [r2, #3]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	061a      	lsls	r2, r3, #24
 8005c12:	4b4b      	ldr	r3, [pc, #300]	; (8005d40 <MX_LWIP_Init+0x228>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	0619      	lsls	r1, r3, #24
 8005c18:	4b49      	ldr	r3, [pc, #292]	; (8005d40 <MX_LWIP_Init+0x228>)
 8005c1a:	785b      	ldrb	r3, [r3, #1]
 8005c1c:	041b      	lsls	r3, r3, #16
 8005c1e:	4319      	orrs	r1, r3
 8005c20:	4b47      	ldr	r3, [pc, #284]	; (8005d40 <MX_LWIP_Init+0x228>)
 8005c22:	789b      	ldrb	r3, [r3, #2]
 8005c24:	021b      	lsls	r3, r3, #8
 8005c26:	430b      	orrs	r3, r1
 8005c28:	4945      	ldr	r1, [pc, #276]	; (8005d40 <MX_LWIP_Init+0x228>)
 8005c2a:	78c9      	ldrb	r1, [r1, #3]
 8005c2c:	430b      	orrs	r3, r1
 8005c2e:	021b      	lsls	r3, r3, #8
 8005c30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c34:	431a      	orrs	r2, r3
 8005c36:	4b42      	ldr	r3, [pc, #264]	; (8005d40 <MX_LWIP_Init+0x228>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	0619      	lsls	r1, r3, #24
 8005c3c:	4b40      	ldr	r3, [pc, #256]	; (8005d40 <MX_LWIP_Init+0x228>)
 8005c3e:	785b      	ldrb	r3, [r3, #1]
 8005c40:	041b      	lsls	r3, r3, #16
 8005c42:	4319      	orrs	r1, r3
 8005c44:	4b3e      	ldr	r3, [pc, #248]	; (8005d40 <MX_LWIP_Init+0x228>)
 8005c46:	789b      	ldrb	r3, [r3, #2]
 8005c48:	021b      	lsls	r3, r3, #8
 8005c4a:	430b      	orrs	r3, r1
 8005c4c:	493c      	ldr	r1, [pc, #240]	; (8005d40 <MX_LWIP_Init+0x228>)
 8005c4e:	78c9      	ldrb	r1, [r1, #3]
 8005c50:	430b      	orrs	r3, r1
 8005c52:	0a1b      	lsrs	r3, r3, #8
 8005c54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	4b39      	ldr	r3, [pc, #228]	; (8005d40 <MX_LWIP_Init+0x228>)
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	0619      	lsls	r1, r3, #24
 8005c60:	4b37      	ldr	r3, [pc, #220]	; (8005d40 <MX_LWIP_Init+0x228>)
 8005c62:	785b      	ldrb	r3, [r3, #1]
 8005c64:	041b      	lsls	r3, r3, #16
 8005c66:	4319      	orrs	r1, r3
 8005c68:	4b35      	ldr	r3, [pc, #212]	; (8005d40 <MX_LWIP_Init+0x228>)
 8005c6a:	789b      	ldrb	r3, [r3, #2]
 8005c6c:	021b      	lsls	r3, r3, #8
 8005c6e:	430b      	orrs	r3, r1
 8005c70:	4933      	ldr	r1, [pc, #204]	; (8005d40 <MX_LWIP_Init+0x228>)
 8005c72:	78c9      	ldrb	r1, [r1, #3]
 8005c74:	430b      	orrs	r3, r1
 8005c76:	0e1b      	lsrs	r3, r3, #24
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	4a34      	ldr	r2, [pc, #208]	; (8005d4c <MX_LWIP_Init+0x234>)
 8005c7c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005c7e:	4b31      	ldr	r3, [pc, #196]	; (8005d44 <MX_LWIP_Init+0x22c>)
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	061a      	lsls	r2, r3, #24
 8005c84:	4b2f      	ldr	r3, [pc, #188]	; (8005d44 <MX_LWIP_Init+0x22c>)
 8005c86:	785b      	ldrb	r3, [r3, #1]
 8005c88:	041b      	lsls	r3, r3, #16
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	4b2d      	ldr	r3, [pc, #180]	; (8005d44 <MX_LWIP_Init+0x22c>)
 8005c8e:	789b      	ldrb	r3, [r3, #2]
 8005c90:	021b      	lsls	r3, r3, #8
 8005c92:	4313      	orrs	r3, r2
 8005c94:	4a2b      	ldr	r2, [pc, #172]	; (8005d44 <MX_LWIP_Init+0x22c>)
 8005c96:	78d2      	ldrb	r2, [r2, #3]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	061a      	lsls	r2, r3, #24
 8005c9c:	4b29      	ldr	r3, [pc, #164]	; (8005d44 <MX_LWIP_Init+0x22c>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	0619      	lsls	r1, r3, #24
 8005ca2:	4b28      	ldr	r3, [pc, #160]	; (8005d44 <MX_LWIP_Init+0x22c>)
 8005ca4:	785b      	ldrb	r3, [r3, #1]
 8005ca6:	041b      	lsls	r3, r3, #16
 8005ca8:	4319      	orrs	r1, r3
 8005caa:	4b26      	ldr	r3, [pc, #152]	; (8005d44 <MX_LWIP_Init+0x22c>)
 8005cac:	789b      	ldrb	r3, [r3, #2]
 8005cae:	021b      	lsls	r3, r3, #8
 8005cb0:	430b      	orrs	r3, r1
 8005cb2:	4924      	ldr	r1, [pc, #144]	; (8005d44 <MX_LWIP_Init+0x22c>)
 8005cb4:	78c9      	ldrb	r1, [r1, #3]
 8005cb6:	430b      	orrs	r3, r1
 8005cb8:	021b      	lsls	r3, r3, #8
 8005cba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	4b20      	ldr	r3, [pc, #128]	; (8005d44 <MX_LWIP_Init+0x22c>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	0619      	lsls	r1, r3, #24
 8005cc6:	4b1f      	ldr	r3, [pc, #124]	; (8005d44 <MX_LWIP_Init+0x22c>)
 8005cc8:	785b      	ldrb	r3, [r3, #1]
 8005cca:	041b      	lsls	r3, r3, #16
 8005ccc:	4319      	orrs	r1, r3
 8005cce:	4b1d      	ldr	r3, [pc, #116]	; (8005d44 <MX_LWIP_Init+0x22c>)
 8005cd0:	789b      	ldrb	r3, [r3, #2]
 8005cd2:	021b      	lsls	r3, r3, #8
 8005cd4:	430b      	orrs	r3, r1
 8005cd6:	491b      	ldr	r1, [pc, #108]	; (8005d44 <MX_LWIP_Init+0x22c>)
 8005cd8:	78c9      	ldrb	r1, [r1, #3]
 8005cda:	430b      	orrs	r3, r1
 8005cdc:	0a1b      	lsrs	r3, r3, #8
 8005cde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	4b17      	ldr	r3, [pc, #92]	; (8005d44 <MX_LWIP_Init+0x22c>)
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	0619      	lsls	r1, r3, #24
 8005cea:	4b16      	ldr	r3, [pc, #88]	; (8005d44 <MX_LWIP_Init+0x22c>)
 8005cec:	785b      	ldrb	r3, [r3, #1]
 8005cee:	041b      	lsls	r3, r3, #16
 8005cf0:	4319      	orrs	r1, r3
 8005cf2:	4b14      	ldr	r3, [pc, #80]	; (8005d44 <MX_LWIP_Init+0x22c>)
 8005cf4:	789b      	ldrb	r3, [r3, #2]
 8005cf6:	021b      	lsls	r3, r3, #8
 8005cf8:	430b      	orrs	r3, r1
 8005cfa:	4912      	ldr	r1, [pc, #72]	; (8005d44 <MX_LWIP_Init+0x22c>)
 8005cfc:	78c9      	ldrb	r1, [r1, #3]
 8005cfe:	430b      	orrs	r3, r1
 8005d00:	0e1b      	lsrs	r3, r3, #24
 8005d02:	4313      	orrs	r3, r2
 8005d04:	4a12      	ldr	r2, [pc, #72]	; (8005d50 <MX_LWIP_Init+0x238>)
 8005d06:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005d08:	4b12      	ldr	r3, [pc, #72]	; (8005d54 <MX_LWIP_Init+0x23c>)
 8005d0a:	9302      	str	r3, [sp, #8]
 8005d0c:	4b12      	ldr	r3, [pc, #72]	; (8005d58 <MX_LWIP_Init+0x240>)
 8005d0e:	9301      	str	r3, [sp, #4]
 8005d10:	2300      	movs	r3, #0
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	4b0e      	ldr	r3, [pc, #56]	; (8005d50 <MX_LWIP_Init+0x238>)
 8005d16:	4a0d      	ldr	r2, [pc, #52]	; (8005d4c <MX_LWIP_Init+0x234>)
 8005d18:	490b      	ldr	r1, [pc, #44]	; (8005d48 <MX_LWIP_Init+0x230>)
 8005d1a:	4810      	ldr	r0, [pc, #64]	; (8005d5c <MX_LWIP_Init+0x244>)
 8005d1c:	f001 f966 	bl	8006fec <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005d20:	480e      	ldr	r0, [pc, #56]	; (8005d5c <MX_LWIP_Init+0x244>)
 8005d22:	f001 fb15 	bl	8007350 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8005d26:	480d      	ldr	r0, [pc, #52]	; (8005d5c <MX_LWIP_Init+0x244>)
 8005d28:	f001 fb22 	bl	8007370 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005d2c:	490c      	ldr	r1, [pc, #48]	; (8005d60 <MX_LWIP_Init+0x248>)
 8005d2e:	480b      	ldr	r0, [pc, #44]	; (8005d5c <MX_LWIP_Init+0x244>)
 8005d30:	f001 fc20 	bl	8007574 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005d34:	bf00      	nop
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	20000818 	.word	0x20000818
 8005d40:	2000081c 	.word	0x2000081c
 8005d44:	20000820 	.word	0x20000820
 8005d48:	2000080c 	.word	0x2000080c
 8005d4c:	20000810 	.word	0x20000810
 8005d50:	20000814 	.word	0x20000814
 8005d54:	08010d41 	.word	0x08010d41
 8005d58:	08006111 	.word	0x08006111
 8005d5c:	200007d8 	.word	0x200007d8
 8005d60:	08005dbd 	.word	0x08005dbd

08005d64 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8005d6c:	f7fb fc12 	bl	8001594 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	4b08      	ldr	r3, [pc, #32]	; (8005d94 <Ethernet_Link_Periodic_Handle+0x30>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b63      	cmp	r3, #99	; 0x63
 8005d7a:	d907      	bls.n	8005d8c <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8005d7c:	f7fb fc0a 	bl	8001594 <HAL_GetTick>
 8005d80:	4603      	mov	r3, r0
 8005d82:	4a04      	ldr	r2, [pc, #16]	; (8005d94 <Ethernet_Link_Periodic_Handle+0x30>)
 8005d84:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 fb18 	bl	80063bc <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8005d8c:	bf00      	nop
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	200007d4 	.word	0x200007d4

08005d98 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005d9c:	4806      	ldr	r0, [pc, #24]	; (8005db8 <MX_LWIP_Process+0x20>)
 8005d9e:	f000 f997 	bl	80060d0 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8005da2:	f008 fb51 	bl	800e448 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8005da6:	4804      	ldr	r0, [pc, #16]	; (8005db8 <MX_LWIP_Process+0x20>)
 8005da8:	f7ff ffdc 	bl	8005d64 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
  ethernet_link_status_updated(&gnetif);
 8005dac:	4802      	ldr	r0, [pc, #8]	; (8005db8 <MX_LWIP_Process+0x20>)
 8005dae:	f000 f805 	bl	8005dbc <ethernet_link_status_updated>
/* USER CODE END 4_3 */
}
 8005db2:	bf00      	nop
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	200007d8 	.word	0x200007d8

08005dbc <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00b      	beq.n	8005dec <ethernet_link_status_updated+0x30>
  {
/* USER CODE BEGIN 5 */
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	2180      	movs	r1, #128	; 0x80
 8005dd8:	480c      	ldr	r0, [pc, #48]	; (8005e0c <ethernet_link_status_updated+0x50>)
 8005dda:	f7fc ffbb 	bl	8002d54 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8005dde:	2200      	movs	r2, #0
 8005de0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005de4:	4809      	ldr	r0, [pc, #36]	; (8005e0c <ethernet_link_status_updated+0x50>)
 8005de6:	f7fc ffb5 	bl	8002d54 <HAL_GPIO_WritePin>
/* USER CODE BEGIN 6 */
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
/* USER CODE END 6 */
  }
}
 8005dea:	e00a      	b.n	8005e02 <ethernet_link_status_updated+0x46>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8005dec:	2200      	movs	r2, #0
 8005dee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005df2:	4806      	ldr	r0, [pc, #24]	; (8005e0c <ethernet_link_status_updated+0x50>)
 8005df4:	f7fc ffae 	bl	8002d54 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8005df8:	2201      	movs	r2, #1
 8005dfa:	2180      	movs	r1, #128	; 0x80
 8005dfc:	4803      	ldr	r0, [pc, #12]	; (8005e0c <ethernet_link_status_updated+0x50>)
 8005dfe:	f7fc ffa9 	bl	8002d54 <HAL_GPIO_WritePin>
}
 8005e02:	bf00      	nop
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	40020400 	.word	0x40020400

08005e10 <SCB_InvalidateDCache_by_Addr>:
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8005e22:	2320      	movs	r3, #32
 8005e24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e26:	f3bf 8f4f 	dsb	sy
}
 8005e2a:	bf00      	nop
    while (op_size > 0) {
 8005e2c:	e00b      	b.n	8005e46 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8005e2e:	4a0d      	ldr	r2, [pc, #52]	; (8005e64 <SCB_InvalidateDCache_by_Addr+0x54>)
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	dcf0      	bgt.n	8005e2e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005e4c:	f3bf 8f4f 	dsb	sy
}
 8005e50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005e52:	f3bf 8f6f 	isb	sy
}
 8005e56:	bf00      	nop
}
 8005e58:	bf00      	nop
 8005e5a:	371c      	adds	r7, #28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	e000ed00 	.word	0xe000ed00

08005e68 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005e70:	2300      	movs	r3, #0
 8005e72:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005e74:	4b40      	ldr	r3, [pc, #256]	; (8005f78 <low_level_init+0x110>)
 8005e76:	4a41      	ldr	r2, [pc, #260]	; (8005f7c <low_level_init+0x114>)
 8005e78:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005e7e:	2380      	movs	r3, #128	; 0x80
 8005e80:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005e82:	23e1      	movs	r3, #225	; 0xe1
 8005e84:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005e86:	2300      	movs	r3, #0
 8005e88:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005e92:	4a39      	ldr	r2, [pc, #228]	; (8005f78 <low_level_init+0x110>)
 8005e94:	f107 0308 	add.w	r3, r7, #8
 8005e98:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005e9a:	4b37      	ldr	r3, [pc, #220]	; (8005f78 <low_level_init+0x110>)
 8005e9c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005ea0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005ea2:	4b35      	ldr	r3, [pc, #212]	; (8005f78 <low_level_init+0x110>)
 8005ea4:	4a36      	ldr	r2, [pc, #216]	; (8005f80 <low_level_init+0x118>)
 8005ea6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005ea8:	4b33      	ldr	r3, [pc, #204]	; (8005f78 <low_level_init+0x110>)
 8005eaa:	4a36      	ldr	r2, [pc, #216]	; (8005f84 <low_level_init+0x11c>)
 8005eac:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005eae:	4b32      	ldr	r3, [pc, #200]	; (8005f78 <low_level_init+0x110>)
 8005eb0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005eb4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005eb6:	4830      	ldr	r0, [pc, #192]	; (8005f78 <low_level_init+0x110>)
 8005eb8:	f7fb fcae 	bl	8001818 <HAL_ETH_Init>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005ec0:	2238      	movs	r2, #56	; 0x38
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	4830      	ldr	r0, [pc, #192]	; (8005f88 <low_level_init+0x120>)
 8005ec6:	f00b f9b0 	bl	801122a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005eca:	4b2f      	ldr	r3, [pc, #188]	; (8005f88 <low_level_init+0x120>)
 8005ecc:	2221      	movs	r2, #33	; 0x21
 8005ece:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005ed0:	4b2d      	ldr	r3, [pc, #180]	; (8005f88 <low_level_init+0x120>)
 8005ed2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005ed6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005ed8:	4b2b      	ldr	r3, [pc, #172]	; (8005f88 <low_level_init+0x120>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005ede:	482b      	ldr	r0, [pc, #172]	; (8005f8c <low_level_init+0x124>)
 8005ee0:	f000 ff4c 	bl	8006d7c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2206      	movs	r2, #6
 8005ee8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005eec:	4b22      	ldr	r3, [pc, #136]	; (8005f78 <low_level_init+0x110>)
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	781a      	ldrb	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005ef8:	4b1f      	ldr	r3, [pc, #124]	; (8005f78 <low_level_init+0x110>)
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	785a      	ldrb	r2, [r3, #1]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005f04:	4b1c      	ldr	r3, [pc, #112]	; (8005f78 <low_level_init+0x110>)
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	789a      	ldrb	r2, [r3, #2]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005f10:	4b19      	ldr	r3, [pc, #100]	; (8005f78 <low_level_init+0x110>)
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	78da      	ldrb	r2, [r3, #3]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005f1c:	4b16      	ldr	r3, [pc, #88]	; (8005f78 <low_level_init+0x110>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	791a      	ldrb	r2, [r3, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005f28:	4b13      	ldr	r3, [pc, #76]	; (8005f78 <low_level_init+0x110>)
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	795a      	ldrb	r2, [r3, #5]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005f3a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005f42:	f043 030a 	orr.w	r3, r3, #10
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005f4e:	4910      	ldr	r1, [pc, #64]	; (8005f90 <low_level_init+0x128>)
 8005f50:	4810      	ldr	r0, [pc, #64]	; (8005f94 <low_level_init+0x12c>)
 8005f52:	f7fb f96c 	bl	800122e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8005f56:	480f      	ldr	r0, [pc, #60]	; (8005f94 <low_level_init+0x12c>)
 8005f58:	f7fb f99b 	bl	8001292 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d103      	bne.n	8005f6a <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fa2a 	bl	80063bc <ethernet_link_check_state>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8005f68:	e001      	b.n	8005f6e <low_level_init+0x106>
    Error_Handler();
 8005f6a:	f7fa fd0f 	bl	800098c <Error_Handler>
}
 8005f6e:	bf00      	nop
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	200051b0 	.word	0x200051b0
 8005f7c:	40028000 	.word	0x40028000
 8005f80:	20000128 	.word	0x20000128
 8005f84:	20000088 	.word	0x20000088
 8005f88:	20005260 	.word	0x20005260
 8005f8c:	08014d20 	.word	0x08014d20
 8005f90:	2000000c 	.word	0x2000000c
 8005f94:	20005298 	.word	0x20005298

08005f98 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b092      	sub	sp, #72	; 0x48
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005faa:	2300      	movs	r3, #0
 8005fac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005fb0:	f107 030c 	add.w	r3, r7, #12
 8005fb4:	2230      	movs	r2, #48	; 0x30
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f00b f936 	bl	801122a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005fbe:	f107 030c 	add.w	r3, r7, #12
 8005fc2:	2230      	movs	r2, #48	; 0x30
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f00b f92f 	bl	801122a <memset>

  for(q = p; q != NULL; q = q->next)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	643b      	str	r3, [r7, #64]	; 0x40
 8005fd0:	e045      	b.n	800605e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005fd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fd4:	2b03      	cmp	r3, #3
 8005fd6:	d902      	bls.n	8005fde <low_level_output+0x46>
      return ERR_IF;
 8005fd8:	f06f 030b 	mvn.w	r3, #11
 8005fdc:	e055      	b.n	800608a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8005fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fe0:	6859      	ldr	r1, [r3, #4]
 8005fe2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	4413      	add	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	3348      	adds	r3, #72	; 0x48
 8005fee:	443b      	add	r3, r7
 8005ff0:	3b3c      	subs	r3, #60	; 0x3c
 8005ff2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ff6:	895b      	ldrh	r3, [r3, #10]
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	005b      	lsls	r3, r3, #1
 8006000:	4413      	add	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	3348      	adds	r3, #72	; 0x48
 8006006:	443b      	add	r3, r7
 8006008:	3b38      	subs	r3, #56	; 0x38
 800600a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800600c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800600e:	2b00      	cmp	r3, #0
 8006010:	d011      	beq.n	8006036 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8006012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006014:	1e5a      	subs	r2, r3, #1
 8006016:	f107 000c 	add.w	r0, r7, #12
 800601a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800601c:	460b      	mov	r3, r1
 800601e:	005b      	lsls	r3, r3, #1
 8006020:	440b      	add	r3, r1
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	18c1      	adds	r1, r0, r3
 8006026:	4613      	mov	r3, r2
 8006028:	005b      	lsls	r3, r3, #1
 800602a:	4413      	add	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	3348      	adds	r3, #72	; 0x48
 8006030:	443b      	add	r3, r7
 8006032:	3b34      	subs	r3, #52	; 0x34
 8006034:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d109      	bne.n	8006052 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800603e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006040:	4613      	mov	r3, r2
 8006042:	005b      	lsls	r3, r3, #1
 8006044:	4413      	add	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	3348      	adds	r3, #72	; 0x48
 800604a:	443b      	add	r3, r7
 800604c:	3b34      	subs	r3, #52	; 0x34
 800604e:	2200      	movs	r2, #0
 8006050:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006054:	3301      	adds	r3, #1
 8006056:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8006058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	643b      	str	r3, [r7, #64]	; 0x40
 800605e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1b6      	bne.n	8005fd2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	891b      	ldrh	r3, [r3, #8]
 8006068:	461a      	mov	r2, r3
 800606a:	4b0a      	ldr	r3, [pc, #40]	; (8006094 <low_level_output+0xfc>)
 800606c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800606e:	4a09      	ldr	r2, [pc, #36]	; (8006094 <low_level_output+0xfc>)
 8006070:	f107 030c 	add.w	r3, r7, #12
 8006074:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006076:	4a07      	ldr	r2, [pc, #28]	; (8006094 <low_level_output+0xfc>)
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800607c:	2214      	movs	r2, #20
 800607e:	4905      	ldr	r1, [pc, #20]	; (8006094 <low_level_output+0xfc>)
 8006080:	4805      	ldr	r0, [pc, #20]	; (8006098 <low_level_output+0x100>)
 8006082:	f7fb fcfd 	bl	8001a80 <HAL_ETH_Transmit>

  return errval;
 8006086:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800608a:	4618      	mov	r0, r3
 800608c:	3748      	adds	r7, #72	; 0x48
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	20005260 	.word	0x20005260
 8006098:	200051b0 	.word	0x200051b0

0800609c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80060a4:	2300      	movs	r3, #0
 80060a6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80060a8:	4b07      	ldr	r3, [pc, #28]	; (80060c8 <low_level_input+0x2c>)
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d105      	bne.n	80060bc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80060b0:	f107 030c 	add.w	r3, r7, #12
 80060b4:	4619      	mov	r1, r3
 80060b6:	4805      	ldr	r0, [pc, #20]	; (80060cc <low_level_input+0x30>)
 80060b8:	f7fb fd76 	bl	8001ba8 <HAL_ETH_ReadData>
  }

  return p;
 80060bc:	68fb      	ldr	r3, [r7, #12]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	200051ac 	.word	0x200051ac
 80060cc:	200051b0 	.word	0x200051b0

080060d0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80060d8:	2300      	movs	r3, #0
 80060da:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7ff ffdd 	bl	800609c <low_level_input>
 80060e2:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00a      	beq.n	8006100 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	6879      	ldr	r1, [r7, #4]
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	4798      	blx	r3
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d002      	beq.n	8006100 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f001 fdba 	bl	8007c74 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1ea      	bne.n	80060dc <ethernetif_input+0xc>
}
 8006106:	bf00      	nop
 8006108:	bf00      	nop
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d106      	bne.n	800612c <ethernetif_init+0x1c>
 800611e:	4b0e      	ldr	r3, [pc, #56]	; (8006158 <ethernetif_init+0x48>)
 8006120:	f240 127b 	movw	r2, #379	; 0x17b
 8006124:	490d      	ldr	r1, [pc, #52]	; (800615c <ethernetif_init+0x4c>)
 8006126:	480e      	ldr	r0, [pc, #56]	; (8006160 <ethernetif_init+0x50>)
 8006128:	f00a ffe0 	bl	80110ec <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2273      	movs	r2, #115	; 0x73
 8006130:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2274      	movs	r2, #116	; 0x74
 8006138:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a09      	ldr	r2, [pc, #36]	; (8006164 <ethernetif_init+0x54>)
 8006140:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a08      	ldr	r2, [pc, #32]	; (8006168 <ethernetif_init+0x58>)
 8006146:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f7ff fe8d 	bl	8005e68 <low_level_init>

  return ERR_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	08012328 	.word	0x08012328
 800615c:	08012344 	.word	0x08012344
 8006160:	08012354 	.word	0x08012354
 8006164:	0800f0d9 	.word	0x0800f0d9
 8006168:	08005f99 	.word	0x08005f99

0800616c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006178:	68f9      	ldr	r1, [r7, #12]
 800617a:	4807      	ldr	r0, [pc, #28]	; (8006198 <pbuf_free_custom+0x2c>)
 800617c:	f000 fee0 	bl	8006f40 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006180:	4b06      	ldr	r3, [pc, #24]	; (800619c <pbuf_free_custom+0x30>)
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d102      	bne.n	800618e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8006188:	4b04      	ldr	r3, [pc, #16]	; (800619c <pbuf_free_custom+0x30>)
 800618a:	2200      	movs	r2, #0
 800618c:	701a      	strb	r2, [r3, #0]
  }
}
 800618e:	bf00      	nop
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	08014d20 	.word	0x08014d20
 800619c:	200051ac 	.word	0x200051ac

080061a0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80061a4:	f7fb f9f6 	bl	8001594 <HAL_GetTick>
 80061a8:	4603      	mov	r3, r0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	bd80      	pop	{r7, pc}
	...

080061b0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08e      	sub	sp, #56	; 0x38
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061bc:	2200      	movs	r2, #0
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	605a      	str	r2, [r3, #4]
 80061c2:	609a      	str	r2, [r3, #8]
 80061c4:	60da      	str	r2, [r3, #12]
 80061c6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a4e      	ldr	r2, [pc, #312]	; (8006308 <HAL_ETH_MspInit+0x158>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	f040 8096 	bne.w	8006300 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80061d4:	4b4d      	ldr	r3, [pc, #308]	; (800630c <HAL_ETH_MspInit+0x15c>)
 80061d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d8:	4a4c      	ldr	r2, [pc, #304]	; (800630c <HAL_ETH_MspInit+0x15c>)
 80061da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80061de:	6313      	str	r3, [r2, #48]	; 0x30
 80061e0:	4b4a      	ldr	r3, [pc, #296]	; (800630c <HAL_ETH_MspInit+0x15c>)
 80061e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061e8:	623b      	str	r3, [r7, #32]
 80061ea:	6a3b      	ldr	r3, [r7, #32]
 80061ec:	4b47      	ldr	r3, [pc, #284]	; (800630c <HAL_ETH_MspInit+0x15c>)
 80061ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f0:	4a46      	ldr	r2, [pc, #280]	; (800630c <HAL_ETH_MspInit+0x15c>)
 80061f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061f6:	6313      	str	r3, [r2, #48]	; 0x30
 80061f8:	4b44      	ldr	r3, [pc, #272]	; (800630c <HAL_ETH_MspInit+0x15c>)
 80061fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006200:	61fb      	str	r3, [r7, #28]
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	4b41      	ldr	r3, [pc, #260]	; (800630c <HAL_ETH_MspInit+0x15c>)
 8006206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006208:	4a40      	ldr	r2, [pc, #256]	; (800630c <HAL_ETH_MspInit+0x15c>)
 800620a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800620e:	6313      	str	r3, [r2, #48]	; 0x30
 8006210:	4b3e      	ldr	r3, [pc, #248]	; (800630c <HAL_ETH_MspInit+0x15c>)
 8006212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006218:	61bb      	str	r3, [r7, #24]
 800621a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800621c:	4b3b      	ldr	r3, [pc, #236]	; (800630c <HAL_ETH_MspInit+0x15c>)
 800621e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006220:	4a3a      	ldr	r2, [pc, #232]	; (800630c <HAL_ETH_MspInit+0x15c>)
 8006222:	f043 0304 	orr.w	r3, r3, #4
 8006226:	6313      	str	r3, [r2, #48]	; 0x30
 8006228:	4b38      	ldr	r3, [pc, #224]	; (800630c <HAL_ETH_MspInit+0x15c>)
 800622a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622c:	f003 0304 	and.w	r3, r3, #4
 8006230:	617b      	str	r3, [r7, #20]
 8006232:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006234:	4b35      	ldr	r3, [pc, #212]	; (800630c <HAL_ETH_MspInit+0x15c>)
 8006236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006238:	4a34      	ldr	r2, [pc, #208]	; (800630c <HAL_ETH_MspInit+0x15c>)
 800623a:	f043 0301 	orr.w	r3, r3, #1
 800623e:	6313      	str	r3, [r2, #48]	; 0x30
 8006240:	4b32      	ldr	r3, [pc, #200]	; (800630c <HAL_ETH_MspInit+0x15c>)
 8006242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	613b      	str	r3, [r7, #16]
 800624a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800624c:	4b2f      	ldr	r3, [pc, #188]	; (800630c <HAL_ETH_MspInit+0x15c>)
 800624e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006250:	4a2e      	ldr	r2, [pc, #184]	; (800630c <HAL_ETH_MspInit+0x15c>)
 8006252:	f043 0302 	orr.w	r3, r3, #2
 8006256:	6313      	str	r3, [r2, #48]	; 0x30
 8006258:	4b2c      	ldr	r3, [pc, #176]	; (800630c <HAL_ETH_MspInit+0x15c>)
 800625a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625c:	f003 0302 	and.w	r3, r3, #2
 8006260:	60fb      	str	r3, [r7, #12]
 8006262:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006264:	4b29      	ldr	r3, [pc, #164]	; (800630c <HAL_ETH_MspInit+0x15c>)
 8006266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006268:	4a28      	ldr	r2, [pc, #160]	; (800630c <HAL_ETH_MspInit+0x15c>)
 800626a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800626e:	6313      	str	r3, [r2, #48]	; 0x30
 8006270:	4b26      	ldr	r3, [pc, #152]	; (800630c <HAL_ETH_MspInit+0x15c>)
 8006272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006278:	60bb      	str	r3, [r7, #8]
 800627a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800627c:	2332      	movs	r3, #50	; 0x32
 800627e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006280:	2302      	movs	r3, #2
 8006282:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006284:	2300      	movs	r3, #0
 8006286:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006288:	2303      	movs	r3, #3
 800628a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800628c:	230b      	movs	r3, #11
 800628e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006294:	4619      	mov	r1, r3
 8006296:	481e      	ldr	r0, [pc, #120]	; (8006310 <HAL_ETH_MspInit+0x160>)
 8006298:	f7fc fbb0 	bl	80029fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800629c:	2386      	movs	r3, #134	; 0x86
 800629e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062a0:	2302      	movs	r3, #2
 80062a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062a4:	2300      	movs	r3, #0
 80062a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062a8:	2303      	movs	r3, #3
 80062aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80062ac:	230b      	movs	r3, #11
 80062ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062b4:	4619      	mov	r1, r3
 80062b6:	4817      	ldr	r0, [pc, #92]	; (8006314 <HAL_ETH_MspInit+0x164>)
 80062b8:	f7fc fba0 	bl	80029fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80062bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80062c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062c2:	2302      	movs	r3, #2
 80062c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062c6:	2300      	movs	r3, #0
 80062c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062ca:	2303      	movs	r3, #3
 80062cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80062ce:	230b      	movs	r3, #11
 80062d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80062d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062d6:	4619      	mov	r1, r3
 80062d8:	480f      	ldr	r0, [pc, #60]	; (8006318 <HAL_ETH_MspInit+0x168>)
 80062da:	f7fc fb8f 	bl	80029fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80062de:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80062e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062e4:	2302      	movs	r3, #2
 80062e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062e8:	2300      	movs	r3, #0
 80062ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062ec:	2303      	movs	r3, #3
 80062ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80062f0:	230b      	movs	r3, #11
 80062f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80062f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062f8:	4619      	mov	r1, r3
 80062fa:	4808      	ldr	r0, [pc, #32]	; (800631c <HAL_ETH_MspInit+0x16c>)
 80062fc:	f7fc fb7e 	bl	80029fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006300:	bf00      	nop
 8006302:	3738      	adds	r7, #56	; 0x38
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	40028000 	.word	0x40028000
 800630c:	40023800 	.word	0x40023800
 8006310:	40020800 	.word	0x40020800
 8006314:	40020000 	.word	0x40020000
 8006318:	40020400 	.word	0x40020400
 800631c:	40021800 	.word	0x40021800

08006320 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006324:	4802      	ldr	r0, [pc, #8]	; (8006330 <ETH_PHY_IO_Init+0x10>)
 8006326:	f7fb ff0f 	bl	8002148 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	bd80      	pop	{r7, pc}
 8006330:	200051b0 	.word	0x200051b0

08006334 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006334:	b480      	push	{r7}
 8006336:	af00      	add	r7, sp, #0
  return 0;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	68f9      	ldr	r1, [r7, #12]
 8006356:	4807      	ldr	r0, [pc, #28]	; (8006374 <ETH_PHY_IO_ReadReg+0x30>)
 8006358:	f7fb fd5e 	bl	8001e18 <HAL_ETH_ReadPHYRegister>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d002      	beq.n	8006368 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8006362:	f04f 33ff 	mov.w	r3, #4294967295
 8006366:	e000      	b.n	800636a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	200051b0 	.word	0x200051b0

08006378 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	68f9      	ldr	r1, [r7, #12]
 800638a:	4807      	ldr	r0, [pc, #28]	; (80063a8 <ETH_PHY_IO_WriteReg+0x30>)
 800638c:	f7fb fd8f 	bl	8001eae <HAL_ETH_WritePHYRegister>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d002      	beq.n	800639c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006396:	f04f 33ff 	mov.w	r3, #4294967295
 800639a:	e000      	b.n	800639e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	200051b0 	.word	0x200051b0

080063ac <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80063b0:	f7fb f8f0 	bl	8001594 <HAL_GetTick>
 80063b4:	4603      	mov	r3, r0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	bd80      	pop	{r7, pc}
	...

080063bc <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b0a0      	sub	sp, #128	; 0x80
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80063c4:	f107 030c 	add.w	r3, r7, #12
 80063c8:	2264      	movs	r2, #100	; 0x64
 80063ca:	2100      	movs	r1, #0
 80063cc:	4618      	mov	r0, r3
 80063ce:	f00a ff2c 	bl	801122a <memset>
  int32_t PHYLinkState = 0;
 80063d2:	2300      	movs	r3, #0
 80063d4:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80063da:	2300      	movs	r3, #0
 80063dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80063de:	2300      	movs	r3, #0
 80063e0:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80063e2:	483a      	ldr	r0, [pc, #232]	; (80064cc <ethernet_link_check_state+0x110>)
 80063e4:	f7fa fffd 	bl	80013e2 <LAN8742_GetLinkState>
 80063e8:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80063f0:	089b      	lsrs	r3, r3, #2
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00c      	beq.n	8006416 <ethernet_link_check_state+0x5a>
 80063fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063fe:	2b01      	cmp	r3, #1
 8006400:	dc09      	bgt.n	8006416 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8006402:	4833      	ldr	r0, [pc, #204]	; (80064d0 <ethernet_link_check_state+0x114>)
 8006404:	f7fb fae3 	bl	80019ce <HAL_ETH_Stop>
    netif_set_down(netif);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f001 f81d 	bl	8007448 <netif_set_down>
    netif_set_link_down(netif);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f001 f880 	bl	8007514 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8006414:	e055      	b.n	80064c2 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	d14e      	bne.n	80064c2 <ethernet_link_check_state+0x106>
 8006424:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006426:	2b01      	cmp	r3, #1
 8006428:	dd4b      	ble.n	80064c2 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800642a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800642c:	3b02      	subs	r3, #2
 800642e:	2b03      	cmp	r3, #3
 8006430:	d82a      	bhi.n	8006488 <ethernet_link_check_state+0xcc>
 8006432:	a201      	add	r2, pc, #4	; (adr r2, 8006438 <ethernet_link_check_state+0x7c>)
 8006434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006438:	08006449 	.word	0x08006449
 800643c:	0800645b 	.word	0x0800645b
 8006440:	0800646b 	.word	0x0800646b
 8006444:	0800647b 	.word	0x0800647b
      duplex = ETH_FULLDUPLEX_MODE;
 8006448:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800644c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800644e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006452:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006454:	2301      	movs	r3, #1
 8006456:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006458:	e017      	b.n	800648a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800645a:	2300      	movs	r3, #0
 800645c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800645e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006462:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006464:	2301      	movs	r3, #1
 8006466:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006468:	e00f      	b.n	800648a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800646a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800646e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8006470:	2300      	movs	r3, #0
 8006472:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006474:	2301      	movs	r3, #1
 8006476:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006478:	e007      	b.n	800648a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800647a:	2300      	movs	r3, #0
 800647c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800647e:	2300      	movs	r3, #0
 8006480:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006482:	2301      	movs	r3, #1
 8006484:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006486:	e000      	b.n	800648a <ethernet_link_check_state+0xce>
      break;
 8006488:	bf00      	nop
    if(linkchanged)
 800648a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800648c:	2b00      	cmp	r3, #0
 800648e:	d018      	beq.n	80064c2 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006490:	f107 030c 	add.w	r3, r7, #12
 8006494:	4619      	mov	r1, r3
 8006496:	480e      	ldr	r0, [pc, #56]	; (80064d0 <ethernet_link_check_state+0x114>)
 8006498:	f7fb fd52 	bl	8001f40 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800649c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80064a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064a2:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80064a4:	f107 030c 	add.w	r3, r7, #12
 80064a8:	4619      	mov	r1, r3
 80064aa:	4809      	ldr	r0, [pc, #36]	; (80064d0 <ethernet_link_check_state+0x114>)
 80064ac:	f7fb fe32 	bl	8002114 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80064b0:	4807      	ldr	r0, [pc, #28]	; (80064d0 <ethernet_link_check_state+0x114>)
 80064b2:	f7fb fa2d 	bl	8001910 <HAL_ETH_Start>
      netif_set_up(netif);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 ff5a 	bl	8007370 <netif_set_up>
      netif_set_link_up(netif);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fff5 	bl	80074ac <netif_set_link_up>
}
 80064c2:	bf00      	nop
 80064c4:	3780      	adds	r7, #128	; 0x80
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	20005298 	.word	0x20005298
 80064d0:	200051b0 	.word	0x200051b0

080064d4 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af02      	add	r7, sp, #8
 80064da:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80064dc:	4812      	ldr	r0, [pc, #72]	; (8006528 <HAL_ETH_RxAllocateCallback+0x54>)
 80064de:	f000 fcc1 	bl	8006e64 <memp_malloc_pool>
 80064e2:	60f8      	str	r0, [r7, #12]
  if (p)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d014      	beq.n	8006514 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f103 0220 	add.w	r2, r3, #32
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4a0d      	ldr	r2, [pc, #52]	; (800652c <HAL_ETH_RxAllocateCallback+0x58>)
 80064f8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006502:	9201      	str	r2, [sp, #4]
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2241      	movs	r2, #65	; 0x41
 800650a:	2100      	movs	r1, #0
 800650c:	2000      	movs	r0, #0
 800650e:	f001 f9f7 	bl	8007900 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006512:	e005      	b.n	8006520 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006514:	4b06      	ldr	r3, [pc, #24]	; (8006530 <HAL_ETH_RxAllocateCallback+0x5c>)
 8006516:	2201      	movs	r2, #1
 8006518:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]
}
 8006520:	bf00      	nop
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	08014d20 	.word	0x08014d20
 800652c:	0800616d 	.word	0x0800616d
 8006530:	200051ac 	.word	0x200051ac

08006534 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b088      	sub	sp, #32
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800654a:	2300      	movs	r3, #0
 800654c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	3b20      	subs	r3, #32
 8006552:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	2200      	movs	r2, #0
 8006558:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	2200      	movs	r2, #0
 800655e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	887a      	ldrh	r2, [r7, #2]
 8006564:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d103      	bne.n	8006576 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	69fa      	ldr	r2, [r7, #28]
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	e003      	b.n	800657e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	69fa      	ldr	r2, [r7, #28]
 800657c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	69fa      	ldr	r2, [r7, #28]
 8006582:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	61fb      	str	r3, [r7, #28]
 800658a:	e009      	b.n	80065a0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	891a      	ldrh	r2, [r3, #8]
 8006590:	887b      	ldrh	r3, [r7, #2]
 8006592:	4413      	add	r3, r2
 8006594:	b29a      	uxth	r2, r3
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	61fb      	str	r3, [r7, #28]
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1f2      	bne.n	800658c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80065a6:	887b      	ldrh	r3, [r7, #2]
 80065a8:	4619      	mov	r1, r3
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7ff fc30 	bl	8005e10 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 80065b0:	bf00      	nop
 80065b2:	3720      	adds	r7, #32
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	4603      	mov	r3, r0
 80065c0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80065c2:	88fb      	ldrh	r3, [r7, #6]
 80065c4:	021b      	lsls	r3, r3, #8
 80065c6:	b21a      	sxth	r2, r3
 80065c8:	88fb      	ldrh	r3, [r7, #6]
 80065ca:	0a1b      	lsrs	r3, r3, #8
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	b21b      	sxth	r3, r3
 80065d0:	4313      	orrs	r3, r2
 80065d2:	b21b      	sxth	r3, r3
 80065d4:	b29b      	uxth	r3, r3
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b083      	sub	sp, #12
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	061a      	lsls	r2, r3, #24
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	021b      	lsls	r3, r3, #8
 80065f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065f6:	431a      	orrs	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	0a1b      	lsrs	r3, r3, #8
 80065fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006600:	431a      	orrs	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	0e1b      	lsrs	r3, r3, #24
 8006606:	4313      	orrs	r3, r2
}
 8006608:	4618      	mov	r0, r3
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800661a:	2300      	movs	r3, #0
 800661c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800661e:	f000 f8d5 	bl	80067cc <mem_init>
  memp_init();
 8006622:	f000 fbdb 	bl	8006ddc <memp_init>
  pbuf_init();
  netif_init();
 8006626:	f000 fcd9 	bl	8006fdc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800662a:	f007 ff4f 	bl	800e4cc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800662e:	f001 fe41 	bl	80082b4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006632:	f007 fec1 	bl	800e3b8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006636:	bf00      	nop
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
	...

08006640 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	4603      	mov	r3, r0
 8006648:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800664a:	4b05      	ldr	r3, [pc, #20]	; (8006660 <ptr_to_mem+0x20>)
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	88fb      	ldrh	r3, [r7, #6]
 8006650:	4413      	add	r3, r2
}
 8006652:	4618      	mov	r0, r3
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	20005924 	.word	0x20005924

08006664 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800666c:	4b05      	ldr	r3, [pc, #20]	; (8006684 <mem_to_ptr+0x20>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	b29b      	uxth	r3, r3
}
 8006676:	4618      	mov	r0, r3
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	20005924 	.word	0x20005924

08006688 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006688:	b590      	push	{r4, r7, lr}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006690:	4b45      	ldr	r3, [pc, #276]	; (80067a8 <plug_holes+0x120>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	429a      	cmp	r2, r3
 8006698:	d206      	bcs.n	80066a8 <plug_holes+0x20>
 800669a:	4b44      	ldr	r3, [pc, #272]	; (80067ac <plug_holes+0x124>)
 800669c:	f240 12df 	movw	r2, #479	; 0x1df
 80066a0:	4943      	ldr	r1, [pc, #268]	; (80067b0 <plug_holes+0x128>)
 80066a2:	4844      	ldr	r0, [pc, #272]	; (80067b4 <plug_holes+0x12c>)
 80066a4:	f00a fd22 	bl	80110ec <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80066a8:	4b43      	ldr	r3, [pc, #268]	; (80067b8 <plug_holes+0x130>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d306      	bcc.n	80066c0 <plug_holes+0x38>
 80066b2:	4b3e      	ldr	r3, [pc, #248]	; (80067ac <plug_holes+0x124>)
 80066b4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80066b8:	4940      	ldr	r1, [pc, #256]	; (80067bc <plug_holes+0x134>)
 80066ba:	483e      	ldr	r0, [pc, #248]	; (80067b4 <plug_holes+0x12c>)
 80066bc:	f00a fd16 	bl	80110ec <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	791b      	ldrb	r3, [r3, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d006      	beq.n	80066d6 <plug_holes+0x4e>
 80066c8:	4b38      	ldr	r3, [pc, #224]	; (80067ac <plug_holes+0x124>)
 80066ca:	f240 12e1 	movw	r2, #481	; 0x1e1
 80066ce:	493c      	ldr	r1, [pc, #240]	; (80067c0 <plug_holes+0x138>)
 80066d0:	4838      	ldr	r0, [pc, #224]	; (80067b4 <plug_holes+0x12c>)
 80066d2:	f00a fd0b 	bl	80110ec <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80066de:	d906      	bls.n	80066ee <plug_holes+0x66>
 80066e0:	4b32      	ldr	r3, [pc, #200]	; (80067ac <plug_holes+0x124>)
 80066e2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80066e6:	4937      	ldr	r1, [pc, #220]	; (80067c4 <plug_holes+0x13c>)
 80066e8:	4832      	ldr	r0, [pc, #200]	; (80067b4 <plug_holes+0x12c>)
 80066ea:	f00a fcff 	bl	80110ec <iprintf>

  nmem = ptr_to_mem(mem->next);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7ff ffa4 	bl	8006640 <ptr_to_mem>
 80066f8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d024      	beq.n	800674c <plug_holes+0xc4>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	791b      	ldrb	r3, [r3, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d120      	bne.n	800674c <plug_holes+0xc4>
 800670a:	4b2b      	ldr	r3, [pc, #172]	; (80067b8 <plug_holes+0x130>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	429a      	cmp	r2, r3
 8006712:	d01b      	beq.n	800674c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006714:	4b2c      	ldr	r3, [pc, #176]	; (80067c8 <plug_holes+0x140>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	429a      	cmp	r2, r3
 800671c:	d102      	bne.n	8006724 <plug_holes+0x9c>
      lfree = mem;
 800671e:	4a2a      	ldr	r2, [pc, #168]	; (80067c8 <plug_holes+0x140>)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	881a      	ldrh	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	881b      	ldrh	r3, [r3, #0]
 8006730:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006734:	d00a      	beq.n	800674c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	881b      	ldrh	r3, [r3, #0]
 800673a:	4618      	mov	r0, r3
 800673c:	f7ff ff80 	bl	8006640 <ptr_to_mem>
 8006740:	4604      	mov	r4, r0
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7ff ff8e 	bl	8006664 <mem_to_ptr>
 8006748:	4603      	mov	r3, r0
 800674a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	885b      	ldrh	r3, [r3, #2]
 8006750:	4618      	mov	r0, r3
 8006752:	f7ff ff75 	bl	8006640 <ptr_to_mem>
 8006756:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	429a      	cmp	r2, r3
 800675e:	d01f      	beq.n	80067a0 <plug_holes+0x118>
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	791b      	ldrb	r3, [r3, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d11b      	bne.n	80067a0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006768:	4b17      	ldr	r3, [pc, #92]	; (80067c8 <plug_holes+0x140>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	429a      	cmp	r2, r3
 8006770:	d102      	bne.n	8006778 <plug_holes+0xf0>
      lfree = pmem;
 8006772:	4a15      	ldr	r2, [pc, #84]	; (80067c8 <plug_holes+0x140>)
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	881a      	ldrh	r2, [r3, #0]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	881b      	ldrh	r3, [r3, #0]
 8006784:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006788:	d00a      	beq.n	80067a0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	4618      	mov	r0, r3
 8006790:	f7ff ff56 	bl	8006640 <ptr_to_mem>
 8006794:	4604      	mov	r4, r0
 8006796:	68b8      	ldr	r0, [r7, #8]
 8006798:	f7ff ff64 	bl	8006664 <mem_to_ptr>
 800679c:	4603      	mov	r3, r0
 800679e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80067a0:	bf00      	nop
 80067a2:	3714      	adds	r7, #20
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd90      	pop	{r4, r7, pc}
 80067a8:	20005924 	.word	0x20005924
 80067ac:	0801237c 	.word	0x0801237c
 80067b0:	080123ac 	.word	0x080123ac
 80067b4:	080123c4 	.word	0x080123c4
 80067b8:	20005928 	.word	0x20005928
 80067bc:	080123ec 	.word	0x080123ec
 80067c0:	08012408 	.word	0x08012408
 80067c4:	08012424 	.word	0x08012424
 80067c8:	2000592c 	.word	0x2000592c

080067cc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80067d2:	4b18      	ldr	r3, [pc, #96]	; (8006834 <mem_init+0x68>)
 80067d4:	3303      	adds	r3, #3
 80067d6:	f023 0303 	bic.w	r3, r3, #3
 80067da:	461a      	mov	r2, r3
 80067dc:	4b16      	ldr	r3, [pc, #88]	; (8006838 <mem_init+0x6c>)
 80067de:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80067e0:	4b15      	ldr	r3, [pc, #84]	; (8006838 <mem_init+0x6c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80067ec:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80067fa:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80067fe:	f7ff ff1f 	bl	8006640 <ptr_to_mem>
 8006802:	4603      	mov	r3, r0
 8006804:	4a0d      	ldr	r2, [pc, #52]	; (800683c <mem_init+0x70>)
 8006806:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8006808:	4b0c      	ldr	r3, [pc, #48]	; (800683c <mem_init+0x70>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2201      	movs	r2, #1
 800680e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006810:	4b0a      	ldr	r3, [pc, #40]	; (800683c <mem_init+0x70>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006818:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800681a:	4b08      	ldr	r3, [pc, #32]	; (800683c <mem_init+0x70>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8006822:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006824:	4b04      	ldr	r3, [pc, #16]	; (8006838 <mem_init+0x6c>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a05      	ldr	r2, [pc, #20]	; (8006840 <mem_init+0x74>)
 800682a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800682c:	bf00      	nop
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	200052d0 	.word	0x200052d0
 8006838:	20005924 	.word	0x20005924
 800683c:	20005928 	.word	0x20005928
 8006840:	2000592c 	.word	0x2000592c

08006844 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7ff ff09 	bl	8006664 <mem_to_ptr>
 8006852:	4603      	mov	r3, r0
 8006854:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	881b      	ldrh	r3, [r3, #0]
 800685a:	4618      	mov	r0, r3
 800685c:	f7ff fef0 	bl	8006640 <ptr_to_mem>
 8006860:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	885b      	ldrh	r3, [r3, #2]
 8006866:	4618      	mov	r0, r3
 8006868:	f7ff feea 	bl	8006640 <ptr_to_mem>
 800686c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	881b      	ldrh	r3, [r3, #0]
 8006872:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006876:	d818      	bhi.n	80068aa <mem_link_valid+0x66>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	885b      	ldrh	r3, [r3, #2]
 800687c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006880:	d813      	bhi.n	80068aa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006886:	8afa      	ldrh	r2, [r7, #22]
 8006888:	429a      	cmp	r2, r3
 800688a:	d004      	beq.n	8006896 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	8afa      	ldrh	r2, [r7, #22]
 8006892:	429a      	cmp	r2, r3
 8006894:	d109      	bne.n	80068aa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006896:	4b08      	ldr	r3, [pc, #32]	; (80068b8 <mem_link_valid+0x74>)
 8006898:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	429a      	cmp	r2, r3
 800689e:	d006      	beq.n	80068ae <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	885b      	ldrh	r3, [r3, #2]
 80068a4:	8afa      	ldrh	r2, [r7, #22]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d001      	beq.n	80068ae <mem_link_valid+0x6a>
    return 0;
 80068aa:	2300      	movs	r3, #0
 80068ac:	e000      	b.n	80068b0 <mem_link_valid+0x6c>
  }
  return 1;
 80068ae:	2301      	movs	r3, #1
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3718      	adds	r7, #24
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	20005928 	.word	0x20005928

080068bc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d04c      	beq.n	8006964 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f003 0303 	and.w	r3, r3, #3
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d007      	beq.n	80068e4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80068d4:	4b25      	ldr	r3, [pc, #148]	; (800696c <mem_free+0xb0>)
 80068d6:	f240 2273 	movw	r2, #627	; 0x273
 80068da:	4925      	ldr	r1, [pc, #148]	; (8006970 <mem_free+0xb4>)
 80068dc:	4825      	ldr	r0, [pc, #148]	; (8006974 <mem_free+0xb8>)
 80068de:	f00a fc05 	bl	80110ec <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80068e2:	e040      	b.n	8006966 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	3b08      	subs	r3, #8
 80068e8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80068ea:	4b23      	ldr	r3, [pc, #140]	; (8006978 <mem_free+0xbc>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d306      	bcc.n	8006902 <mem_free+0x46>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f103 020c 	add.w	r2, r3, #12
 80068fa:	4b20      	ldr	r3, [pc, #128]	; (800697c <mem_free+0xc0>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d907      	bls.n	8006912 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8006902:	4b1a      	ldr	r3, [pc, #104]	; (800696c <mem_free+0xb0>)
 8006904:	f240 227f 	movw	r2, #639	; 0x27f
 8006908:	491d      	ldr	r1, [pc, #116]	; (8006980 <mem_free+0xc4>)
 800690a:	481a      	ldr	r0, [pc, #104]	; (8006974 <mem_free+0xb8>)
 800690c:	f00a fbee 	bl	80110ec <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006910:	e029      	b.n	8006966 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	791b      	ldrb	r3, [r3, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d107      	bne.n	800692a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800691a:	4b14      	ldr	r3, [pc, #80]	; (800696c <mem_free+0xb0>)
 800691c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8006920:	4918      	ldr	r1, [pc, #96]	; (8006984 <mem_free+0xc8>)
 8006922:	4814      	ldr	r0, [pc, #80]	; (8006974 <mem_free+0xb8>)
 8006924:	f00a fbe2 	bl	80110ec <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006928:	e01d      	b.n	8006966 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f7ff ff8a 	bl	8006844 <mem_link_valid>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d107      	bne.n	8006946 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006936:	4b0d      	ldr	r3, [pc, #52]	; (800696c <mem_free+0xb0>)
 8006938:	f240 2295 	movw	r2, #661	; 0x295
 800693c:	4912      	ldr	r1, [pc, #72]	; (8006988 <mem_free+0xcc>)
 800693e:	480d      	ldr	r0, [pc, #52]	; (8006974 <mem_free+0xb8>)
 8006940:	f00a fbd4 	bl	80110ec <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006944:	e00f      	b.n	8006966 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800694c:	4b0f      	ldr	r3, [pc, #60]	; (800698c <mem_free+0xd0>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	429a      	cmp	r2, r3
 8006954:	d202      	bcs.n	800695c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006956:	4a0d      	ldr	r2, [pc, #52]	; (800698c <mem_free+0xd0>)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f7ff fe93 	bl	8006688 <plug_holes>
 8006962:	e000      	b.n	8006966 <mem_free+0xaa>
    return;
 8006964:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	0801237c 	.word	0x0801237c
 8006970:	08012450 	.word	0x08012450
 8006974:	080123c4 	.word	0x080123c4
 8006978:	20005924 	.word	0x20005924
 800697c:	20005928 	.word	0x20005928
 8006980:	08012474 	.word	0x08012474
 8006984:	08012490 	.word	0x08012490
 8006988:	080124b8 	.word	0x080124b8
 800698c:	2000592c 	.word	0x2000592c

08006990 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b088      	sub	sp, #32
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	460b      	mov	r3, r1
 800699a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800699c:	887b      	ldrh	r3, [r7, #2]
 800699e:	3303      	adds	r3, #3
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	f023 0303 	bic.w	r3, r3, #3
 80069a6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80069a8:	8bfb      	ldrh	r3, [r7, #30]
 80069aa:	2b0b      	cmp	r3, #11
 80069ac:	d801      	bhi.n	80069b2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80069ae:	230c      	movs	r3, #12
 80069b0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80069b2:	8bfb      	ldrh	r3, [r7, #30]
 80069b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80069b8:	d803      	bhi.n	80069c2 <mem_trim+0x32>
 80069ba:	8bfa      	ldrh	r2, [r7, #30]
 80069bc:	887b      	ldrh	r3, [r7, #2]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d201      	bcs.n	80069c6 <mem_trim+0x36>
    return NULL;
 80069c2:	2300      	movs	r3, #0
 80069c4:	e0cc      	b.n	8006b60 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80069c6:	4b68      	ldr	r3, [pc, #416]	; (8006b68 <mem_trim+0x1d8>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d304      	bcc.n	80069da <mem_trim+0x4a>
 80069d0:	4b66      	ldr	r3, [pc, #408]	; (8006b6c <mem_trim+0x1dc>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d306      	bcc.n	80069e8 <mem_trim+0x58>
 80069da:	4b65      	ldr	r3, [pc, #404]	; (8006b70 <mem_trim+0x1e0>)
 80069dc:	f240 22d1 	movw	r2, #721	; 0x2d1
 80069e0:	4964      	ldr	r1, [pc, #400]	; (8006b74 <mem_trim+0x1e4>)
 80069e2:	4865      	ldr	r0, [pc, #404]	; (8006b78 <mem_trim+0x1e8>)
 80069e4:	f00a fb82 	bl	80110ec <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80069e8:	4b5f      	ldr	r3, [pc, #380]	; (8006b68 <mem_trim+0x1d8>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d304      	bcc.n	80069fc <mem_trim+0x6c>
 80069f2:	4b5e      	ldr	r3, [pc, #376]	; (8006b6c <mem_trim+0x1dc>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d301      	bcc.n	8006a00 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	e0af      	b.n	8006b60 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	3b08      	subs	r3, #8
 8006a04:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8006a06:	69b8      	ldr	r0, [r7, #24]
 8006a08:	f7ff fe2c 	bl	8006664 <mem_to_ptr>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	881a      	ldrh	r2, [r3, #0]
 8006a14:	8afb      	ldrh	r3, [r7, #22]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	3b08      	subs	r3, #8
 8006a1c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006a1e:	8bfa      	ldrh	r2, [r7, #30]
 8006a20:	8abb      	ldrh	r3, [r7, #20]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d906      	bls.n	8006a34 <mem_trim+0xa4>
 8006a26:	4b52      	ldr	r3, [pc, #328]	; (8006b70 <mem_trim+0x1e0>)
 8006a28:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8006a2c:	4953      	ldr	r1, [pc, #332]	; (8006b7c <mem_trim+0x1ec>)
 8006a2e:	4852      	ldr	r0, [pc, #328]	; (8006b78 <mem_trim+0x1e8>)
 8006a30:	f00a fb5c 	bl	80110ec <iprintf>
  if (newsize > size) {
 8006a34:	8bfa      	ldrh	r2, [r7, #30]
 8006a36:	8abb      	ldrh	r3, [r7, #20]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d901      	bls.n	8006a40 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	e08f      	b.n	8006b60 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006a40:	8bfa      	ldrh	r2, [r7, #30]
 8006a42:	8abb      	ldrh	r3, [r7, #20]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d101      	bne.n	8006a4c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	e089      	b.n	8006b60 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	881b      	ldrh	r3, [r3, #0]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7ff fdf5 	bl	8006640 <ptr_to_mem>
 8006a56:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	791b      	ldrb	r3, [r3, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d13f      	bne.n	8006ae0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	881b      	ldrh	r3, [r3, #0]
 8006a64:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006a68:	d106      	bne.n	8006a78 <mem_trim+0xe8>
 8006a6a:	4b41      	ldr	r3, [pc, #260]	; (8006b70 <mem_trim+0x1e0>)
 8006a6c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8006a70:	4943      	ldr	r1, [pc, #268]	; (8006b80 <mem_trim+0x1f0>)
 8006a72:	4841      	ldr	r0, [pc, #260]	; (8006b78 <mem_trim+0x1e8>)
 8006a74:	f00a fb3a 	bl	80110ec <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006a7e:	8afa      	ldrh	r2, [r7, #22]
 8006a80:	8bfb      	ldrh	r3, [r7, #30]
 8006a82:	4413      	add	r3, r2
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	3308      	adds	r3, #8
 8006a88:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8006a8a:	4b3e      	ldr	r3, [pc, #248]	; (8006b84 <mem_trim+0x1f4>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d106      	bne.n	8006aa2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8006a94:	89fb      	ldrh	r3, [r7, #14]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7ff fdd2 	bl	8006640 <ptr_to_mem>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	4a39      	ldr	r2, [pc, #228]	; (8006b84 <mem_trim+0x1f4>)
 8006aa0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8006aa2:	89fb      	ldrh	r3, [r7, #14]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7ff fdcb 	bl	8006640 <ptr_to_mem>
 8006aaa:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	89ba      	ldrh	r2, [r7, #12]
 8006ab6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	8afa      	ldrh	r2, [r7, #22]
 8006abc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	89fa      	ldrh	r2, [r7, #14]
 8006ac2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	881b      	ldrh	r3, [r3, #0]
 8006ac8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006acc:	d047      	beq.n	8006b5e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	881b      	ldrh	r3, [r3, #0]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7ff fdb4 	bl	8006640 <ptr_to_mem>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	89fb      	ldrh	r3, [r7, #14]
 8006adc:	8053      	strh	r3, [r2, #2]
 8006ade:	e03e      	b.n	8006b5e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006ae0:	8bfb      	ldrh	r3, [r7, #30]
 8006ae2:	f103 0214 	add.w	r2, r3, #20
 8006ae6:	8abb      	ldrh	r3, [r7, #20]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d838      	bhi.n	8006b5e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006aec:	8afa      	ldrh	r2, [r7, #22]
 8006aee:	8bfb      	ldrh	r3, [r7, #30]
 8006af0:	4413      	add	r3, r2
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	3308      	adds	r3, #8
 8006af6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	881b      	ldrh	r3, [r3, #0]
 8006afc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006b00:	d106      	bne.n	8006b10 <mem_trim+0x180>
 8006b02:	4b1b      	ldr	r3, [pc, #108]	; (8006b70 <mem_trim+0x1e0>)
 8006b04:	f240 3216 	movw	r2, #790	; 0x316
 8006b08:	491d      	ldr	r1, [pc, #116]	; (8006b80 <mem_trim+0x1f0>)
 8006b0a:	481b      	ldr	r0, [pc, #108]	; (8006b78 <mem_trim+0x1e8>)
 8006b0c:	f00a faee 	bl	80110ec <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006b10:	89fb      	ldrh	r3, [r7, #14]
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7ff fd94 	bl	8006640 <ptr_to_mem>
 8006b18:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8006b1a:	4b1a      	ldr	r3, [pc, #104]	; (8006b84 <mem_trim+0x1f4>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d202      	bcs.n	8006b2a <mem_trim+0x19a>
      lfree = mem2;
 8006b24:	4a17      	ldr	r2, [pc, #92]	; (8006b84 <mem_trim+0x1f4>)
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	881a      	ldrh	r2, [r3, #0]
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	8afa      	ldrh	r2, [r7, #22]
 8006b3c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	89fa      	ldrh	r2, [r7, #14]
 8006b42:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	881b      	ldrh	r3, [r3, #0]
 8006b48:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006b4c:	d007      	beq.n	8006b5e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	881b      	ldrh	r3, [r3, #0]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7ff fd74 	bl	8006640 <ptr_to_mem>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	89fb      	ldrh	r3, [r7, #14]
 8006b5c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006b5e:	687b      	ldr	r3, [r7, #4]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3720      	adds	r7, #32
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	20005924 	.word	0x20005924
 8006b6c:	20005928 	.word	0x20005928
 8006b70:	0801237c 	.word	0x0801237c
 8006b74:	080124ec 	.word	0x080124ec
 8006b78:	080123c4 	.word	0x080123c4
 8006b7c:	08012504 	.word	0x08012504
 8006b80:	08012524 	.word	0x08012524
 8006b84:	2000592c 	.word	0x2000592c

08006b88 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b088      	sub	sp, #32
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	4603      	mov	r3, r0
 8006b90:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006b92:	88fb      	ldrh	r3, [r7, #6]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <mem_malloc+0x14>
    return NULL;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	e0d9      	b.n	8006d50 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006b9c:	88fb      	ldrh	r3, [r7, #6]
 8006b9e:	3303      	adds	r3, #3
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	f023 0303 	bic.w	r3, r3, #3
 8006ba6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006ba8:	8bbb      	ldrh	r3, [r7, #28]
 8006baa:	2b0b      	cmp	r3, #11
 8006bac:	d801      	bhi.n	8006bb2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8006bae:	230c      	movs	r3, #12
 8006bb0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006bb2:	8bbb      	ldrh	r3, [r7, #28]
 8006bb4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006bb8:	d803      	bhi.n	8006bc2 <mem_malloc+0x3a>
 8006bba:	8bba      	ldrh	r2, [r7, #28]
 8006bbc:	88fb      	ldrh	r3, [r7, #6]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d201      	bcs.n	8006bc6 <mem_malloc+0x3e>
    return NULL;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	e0c4      	b.n	8006d50 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006bc6:	4b64      	ldr	r3, [pc, #400]	; (8006d58 <mem_malloc+0x1d0>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7ff fd4a 	bl	8006664 <mem_to_ptr>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	83fb      	strh	r3, [r7, #30]
 8006bd4:	e0b4      	b.n	8006d40 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006bd6:	8bfb      	ldrh	r3, [r7, #30]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7ff fd31 	bl	8006640 <ptr_to_mem>
 8006bde:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	791b      	ldrb	r3, [r3, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f040 80a4 	bne.w	8006d32 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	881b      	ldrh	r3, [r3, #0]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	8bfb      	ldrh	r3, [r7, #30]
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	f1a3 0208 	sub.w	r2, r3, #8
 8006bf8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	f0c0 8099 	bcc.w	8006d32 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	461a      	mov	r2, r3
 8006c06:	8bfb      	ldrh	r3, [r7, #30]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	f1a3 0208 	sub.w	r2, r3, #8
 8006c0e:	8bbb      	ldrh	r3, [r7, #28]
 8006c10:	3314      	adds	r3, #20
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d333      	bcc.n	8006c7e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006c16:	8bfa      	ldrh	r2, [r7, #30]
 8006c18:	8bbb      	ldrh	r3, [r7, #28]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	3308      	adds	r3, #8
 8006c20:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006c22:	8a7b      	ldrh	r3, [r7, #18]
 8006c24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006c28:	d106      	bne.n	8006c38 <mem_malloc+0xb0>
 8006c2a:	4b4c      	ldr	r3, [pc, #304]	; (8006d5c <mem_malloc+0x1d4>)
 8006c2c:	f240 3287 	movw	r2, #903	; 0x387
 8006c30:	494b      	ldr	r1, [pc, #300]	; (8006d60 <mem_malloc+0x1d8>)
 8006c32:	484c      	ldr	r0, [pc, #304]	; (8006d64 <mem_malloc+0x1dc>)
 8006c34:	f00a fa5a 	bl	80110ec <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006c38:	8a7b      	ldrh	r3, [r7, #18]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7ff fd00 	bl	8006640 <ptr_to_mem>
 8006c40:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	881a      	ldrh	r2, [r3, #0]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	8bfa      	ldrh	r2, [r7, #30]
 8006c54:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	8a7a      	ldrh	r2, [r7, #18]
 8006c5a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	881b      	ldrh	r3, [r3, #0]
 8006c66:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006c6a:	d00b      	beq.n	8006c84 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7ff fce5 	bl	8006640 <ptr_to_mem>
 8006c76:	4602      	mov	r2, r0
 8006c78:	8a7b      	ldrh	r3, [r7, #18]
 8006c7a:	8053      	strh	r3, [r2, #2]
 8006c7c:	e002      	b.n	8006c84 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	2201      	movs	r2, #1
 8006c82:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006c84:	4b34      	ldr	r3, [pc, #208]	; (8006d58 <mem_malloc+0x1d0>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d127      	bne.n	8006cde <mem_malloc+0x156>
          struct mem *cur = lfree;
 8006c8e:	4b32      	ldr	r3, [pc, #200]	; (8006d58 <mem_malloc+0x1d0>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006c94:	e005      	b.n	8006ca2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7ff fcd0 	bl	8006640 <ptr_to_mem>
 8006ca0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	791b      	ldrb	r3, [r3, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d004      	beq.n	8006cb4 <mem_malloc+0x12c>
 8006caa:	4b2f      	ldr	r3, [pc, #188]	; (8006d68 <mem_malloc+0x1e0>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	69ba      	ldr	r2, [r7, #24]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d1f0      	bne.n	8006c96 <mem_malloc+0x10e>
          }
          lfree = cur;
 8006cb4:	4a28      	ldr	r2, [pc, #160]	; (8006d58 <mem_malloc+0x1d0>)
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006cba:	4b27      	ldr	r3, [pc, #156]	; (8006d58 <mem_malloc+0x1d0>)
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	4b2a      	ldr	r3, [pc, #168]	; (8006d68 <mem_malloc+0x1e0>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d00b      	beq.n	8006cde <mem_malloc+0x156>
 8006cc6:	4b24      	ldr	r3, [pc, #144]	; (8006d58 <mem_malloc+0x1d0>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	791b      	ldrb	r3, [r3, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d006      	beq.n	8006cde <mem_malloc+0x156>
 8006cd0:	4b22      	ldr	r3, [pc, #136]	; (8006d5c <mem_malloc+0x1d4>)
 8006cd2:	f240 32b5 	movw	r2, #949	; 0x3b5
 8006cd6:	4925      	ldr	r1, [pc, #148]	; (8006d6c <mem_malloc+0x1e4>)
 8006cd8:	4822      	ldr	r0, [pc, #136]	; (8006d64 <mem_malloc+0x1dc>)
 8006cda:	f00a fa07 	bl	80110ec <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006cde:	8bba      	ldrh	r2, [r7, #28]
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	3308      	adds	r3, #8
 8006ce6:	4a20      	ldr	r2, [pc, #128]	; (8006d68 <mem_malloc+0x1e0>)
 8006ce8:	6812      	ldr	r2, [r2, #0]
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d906      	bls.n	8006cfc <mem_malloc+0x174>
 8006cee:	4b1b      	ldr	r3, [pc, #108]	; (8006d5c <mem_malloc+0x1d4>)
 8006cf0:	f240 32b9 	movw	r2, #953	; 0x3b9
 8006cf4:	491e      	ldr	r1, [pc, #120]	; (8006d70 <mem_malloc+0x1e8>)
 8006cf6:	481b      	ldr	r0, [pc, #108]	; (8006d64 <mem_malloc+0x1dc>)
 8006cf8:	f00a f9f8 	bl	80110ec <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f003 0303 	and.w	r3, r3, #3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d006      	beq.n	8006d14 <mem_malloc+0x18c>
 8006d06:	4b15      	ldr	r3, [pc, #84]	; (8006d5c <mem_malloc+0x1d4>)
 8006d08:	f240 32bb 	movw	r2, #955	; 0x3bb
 8006d0c:	4919      	ldr	r1, [pc, #100]	; (8006d74 <mem_malloc+0x1ec>)
 8006d0e:	4815      	ldr	r0, [pc, #84]	; (8006d64 <mem_malloc+0x1dc>)
 8006d10:	f00a f9ec 	bl	80110ec <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	f003 0303 	and.w	r3, r3, #3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d006      	beq.n	8006d2c <mem_malloc+0x1a4>
 8006d1e:	4b0f      	ldr	r3, [pc, #60]	; (8006d5c <mem_malloc+0x1d4>)
 8006d20:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006d24:	4914      	ldr	r1, [pc, #80]	; (8006d78 <mem_malloc+0x1f0>)
 8006d26:	480f      	ldr	r0, [pc, #60]	; (8006d64 <mem_malloc+0x1dc>)
 8006d28:	f00a f9e0 	bl	80110ec <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	3308      	adds	r3, #8
 8006d30:	e00e      	b.n	8006d50 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006d32:	8bfb      	ldrh	r3, [r7, #30]
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7ff fc83 	bl	8006640 <ptr_to_mem>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006d40:	8bfa      	ldrh	r2, [r7, #30]
 8006d42:	8bbb      	ldrh	r3, [r7, #28]
 8006d44:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	f4ff af44 	bcc.w	8006bd6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3720      	adds	r7, #32
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	2000592c 	.word	0x2000592c
 8006d5c:	0801237c 	.word	0x0801237c
 8006d60:	08012524 	.word	0x08012524
 8006d64:	080123c4 	.word	0x080123c4
 8006d68:	20005928 	.word	0x20005928
 8006d6c:	08012538 	.word	0x08012538
 8006d70:	08012554 	.word	0x08012554
 8006d74:	08012584 	.word	0x08012584
 8006d78:	080125b4 	.word	0x080125b4

08006d7c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	3303      	adds	r3, #3
 8006d92:	f023 0303 	bic.w	r3, r3, #3
 8006d96:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006d98:	2300      	movs	r3, #0
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	e011      	b.n	8006dc2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	881b      	ldrh	r3, [r3, #0]
 8006db4:	461a      	mov	r2, r3
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	4413      	add	r3, r2
 8006dba:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	60fb      	str	r3, [r7, #12]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	885b      	ldrh	r3, [r3, #2]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	dbe7      	blt.n	8006d9e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006dce:	bf00      	nop
 8006dd0:	bf00      	nop
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006de2:	2300      	movs	r3, #0
 8006de4:	80fb      	strh	r3, [r7, #6]
 8006de6:	e009      	b.n	8006dfc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006de8:	88fb      	ldrh	r3, [r7, #6]
 8006dea:	4a08      	ldr	r2, [pc, #32]	; (8006e0c <memp_init+0x30>)
 8006dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7ff ffc3 	bl	8006d7c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006df6:	88fb      	ldrh	r3, [r7, #6]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	80fb      	strh	r3, [r7, #6]
 8006dfc:	88fb      	ldrh	r3, [r7, #6]
 8006dfe:	2b08      	cmp	r3, #8
 8006e00:	d9f2      	bls.n	8006de8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006e02:	bf00      	nop
 8006e04:	bf00      	nop
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	08014d98 	.word	0x08014d98

08006e10 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d012      	beq.n	8006e4c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	6812      	ldr	r2, [r2, #0]
 8006e2e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f003 0303 	and.w	r3, r3, #3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d006      	beq.n	8006e48 <do_memp_malloc_pool+0x38>
 8006e3a:	4b07      	ldr	r3, [pc, #28]	; (8006e58 <do_memp_malloc_pool+0x48>)
 8006e3c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006e40:	4906      	ldr	r1, [pc, #24]	; (8006e5c <do_memp_malloc_pool+0x4c>)
 8006e42:	4807      	ldr	r0, [pc, #28]	; (8006e60 <do_memp_malloc_pool+0x50>)
 8006e44:	f00a f952 	bl	80110ec <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	e000      	b.n	8006e4e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	080125d8 	.word	0x080125d8
 8006e5c:	08012608 	.word	0x08012608
 8006e60:	0801262c 	.word	0x0801262c

08006e64 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d106      	bne.n	8006e80 <memp_malloc_pool+0x1c>
 8006e72:	4b0a      	ldr	r3, [pc, #40]	; (8006e9c <memp_malloc_pool+0x38>)
 8006e74:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8006e78:	4909      	ldr	r1, [pc, #36]	; (8006ea0 <memp_malloc_pool+0x3c>)
 8006e7a:	480a      	ldr	r0, [pc, #40]	; (8006ea4 <memp_malloc_pool+0x40>)
 8006e7c:	f00a f936 	bl	80110ec <iprintf>
  if (desc == NULL) {
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <memp_malloc_pool+0x26>
    return NULL;
 8006e86:	2300      	movs	r3, #0
 8006e88:	e003      	b.n	8006e92 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7ff ffc0 	bl	8006e10 <do_memp_malloc_pool>
 8006e90:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	080125d8 	.word	0x080125d8
 8006ea0:	08012654 	.word	0x08012654
 8006ea4:	0801262c 	.word	0x0801262c

08006ea8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	4603      	mov	r3, r0
 8006eb0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006eb2:	79fb      	ldrb	r3, [r7, #7]
 8006eb4:	2b08      	cmp	r3, #8
 8006eb6:	d908      	bls.n	8006eca <memp_malloc+0x22>
 8006eb8:	4b0a      	ldr	r3, [pc, #40]	; (8006ee4 <memp_malloc+0x3c>)
 8006eba:	f240 1257 	movw	r2, #343	; 0x157
 8006ebe:	490a      	ldr	r1, [pc, #40]	; (8006ee8 <memp_malloc+0x40>)
 8006ec0:	480a      	ldr	r0, [pc, #40]	; (8006eec <memp_malloc+0x44>)
 8006ec2:	f00a f913 	bl	80110ec <iprintf>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	e008      	b.n	8006edc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006eca:	79fb      	ldrb	r3, [r7, #7]
 8006ecc:	4a08      	ldr	r2, [pc, #32]	; (8006ef0 <memp_malloc+0x48>)
 8006ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7ff ff9c 	bl	8006e10 <do_memp_malloc_pool>
 8006ed8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006eda:	68fb      	ldr	r3, [r7, #12]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	080125d8 	.word	0x080125d8
 8006ee8:	08012668 	.word	0x08012668
 8006eec:	0801262c 	.word	0x0801262c
 8006ef0:	08014d98 	.word	0x08014d98

08006ef4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	f003 0303 	and.w	r3, r3, #3
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d006      	beq.n	8006f16 <do_memp_free_pool+0x22>
 8006f08:	4b0a      	ldr	r3, [pc, #40]	; (8006f34 <do_memp_free_pool+0x40>)
 8006f0a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006f0e:	490a      	ldr	r1, [pc, #40]	; (8006f38 <do_memp_free_pool+0x44>)
 8006f10:	480a      	ldr	r0, [pc, #40]	; (8006f3c <do_memp_free_pool+0x48>)
 8006f12:	f00a f8eb 	bl	80110ec <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006f2c:	bf00      	nop
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	080125d8 	.word	0x080125d8
 8006f38:	08012688 	.word	0x08012688
 8006f3c:	0801262c 	.word	0x0801262c

08006f40 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d106      	bne.n	8006f5e <memp_free_pool+0x1e>
 8006f50:	4b0a      	ldr	r3, [pc, #40]	; (8006f7c <memp_free_pool+0x3c>)
 8006f52:	f240 1295 	movw	r2, #405	; 0x195
 8006f56:	490a      	ldr	r1, [pc, #40]	; (8006f80 <memp_free_pool+0x40>)
 8006f58:	480a      	ldr	r0, [pc, #40]	; (8006f84 <memp_free_pool+0x44>)
 8006f5a:	f00a f8c7 	bl	80110ec <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d007      	beq.n	8006f74 <memp_free_pool+0x34>
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d004      	beq.n	8006f74 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8006f6a:	6839      	ldr	r1, [r7, #0]
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f7ff ffc1 	bl	8006ef4 <do_memp_free_pool>
 8006f72:	e000      	b.n	8006f76 <memp_free_pool+0x36>
    return;
 8006f74:	bf00      	nop
}
 8006f76:	3708      	adds	r7, #8
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	080125d8 	.word	0x080125d8
 8006f80:	08012654 	.word	0x08012654
 8006f84:	0801262c 	.word	0x0801262c

08006f88 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	4603      	mov	r3, r0
 8006f90:	6039      	str	r1, [r7, #0]
 8006f92:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006f94:	79fb      	ldrb	r3, [r7, #7]
 8006f96:	2b08      	cmp	r3, #8
 8006f98:	d907      	bls.n	8006faa <memp_free+0x22>
 8006f9a:	4b0c      	ldr	r3, [pc, #48]	; (8006fcc <memp_free+0x44>)
 8006f9c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006fa0:	490b      	ldr	r1, [pc, #44]	; (8006fd0 <memp_free+0x48>)
 8006fa2:	480c      	ldr	r0, [pc, #48]	; (8006fd4 <memp_free+0x4c>)
 8006fa4:	f00a f8a2 	bl	80110ec <iprintf>
 8006fa8:	e00c      	b.n	8006fc4 <memp_free+0x3c>

  if (mem == NULL) {
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d008      	beq.n	8006fc2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006fb0:	79fb      	ldrb	r3, [r7, #7]
 8006fb2:	4a09      	ldr	r2, [pc, #36]	; (8006fd8 <memp_free+0x50>)
 8006fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fb8:	6839      	ldr	r1, [r7, #0]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7ff ff9a 	bl	8006ef4 <do_memp_free_pool>
 8006fc0:	e000      	b.n	8006fc4 <memp_free+0x3c>
    return;
 8006fc2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	080125d8 	.word	0x080125d8
 8006fd0:	080126a8 	.word	0x080126a8
 8006fd4:	0801262c 	.word	0x0801262c
 8006fd8:	08014d98 	.word	0x08014d98

08006fdc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006fe0:	bf00      	nop
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
	...

08006fec <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
 8006ff8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d108      	bne.n	8007012 <netif_add+0x26>
 8007000:	4b57      	ldr	r3, [pc, #348]	; (8007160 <netif_add+0x174>)
 8007002:	f240 1227 	movw	r2, #295	; 0x127
 8007006:	4957      	ldr	r1, [pc, #348]	; (8007164 <netif_add+0x178>)
 8007008:	4857      	ldr	r0, [pc, #348]	; (8007168 <netif_add+0x17c>)
 800700a:	f00a f86f 	bl	80110ec <iprintf>
 800700e:	2300      	movs	r3, #0
 8007010:	e0a2      	b.n	8007158 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007014:	2b00      	cmp	r3, #0
 8007016:	d108      	bne.n	800702a <netif_add+0x3e>
 8007018:	4b51      	ldr	r3, [pc, #324]	; (8007160 <netif_add+0x174>)
 800701a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800701e:	4953      	ldr	r1, [pc, #332]	; (800716c <netif_add+0x180>)
 8007020:	4851      	ldr	r0, [pc, #324]	; (8007168 <netif_add+0x17c>)
 8007022:	f00a f863 	bl	80110ec <iprintf>
 8007026:	2300      	movs	r3, #0
 8007028:	e096      	b.n	8007158 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d101      	bne.n	8007034 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007030:	4b4f      	ldr	r3, [pc, #316]	; (8007170 <netif_add+0x184>)
 8007032:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d101      	bne.n	800703e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800703a:	4b4d      	ldr	r3, [pc, #308]	; (8007170 <netif_add+0x184>)
 800703c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d101      	bne.n	8007048 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007044:	4b4a      	ldr	r3, [pc, #296]	; (8007170 <netif_add+0x184>)
 8007046:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	4a45      	ldr	r2, [pc, #276]	; (8007174 <netif_add+0x188>)
 800705e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6a3a      	ldr	r2, [r7, #32]
 8007078:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800707a:	4b3f      	ldr	r3, [pc, #252]	; (8007178 <netif_add+0x18c>)
 800707c:	781a      	ldrb	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007088:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	68b9      	ldr	r1, [r7, #8]
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f000 f913 	bl	80072bc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	4798      	blx	r3
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <netif_add+0xba>
    return NULL;
 80070a2:	2300      	movs	r3, #0
 80070a4:	e058      	b.n	8007158 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80070ac:	2bff      	cmp	r3, #255	; 0xff
 80070ae:	d103      	bne.n	80070b8 <netif_add+0xcc>
        netif->num = 0;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80070b8:	2300      	movs	r3, #0
 80070ba:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80070bc:	4b2f      	ldr	r3, [pc, #188]	; (800717c <netif_add+0x190>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	617b      	str	r3, [r7, #20]
 80070c2:	e02b      	b.n	800711c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d106      	bne.n	80070da <netif_add+0xee>
 80070cc:	4b24      	ldr	r3, [pc, #144]	; (8007160 <netif_add+0x174>)
 80070ce:	f240 128b 	movw	r2, #395	; 0x18b
 80070d2:	492b      	ldr	r1, [pc, #172]	; (8007180 <netif_add+0x194>)
 80070d4:	4824      	ldr	r0, [pc, #144]	; (8007168 <netif_add+0x17c>)
 80070d6:	f00a f809 	bl	80110ec <iprintf>
        num_netifs++;
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	3301      	adds	r3, #1
 80070de:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	2bff      	cmp	r3, #255	; 0xff
 80070e4:	dd06      	ble.n	80070f4 <netif_add+0x108>
 80070e6:	4b1e      	ldr	r3, [pc, #120]	; (8007160 <netif_add+0x174>)
 80070e8:	f240 128d 	movw	r2, #397	; 0x18d
 80070ec:	4925      	ldr	r1, [pc, #148]	; (8007184 <netif_add+0x198>)
 80070ee:	481e      	ldr	r0, [pc, #120]	; (8007168 <netif_add+0x17c>)
 80070f0:	f009 fffc 	bl	80110ec <iprintf>
        if (netif2->num == netif->num) {
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007100:	429a      	cmp	r2, r3
 8007102:	d108      	bne.n	8007116 <netif_add+0x12a>
          netif->num++;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800710a:	3301      	adds	r3, #1
 800710c:	b2da      	uxtb	r2, r3
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8007114:	e005      	b.n	8007122 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	617b      	str	r3, [r7, #20]
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1d0      	bne.n	80070c4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1be      	bne.n	80070a6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800712e:	2bfe      	cmp	r3, #254	; 0xfe
 8007130:	d103      	bne.n	800713a <netif_add+0x14e>
    netif_num = 0;
 8007132:	4b11      	ldr	r3, [pc, #68]	; (8007178 <netif_add+0x18c>)
 8007134:	2200      	movs	r2, #0
 8007136:	701a      	strb	r2, [r3, #0]
 8007138:	e006      	b.n	8007148 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007140:	3301      	adds	r3, #1
 8007142:	b2da      	uxtb	r2, r3
 8007144:	4b0c      	ldr	r3, [pc, #48]	; (8007178 <netif_add+0x18c>)
 8007146:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007148:	4b0c      	ldr	r3, [pc, #48]	; (800717c <netif_add+0x190>)
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007150:	4a0a      	ldr	r2, [pc, #40]	; (800717c <netif_add+0x190>)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007156:	68fb      	ldr	r3, [r7, #12]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3718      	adds	r7, #24
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	080126c4 	.word	0x080126c4
 8007164:	08012758 	.word	0x08012758
 8007168:	08012714 	.word	0x08012714
 800716c:	08012774 	.word	0x08012774
 8007170:	08014dfc 	.word	0x08014dfc
 8007174:	08007597 	.word	0x08007597
 8007178:	20008824 	.word	0x20008824
 800717c:	2000881c 	.word	0x2000881c
 8007180:	08012798 	.word	0x08012798
 8007184:	080127ac 	.word	0x080127ac

08007188 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007192:	6839      	ldr	r1, [r7, #0]
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f002 fde3 	bl	8009d60 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800719a:	6839      	ldr	r1, [r7, #0]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f007 fb1f 	bl	800e7e0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80071a2:	bf00      	nop
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
	...

080071ac <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d106      	bne.n	80071cc <netif_do_set_ipaddr+0x20>
 80071be:	4b1d      	ldr	r3, [pc, #116]	; (8007234 <netif_do_set_ipaddr+0x88>)
 80071c0:	f240 12cb 	movw	r2, #459	; 0x1cb
 80071c4:	491c      	ldr	r1, [pc, #112]	; (8007238 <netif_do_set_ipaddr+0x8c>)
 80071c6:	481d      	ldr	r0, [pc, #116]	; (800723c <netif_do_set_ipaddr+0x90>)
 80071c8:	f009 ff90 	bl	80110ec <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d106      	bne.n	80071e0 <netif_do_set_ipaddr+0x34>
 80071d2:	4b18      	ldr	r3, [pc, #96]	; (8007234 <netif_do_set_ipaddr+0x88>)
 80071d4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80071d8:	4917      	ldr	r1, [pc, #92]	; (8007238 <netif_do_set_ipaddr+0x8c>)
 80071da:	4818      	ldr	r0, [pc, #96]	; (800723c <netif_do_set_ipaddr+0x90>)
 80071dc:	f009 ff86 	bl	80110ec <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	3304      	adds	r3, #4
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d01c      	beq.n	8007228 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	3304      	adds	r3, #4
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80071fe:	f107 0314 	add.w	r3, r7, #20
 8007202:	4619      	mov	r1, r3
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7ff ffbf 	bl	8007188 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <netif_do_set_ipaddr+0x6a>
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	e000      	b.n	8007218 <netif_do_set_ipaddr+0x6c>
 8007216:	2300      	movs	r3, #0
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800721c:	2101      	movs	r1, #1
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f000 f8d2 	bl	80073c8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007224:	2301      	movs	r3, #1
 8007226:	e000      	b.n	800722a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	080126c4 	.word	0x080126c4
 8007238:	080127dc 	.word	0x080127dc
 800723c:	08012714 	.word	0x08012714

08007240 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	3308      	adds	r3, #8
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	429a      	cmp	r2, r3
 8007258:	d00a      	beq.n	8007270 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d002      	beq.n	8007266 <netif_do_set_netmask+0x26>
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	e000      	b.n	8007268 <netif_do_set_netmask+0x28>
 8007266:	2300      	movs	r3, #0
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800726c:	2301      	movs	r3, #1
 800726e:	e000      	b.n	8007272 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3714      	adds	r7, #20
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800727e:	b480      	push	{r7}
 8007280:	b085      	sub	sp, #20
 8007282:	af00      	add	r7, sp, #0
 8007284:	60f8      	str	r0, [r7, #12]
 8007286:	60b9      	str	r1, [r7, #8]
 8007288:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	330c      	adds	r3, #12
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	429a      	cmp	r2, r3
 8007296:	d00a      	beq.n	80072ae <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <netif_do_set_gw+0x26>
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	e000      	b.n	80072a6 <netif_do_set_gw+0x28>
 80072a4:	2300      	movs	r3, #0
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80072aa:	2301      	movs	r3, #1
 80072ac:	e000      	b.n	80072b0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3714      	adds	r7, #20
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b088      	sub	sp, #32
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
 80072c8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80072ca:	2300      	movs	r3, #0
 80072cc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80072ce:	2300      	movs	r3, #0
 80072d0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d101      	bne.n	80072dc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80072d8:	4b1c      	ldr	r3, [pc, #112]	; (800734c <netif_set_addr+0x90>)
 80072da:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80072e2:	4b1a      	ldr	r3, [pc, #104]	; (800734c <netif_set_addr+0x90>)
 80072e4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d101      	bne.n	80072f0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80072ec:	4b17      	ldr	r3, [pc, #92]	; (800734c <netif_set_addr+0x90>)
 80072ee:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d003      	beq.n	80072fe <netif_set_addr+0x42>
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <netif_set_addr+0x46>
 80072fe:	2301      	movs	r3, #1
 8007300:	e000      	b.n	8007304 <netif_set_addr+0x48>
 8007302:	2300      	movs	r3, #0
 8007304:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d006      	beq.n	800731a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800730c:	f107 0310 	add.w	r3, r7, #16
 8007310:	461a      	mov	r2, r3
 8007312:	68b9      	ldr	r1, [r7, #8]
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f7ff ff49 	bl	80071ac <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800731a:	69fa      	ldr	r2, [r7, #28]
 800731c:	6879      	ldr	r1, [r7, #4]
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f7ff ff8e 	bl	8007240 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007324:	69ba      	ldr	r2, [r7, #24]
 8007326:	6839      	ldr	r1, [r7, #0]
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f7ff ffa8 	bl	800727e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d106      	bne.n	8007342 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007334:	f107 0310 	add.w	r3, r7, #16
 8007338:	461a      	mov	r2, r3
 800733a:	68b9      	ldr	r1, [r7, #8]
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f7ff ff35 	bl	80071ac <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007342:	bf00      	nop
 8007344:	3720      	adds	r7, #32
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	08014dfc 	.word	0x08014dfc

08007350 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007358:	4a04      	ldr	r2, [pc, #16]	; (800736c <netif_set_default+0x1c>)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800735e:	bf00      	nop
 8007360:	370c      	adds	r7, #12
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	20008820 	.word	0x20008820

08007370 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d107      	bne.n	800738e <netif_set_up+0x1e>
 800737e:	4b0f      	ldr	r3, [pc, #60]	; (80073bc <netif_set_up+0x4c>)
 8007380:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007384:	490e      	ldr	r1, [pc, #56]	; (80073c0 <netif_set_up+0x50>)
 8007386:	480f      	ldr	r0, [pc, #60]	; (80073c4 <netif_set_up+0x54>)
 8007388:	f009 feb0 	bl	80110ec <iprintf>
 800738c:	e013      	b.n	80073b6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	2b00      	cmp	r3, #0
 800739a:	d10c      	bne.n	80073b6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80073a2:	f043 0301 	orr.w	r3, r3, #1
 80073a6:	b2da      	uxtb	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80073ae:	2103      	movs	r1, #3
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f809 	bl	80073c8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80073b6:	3708      	adds	r7, #8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	080126c4 	.word	0x080126c4
 80073c0:	0801284c 	.word	0x0801284c
 80073c4:	08012714 	.word	0x08012714

080073c8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	460b      	mov	r3, r1
 80073d2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d106      	bne.n	80073e8 <netif_issue_reports+0x20>
 80073da:	4b18      	ldr	r3, [pc, #96]	; (800743c <netif_issue_reports+0x74>)
 80073dc:	f240 326d 	movw	r2, #877	; 0x36d
 80073e0:	4917      	ldr	r1, [pc, #92]	; (8007440 <netif_issue_reports+0x78>)
 80073e2:	4818      	ldr	r0, [pc, #96]	; (8007444 <netif_issue_reports+0x7c>)
 80073e4:	f009 fe82 	bl	80110ec <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80073ee:	f003 0304 	and.w	r3, r3, #4
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d01e      	beq.n	8007434 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80073fc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007400:	2b00      	cmp	r3, #0
 8007402:	d017      	beq.n	8007434 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007404:	78fb      	ldrb	r3, [r7, #3]
 8007406:	f003 0301 	and.w	r3, r3, #1
 800740a:	2b00      	cmp	r3, #0
 800740c:	d013      	beq.n	8007436 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	3304      	adds	r3, #4
 8007412:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00e      	beq.n	8007436 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800741e:	f003 0308 	and.w	r3, r3, #8
 8007422:	2b00      	cmp	r3, #0
 8007424:	d007      	beq.n	8007436 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	3304      	adds	r3, #4
 800742a:	4619      	mov	r1, r3
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f008 f941 	bl	800f6b4 <etharp_request>
 8007432:	e000      	b.n	8007436 <netif_issue_reports+0x6e>
    return;
 8007434:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	080126c4 	.word	0x080126c4
 8007440:	08012868 	.word	0x08012868
 8007444:	08012714 	.word	0x08012714

08007448 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d107      	bne.n	8007466 <netif_set_down+0x1e>
 8007456:	4b12      	ldr	r3, [pc, #72]	; (80074a0 <netif_set_down+0x58>)
 8007458:	f240 329b 	movw	r2, #923	; 0x39b
 800745c:	4911      	ldr	r1, [pc, #68]	; (80074a4 <netif_set_down+0x5c>)
 800745e:	4812      	ldr	r0, [pc, #72]	; (80074a8 <netif_set_down+0x60>)
 8007460:	f009 fe44 	bl	80110ec <iprintf>
 8007464:	e019      	b.n	800749a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800746c:	f003 0301 	and.w	r3, r3, #1
 8007470:	2b00      	cmp	r3, #0
 8007472:	d012      	beq.n	800749a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800747a:	f023 0301 	bic.w	r3, r3, #1
 800747e:	b2da      	uxtb	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800748c:	f003 0308 	and.w	r3, r3, #8
 8007490:	2b00      	cmp	r3, #0
 8007492:	d002      	beq.n	800749a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f007 fccb 	bl	800ee30 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	080126c4 	.word	0x080126c4
 80074a4:	0801288c 	.word	0x0801288c
 80074a8:	08012714 	.word	0x08012714

080074ac <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d107      	bne.n	80074ca <netif_set_link_up+0x1e>
 80074ba:	4b13      	ldr	r3, [pc, #76]	; (8007508 <netif_set_link_up+0x5c>)
 80074bc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80074c0:	4912      	ldr	r1, [pc, #72]	; (800750c <netif_set_link_up+0x60>)
 80074c2:	4813      	ldr	r0, [pc, #76]	; (8007510 <netif_set_link_up+0x64>)
 80074c4:	f009 fe12 	bl	80110ec <iprintf>
 80074c8:	e01b      	b.n	8007502 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d114      	bne.n	8007502 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80074de:	f043 0304 	orr.w	r3, r3, #4
 80074e2:	b2da      	uxtb	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80074ea:	2103      	movs	r1, #3
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f7ff ff6b 	bl	80073c8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	69db      	ldr	r3, [r3, #28]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d003      	beq.n	8007502 <netif_set_link_up+0x56>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	69db      	ldr	r3, [r3, #28]
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	080126c4 	.word	0x080126c4
 800750c:	080128ac 	.word	0x080128ac
 8007510:	08012714 	.word	0x08012714

08007514 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d107      	bne.n	8007532 <netif_set_link_down+0x1e>
 8007522:	4b11      	ldr	r3, [pc, #68]	; (8007568 <netif_set_link_down+0x54>)
 8007524:	f240 4206 	movw	r2, #1030	; 0x406
 8007528:	4910      	ldr	r1, [pc, #64]	; (800756c <netif_set_link_down+0x58>)
 800752a:	4811      	ldr	r0, [pc, #68]	; (8007570 <netif_set_link_down+0x5c>)
 800752c:	f009 fdde 	bl	80110ec <iprintf>
 8007530:	e017      	b.n	8007562 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007538:	f003 0304 	and.w	r3, r3, #4
 800753c:	2b00      	cmp	r3, #0
 800753e:	d010      	beq.n	8007562 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007546:	f023 0304 	bic.w	r3, r3, #4
 800754a:	b2da      	uxtb	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d003      	beq.n	8007562 <netif_set_link_down+0x4e>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	080126c4 	.word	0x080126c4
 800756c:	080128d0 	.word	0x080128d0
 8007570:	08012714 	.word	0x08012714

08007574 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d002      	beq.n	800758a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	61da      	str	r2, [r3, #28]
  }
}
 800758a:	bf00      	nop
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007596:	b480      	push	{r7}
 8007598:	b085      	sub	sp, #20
 800759a:	af00      	add	r7, sp, #0
 800759c:	60f8      	str	r0, [r7, #12]
 800759e:	60b9      	str	r1, [r7, #8]
 80075a0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80075a2:	f06f 030b 	mvn.w	r3, #11
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3714      	adds	r7, #20
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
	...

080075b4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	4603      	mov	r3, r0
 80075bc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80075be:	79fb      	ldrb	r3, [r7, #7]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d013      	beq.n	80075ec <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80075c4:	4b0d      	ldr	r3, [pc, #52]	; (80075fc <netif_get_by_index+0x48>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	60fb      	str	r3, [r7, #12]
 80075ca:	e00c      	b.n	80075e6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075d2:	3301      	adds	r3, #1
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	79fa      	ldrb	r2, [r7, #7]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d101      	bne.n	80075e0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	e006      	b.n	80075ee <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	60fb      	str	r3, [r7, #12]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1ef      	bne.n	80075cc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3714      	adds	r7, #20
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	2000881c 	.word	0x2000881c

08007600 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007606:	4b0c      	ldr	r3, [pc, #48]	; (8007638 <pbuf_free_ooseq+0x38>)
 8007608:	2200      	movs	r2, #0
 800760a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800760c:	4b0b      	ldr	r3, [pc, #44]	; (800763c <pbuf_free_ooseq+0x3c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	607b      	str	r3, [r7, #4]
 8007612:	e00a      	b.n	800762a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007618:	2b00      	cmp	r3, #0
 800761a:	d003      	beq.n	8007624 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f002 fbdd 	bl	8009ddc <tcp_free_ooseq>
      return;
 8007622:	e005      	b.n	8007630 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	607b      	str	r3, [r7, #4]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1f1      	bne.n	8007614 <pbuf_free_ooseq+0x14>
    }
  }
}
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	20008825 	.word	0x20008825
 800763c:	20008834 	.word	0x20008834

08007640 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007640:	b480      	push	{r7}
 8007642:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007644:	4b03      	ldr	r3, [pc, #12]	; (8007654 <pbuf_pool_is_empty+0x14>)
 8007646:	2201      	movs	r2, #1
 8007648:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800764a:	bf00      	nop
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	20008825 	.word	0x20008825

08007658 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	4611      	mov	r1, r2
 8007664:	461a      	mov	r2, r3
 8007666:	460b      	mov	r3, r1
 8007668:	80fb      	strh	r3, [r7, #6]
 800766a:	4613      	mov	r3, r2
 800766c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	88fa      	ldrh	r2, [r7, #6]
 800767e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	88ba      	ldrh	r2, [r7, #4]
 8007684:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007686:	8b3b      	ldrh	r3, [r7, #24]
 8007688:	b2da      	uxtb	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	7f3a      	ldrb	r2, [r7, #28]
 8007692:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2201      	movs	r2, #1
 8007698:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	73da      	strb	r2, [r3, #15]
}
 80076a0:	bf00      	nop
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b08c      	sub	sp, #48	; 0x30
 80076b0:	af02      	add	r7, sp, #8
 80076b2:	4603      	mov	r3, r0
 80076b4:	71fb      	strb	r3, [r7, #7]
 80076b6:	460b      	mov	r3, r1
 80076b8:	80bb      	strh	r3, [r7, #4]
 80076ba:	4613      	mov	r3, r2
 80076bc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80076be:	79fb      	ldrb	r3, [r7, #7]
 80076c0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80076c2:	887b      	ldrh	r3, [r7, #2]
 80076c4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80076c8:	d07f      	beq.n	80077ca <pbuf_alloc+0x11e>
 80076ca:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80076ce:	f300 80c8 	bgt.w	8007862 <pbuf_alloc+0x1b6>
 80076d2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80076d6:	d010      	beq.n	80076fa <pbuf_alloc+0x4e>
 80076d8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80076dc:	f300 80c1 	bgt.w	8007862 <pbuf_alloc+0x1b6>
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d002      	beq.n	80076ea <pbuf_alloc+0x3e>
 80076e4:	2b41      	cmp	r3, #65	; 0x41
 80076e6:	f040 80bc 	bne.w	8007862 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80076ea:	887a      	ldrh	r2, [r7, #2]
 80076ec:	88bb      	ldrh	r3, [r7, #4]
 80076ee:	4619      	mov	r1, r3
 80076f0:	2000      	movs	r0, #0
 80076f2:	f000 f8d1 	bl	8007898 <pbuf_alloc_reference>
 80076f6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80076f8:	e0bd      	b.n	8007876 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80076fa:	2300      	movs	r3, #0
 80076fc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80076fe:	2300      	movs	r3, #0
 8007700:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8007702:	88bb      	ldrh	r3, [r7, #4]
 8007704:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007706:	2008      	movs	r0, #8
 8007708:	f7ff fbce 	bl	8006ea8 <memp_malloc>
 800770c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d109      	bne.n	8007728 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8007714:	f7ff ff94 	bl	8007640 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771a:	2b00      	cmp	r3, #0
 800771c:	d002      	beq.n	8007724 <pbuf_alloc+0x78>
            pbuf_free(p);
 800771e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007720:	f000 faa8 	bl	8007c74 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007724:	2300      	movs	r3, #0
 8007726:	e0a7      	b.n	8007878 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007728:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800772a:	3303      	adds	r3, #3
 800772c:	b29b      	uxth	r3, r3
 800772e:	f023 0303 	bic.w	r3, r3, #3
 8007732:	b29b      	uxth	r3, r3
 8007734:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8007738:	b29b      	uxth	r3, r3
 800773a:	8b7a      	ldrh	r2, [r7, #26]
 800773c:	4293      	cmp	r3, r2
 800773e:	bf28      	it	cs
 8007740:	4613      	movcs	r3, r2
 8007742:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007744:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007746:	3310      	adds	r3, #16
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	4413      	add	r3, r2
 800774c:	3303      	adds	r3, #3
 800774e:	f023 0303 	bic.w	r3, r3, #3
 8007752:	4618      	mov	r0, r3
 8007754:	89f9      	ldrh	r1, [r7, #14]
 8007756:	8b7a      	ldrh	r2, [r7, #26]
 8007758:	2300      	movs	r3, #0
 800775a:	9301      	str	r3, [sp, #4]
 800775c:	887b      	ldrh	r3, [r7, #2]
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	460b      	mov	r3, r1
 8007762:	4601      	mov	r1, r0
 8007764:	6938      	ldr	r0, [r7, #16]
 8007766:	f7ff ff77 	bl	8007658 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f003 0303 	and.w	r3, r3, #3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d006      	beq.n	8007784 <pbuf_alloc+0xd8>
 8007776:	4b42      	ldr	r3, [pc, #264]	; (8007880 <pbuf_alloc+0x1d4>)
 8007778:	f44f 7280 	mov.w	r2, #256	; 0x100
 800777c:	4941      	ldr	r1, [pc, #260]	; (8007884 <pbuf_alloc+0x1d8>)
 800777e:	4842      	ldr	r0, [pc, #264]	; (8007888 <pbuf_alloc+0x1dc>)
 8007780:	f009 fcb4 	bl	80110ec <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007784:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007786:	3303      	adds	r3, #3
 8007788:	f023 0303 	bic.w	r3, r3, #3
 800778c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8007790:	d106      	bne.n	80077a0 <pbuf_alloc+0xf4>
 8007792:	4b3b      	ldr	r3, [pc, #236]	; (8007880 <pbuf_alloc+0x1d4>)
 8007794:	f44f 7281 	mov.w	r2, #258	; 0x102
 8007798:	493c      	ldr	r1, [pc, #240]	; (800788c <pbuf_alloc+0x1e0>)
 800779a:	483b      	ldr	r0, [pc, #236]	; (8007888 <pbuf_alloc+0x1dc>)
 800779c:	f009 fca6 	bl	80110ec <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80077a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d102      	bne.n	80077ac <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	627b      	str	r3, [r7, #36]	; 0x24
 80077aa:	e002      	b.n	80077b2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80077b6:	8b7a      	ldrh	r2, [r7, #26]
 80077b8:	89fb      	ldrh	r3, [r7, #14]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80077be:	2300      	movs	r3, #0
 80077c0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80077c2:	8b7b      	ldrh	r3, [r7, #26]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d19e      	bne.n	8007706 <pbuf_alloc+0x5a>
      break;
 80077c8:	e055      	b.n	8007876 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80077ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80077cc:	3303      	adds	r3, #3
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	f023 0303 	bic.w	r3, r3, #3
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	88bb      	ldrh	r3, [r7, #4]
 80077d8:	3303      	adds	r3, #3
 80077da:	b29b      	uxth	r3, r3
 80077dc:	f023 0303 	bic.w	r3, r3, #3
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	4413      	add	r3, r2
 80077e4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80077e6:	8b3b      	ldrh	r3, [r7, #24]
 80077e8:	3310      	adds	r3, #16
 80077ea:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80077ec:	8b3a      	ldrh	r2, [r7, #24]
 80077ee:	88bb      	ldrh	r3, [r7, #4]
 80077f0:	3303      	adds	r3, #3
 80077f2:	f023 0303 	bic.w	r3, r3, #3
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d306      	bcc.n	8007808 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80077fa:	8afa      	ldrh	r2, [r7, #22]
 80077fc:	88bb      	ldrh	r3, [r7, #4]
 80077fe:	3303      	adds	r3, #3
 8007800:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007804:	429a      	cmp	r2, r3
 8007806:	d201      	bcs.n	800780c <pbuf_alloc+0x160>
        return NULL;
 8007808:	2300      	movs	r3, #0
 800780a:	e035      	b.n	8007878 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800780c:	8afb      	ldrh	r3, [r7, #22]
 800780e:	4618      	mov	r0, r3
 8007810:	f7ff f9ba 	bl	8006b88 <mem_malloc>
 8007814:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8007816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007818:	2b00      	cmp	r3, #0
 800781a:	d101      	bne.n	8007820 <pbuf_alloc+0x174>
        return NULL;
 800781c:	2300      	movs	r3, #0
 800781e:	e02b      	b.n	8007878 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007820:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007822:	3310      	adds	r3, #16
 8007824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007826:	4413      	add	r3, r2
 8007828:	3303      	adds	r3, #3
 800782a:	f023 0303 	bic.w	r3, r3, #3
 800782e:	4618      	mov	r0, r3
 8007830:	88b9      	ldrh	r1, [r7, #4]
 8007832:	88ba      	ldrh	r2, [r7, #4]
 8007834:	2300      	movs	r3, #0
 8007836:	9301      	str	r3, [sp, #4]
 8007838:	887b      	ldrh	r3, [r7, #2]
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	460b      	mov	r3, r1
 800783e:	4601      	mov	r1, r0
 8007840:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007842:	f7ff ff09 	bl	8007658 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	f003 0303 	and.w	r3, r3, #3
 800784e:	2b00      	cmp	r3, #0
 8007850:	d010      	beq.n	8007874 <pbuf_alloc+0x1c8>
 8007852:	4b0b      	ldr	r3, [pc, #44]	; (8007880 <pbuf_alloc+0x1d4>)
 8007854:	f44f 7291 	mov.w	r2, #290	; 0x122
 8007858:	490d      	ldr	r1, [pc, #52]	; (8007890 <pbuf_alloc+0x1e4>)
 800785a:	480b      	ldr	r0, [pc, #44]	; (8007888 <pbuf_alloc+0x1dc>)
 800785c:	f009 fc46 	bl	80110ec <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007860:	e008      	b.n	8007874 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007862:	4b07      	ldr	r3, [pc, #28]	; (8007880 <pbuf_alloc+0x1d4>)
 8007864:	f240 1227 	movw	r2, #295	; 0x127
 8007868:	490a      	ldr	r1, [pc, #40]	; (8007894 <pbuf_alloc+0x1e8>)
 800786a:	4807      	ldr	r0, [pc, #28]	; (8007888 <pbuf_alloc+0x1dc>)
 800786c:	f009 fc3e 	bl	80110ec <iprintf>
      return NULL;
 8007870:	2300      	movs	r3, #0
 8007872:	e001      	b.n	8007878 <pbuf_alloc+0x1cc>
      break;
 8007874:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007878:	4618      	mov	r0, r3
 800787a:	3728      	adds	r7, #40	; 0x28
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	080128f4 	.word	0x080128f4
 8007884:	08012924 	.word	0x08012924
 8007888:	08012954 	.word	0x08012954
 800788c:	0801297c 	.word	0x0801297c
 8007890:	080129b0 	.word	0x080129b0
 8007894:	080129dc 	.word	0x080129dc

08007898 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af02      	add	r7, sp, #8
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	460b      	mov	r3, r1
 80078a2:	807b      	strh	r3, [r7, #2]
 80078a4:	4613      	mov	r3, r2
 80078a6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80078a8:	883b      	ldrh	r3, [r7, #0]
 80078aa:	2b41      	cmp	r3, #65	; 0x41
 80078ac:	d009      	beq.n	80078c2 <pbuf_alloc_reference+0x2a>
 80078ae:	883b      	ldrh	r3, [r7, #0]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d006      	beq.n	80078c2 <pbuf_alloc_reference+0x2a>
 80078b4:	4b0f      	ldr	r3, [pc, #60]	; (80078f4 <pbuf_alloc_reference+0x5c>)
 80078b6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80078ba:	490f      	ldr	r1, [pc, #60]	; (80078f8 <pbuf_alloc_reference+0x60>)
 80078bc:	480f      	ldr	r0, [pc, #60]	; (80078fc <pbuf_alloc_reference+0x64>)
 80078be:	f009 fc15 	bl	80110ec <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80078c2:	2007      	movs	r0, #7
 80078c4:	f7ff faf0 	bl	8006ea8 <memp_malloc>
 80078c8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d101      	bne.n	80078d4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80078d0:	2300      	movs	r3, #0
 80078d2:	e00b      	b.n	80078ec <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80078d4:	8879      	ldrh	r1, [r7, #2]
 80078d6:	887a      	ldrh	r2, [r7, #2]
 80078d8:	2300      	movs	r3, #0
 80078da:	9301      	str	r3, [sp, #4]
 80078dc:	883b      	ldrh	r3, [r7, #0]
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	460b      	mov	r3, r1
 80078e2:	6879      	ldr	r1, [r7, #4]
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f7ff feb7 	bl	8007658 <pbuf_init_alloced_pbuf>
  return p;
 80078ea:	68fb      	ldr	r3, [r7, #12]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	080128f4 	.word	0x080128f4
 80078f8:	080129f8 	.word	0x080129f8
 80078fc:	08012954 	.word	0x08012954

08007900 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b088      	sub	sp, #32
 8007904:	af02      	add	r7, sp, #8
 8007906:	607b      	str	r3, [r7, #4]
 8007908:	4603      	mov	r3, r0
 800790a:	73fb      	strb	r3, [r7, #15]
 800790c:	460b      	mov	r3, r1
 800790e:	81bb      	strh	r3, [r7, #12]
 8007910:	4613      	mov	r3, r2
 8007912:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8007914:	7bfb      	ldrb	r3, [r7, #15]
 8007916:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007918:	8a7b      	ldrh	r3, [r7, #18]
 800791a:	3303      	adds	r3, #3
 800791c:	f023 0203 	bic.w	r2, r3, #3
 8007920:	89bb      	ldrh	r3, [r7, #12]
 8007922:	441a      	add	r2, r3
 8007924:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007926:	429a      	cmp	r2, r3
 8007928:	d901      	bls.n	800792e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800792a:	2300      	movs	r3, #0
 800792c:	e018      	b.n	8007960 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d007      	beq.n	8007944 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007934:	8a7b      	ldrh	r3, [r7, #18]
 8007936:	3303      	adds	r3, #3
 8007938:	f023 0303 	bic.w	r3, r3, #3
 800793c:	6a3a      	ldr	r2, [r7, #32]
 800793e:	4413      	add	r3, r2
 8007940:	617b      	str	r3, [r7, #20]
 8007942:	e001      	b.n	8007948 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007944:	2300      	movs	r3, #0
 8007946:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	89b9      	ldrh	r1, [r7, #12]
 800794c:	89ba      	ldrh	r2, [r7, #12]
 800794e:	2302      	movs	r3, #2
 8007950:	9301      	str	r3, [sp, #4]
 8007952:	897b      	ldrh	r3, [r7, #10]
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	460b      	mov	r3, r1
 8007958:	6979      	ldr	r1, [r7, #20]
 800795a:	f7ff fe7d 	bl	8007658 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800795e:	687b      	ldr	r3, [r7, #4]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3718      	adds	r7, #24
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	460b      	mov	r3, r1
 8007972:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d106      	bne.n	8007988 <pbuf_realloc+0x20>
 800797a:	4b3a      	ldr	r3, [pc, #232]	; (8007a64 <pbuf_realloc+0xfc>)
 800797c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8007980:	4939      	ldr	r1, [pc, #228]	; (8007a68 <pbuf_realloc+0x100>)
 8007982:	483a      	ldr	r0, [pc, #232]	; (8007a6c <pbuf_realloc+0x104>)
 8007984:	f009 fbb2 	bl	80110ec <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	891b      	ldrh	r3, [r3, #8]
 800798c:	887a      	ldrh	r2, [r7, #2]
 800798e:	429a      	cmp	r2, r3
 8007990:	d263      	bcs.n	8007a5a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	891a      	ldrh	r2, [r3, #8]
 8007996:	887b      	ldrh	r3, [r7, #2]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800799c:	887b      	ldrh	r3, [r7, #2]
 800799e:	817b      	strh	r3, [r7, #10]
  q = p;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80079a4:	e018      	b.n	80079d8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	895b      	ldrh	r3, [r3, #10]
 80079aa:	897a      	ldrh	r2, [r7, #10]
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	891a      	ldrh	r2, [r3, #8]
 80079b4:	893b      	ldrh	r3, [r7, #8]
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d106      	bne.n	80079d8 <pbuf_realloc+0x70>
 80079ca:	4b26      	ldr	r3, [pc, #152]	; (8007a64 <pbuf_realloc+0xfc>)
 80079cc:	f240 12af 	movw	r2, #431	; 0x1af
 80079d0:	4927      	ldr	r1, [pc, #156]	; (8007a70 <pbuf_realloc+0x108>)
 80079d2:	4826      	ldr	r0, [pc, #152]	; (8007a6c <pbuf_realloc+0x104>)
 80079d4:	f009 fb8a 	bl	80110ec <iprintf>
  while (rem_len > q->len) {
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	895b      	ldrh	r3, [r3, #10]
 80079dc:	897a      	ldrh	r2, [r7, #10]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d8e1      	bhi.n	80079a6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	7b1b      	ldrb	r3, [r3, #12]
 80079e6:	f003 030f 	and.w	r3, r3, #15
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d121      	bne.n	8007a32 <pbuf_realloc+0xca>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	895b      	ldrh	r3, [r3, #10]
 80079f2:	897a      	ldrh	r2, [r7, #10]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d01c      	beq.n	8007a32 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	7b5b      	ldrb	r3, [r3, #13]
 80079fc:	f003 0302 	and.w	r3, r3, #2
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d116      	bne.n	8007a32 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	685a      	ldr	r2, [r3, #4]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	897b      	ldrh	r3, [r7, #10]
 8007a10:	4413      	add	r3, r2
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	4619      	mov	r1, r3
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f7fe ffba 	bl	8006990 <mem_trim>
 8007a1c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d106      	bne.n	8007a32 <pbuf_realloc+0xca>
 8007a24:	4b0f      	ldr	r3, [pc, #60]	; (8007a64 <pbuf_realloc+0xfc>)
 8007a26:	f240 12bd 	movw	r2, #445	; 0x1bd
 8007a2a:	4912      	ldr	r1, [pc, #72]	; (8007a74 <pbuf_realloc+0x10c>)
 8007a2c:	480f      	ldr	r0, [pc, #60]	; (8007a6c <pbuf_realloc+0x104>)
 8007a2e:	f009 fb5d 	bl	80110ec <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	897a      	ldrh	r2, [r7, #10]
 8007a36:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	895a      	ldrh	r2, [r3, #10]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d004      	beq.n	8007a52 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f000 f911 	bl	8007c74 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	601a      	str	r2, [r3, #0]
 8007a58:	e000      	b.n	8007a5c <pbuf_realloc+0xf4>
    return;
 8007a5a:	bf00      	nop

}
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	080128f4 	.word	0x080128f4
 8007a68:	08012a0c 	.word	0x08012a0c
 8007a6c:	08012954 	.word	0x08012954
 8007a70:	08012a24 	.word	0x08012a24
 8007a74:	08012a3c 	.word	0x08012a3c

08007a78 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b086      	sub	sp, #24
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	4613      	mov	r3, r2
 8007a84:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d106      	bne.n	8007a9a <pbuf_add_header_impl+0x22>
 8007a8c:	4b2b      	ldr	r3, [pc, #172]	; (8007b3c <pbuf_add_header_impl+0xc4>)
 8007a8e:	f240 12df 	movw	r2, #479	; 0x1df
 8007a92:	492b      	ldr	r1, [pc, #172]	; (8007b40 <pbuf_add_header_impl+0xc8>)
 8007a94:	482b      	ldr	r0, [pc, #172]	; (8007b44 <pbuf_add_header_impl+0xcc>)
 8007a96:	f009 fb29 	bl	80110ec <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d003      	beq.n	8007aa8 <pbuf_add_header_impl+0x30>
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aa6:	d301      	bcc.n	8007aac <pbuf_add_header_impl+0x34>
    return 1;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e043      	b.n	8007b34 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d101      	bne.n	8007ab6 <pbuf_add_header_impl+0x3e>
    return 0;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	e03e      	b.n	8007b34 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	891a      	ldrh	r2, [r3, #8]
 8007abe:	8a7b      	ldrh	r3, [r7, #18]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	8a7a      	ldrh	r2, [r7, #18]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d901      	bls.n	8007ace <pbuf_add_header_impl+0x56>
    return 1;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e032      	b.n	8007b34 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	7b1b      	ldrb	r3, [r3, #12]
 8007ad2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007ad4:	8a3b      	ldrh	r3, [r7, #16]
 8007ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00c      	beq.n	8007af8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	425b      	negs	r3, r3
 8007ae6:	4413      	add	r3, r2
 8007ae8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	3310      	adds	r3, #16
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d20d      	bcs.n	8007b10 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e01d      	b.n	8007b34 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8007af8:	79fb      	ldrb	r3, [r7, #7]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d006      	beq.n	8007b0c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	685a      	ldr	r2, [r3, #4]
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	425b      	negs	r3, r3
 8007b06:	4413      	add	r3, r2
 8007b08:	617b      	str	r3, [r7, #20]
 8007b0a:	e001      	b.n	8007b10 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e011      	b.n	8007b34 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	895a      	ldrh	r2, [r3, #10]
 8007b1a:	8a7b      	ldrh	r3, [r7, #18]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	891a      	ldrh	r2, [r3, #8]
 8007b28:	8a7b      	ldrh	r3, [r7, #18]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	811a      	strh	r2, [r3, #8]


  return 0;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3718      	adds	r7, #24
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	080128f4 	.word	0x080128f4
 8007b40:	08012a58 	.word	0x08012a58
 8007b44:	08012954 	.word	0x08012954

08007b48 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007b52:	2200      	movs	r2, #0
 8007b54:	6839      	ldr	r1, [r7, #0]
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7ff ff8e 	bl	8007a78 <pbuf_add_header_impl>
 8007b5c:	4603      	mov	r3, r0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
	...

08007b68 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d106      	bne.n	8007b86 <pbuf_remove_header+0x1e>
 8007b78:	4b20      	ldr	r3, [pc, #128]	; (8007bfc <pbuf_remove_header+0x94>)
 8007b7a:	f240 224b 	movw	r2, #587	; 0x24b
 8007b7e:	4920      	ldr	r1, [pc, #128]	; (8007c00 <pbuf_remove_header+0x98>)
 8007b80:	4820      	ldr	r0, [pc, #128]	; (8007c04 <pbuf_remove_header+0x9c>)
 8007b82:	f009 fab3 	bl	80110ec <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d003      	beq.n	8007b94 <pbuf_remove_header+0x2c>
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b92:	d301      	bcc.n	8007b98 <pbuf_remove_header+0x30>
    return 1;
 8007b94:	2301      	movs	r3, #1
 8007b96:	e02c      	b.n	8007bf2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <pbuf_remove_header+0x3a>
    return 0;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	e027      	b.n	8007bf2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	895b      	ldrh	r3, [r3, #10]
 8007baa:	89fa      	ldrh	r2, [r7, #14]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d908      	bls.n	8007bc2 <pbuf_remove_header+0x5a>
 8007bb0:	4b12      	ldr	r3, [pc, #72]	; (8007bfc <pbuf_remove_header+0x94>)
 8007bb2:	f240 2255 	movw	r2, #597	; 0x255
 8007bb6:	4914      	ldr	r1, [pc, #80]	; (8007c08 <pbuf_remove_header+0xa0>)
 8007bb8:	4812      	ldr	r0, [pc, #72]	; (8007c04 <pbuf_remove_header+0x9c>)
 8007bba:	f009 fa97 	bl	80110ec <iprintf>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e017      	b.n	8007bf2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	441a      	add	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	895a      	ldrh	r2, [r3, #10]
 8007bd8:	89fb      	ldrh	r3, [r7, #14]
 8007bda:	1ad3      	subs	r3, r2, r3
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	891a      	ldrh	r2, [r3, #8]
 8007be6:	89fb      	ldrh	r3, [r7, #14]
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	080128f4 	.word	0x080128f4
 8007c00:	08012a58 	.word	0x08012a58
 8007c04:	08012954 	.word	0x08012954
 8007c08:	08012a64 	.word	0x08012a64

08007c0c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	460b      	mov	r3, r1
 8007c16:	807b      	strh	r3, [r7, #2]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007c1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	da08      	bge.n	8007c36 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007c24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007c28:	425b      	negs	r3, r3
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7ff ff9b 	bl	8007b68 <pbuf_remove_header>
 8007c32:	4603      	mov	r3, r0
 8007c34:	e007      	b.n	8007c46 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007c36:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007c3a:	787a      	ldrb	r2, [r7, #1]
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f7ff ff1a 	bl	8007a78 <pbuf_add_header_impl>
 8007c44:	4603      	mov	r3, r0
  }
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b082      	sub	sp, #8
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	460b      	mov	r3, r1
 8007c58:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007c5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	4619      	mov	r1, r3
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7ff ffd2 	bl	8007c0c <pbuf_header_impl>
 8007c68:	4603      	mov	r3, r0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
	...

08007c74 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b086      	sub	sp, #24
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10b      	bne.n	8007c9a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d106      	bne.n	8007c96 <pbuf_free+0x22>
 8007c88:	4b38      	ldr	r3, [pc, #224]	; (8007d6c <pbuf_free+0xf8>)
 8007c8a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8007c8e:	4938      	ldr	r1, [pc, #224]	; (8007d70 <pbuf_free+0xfc>)
 8007c90:	4838      	ldr	r0, [pc, #224]	; (8007d74 <pbuf_free+0x100>)
 8007c92:	f009 fa2b 	bl	80110ec <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007c96:	2300      	movs	r3, #0
 8007c98:	e063      	b.n	8007d62 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007c9e:	e05c      	b.n	8007d5a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	7b9b      	ldrb	r3, [r3, #14]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d106      	bne.n	8007cb6 <pbuf_free+0x42>
 8007ca8:	4b30      	ldr	r3, [pc, #192]	; (8007d6c <pbuf_free+0xf8>)
 8007caa:	f240 22f1 	movw	r2, #753	; 0x2f1
 8007cae:	4932      	ldr	r1, [pc, #200]	; (8007d78 <pbuf_free+0x104>)
 8007cb0:	4830      	ldr	r0, [pc, #192]	; (8007d74 <pbuf_free+0x100>)
 8007cb2:	f009 fa1b 	bl	80110ec <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	7b9b      	ldrb	r3, [r3, #14]
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	739a      	strb	r2, [r3, #14]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	7b9b      	ldrb	r3, [r3, #14]
 8007cc6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007cc8:	7dbb      	ldrb	r3, [r7, #22]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d143      	bne.n	8007d56 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	7b1b      	ldrb	r3, [r3, #12]
 8007cd8:	f003 030f 	and.w	r3, r3, #15
 8007cdc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	7b5b      	ldrb	r3, [r3, #13]
 8007ce2:	f003 0302 	and.w	r3, r3, #2
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d011      	beq.n	8007d0e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d106      	bne.n	8007d04 <pbuf_free+0x90>
 8007cf6:	4b1d      	ldr	r3, [pc, #116]	; (8007d6c <pbuf_free+0xf8>)
 8007cf8:	f240 22ff 	movw	r2, #767	; 0x2ff
 8007cfc:	491f      	ldr	r1, [pc, #124]	; (8007d7c <pbuf_free+0x108>)
 8007cfe:	481d      	ldr	r0, [pc, #116]	; (8007d74 <pbuf_free+0x100>)
 8007d00:	f009 f9f4 	bl	80110ec <iprintf>
        pc->custom_free_function(p);
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	4798      	blx	r3
 8007d0c:	e01d      	b.n	8007d4a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d104      	bne.n	8007d1e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007d14:	6879      	ldr	r1, [r7, #4]
 8007d16:	2008      	movs	r0, #8
 8007d18:	f7ff f936 	bl	8006f88 <memp_free>
 8007d1c:	e015      	b.n	8007d4a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007d1e:	7bfb      	ldrb	r3, [r7, #15]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d104      	bne.n	8007d2e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8007d24:	6879      	ldr	r1, [r7, #4]
 8007d26:	2007      	movs	r0, #7
 8007d28:	f7ff f92e 	bl	8006f88 <memp_free>
 8007d2c:	e00d      	b.n	8007d4a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d103      	bne.n	8007d3c <pbuf_free+0xc8>
          mem_free(p);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f7fe fdc1 	bl	80068bc <mem_free>
 8007d3a:	e006      	b.n	8007d4a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007d3c:	4b0b      	ldr	r3, [pc, #44]	; (8007d6c <pbuf_free+0xf8>)
 8007d3e:	f240 320f 	movw	r2, #783	; 0x30f
 8007d42:	490f      	ldr	r1, [pc, #60]	; (8007d80 <pbuf_free+0x10c>)
 8007d44:	480b      	ldr	r0, [pc, #44]	; (8007d74 <pbuf_free+0x100>)
 8007d46:	f009 f9d1 	bl	80110ec <iprintf>
        }
      }
      count++;
 8007d4a:	7dfb      	ldrb	r3, [r7, #23]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	607b      	str	r3, [r7, #4]
 8007d54:	e001      	b.n	8007d5a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007d56:	2300      	movs	r3, #0
 8007d58:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d19f      	bne.n	8007ca0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3718      	adds	r7, #24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	080128f4 	.word	0x080128f4
 8007d70:	08012a58 	.word	0x08012a58
 8007d74:	08012954 	.word	0x08012954
 8007d78:	08012a84 	.word	0x08012a84
 8007d7c:	08012a9c 	.word	0x08012a9c
 8007d80:	08012ac0 	.word	0x08012ac0

08007d84 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007d90:	e005      	b.n	8007d9e <pbuf_clen+0x1a>
    ++len;
 8007d92:	89fb      	ldrh	r3, [r7, #14]
 8007d94:	3301      	adds	r3, #1
 8007d96:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1f6      	bne.n	8007d92 <pbuf_clen+0xe>
  }
  return len;
 8007da4:	89fb      	ldrh	r3, [r7, #14]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3714      	adds	r7, #20
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
	...

08007db4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d010      	beq.n	8007de4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	7b9b      	ldrb	r3, [r3, #14]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	7b9b      	ldrb	r3, [r3, #14]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d106      	bne.n	8007de4 <pbuf_ref+0x30>
 8007dd6:	4b05      	ldr	r3, [pc, #20]	; (8007dec <pbuf_ref+0x38>)
 8007dd8:	f240 3242 	movw	r2, #834	; 0x342
 8007ddc:	4904      	ldr	r1, [pc, #16]	; (8007df0 <pbuf_ref+0x3c>)
 8007dde:	4805      	ldr	r0, [pc, #20]	; (8007df4 <pbuf_ref+0x40>)
 8007de0:	f009 f984 	bl	80110ec <iprintf>
  }
}
 8007de4:	bf00      	nop
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	080128f4 	.word	0x080128f4
 8007df0:	08012ad4 	.word	0x08012ad4
 8007df4:	08012954 	.word	0x08012954

08007df8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d002      	beq.n	8007e0e <pbuf_cat+0x16>
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d107      	bne.n	8007e1e <pbuf_cat+0x26>
 8007e0e:	4b20      	ldr	r3, [pc, #128]	; (8007e90 <pbuf_cat+0x98>)
 8007e10:	f240 3259 	movw	r2, #857	; 0x359
 8007e14:	491f      	ldr	r1, [pc, #124]	; (8007e94 <pbuf_cat+0x9c>)
 8007e16:	4820      	ldr	r0, [pc, #128]	; (8007e98 <pbuf_cat+0xa0>)
 8007e18:	f009 f968 	bl	80110ec <iprintf>
 8007e1c:	e034      	b.n	8007e88 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	60fb      	str	r3, [r7, #12]
 8007e22:	e00a      	b.n	8007e3a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	891a      	ldrh	r2, [r3, #8]
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	891b      	ldrh	r3, [r3, #8]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	60fb      	str	r3, [r7, #12]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1f0      	bne.n	8007e24 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	891a      	ldrh	r2, [r3, #8]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	895b      	ldrh	r3, [r3, #10]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d006      	beq.n	8007e5c <pbuf_cat+0x64>
 8007e4e:	4b10      	ldr	r3, [pc, #64]	; (8007e90 <pbuf_cat+0x98>)
 8007e50:	f240 3262 	movw	r2, #866	; 0x362
 8007e54:	4911      	ldr	r1, [pc, #68]	; (8007e9c <pbuf_cat+0xa4>)
 8007e56:	4810      	ldr	r0, [pc, #64]	; (8007e98 <pbuf_cat+0xa0>)
 8007e58:	f009 f948 	bl	80110ec <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d006      	beq.n	8007e72 <pbuf_cat+0x7a>
 8007e64:	4b0a      	ldr	r3, [pc, #40]	; (8007e90 <pbuf_cat+0x98>)
 8007e66:	f240 3263 	movw	r2, #867	; 0x363
 8007e6a:	490d      	ldr	r1, [pc, #52]	; (8007ea0 <pbuf_cat+0xa8>)
 8007e6c:	480a      	ldr	r0, [pc, #40]	; (8007e98 <pbuf_cat+0xa0>)
 8007e6e:	f009 f93d 	bl	80110ec <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	891a      	ldrh	r2, [r3, #8]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	891b      	ldrh	r3, [r3, #8]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	683a      	ldr	r2, [r7, #0]
 8007e86:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	080128f4 	.word	0x080128f4
 8007e94:	08012ae8 	.word	0x08012ae8
 8007e98:	08012954 	.word	0x08012954
 8007e9c:	08012b20 	.word	0x08012b20
 8007ea0:	08012b50 	.word	0x08012b50

08007ea4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b086      	sub	sp, #24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	617b      	str	r3, [r7, #20]
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d008      	beq.n	8007ece <pbuf_copy+0x2a>
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d005      	beq.n	8007ece <pbuf_copy+0x2a>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	891a      	ldrh	r2, [r3, #8]
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	891b      	ldrh	r3, [r3, #8]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d209      	bcs.n	8007ee2 <pbuf_copy+0x3e>
 8007ece:	4b57      	ldr	r3, [pc, #348]	; (800802c <pbuf_copy+0x188>)
 8007ed0:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007ed4:	4956      	ldr	r1, [pc, #344]	; (8008030 <pbuf_copy+0x18c>)
 8007ed6:	4857      	ldr	r0, [pc, #348]	; (8008034 <pbuf_copy+0x190>)
 8007ed8:	f009 f908 	bl	80110ec <iprintf>
 8007edc:	f06f 030f 	mvn.w	r3, #15
 8007ee0:	e09f      	b.n	8008022 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	895b      	ldrh	r3, [r3, #10]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	1ad2      	subs	r2, r2, r3
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	895b      	ldrh	r3, [r3, #10]
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	1acb      	subs	r3, r1, r3
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d306      	bcc.n	8007f08 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	895b      	ldrh	r3, [r3, #10]
 8007efe:	461a      	mov	r2, r3
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	60fb      	str	r3, [r7, #12]
 8007f06:	e005      	b.n	8007f14 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	895b      	ldrh	r3, [r3, #10]
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685a      	ldr	r2, [r3, #4]
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	18d0      	adds	r0, r2, r3
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	685a      	ldr	r2, [r3, #4]
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	4413      	add	r3, r2
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	4619      	mov	r1, r3
 8007f28:	f009 f9f5 	bl	8011316 <memcpy>
    offset_to += len;
 8007f2c:	697a      	ldr	r2, [r7, #20]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	4413      	add	r3, r2
 8007f32:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007f34:	693a      	ldr	r2, [r7, #16]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	4413      	add	r3, r2
 8007f3a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	895b      	ldrh	r3, [r3, #10]
 8007f40:	461a      	mov	r2, r3
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d906      	bls.n	8007f56 <pbuf_copy+0xb2>
 8007f48:	4b38      	ldr	r3, [pc, #224]	; (800802c <pbuf_copy+0x188>)
 8007f4a:	f240 32d9 	movw	r2, #985	; 0x3d9
 8007f4e:	493a      	ldr	r1, [pc, #232]	; (8008038 <pbuf_copy+0x194>)
 8007f50:	4838      	ldr	r0, [pc, #224]	; (8008034 <pbuf_copy+0x190>)
 8007f52:	f009 f8cb 	bl	80110ec <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	895b      	ldrh	r3, [r3, #10]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d906      	bls.n	8007f70 <pbuf_copy+0xcc>
 8007f62:	4b32      	ldr	r3, [pc, #200]	; (800802c <pbuf_copy+0x188>)
 8007f64:	f240 32da 	movw	r2, #986	; 0x3da
 8007f68:	4934      	ldr	r1, [pc, #208]	; (800803c <pbuf_copy+0x198>)
 8007f6a:	4832      	ldr	r0, [pc, #200]	; (8008034 <pbuf_copy+0x190>)
 8007f6c:	f009 f8be 	bl	80110ec <iprintf>
    if (offset_from >= p_from->len) {
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	895b      	ldrh	r3, [r3, #10]
 8007f74:	461a      	mov	r2, r3
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d304      	bcc.n	8007f86 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	895b      	ldrh	r3, [r3, #10]
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d114      	bne.n	8007fbc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007f92:	2300      	movs	r3, #0
 8007f94:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10c      	bne.n	8007fbc <pbuf_copy+0x118>
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d009      	beq.n	8007fbc <pbuf_copy+0x118>
 8007fa8:	4b20      	ldr	r3, [pc, #128]	; (800802c <pbuf_copy+0x188>)
 8007faa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8007fae:	4924      	ldr	r1, [pc, #144]	; (8008040 <pbuf_copy+0x19c>)
 8007fb0:	4820      	ldr	r0, [pc, #128]	; (8008034 <pbuf_copy+0x190>)
 8007fb2:	f009 f89b 	bl	80110ec <iprintf>
 8007fb6:	f06f 030f 	mvn.w	r3, #15
 8007fba:	e032      	b.n	8008022 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d013      	beq.n	8007fea <pbuf_copy+0x146>
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	895a      	ldrh	r2, [r3, #10]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	891b      	ldrh	r3, [r3, #8]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d10d      	bne.n	8007fea <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d009      	beq.n	8007fea <pbuf_copy+0x146>
 8007fd6:	4b15      	ldr	r3, [pc, #84]	; (800802c <pbuf_copy+0x188>)
 8007fd8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8007fdc:	4919      	ldr	r1, [pc, #100]	; (8008044 <pbuf_copy+0x1a0>)
 8007fde:	4815      	ldr	r0, [pc, #84]	; (8008034 <pbuf_copy+0x190>)
 8007fe0:	f009 f884 	bl	80110ec <iprintf>
 8007fe4:	f06f 0305 	mvn.w	r3, #5
 8007fe8:	e01b      	b.n	8008022 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d013      	beq.n	8008018 <pbuf_copy+0x174>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	895a      	ldrh	r2, [r3, #10]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	891b      	ldrh	r3, [r3, #8]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d10d      	bne.n	8008018 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d009      	beq.n	8008018 <pbuf_copy+0x174>
 8008004:	4b09      	ldr	r3, [pc, #36]	; (800802c <pbuf_copy+0x188>)
 8008006:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800800a:	490e      	ldr	r1, [pc, #56]	; (8008044 <pbuf_copy+0x1a0>)
 800800c:	4809      	ldr	r0, [pc, #36]	; (8008034 <pbuf_copy+0x190>)
 800800e:	f009 f86d 	bl	80110ec <iprintf>
 8008012:	f06f 0305 	mvn.w	r3, #5
 8008016:	e004      	b.n	8008022 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	f47f af61 	bne.w	8007ee2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	080128f4 	.word	0x080128f4
 8008030:	08012b9c 	.word	0x08012b9c
 8008034:	08012954 	.word	0x08012954
 8008038:	08012bcc 	.word	0x08012bcc
 800803c:	08012be4 	.word	0x08012be4
 8008040:	08012c00 	.word	0x08012c00
 8008044:	08012c10 	.word	0x08012c10

08008048 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b088      	sub	sp, #32
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	4611      	mov	r1, r2
 8008054:	461a      	mov	r2, r3
 8008056:	460b      	mov	r3, r1
 8008058:	80fb      	strh	r3, [r7, #6]
 800805a:	4613      	mov	r3, r2
 800805c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800805e:	2300      	movs	r3, #0
 8008060:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008062:	2300      	movs	r3, #0
 8008064:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d108      	bne.n	800807e <pbuf_copy_partial+0x36>
 800806c:	4b2b      	ldr	r3, [pc, #172]	; (800811c <pbuf_copy_partial+0xd4>)
 800806e:	f240 420a 	movw	r2, #1034	; 0x40a
 8008072:	492b      	ldr	r1, [pc, #172]	; (8008120 <pbuf_copy_partial+0xd8>)
 8008074:	482b      	ldr	r0, [pc, #172]	; (8008124 <pbuf_copy_partial+0xdc>)
 8008076:	f009 f839 	bl	80110ec <iprintf>
 800807a:	2300      	movs	r3, #0
 800807c:	e04a      	b.n	8008114 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d108      	bne.n	8008096 <pbuf_copy_partial+0x4e>
 8008084:	4b25      	ldr	r3, [pc, #148]	; (800811c <pbuf_copy_partial+0xd4>)
 8008086:	f240 420b 	movw	r2, #1035	; 0x40b
 800808a:	4927      	ldr	r1, [pc, #156]	; (8008128 <pbuf_copy_partial+0xe0>)
 800808c:	4825      	ldr	r0, [pc, #148]	; (8008124 <pbuf_copy_partial+0xdc>)
 800808e:	f009 f82d 	bl	80110ec <iprintf>
 8008092:	2300      	movs	r3, #0
 8008094:	e03e      	b.n	8008114 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	61fb      	str	r3, [r7, #28]
 800809a:	e034      	b.n	8008106 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800809c:	88bb      	ldrh	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00a      	beq.n	80080b8 <pbuf_copy_partial+0x70>
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	895b      	ldrh	r3, [r3, #10]
 80080a6:	88ba      	ldrh	r2, [r7, #4]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d305      	bcc.n	80080b8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	895b      	ldrh	r3, [r3, #10]
 80080b0:	88ba      	ldrh	r2, [r7, #4]
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	80bb      	strh	r3, [r7, #4]
 80080b6:	e023      	b.n	8008100 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	895a      	ldrh	r2, [r3, #10]
 80080bc:	88bb      	ldrh	r3, [r7, #4]
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80080c2:	8b3a      	ldrh	r2, [r7, #24]
 80080c4:	88fb      	ldrh	r3, [r7, #6]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d901      	bls.n	80080ce <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80080ca:	88fb      	ldrh	r3, [r7, #6]
 80080cc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80080ce:	8b7b      	ldrh	r3, [r7, #26]
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	18d0      	adds	r0, r2, r3
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	685a      	ldr	r2, [r3, #4]
 80080d8:	88bb      	ldrh	r3, [r7, #4]
 80080da:	4413      	add	r3, r2
 80080dc:	8b3a      	ldrh	r2, [r7, #24]
 80080de:	4619      	mov	r1, r3
 80080e0:	f009 f919 	bl	8011316 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80080e4:	8afa      	ldrh	r2, [r7, #22]
 80080e6:	8b3b      	ldrh	r3, [r7, #24]
 80080e8:	4413      	add	r3, r2
 80080ea:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80080ec:	8b7a      	ldrh	r2, [r7, #26]
 80080ee:	8b3b      	ldrh	r3, [r7, #24]
 80080f0:	4413      	add	r3, r2
 80080f2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80080f4:	88fa      	ldrh	r2, [r7, #6]
 80080f6:	8b3b      	ldrh	r3, [r7, #24]
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80080fc:	2300      	movs	r3, #0
 80080fe:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	61fb      	str	r3, [r7, #28]
 8008106:	88fb      	ldrh	r3, [r7, #6]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d002      	beq.n	8008112 <pbuf_copy_partial+0xca>
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1c4      	bne.n	800809c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008112:	8afb      	ldrh	r3, [r7, #22]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3720      	adds	r7, #32
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	080128f4 	.word	0x080128f4
 8008120:	08012c3c 	.word	0x08012c3c
 8008124:	08012954 	.word	0x08012954
 8008128:	08012c5c 	.word	0x08012c5c

0800812c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b088      	sub	sp, #32
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	4613      	mov	r3, r2
 8008138:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800813a:	88fb      	ldrh	r3, [r7, #6]
 800813c:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800813e:	2300      	movs	r3, #0
 8008140:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d109      	bne.n	800815c <pbuf_take+0x30>
 8008148:	4b3a      	ldr	r3, [pc, #232]	; (8008234 <pbuf_take+0x108>)
 800814a:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800814e:	493a      	ldr	r1, [pc, #232]	; (8008238 <pbuf_take+0x10c>)
 8008150:	483a      	ldr	r0, [pc, #232]	; (800823c <pbuf_take+0x110>)
 8008152:	f008 ffcb 	bl	80110ec <iprintf>
 8008156:	f06f 030f 	mvn.w	r3, #15
 800815a:	e067      	b.n	800822c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d109      	bne.n	8008176 <pbuf_take+0x4a>
 8008162:	4b34      	ldr	r3, [pc, #208]	; (8008234 <pbuf_take+0x108>)
 8008164:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8008168:	4935      	ldr	r1, [pc, #212]	; (8008240 <pbuf_take+0x114>)
 800816a:	4834      	ldr	r0, [pc, #208]	; (800823c <pbuf_take+0x110>)
 800816c:	f008 ffbe 	bl	80110ec <iprintf>
 8008170:	f06f 030f 	mvn.w	r3, #15
 8008174:	e05a      	b.n	800822c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	891b      	ldrh	r3, [r3, #8]
 800817a:	88fa      	ldrh	r2, [r7, #6]
 800817c:	429a      	cmp	r2, r3
 800817e:	d909      	bls.n	8008194 <pbuf_take+0x68>
 8008180:	4b2c      	ldr	r3, [pc, #176]	; (8008234 <pbuf_take+0x108>)
 8008182:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8008186:	492f      	ldr	r1, [pc, #188]	; (8008244 <pbuf_take+0x118>)
 8008188:	482c      	ldr	r0, [pc, #176]	; (800823c <pbuf_take+0x110>)
 800818a:	f008 ffaf 	bl	80110ec <iprintf>
 800818e:	f04f 33ff 	mov.w	r3, #4294967295
 8008192:	e04b      	b.n	800822c <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d007      	beq.n	80081aa <pbuf_take+0x7e>
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d004      	beq.n	80081aa <pbuf_take+0x7e>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	891b      	ldrh	r3, [r3, #8]
 80081a4:	88fa      	ldrh	r2, [r7, #6]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d902      	bls.n	80081b0 <pbuf_take+0x84>
    return ERR_ARG;
 80081aa:	f06f 030f 	mvn.w	r3, #15
 80081ae:	e03d      	b.n	800822c <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	61fb      	str	r3, [r7, #28]
 80081b4:	e028      	b.n	8008208 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d106      	bne.n	80081ca <pbuf_take+0x9e>
 80081bc:	4b1d      	ldr	r3, [pc, #116]	; (8008234 <pbuf_take+0x108>)
 80081be:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80081c2:	4921      	ldr	r1, [pc, #132]	; (8008248 <pbuf_take+0x11c>)
 80081c4:	481d      	ldr	r0, [pc, #116]	; (800823c <pbuf_take+0x110>)
 80081c6:	f008 ff91 	bl	80110ec <iprintf>
    buf_copy_len = total_copy_len;
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	895b      	ldrh	r3, [r3, #10]
 80081d2:	461a      	mov	r2, r3
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d902      	bls.n	80081e0 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	895b      	ldrh	r3, [r3, #10]
 80081de:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	6858      	ldr	r0, [r3, #4]
 80081e4:	68ba      	ldr	r2, [r7, #8]
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	4413      	add	r3, r2
 80081ea:	69ba      	ldr	r2, [r7, #24]
 80081ec:	4619      	mov	r1, r3
 80081ee:	f009 f892 	bl	8011316 <memcpy>
    total_copy_len -= buf_copy_len;
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 80081fa:	693a      	ldr	r2, [r7, #16]
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	4413      	add	r3, r2
 8008200:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	61fb      	str	r3, [r7, #28]
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1d3      	bne.n	80081b6 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d103      	bne.n	800821c <pbuf_take+0xf0>
 8008214:	88fb      	ldrh	r3, [r7, #6]
 8008216:	693a      	ldr	r2, [r7, #16]
 8008218:	429a      	cmp	r2, r3
 800821a:	d006      	beq.n	800822a <pbuf_take+0xfe>
 800821c:	4b05      	ldr	r3, [pc, #20]	; (8008234 <pbuf_take+0x108>)
 800821e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8008222:	490a      	ldr	r1, [pc, #40]	; (800824c <pbuf_take+0x120>)
 8008224:	4805      	ldr	r0, [pc, #20]	; (800823c <pbuf_take+0x110>)
 8008226:	f008 ff61 	bl	80110ec <iprintf>
  return ERR_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	3720      	adds	r7, #32
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	080128f4 	.word	0x080128f4
 8008238:	08012ccc 	.word	0x08012ccc
 800823c:	08012954 	.word	0x08012954
 8008240:	08012ce4 	.word	0x08012ce4
 8008244:	08012d00 	.word	0x08012d00
 8008248:	08012d20 	.word	0x08012d20
 800824c:	08012d38 	.word	0x08012d38

08008250 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	4603      	mov	r3, r0
 8008258:	603a      	str	r2, [r7, #0]
 800825a:	71fb      	strb	r3, [r7, #7]
 800825c:	460b      	mov	r3, r1
 800825e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	8919      	ldrh	r1, [r3, #8]
 8008264:	88ba      	ldrh	r2, [r7, #4]
 8008266:	79fb      	ldrb	r3, [r7, #7]
 8008268:	4618      	mov	r0, r3
 800826a:	f7ff fa1f 	bl	80076ac <pbuf_alloc>
 800826e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d101      	bne.n	800827a <pbuf_clone+0x2a>
    return NULL;
 8008276:	2300      	movs	r3, #0
 8008278:	e011      	b.n	800829e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800827a:	6839      	ldr	r1, [r7, #0]
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f7ff fe11 	bl	8007ea4 <pbuf_copy>
 8008282:	4603      	mov	r3, r0
 8008284:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008286:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d006      	beq.n	800829c <pbuf_clone+0x4c>
 800828e:	4b06      	ldr	r3, [pc, #24]	; (80082a8 <pbuf_clone+0x58>)
 8008290:	f240 5224 	movw	r2, #1316	; 0x524
 8008294:	4905      	ldr	r1, [pc, #20]	; (80082ac <pbuf_clone+0x5c>)
 8008296:	4806      	ldr	r0, [pc, #24]	; (80082b0 <pbuf_clone+0x60>)
 8008298:	f008 ff28 	bl	80110ec <iprintf>
  return q;
 800829c:	68fb      	ldr	r3, [r7, #12]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	080128f4 	.word	0x080128f4
 80082ac:	08012d68 	.word	0x08012d68
 80082b0:	08012954 	.word	0x08012954

080082b4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80082b8:	f008 fe18 	bl	8010eec <rand>
 80082bc:	4603      	mov	r3, r0
 80082be:	b29b      	uxth	r3, r3
 80082c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	4b01      	ldr	r3, [pc, #4]	; (80082d4 <tcp_init+0x20>)
 80082ce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80082d0:	bf00      	nop
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	20000020 	.word	0x20000020

080082d8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	7d1b      	ldrb	r3, [r3, #20]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d105      	bne.n	80082f4 <tcp_free+0x1c>
 80082e8:	4b06      	ldr	r3, [pc, #24]	; (8008304 <tcp_free+0x2c>)
 80082ea:	22d4      	movs	r2, #212	; 0xd4
 80082ec:	4906      	ldr	r1, [pc, #24]	; (8008308 <tcp_free+0x30>)
 80082ee:	4807      	ldr	r0, [pc, #28]	; (800830c <tcp_free+0x34>)
 80082f0:	f008 fefc 	bl	80110ec <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80082f4:	6879      	ldr	r1, [r7, #4]
 80082f6:	2001      	movs	r0, #1
 80082f8:	f7fe fe46 	bl	8006f88 <memp_free>
}
 80082fc:	bf00      	nop
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	08012df4 	.word	0x08012df4
 8008308:	08012e24 	.word	0x08012e24
 800830c:	08012e38 	.word	0x08012e38

08008310 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	7d1b      	ldrb	r3, [r3, #20]
 800831c:	2b01      	cmp	r3, #1
 800831e:	d105      	bne.n	800832c <tcp_free_listen+0x1c>
 8008320:	4b06      	ldr	r3, [pc, #24]	; (800833c <tcp_free_listen+0x2c>)
 8008322:	22df      	movs	r2, #223	; 0xdf
 8008324:	4906      	ldr	r1, [pc, #24]	; (8008340 <tcp_free_listen+0x30>)
 8008326:	4807      	ldr	r0, [pc, #28]	; (8008344 <tcp_free_listen+0x34>)
 8008328:	f008 fee0 	bl	80110ec <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800832c:	6879      	ldr	r1, [r7, #4]
 800832e:	2002      	movs	r0, #2
 8008330:	f7fe fe2a 	bl	8006f88 <memp_free>
}
 8008334:	bf00      	nop
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	08012df4 	.word	0x08012df4
 8008340:	08012e60 	.word	0x08012e60
 8008344:	08012e38 	.word	0x08012e38

08008348 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800834c:	f001 f800 	bl	8009350 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008350:	4b07      	ldr	r3, [pc, #28]	; (8008370 <tcp_tmr+0x28>)
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	3301      	adds	r3, #1
 8008356:	b2da      	uxtb	r2, r3
 8008358:	4b05      	ldr	r3, [pc, #20]	; (8008370 <tcp_tmr+0x28>)
 800835a:	701a      	strb	r2, [r3, #0]
 800835c:	4b04      	ldr	r3, [pc, #16]	; (8008370 <tcp_tmr+0x28>)
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	f003 0301 	and.w	r3, r3, #1
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008368:	f000 fcb2 	bl	8008cd0 <tcp_slowtmr>
  }
}
 800836c:	bf00      	nop
 800836e:	bd80      	pop	{r7, pc}
 8008370:	2000883d 	.word	0x2000883d

08008374 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d105      	bne.n	8008390 <tcp_remove_listener+0x1c>
 8008384:	4b0d      	ldr	r3, [pc, #52]	; (80083bc <tcp_remove_listener+0x48>)
 8008386:	22ff      	movs	r2, #255	; 0xff
 8008388:	490d      	ldr	r1, [pc, #52]	; (80083c0 <tcp_remove_listener+0x4c>)
 800838a:	480e      	ldr	r0, [pc, #56]	; (80083c4 <tcp_remove_listener+0x50>)
 800838c:	f008 feae 	bl	80110ec <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	60fb      	str	r3, [r7, #12]
 8008394:	e00a      	b.n	80083ac <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800839a:	683a      	ldr	r2, [r7, #0]
 800839c:	429a      	cmp	r2, r3
 800839e:	d102      	bne.n	80083a6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	60fb      	str	r3, [r7, #12]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1f1      	bne.n	8008396 <tcp_remove_listener+0x22>
    }
  }
}
 80083b2:	bf00      	nop
 80083b4:	bf00      	nop
 80083b6:	3710      	adds	r7, #16
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	08012df4 	.word	0x08012df4
 80083c0:	08012e7c 	.word	0x08012e7c
 80083c4:	08012e38 	.word	0x08012e38

080083c8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d106      	bne.n	80083e4 <tcp_listen_closed+0x1c>
 80083d6:	4b14      	ldr	r3, [pc, #80]	; (8008428 <tcp_listen_closed+0x60>)
 80083d8:	f240 1211 	movw	r2, #273	; 0x111
 80083dc:	4913      	ldr	r1, [pc, #76]	; (800842c <tcp_listen_closed+0x64>)
 80083de:	4814      	ldr	r0, [pc, #80]	; (8008430 <tcp_listen_closed+0x68>)
 80083e0:	f008 fe84 	bl	80110ec <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	7d1b      	ldrb	r3, [r3, #20]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d006      	beq.n	80083fa <tcp_listen_closed+0x32>
 80083ec:	4b0e      	ldr	r3, [pc, #56]	; (8008428 <tcp_listen_closed+0x60>)
 80083ee:	f44f 7289 	mov.w	r2, #274	; 0x112
 80083f2:	4910      	ldr	r1, [pc, #64]	; (8008434 <tcp_listen_closed+0x6c>)
 80083f4:	480e      	ldr	r0, [pc, #56]	; (8008430 <tcp_listen_closed+0x68>)
 80083f6:	f008 fe79 	bl	80110ec <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80083fa:	2301      	movs	r3, #1
 80083fc:	60fb      	str	r3, [r7, #12]
 80083fe:	e00b      	b.n	8008418 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008400:	4a0d      	ldr	r2, [pc, #52]	; (8008438 <tcp_listen_closed+0x70>)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	6879      	ldr	r1, [r7, #4]
 800840c:	4618      	mov	r0, r3
 800840e:	f7ff ffb1 	bl	8008374 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	3301      	adds	r3, #1
 8008416:	60fb      	str	r3, [r7, #12]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2b03      	cmp	r3, #3
 800841c:	d9f0      	bls.n	8008400 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800841e:	bf00      	nop
 8008420:	bf00      	nop
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	08012df4 	.word	0x08012df4
 800842c:	08012ea4 	.word	0x08012ea4
 8008430:	08012e38 	.word	0x08012e38
 8008434:	08012eb0 	.word	0x08012eb0
 8008438:	08014dd4 	.word	0x08014dd4

0800843c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800843c:	b5b0      	push	{r4, r5, r7, lr}
 800843e:	b088      	sub	sp, #32
 8008440:	af04      	add	r7, sp, #16
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	460b      	mov	r3, r1
 8008446:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d106      	bne.n	800845c <tcp_close_shutdown+0x20>
 800844e:	4b63      	ldr	r3, [pc, #396]	; (80085dc <tcp_close_shutdown+0x1a0>)
 8008450:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008454:	4962      	ldr	r1, [pc, #392]	; (80085e0 <tcp_close_shutdown+0x1a4>)
 8008456:	4863      	ldr	r0, [pc, #396]	; (80085e4 <tcp_close_shutdown+0x1a8>)
 8008458:	f008 fe48 	bl	80110ec <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800845c:	78fb      	ldrb	r3, [r7, #3]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d066      	beq.n	8008530 <tcp_close_shutdown+0xf4>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	7d1b      	ldrb	r3, [r3, #20]
 8008466:	2b04      	cmp	r3, #4
 8008468:	d003      	beq.n	8008472 <tcp_close_shutdown+0x36>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	7d1b      	ldrb	r3, [r3, #20]
 800846e:	2b07      	cmp	r3, #7
 8008470:	d15e      	bne.n	8008530 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008476:	2b00      	cmp	r3, #0
 8008478:	d104      	bne.n	8008484 <tcp_close_shutdown+0x48>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800847e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008482:	d055      	beq.n	8008530 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	8b5b      	ldrh	r3, [r3, #26]
 8008488:	f003 0310 	and.w	r3, r3, #16
 800848c:	2b00      	cmp	r3, #0
 800848e:	d106      	bne.n	800849e <tcp_close_shutdown+0x62>
 8008490:	4b52      	ldr	r3, [pc, #328]	; (80085dc <tcp_close_shutdown+0x1a0>)
 8008492:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008496:	4954      	ldr	r1, [pc, #336]	; (80085e8 <tcp_close_shutdown+0x1ac>)
 8008498:	4852      	ldr	r0, [pc, #328]	; (80085e4 <tcp_close_shutdown+0x1a8>)
 800849a:	f008 fe27 	bl	80110ec <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80084a6:	687d      	ldr	r5, [r7, #4]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3304      	adds	r3, #4
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	8ad2      	ldrh	r2, [r2, #22]
 80084b0:	6879      	ldr	r1, [r7, #4]
 80084b2:	8b09      	ldrh	r1, [r1, #24]
 80084b4:	9102      	str	r1, [sp, #8]
 80084b6:	9201      	str	r2, [sp, #4]
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	462b      	mov	r3, r5
 80084bc:	4622      	mov	r2, r4
 80084be:	4601      	mov	r1, r0
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f005 fcf7 	bl	800deb4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f001 fad4 	bl	8009a74 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80084cc:	4b47      	ldr	r3, [pc, #284]	; (80085ec <tcp_close_shutdown+0x1b0>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d105      	bne.n	80084e2 <tcp_close_shutdown+0xa6>
 80084d6:	4b45      	ldr	r3, [pc, #276]	; (80085ec <tcp_close_shutdown+0x1b0>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	4a43      	ldr	r2, [pc, #268]	; (80085ec <tcp_close_shutdown+0x1b0>)
 80084de:	6013      	str	r3, [r2, #0]
 80084e0:	e013      	b.n	800850a <tcp_close_shutdown+0xce>
 80084e2:	4b42      	ldr	r3, [pc, #264]	; (80085ec <tcp_close_shutdown+0x1b0>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	60fb      	str	r3, [r7, #12]
 80084e8:	e00c      	b.n	8008504 <tcp_close_shutdown+0xc8>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d104      	bne.n	80084fe <tcp_close_shutdown+0xc2>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	68da      	ldr	r2, [r3, #12]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	60da      	str	r2, [r3, #12]
 80084fc:	e005      	b.n	800850a <tcp_close_shutdown+0xce>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	60fb      	str	r3, [r7, #12]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1ef      	bne.n	80084ea <tcp_close_shutdown+0xae>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	60da      	str	r2, [r3, #12]
 8008510:	4b37      	ldr	r3, [pc, #220]	; (80085f0 <tcp_close_shutdown+0x1b4>)
 8008512:	2201      	movs	r2, #1
 8008514:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008516:	4b37      	ldr	r3, [pc, #220]	; (80085f4 <tcp_close_shutdown+0x1b8>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	429a      	cmp	r2, r3
 800851e:	d102      	bne.n	8008526 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008520:	f003 ff6c 	bl	800c3fc <tcp_trigger_input_pcb_close>
 8008524:	e002      	b.n	800852c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f7ff fed6 	bl	80082d8 <tcp_free>
      }
      return ERR_OK;
 800852c:	2300      	movs	r3, #0
 800852e:	e050      	b.n	80085d2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	7d1b      	ldrb	r3, [r3, #20]
 8008534:	2b02      	cmp	r3, #2
 8008536:	d03b      	beq.n	80085b0 <tcp_close_shutdown+0x174>
 8008538:	2b02      	cmp	r3, #2
 800853a:	dc44      	bgt.n	80085c6 <tcp_close_shutdown+0x18a>
 800853c:	2b00      	cmp	r3, #0
 800853e:	d002      	beq.n	8008546 <tcp_close_shutdown+0x10a>
 8008540:	2b01      	cmp	r3, #1
 8008542:	d02a      	beq.n	800859a <tcp_close_shutdown+0x15e>
 8008544:	e03f      	b.n	80085c6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	8adb      	ldrh	r3, [r3, #22]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d021      	beq.n	8008592 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800854e:	4b2a      	ldr	r3, [pc, #168]	; (80085f8 <tcp_close_shutdown+0x1bc>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	429a      	cmp	r2, r3
 8008556:	d105      	bne.n	8008564 <tcp_close_shutdown+0x128>
 8008558:	4b27      	ldr	r3, [pc, #156]	; (80085f8 <tcp_close_shutdown+0x1bc>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	4a26      	ldr	r2, [pc, #152]	; (80085f8 <tcp_close_shutdown+0x1bc>)
 8008560:	6013      	str	r3, [r2, #0]
 8008562:	e013      	b.n	800858c <tcp_close_shutdown+0x150>
 8008564:	4b24      	ldr	r3, [pc, #144]	; (80085f8 <tcp_close_shutdown+0x1bc>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	60bb      	str	r3, [r7, #8]
 800856a:	e00c      	b.n	8008586 <tcp_close_shutdown+0x14a>
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	429a      	cmp	r2, r3
 8008574:	d104      	bne.n	8008580 <tcp_close_shutdown+0x144>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68da      	ldr	r2, [r3, #12]
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	60da      	str	r2, [r3, #12]
 800857e:	e005      	b.n	800858c <tcp_close_shutdown+0x150>
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	60bb      	str	r3, [r7, #8]
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1ef      	bne.n	800856c <tcp_close_shutdown+0x130>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7ff fea0 	bl	80082d8 <tcp_free>
      break;
 8008598:	e01a      	b.n	80085d0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f7ff ff14 	bl	80083c8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80085a0:	6879      	ldr	r1, [r7, #4]
 80085a2:	4816      	ldr	r0, [pc, #88]	; (80085fc <tcp_close_shutdown+0x1c0>)
 80085a4:	f001 fab6 	bl	8009b14 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f7ff feb1 	bl	8008310 <tcp_free_listen>
      break;
 80085ae:	e00f      	b.n	80085d0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80085b0:	6879      	ldr	r1, [r7, #4]
 80085b2:	480e      	ldr	r0, [pc, #56]	; (80085ec <tcp_close_shutdown+0x1b0>)
 80085b4:	f001 faae 	bl	8009b14 <tcp_pcb_remove>
 80085b8:	4b0d      	ldr	r3, [pc, #52]	; (80085f0 <tcp_close_shutdown+0x1b4>)
 80085ba:	2201      	movs	r2, #1
 80085bc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f7ff fe8a 	bl	80082d8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80085c4:	e004      	b.n	80085d0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f81a 	bl	8008600 <tcp_close_shutdown_fin>
 80085cc:	4603      	mov	r3, r0
 80085ce:	e000      	b.n	80085d2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bdb0      	pop	{r4, r5, r7, pc}
 80085da:	bf00      	nop
 80085dc:	08012df4 	.word	0x08012df4
 80085e0:	08012ec8 	.word	0x08012ec8
 80085e4:	08012e38 	.word	0x08012e38
 80085e8:	08012ee8 	.word	0x08012ee8
 80085ec:	20008834 	.word	0x20008834
 80085f0:	2000883c 	.word	0x2000883c
 80085f4:	20008874 	.word	0x20008874
 80085f8:	2000882c 	.word	0x2000882c
 80085fc:	20008830 	.word	0x20008830

08008600 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d106      	bne.n	800861c <tcp_close_shutdown_fin+0x1c>
 800860e:	4b2e      	ldr	r3, [pc, #184]	; (80086c8 <tcp_close_shutdown_fin+0xc8>)
 8008610:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8008614:	492d      	ldr	r1, [pc, #180]	; (80086cc <tcp_close_shutdown_fin+0xcc>)
 8008616:	482e      	ldr	r0, [pc, #184]	; (80086d0 <tcp_close_shutdown_fin+0xd0>)
 8008618:	f008 fd68 	bl	80110ec <iprintf>

  switch (pcb->state) {
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	7d1b      	ldrb	r3, [r3, #20]
 8008620:	2b07      	cmp	r3, #7
 8008622:	d020      	beq.n	8008666 <tcp_close_shutdown_fin+0x66>
 8008624:	2b07      	cmp	r3, #7
 8008626:	dc2b      	bgt.n	8008680 <tcp_close_shutdown_fin+0x80>
 8008628:	2b03      	cmp	r3, #3
 800862a:	d002      	beq.n	8008632 <tcp_close_shutdown_fin+0x32>
 800862c:	2b04      	cmp	r3, #4
 800862e:	d00d      	beq.n	800864c <tcp_close_shutdown_fin+0x4c>
 8008630:	e026      	b.n	8008680 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f004 fd4c 	bl	800d0d0 <tcp_send_fin>
 8008638:	4603      	mov	r3, r0
 800863a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800863c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d11f      	bne.n	8008684 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2205      	movs	r2, #5
 8008648:	751a      	strb	r2, [r3, #20]
      }
      break;
 800864a:	e01b      	b.n	8008684 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f004 fd3f 	bl	800d0d0 <tcp_send_fin>
 8008652:	4603      	mov	r3, r0
 8008654:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d114      	bne.n	8008688 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2205      	movs	r2, #5
 8008662:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008664:	e010      	b.n	8008688 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f004 fd32 	bl	800d0d0 <tcp_send_fin>
 800866c:	4603      	mov	r3, r0
 800866e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d109      	bne.n	800868c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2209      	movs	r2, #9
 800867c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800867e:	e005      	b.n	800868c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008680:	2300      	movs	r3, #0
 8008682:	e01c      	b.n	80086be <tcp_close_shutdown_fin+0xbe>
      break;
 8008684:	bf00      	nop
 8008686:	e002      	b.n	800868e <tcp_close_shutdown_fin+0x8e>
      break;
 8008688:	bf00      	nop
 800868a:	e000      	b.n	800868e <tcp_close_shutdown_fin+0x8e>
      break;
 800868c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800868e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d103      	bne.n	800869e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f004 fe58 	bl	800d34c <tcp_output>
 800869c:	e00d      	b.n	80086ba <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800869e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a6:	d108      	bne.n	80086ba <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	8b5b      	ldrh	r3, [r3, #26]
 80086ac:	f043 0308 	orr.w	r3, r3, #8
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80086b6:	2300      	movs	r3, #0
 80086b8:	e001      	b.n	80086be <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80086ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	08012df4 	.word	0x08012df4
 80086cc:	08012ea4 	.word	0x08012ea4
 80086d0:	08012e38 	.word	0x08012e38

080086d4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d109      	bne.n	80086f6 <tcp_close+0x22>
 80086e2:	4b0f      	ldr	r3, [pc, #60]	; (8008720 <tcp_close+0x4c>)
 80086e4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80086e8:	490e      	ldr	r1, [pc, #56]	; (8008724 <tcp_close+0x50>)
 80086ea:	480f      	ldr	r0, [pc, #60]	; (8008728 <tcp_close+0x54>)
 80086ec:	f008 fcfe 	bl	80110ec <iprintf>
 80086f0:	f06f 030f 	mvn.w	r3, #15
 80086f4:	e00f      	b.n	8008716 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	7d1b      	ldrb	r3, [r3, #20]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d006      	beq.n	800870c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	8b5b      	ldrh	r3, [r3, #26]
 8008702:	f043 0310 	orr.w	r3, r3, #16
 8008706:	b29a      	uxth	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800870c:	2101      	movs	r1, #1
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f7ff fe94 	bl	800843c <tcp_close_shutdown>
 8008714:	4603      	mov	r3, r0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	08012df4 	.word	0x08012df4
 8008724:	08012f04 	.word	0x08012f04
 8008728:	08012e38 	.word	0x08012e38

0800872c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b08e      	sub	sp, #56	; 0x38
 8008730:	af04      	add	r7, sp, #16
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d107      	bne.n	800874c <tcp_abandon+0x20>
 800873c:	4b52      	ldr	r3, [pc, #328]	; (8008888 <tcp_abandon+0x15c>)
 800873e:	f240 223d 	movw	r2, #573	; 0x23d
 8008742:	4952      	ldr	r1, [pc, #328]	; (800888c <tcp_abandon+0x160>)
 8008744:	4852      	ldr	r0, [pc, #328]	; (8008890 <tcp_abandon+0x164>)
 8008746:	f008 fcd1 	bl	80110ec <iprintf>
 800874a:	e099      	b.n	8008880 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	7d1b      	ldrb	r3, [r3, #20]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d106      	bne.n	8008762 <tcp_abandon+0x36>
 8008754:	4b4c      	ldr	r3, [pc, #304]	; (8008888 <tcp_abandon+0x15c>)
 8008756:	f44f 7210 	mov.w	r2, #576	; 0x240
 800875a:	494e      	ldr	r1, [pc, #312]	; (8008894 <tcp_abandon+0x168>)
 800875c:	484c      	ldr	r0, [pc, #304]	; (8008890 <tcp_abandon+0x164>)
 800875e:	f008 fcc5 	bl	80110ec <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	7d1b      	ldrb	r3, [r3, #20]
 8008766:	2b0a      	cmp	r3, #10
 8008768:	d107      	bne.n	800877a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800876a:	6879      	ldr	r1, [r7, #4]
 800876c:	484a      	ldr	r0, [pc, #296]	; (8008898 <tcp_abandon+0x16c>)
 800876e:	f001 f9d1 	bl	8009b14 <tcp_pcb_remove>
    tcp_free(pcb);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7ff fdb0 	bl	80082d8 <tcp_free>
 8008778:	e082      	b.n	8008880 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800877a:	2300      	movs	r3, #0
 800877c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800877e:	2300      	movs	r3, #0
 8008780:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008786:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008794:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	7d1b      	ldrb	r3, [r3, #20]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d126      	bne.n	80087f2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	8adb      	ldrh	r3, [r3, #22]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d02e      	beq.n	800880a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80087ac:	4b3b      	ldr	r3, [pc, #236]	; (800889c <tcp_abandon+0x170>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d105      	bne.n	80087c2 <tcp_abandon+0x96>
 80087b6:	4b39      	ldr	r3, [pc, #228]	; (800889c <tcp_abandon+0x170>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	4a37      	ldr	r2, [pc, #220]	; (800889c <tcp_abandon+0x170>)
 80087be:	6013      	str	r3, [r2, #0]
 80087c0:	e013      	b.n	80087ea <tcp_abandon+0xbe>
 80087c2:	4b36      	ldr	r3, [pc, #216]	; (800889c <tcp_abandon+0x170>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	61fb      	str	r3, [r7, #28]
 80087c8:	e00c      	b.n	80087e4 <tcp_abandon+0xb8>
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d104      	bne.n	80087de <tcp_abandon+0xb2>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	68da      	ldr	r2, [r3, #12]
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	60da      	str	r2, [r3, #12]
 80087dc:	e005      	b.n	80087ea <tcp_abandon+0xbe>
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	61fb      	str	r3, [r7, #28]
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1ef      	bne.n	80087ca <tcp_abandon+0x9e>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	60da      	str	r2, [r3, #12]
 80087f0:	e00b      	b.n	800880a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	8adb      	ldrh	r3, [r3, #22]
 80087fa:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80087fc:	6879      	ldr	r1, [r7, #4]
 80087fe:	4828      	ldr	r0, [pc, #160]	; (80088a0 <tcp_abandon+0x174>)
 8008800:	f001 f988 	bl	8009b14 <tcp_pcb_remove>
 8008804:	4b27      	ldr	r3, [pc, #156]	; (80088a4 <tcp_abandon+0x178>)
 8008806:	2201      	movs	r2, #1
 8008808:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800880e:	2b00      	cmp	r3, #0
 8008810:	d004      	beq.n	800881c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008816:	4618      	mov	r0, r3
 8008818:	f000 fe7a 	bl	8009510 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008820:	2b00      	cmp	r3, #0
 8008822:	d004      	beq.n	800882e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008828:	4618      	mov	r0, r3
 800882a:	f000 fe71 	bl	8009510 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008832:	2b00      	cmp	r3, #0
 8008834:	d004      	beq.n	8008840 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800883a:	4618      	mov	r0, r3
 800883c:	f000 fe68 	bl	8009510 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8008840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00e      	beq.n	8008864 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008846:	6879      	ldr	r1, [r7, #4]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	3304      	adds	r3, #4
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	8b12      	ldrh	r2, [r2, #24]
 8008850:	9202      	str	r2, [sp, #8]
 8008852:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008854:	9201      	str	r2, [sp, #4]
 8008856:	9300      	str	r3, [sp, #0]
 8008858:	460b      	mov	r3, r1
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	69b9      	ldr	r1, [r7, #24]
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f005 fb28 	bl	800deb4 <tcp_rst>
    }
    last_state = pcb->state;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	7d1b      	ldrb	r3, [r3, #20]
 8008868:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f7ff fd34 	bl	80082d8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d004      	beq.n	8008880 <tcp_abandon+0x154>
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	f06f 010c 	mvn.w	r1, #12
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	4798      	blx	r3
  }
}
 8008880:	3728      	adds	r7, #40	; 0x28
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	08012df4 	.word	0x08012df4
 800888c:	08012f38 	.word	0x08012f38
 8008890:	08012e38 	.word	0x08012e38
 8008894:	08012f54 	.word	0x08012f54
 8008898:	20008838 	.word	0x20008838
 800889c:	2000882c 	.word	0x2000882c
 80088a0:	20008834 	.word	0x20008834
 80088a4:	2000883c 	.word	0x2000883c

080088a8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80088b0:	2101      	movs	r1, #1
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7ff ff3a 	bl	800872c <tcp_abandon>
}
 80088b8:	bf00      	nop
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d106      	bne.n	80088dc <tcp_update_rcv_ann_wnd+0x1c>
 80088ce:	4b25      	ldr	r3, [pc, #148]	; (8008964 <tcp_update_rcv_ann_wnd+0xa4>)
 80088d0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80088d4:	4924      	ldr	r1, [pc, #144]	; (8008968 <tcp_update_rcv_ann_wnd+0xa8>)
 80088d6:	4825      	ldr	r0, [pc, #148]	; (800896c <tcp_update_rcv_ann_wnd+0xac>)
 80088d8:	f008 fc08 	bl	80110ec <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80088e4:	4413      	add	r3, r2
 80088e6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80088f0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80088f4:	bf28      	it	cs
 80088f6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80088fa:	b292      	uxth	r2, r2
 80088fc:	4413      	add	r3, r2
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	2b00      	cmp	r3, #0
 8008904:	db08      	blt.n	8008918 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	e020      	b.n	800895a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	2b00      	cmp	r3, #0
 8008924:	dd03      	ble.n	800892e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800892c:	e014      	b.n	8008958 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008940:	d306      	bcc.n	8008950 <tcp_update_rcv_ann_wnd+0x90>
 8008942:	4b08      	ldr	r3, [pc, #32]	; (8008964 <tcp_update_rcv_ann_wnd+0xa4>)
 8008944:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008948:	4909      	ldr	r1, [pc, #36]	; (8008970 <tcp_update_rcv_ann_wnd+0xb0>)
 800894a:	4808      	ldr	r0, [pc, #32]	; (800896c <tcp_update_rcv_ann_wnd+0xac>)
 800894c:	f008 fbce 	bl	80110ec <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	b29a      	uxth	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8008958:	2300      	movs	r3, #0
  }
}
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	08012df4 	.word	0x08012df4
 8008968:	08013050 	.word	0x08013050
 800896c:	08012e38 	.word	0x08012e38
 8008970:	08013074 	.word	0x08013074

08008974 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	460b      	mov	r3, r1
 800897e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d107      	bne.n	8008996 <tcp_recved+0x22>
 8008986:	4b1f      	ldr	r3, [pc, #124]	; (8008a04 <tcp_recved+0x90>)
 8008988:	f240 32cf 	movw	r2, #975	; 0x3cf
 800898c:	491e      	ldr	r1, [pc, #120]	; (8008a08 <tcp_recved+0x94>)
 800898e:	481f      	ldr	r0, [pc, #124]	; (8008a0c <tcp_recved+0x98>)
 8008990:	f008 fbac 	bl	80110ec <iprintf>
 8008994:	e032      	b.n	80089fc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	7d1b      	ldrb	r3, [r3, #20]
 800899a:	2b01      	cmp	r3, #1
 800899c:	d106      	bne.n	80089ac <tcp_recved+0x38>
 800899e:	4b19      	ldr	r3, [pc, #100]	; (8008a04 <tcp_recved+0x90>)
 80089a0:	f240 32d2 	movw	r2, #978	; 0x3d2
 80089a4:	491a      	ldr	r1, [pc, #104]	; (8008a10 <tcp_recved+0x9c>)
 80089a6:	4819      	ldr	r0, [pc, #100]	; (8008a0c <tcp_recved+0x98>)
 80089a8:	f008 fba0 	bl	80110ec <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80089b0:	887b      	ldrh	r3, [r7, #2]
 80089b2:	4413      	add	r3, r2
 80089b4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80089b6:	89fb      	ldrh	r3, [r7, #14]
 80089b8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80089bc:	d804      	bhi.n	80089c8 <tcp_recved+0x54>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089c2:	89fa      	ldrh	r2, [r7, #14]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d204      	bcs.n	80089d2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80089ce:	851a      	strh	r2, [r3, #40]	; 0x28
 80089d0:	e002      	b.n	80089d8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	89fa      	ldrh	r2, [r7, #14]
 80089d6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f7ff ff71 	bl	80088c0 <tcp_update_rcv_ann_wnd>
 80089de:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80089e6:	d309      	bcc.n	80089fc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	8b5b      	ldrh	r3, [r3, #26]
 80089ec:	f043 0302 	orr.w	r3, r3, #2
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f004 fca8 	bl	800d34c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	08012df4 	.word	0x08012df4
 8008a08:	08013090 	.word	0x08013090
 8008a0c:	08012e38 	.word	0x08012e38
 8008a10:	080130a8 	.word	0x080130a8

08008a14 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8008a1e:	4b1e      	ldr	r3, [pc, #120]	; (8008a98 <tcp_new_port+0x84>)
 8008a20:	881b      	ldrh	r3, [r3, #0]
 8008a22:	3301      	adds	r3, #1
 8008a24:	b29a      	uxth	r2, r3
 8008a26:	4b1c      	ldr	r3, [pc, #112]	; (8008a98 <tcp_new_port+0x84>)
 8008a28:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8008a2a:	4b1b      	ldr	r3, [pc, #108]	; (8008a98 <tcp_new_port+0x84>)
 8008a2c:	881b      	ldrh	r3, [r3, #0]
 8008a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d103      	bne.n	8008a3e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8008a36:	4b18      	ldr	r3, [pc, #96]	; (8008a98 <tcp_new_port+0x84>)
 8008a38:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8008a3c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008a3e:	2300      	movs	r3, #0
 8008a40:	71fb      	strb	r3, [r7, #7]
 8008a42:	e01e      	b.n	8008a82 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008a44:	79fb      	ldrb	r3, [r7, #7]
 8008a46:	4a15      	ldr	r2, [pc, #84]	; (8008a9c <tcp_new_port+0x88>)
 8008a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	603b      	str	r3, [r7, #0]
 8008a50:	e011      	b.n	8008a76 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	8ada      	ldrh	r2, [r3, #22]
 8008a56:	4b10      	ldr	r3, [pc, #64]	; (8008a98 <tcp_new_port+0x84>)
 8008a58:	881b      	ldrh	r3, [r3, #0]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d108      	bne.n	8008a70 <tcp_new_port+0x5c>
        n++;
 8008a5e:	88bb      	ldrh	r3, [r7, #4]
 8008a60:	3301      	adds	r3, #1
 8008a62:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8008a64:	88bb      	ldrh	r3, [r7, #4]
 8008a66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a6a:	d3d8      	bcc.n	8008a1e <tcp_new_port+0xa>
          return 0;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	e00d      	b.n	8008a8c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	603b      	str	r3, [r7, #0]
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d1ea      	bne.n	8008a52 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008a7c:	79fb      	ldrb	r3, [r7, #7]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	71fb      	strb	r3, [r7, #7]
 8008a82:	79fb      	ldrb	r3, [r7, #7]
 8008a84:	2b03      	cmp	r3, #3
 8008a86:	d9dd      	bls.n	8008a44 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8008a88:	4b03      	ldr	r3, [pc, #12]	; (8008a98 <tcp_new_port+0x84>)
 8008a8a:	881b      	ldrh	r3, [r3, #0]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr
 8008a98:	20000020 	.word	0x20000020
 8008a9c:	08014dd4 	.word	0x08014dd4

08008aa0 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b08a      	sub	sp, #40	; 0x28
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	603b      	str	r3, [r7, #0]
 8008aac:	4613      	mov	r3, r2
 8008aae:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d109      	bne.n	8008ace <tcp_connect+0x2e>
 8008aba:	4b7d      	ldr	r3, [pc, #500]	; (8008cb0 <tcp_connect+0x210>)
 8008abc:	f240 4235 	movw	r2, #1077	; 0x435
 8008ac0:	497c      	ldr	r1, [pc, #496]	; (8008cb4 <tcp_connect+0x214>)
 8008ac2:	487d      	ldr	r0, [pc, #500]	; (8008cb8 <tcp_connect+0x218>)
 8008ac4:	f008 fb12 	bl	80110ec <iprintf>
 8008ac8:	f06f 030f 	mvn.w	r3, #15
 8008acc:	e0ec      	b.n	8008ca8 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d109      	bne.n	8008ae8 <tcp_connect+0x48>
 8008ad4:	4b76      	ldr	r3, [pc, #472]	; (8008cb0 <tcp_connect+0x210>)
 8008ad6:	f240 4236 	movw	r2, #1078	; 0x436
 8008ada:	4978      	ldr	r1, [pc, #480]	; (8008cbc <tcp_connect+0x21c>)
 8008adc:	4876      	ldr	r0, [pc, #472]	; (8008cb8 <tcp_connect+0x218>)
 8008ade:	f008 fb05 	bl	80110ec <iprintf>
 8008ae2:	f06f 030f 	mvn.w	r3, #15
 8008ae6:	e0df      	b.n	8008ca8 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	7d1b      	ldrb	r3, [r3, #20]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d009      	beq.n	8008b04 <tcp_connect+0x64>
 8008af0:	4b6f      	ldr	r3, [pc, #444]	; (8008cb0 <tcp_connect+0x210>)
 8008af2:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8008af6:	4972      	ldr	r1, [pc, #456]	; (8008cc0 <tcp_connect+0x220>)
 8008af8:	486f      	ldr	r0, [pc, #444]	; (8008cb8 <tcp_connect+0x218>)
 8008afa:	f008 faf7 	bl	80110ec <iprintf>
 8008afe:	f06f 0309 	mvn.w	r3, #9
 8008b02:	e0d1      	b.n	8008ca8 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d002      	beq.n	8008b10 <tcp_connect+0x70>
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	e000      	b.n	8008b12 <tcp_connect+0x72>
 8008b10:	2300      	movs	r3, #0
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	88fa      	ldrh	r2, [r7, #6]
 8008b1a:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	7a1b      	ldrb	r3, [r3, #8]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d006      	beq.n	8008b32 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	7a1b      	ldrb	r3, [r3, #8]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7fe fd43 	bl	80075b4 <netif_get_by_index>
 8008b2e:	6278      	str	r0, [r7, #36]	; 0x24
 8008b30:	e005      	b.n	8008b3e <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	3304      	adds	r3, #4
 8008b36:	4618      	mov	r0, r3
 8008b38:	f006 ff5c 	bl	800f9f4 <ip4_route>
 8008b3c:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d102      	bne.n	8008b4a <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8008b44:	f06f 0303 	mvn.w	r3, #3
 8008b48:	e0ae      	b.n	8008ca8 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d003      	beq.n	8008b58 <tcp_connect+0xb8>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d111      	bne.n	8008b7c <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8008b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d002      	beq.n	8008b64 <tcp_connect+0xc4>
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b60:	3304      	adds	r3, #4
 8008b62:	e000      	b.n	8008b66 <tcp_connect+0xc6>
 8008b64:	2300      	movs	r3, #0
 8008b66:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d102      	bne.n	8008b74 <tcp_connect+0xd4>
      return ERR_RTE;
 8008b6e:	f06f 0303 	mvn.w	r3, #3
 8008b72:	e099      	b.n	8008ca8 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	8adb      	ldrh	r3, [r3, #22]
 8008b80:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	8adb      	ldrh	r3, [r3, #22]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10c      	bne.n	8008ba4 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8008b8a:	f7ff ff43 	bl	8008a14 <tcp_new_port>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	461a      	mov	r2, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	8adb      	ldrh	r3, [r3, #22]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d102      	bne.n	8008ba4 <tcp_connect+0x104>
      return ERR_BUF;
 8008b9e:	f06f 0301 	mvn.w	r3, #1
 8008ba2:	e081      	b.n	8008ca8 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f001 f849 	bl	8009c3c <tcp_next_iss>
 8008baa:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	697a      	ldr	r2, [r7, #20]
 8008bb6:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	1e5a      	subs	r2, r3, #1
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	1e5a      	subs	r2, r3, #1
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	1e5a      	subs	r2, r3, #1
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008bee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008bf8:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	3304      	adds	r3, #4
 8008c02:	461a      	mov	r2, r3
 8008c04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c06:	f001 f83f 	bl	8009c88 <tcp_eff_send_mss_netif>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	683a      	ldr	r2, [r7, #0]
 8008c1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8008c22:	2102      	movs	r1, #2
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f004 faa3 	bl	800d170 <tcp_enqueue_flags>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8008c2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d136      	bne.n	8008ca4 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2202      	movs	r2, #2
 8008c3a:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8008c3c:	8b7b      	ldrh	r3, [r7, #26]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d021      	beq.n	8008c86 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8008c42:	4b20      	ldr	r3, [pc, #128]	; (8008cc4 <tcp_connect+0x224>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d105      	bne.n	8008c58 <tcp_connect+0x1b8>
 8008c4c:	4b1d      	ldr	r3, [pc, #116]	; (8008cc4 <tcp_connect+0x224>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	4a1c      	ldr	r2, [pc, #112]	; (8008cc4 <tcp_connect+0x224>)
 8008c54:	6013      	str	r3, [r2, #0]
 8008c56:	e013      	b.n	8008c80 <tcp_connect+0x1e0>
 8008c58:	4b1a      	ldr	r3, [pc, #104]	; (8008cc4 <tcp_connect+0x224>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	623b      	str	r3, [r7, #32]
 8008c5e:	e00c      	b.n	8008c7a <tcp_connect+0x1da>
 8008c60:	6a3b      	ldr	r3, [r7, #32]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d104      	bne.n	8008c74 <tcp_connect+0x1d4>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	68da      	ldr	r2, [r3, #12]
 8008c6e:	6a3b      	ldr	r3, [r7, #32]
 8008c70:	60da      	str	r2, [r3, #12]
 8008c72:	e005      	b.n	8008c80 <tcp_connect+0x1e0>
 8008c74:	6a3b      	ldr	r3, [r7, #32]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	623b      	str	r3, [r7, #32]
 8008c7a:	6a3b      	ldr	r3, [r7, #32]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1ef      	bne.n	8008c60 <tcp_connect+0x1c0>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8008c86:	4b10      	ldr	r3, [pc, #64]	; (8008cc8 <tcp_connect+0x228>)
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	60da      	str	r2, [r3, #12]
 8008c8e:	4a0e      	ldr	r2, [pc, #56]	; (8008cc8 <tcp_connect+0x228>)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6013      	str	r3, [r2, #0]
 8008c94:	f005 fad0 	bl	800e238 <tcp_timer_needed>
 8008c98:	4b0c      	ldr	r3, [pc, #48]	; (8008ccc <tcp_connect+0x22c>)
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f004 fb54 	bl	800d34c <tcp_output>
  }
  return ret;
 8008ca4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3728      	adds	r7, #40	; 0x28
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	08012df4 	.word	0x08012df4
 8008cb4:	080130d0 	.word	0x080130d0
 8008cb8:	08012e38 	.word	0x08012e38
 8008cbc:	080130ec 	.word	0x080130ec
 8008cc0:	08013108 	.word	0x08013108
 8008cc4:	2000882c 	.word	0x2000882c
 8008cc8:	20008834 	.word	0x20008834
 8008ccc:	2000883c 	.word	0x2000883c

08008cd0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008cd0:	b5b0      	push	{r4, r5, r7, lr}
 8008cd2:	b090      	sub	sp, #64	; 0x40
 8008cd4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8008cdc:	4b94      	ldr	r3, [pc, #592]	; (8008f30 <tcp_slowtmr+0x260>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	4a93      	ldr	r2, [pc, #588]	; (8008f30 <tcp_slowtmr+0x260>)
 8008ce4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008ce6:	4b93      	ldr	r3, [pc, #588]	; (8008f34 <tcp_slowtmr+0x264>)
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	3301      	adds	r3, #1
 8008cec:	b2da      	uxtb	r2, r3
 8008cee:	4b91      	ldr	r3, [pc, #580]	; (8008f34 <tcp_slowtmr+0x264>)
 8008cf0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8008cf6:	4b90      	ldr	r3, [pc, #576]	; (8008f38 <tcp_slowtmr+0x268>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8008cfc:	e29d      	b.n	800923a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d00:	7d1b      	ldrb	r3, [r3, #20]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d106      	bne.n	8008d14 <tcp_slowtmr+0x44>
 8008d06:	4b8d      	ldr	r3, [pc, #564]	; (8008f3c <tcp_slowtmr+0x26c>)
 8008d08:	f240 42be 	movw	r2, #1214	; 0x4be
 8008d0c:	498c      	ldr	r1, [pc, #560]	; (8008f40 <tcp_slowtmr+0x270>)
 8008d0e:	488d      	ldr	r0, [pc, #564]	; (8008f44 <tcp_slowtmr+0x274>)
 8008d10:	f008 f9ec 	bl	80110ec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d16:	7d1b      	ldrb	r3, [r3, #20]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d106      	bne.n	8008d2a <tcp_slowtmr+0x5a>
 8008d1c:	4b87      	ldr	r3, [pc, #540]	; (8008f3c <tcp_slowtmr+0x26c>)
 8008d1e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8008d22:	4989      	ldr	r1, [pc, #548]	; (8008f48 <tcp_slowtmr+0x278>)
 8008d24:	4887      	ldr	r0, [pc, #540]	; (8008f44 <tcp_slowtmr+0x274>)
 8008d26:	f008 f9e1 	bl	80110ec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2c:	7d1b      	ldrb	r3, [r3, #20]
 8008d2e:	2b0a      	cmp	r3, #10
 8008d30:	d106      	bne.n	8008d40 <tcp_slowtmr+0x70>
 8008d32:	4b82      	ldr	r3, [pc, #520]	; (8008f3c <tcp_slowtmr+0x26c>)
 8008d34:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8008d38:	4984      	ldr	r1, [pc, #528]	; (8008f4c <tcp_slowtmr+0x27c>)
 8008d3a:	4882      	ldr	r0, [pc, #520]	; (8008f44 <tcp_slowtmr+0x274>)
 8008d3c:	f008 f9d6 	bl	80110ec <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d42:	7f9a      	ldrb	r2, [r3, #30]
 8008d44:	4b7b      	ldr	r3, [pc, #492]	; (8008f34 <tcp_slowtmr+0x264>)
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d105      	bne.n	8008d58 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8008d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8008d56:	e270      	b.n	800923a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8008d58:	4b76      	ldr	r3, [pc, #472]	; (8008f34 <tcp_slowtmr+0x264>)
 8008d5a:	781a      	ldrb	r2, [r3, #0]
 8008d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8008d60:	2300      	movs	r3, #0
 8008d62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8008d66:	2300      	movs	r3, #0
 8008d68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6e:	7d1b      	ldrb	r3, [r3, #20]
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d10a      	bne.n	8008d8a <tcp_slowtmr+0xba>
 8008d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d7a:	2b05      	cmp	r3, #5
 8008d7c:	d905      	bls.n	8008d8a <tcp_slowtmr+0xba>
      ++pcb_remove;
 8008d7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d82:	3301      	adds	r3, #1
 8008d84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008d88:	e11e      	b.n	8008fc8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d90:	2b0b      	cmp	r3, #11
 8008d92:	d905      	bls.n	8008da0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8008d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d98:	3301      	adds	r3, #1
 8008d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008d9e:	e113      	b.n	8008fc8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8008da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d075      	beq.n	8008e96 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d006      	beq.n	8008dc0 <tcp_slowtmr+0xf0>
 8008db2:	4b62      	ldr	r3, [pc, #392]	; (8008f3c <tcp_slowtmr+0x26c>)
 8008db4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8008db8:	4965      	ldr	r1, [pc, #404]	; (8008f50 <tcp_slowtmr+0x280>)
 8008dba:	4862      	ldr	r0, [pc, #392]	; (8008f44 <tcp_slowtmr+0x274>)
 8008dbc:	f008 f996 	bl	80110ec <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d106      	bne.n	8008dd6 <tcp_slowtmr+0x106>
 8008dc8:	4b5c      	ldr	r3, [pc, #368]	; (8008f3c <tcp_slowtmr+0x26c>)
 8008dca:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008dce:	4961      	ldr	r1, [pc, #388]	; (8008f54 <tcp_slowtmr+0x284>)
 8008dd0:	485c      	ldr	r0, [pc, #368]	; (8008f44 <tcp_slowtmr+0x274>)
 8008dd2:	f008 f98b 	bl	80110ec <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8008ddc:	2b0b      	cmp	r3, #11
 8008dde:	d905      	bls.n	8008dec <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8008de0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008de4:	3301      	adds	r3, #1
 8008de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008dea:	e0ed      	b.n	8008fc8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008df2:	3b01      	subs	r3, #1
 8008df4:	4a58      	ldr	r2, [pc, #352]	; (8008f58 <tcp_slowtmr+0x288>)
 8008df6:	5cd3      	ldrb	r3, [r2, r3]
 8008df8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8008dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008e00:	7c7a      	ldrb	r2, [r7, #17]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d907      	bls.n	8008e16 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8008e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e08:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e12:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8008e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e18:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008e1c:	7c7a      	ldrb	r2, [r7, #17]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	f200 80d2 	bhi.w	8008fc8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8008e24:	2301      	movs	r3, #1
 8008e26:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8008e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d108      	bne.n	8008e44 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008e32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e34:	f005 f932 	bl	800e09c <tcp_zero_window_probe>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d014      	beq.n	8008e68 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8008e3e:	2300      	movs	r3, #0
 8008e40:	623b      	str	r3, [r7, #32]
 8008e42:	e011      	b.n	8008e68 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e4e:	f003 fff7 	bl	800ce40 <tcp_split_unsent_seg>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d107      	bne.n	8008e68 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8008e58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e5a:	f004 fa77 	bl	800d34c <tcp_output>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d101      	bne.n	8008e68 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8008e64:	2300      	movs	r3, #0
 8008e66:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8008e68:	6a3b      	ldr	r3, [r7, #32]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f000 80ac 	beq.w	8008fc8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8008e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e72:	2200      	movs	r2, #0
 8008e74:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008e7e:	2b06      	cmp	r3, #6
 8008e80:	f200 80a2 	bhi.w	8008fc8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8008e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e86:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	b2da      	uxtb	r2, r3
 8008e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e90:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8008e94:	e098      	b.n	8008fc8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e98:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	db0f      	blt.n	8008ec0 <tcp_slowtmr+0x1f0>
 8008ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008ea6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d008      	beq.n	8008ec0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8008eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	b21a      	sxth	r2, r3
 8008ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ebe:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8008ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8008ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	db7b      	blt.n	8008fc8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008ed0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ed2:	f004 fd2f 	bl	800d934 <tcp_rexmit_rto_prepare>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d007      	beq.n	8008eec <tcp_slowtmr+0x21c>
 8008edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d171      	bne.n	8008fc8 <tcp_slowtmr+0x2f8>
 8008ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d06d      	beq.n	8008fc8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8008eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eee:	7d1b      	ldrb	r3, [r3, #20]
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	d03a      	beq.n	8008f6a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008efa:	2b0c      	cmp	r3, #12
 8008efc:	bf28      	it	cs
 8008efe:	230c      	movcs	r3, #12
 8008f00:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f04:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008f08:	10db      	asrs	r3, r3, #3
 8008f0a:	b21b      	sxth	r3, r3
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f10:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008f14:	4413      	add	r3, r2
 8008f16:	7efa      	ldrb	r2, [r7, #27]
 8008f18:	4910      	ldr	r1, [pc, #64]	; (8008f5c <tcp_slowtmr+0x28c>)
 8008f1a:	5c8a      	ldrb	r2, [r1, r2]
 8008f1c:	4093      	lsls	r3, r2
 8008f1e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008f26:	4293      	cmp	r3, r2
 8008f28:	dc1a      	bgt.n	8008f60 <tcp_slowtmr+0x290>
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	b21a      	sxth	r2, r3
 8008f2e:	e019      	b.n	8008f64 <tcp_slowtmr+0x294>
 8008f30:	20008828 	.word	0x20008828
 8008f34:	2000883e 	.word	0x2000883e
 8008f38:	20008834 	.word	0x20008834
 8008f3c:	08012df4 	.word	0x08012df4
 8008f40:	08013138 	.word	0x08013138
 8008f44:	08012e38 	.word	0x08012e38
 8008f48:	08013164 	.word	0x08013164
 8008f4c:	08013190 	.word	0x08013190
 8008f50:	080131c0 	.word	0x080131c0
 8008f54:	080131f4 	.word	0x080131f4
 8008f58:	08014dcc 	.word	0x08014dcc
 8008f5c:	08014dbc 	.word	0x08014dbc
 8008f60:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8008f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f72:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f78:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	bf28      	it	cs
 8008f80:	4613      	movcs	r3, r2
 8008f82:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008f84:	8a7b      	ldrh	r3, [r7, #18]
 8008f86:	085b      	lsrs	r3, r3, #1
 8008f88:	b29a      	uxth	r2, r3
 8008f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f92:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f9a:	005b      	lsls	r3, r3, #1
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d206      	bcs.n	8008fb0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008fa6:	005b      	lsls	r3, r3, #1
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8008fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8008fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8008fc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fc4:	f004 fd26 	bl	800da14 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8008fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fca:	7d1b      	ldrb	r3, [r3, #20]
 8008fcc:	2b06      	cmp	r3, #6
 8008fce:	d111      	bne.n	8008ff4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8008fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd2:	8b5b      	ldrh	r3, [r3, #26]
 8008fd4:	f003 0310 	and.w	r3, r3, #16
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00b      	beq.n	8008ff4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008fdc:	4b9c      	ldr	r3, [pc, #624]	; (8009250 <tcp_slowtmr+0x580>)
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe2:	6a1b      	ldr	r3, [r3, #32]
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	2b28      	cmp	r3, #40	; 0x28
 8008fe8:	d904      	bls.n	8008ff4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8008fea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fee:	3301      	adds	r3, #1
 8008ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff6:	7a5b      	ldrb	r3, [r3, #9]
 8008ff8:	f003 0308 	and.w	r3, r3, #8
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d04a      	beq.n	8009096 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8009000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009002:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009004:	2b04      	cmp	r3, #4
 8009006:	d003      	beq.n	8009010 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8009008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800900c:	2b07      	cmp	r3, #7
 800900e:	d142      	bne.n	8009096 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009010:	4b8f      	ldr	r3, [pc, #572]	; (8009250 <tcp_slowtmr+0x580>)
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009016:	6a1b      	ldr	r3, [r3, #32]
 8009018:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800901a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009020:	4b8c      	ldr	r3, [pc, #560]	; (8009254 <tcp_slowtmr+0x584>)
 8009022:	440b      	add	r3, r1
 8009024:	498c      	ldr	r1, [pc, #560]	; (8009258 <tcp_slowtmr+0x588>)
 8009026:	fba1 1303 	umull	r1, r3, r1, r3
 800902a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800902c:	429a      	cmp	r2, r3
 800902e:	d90a      	bls.n	8009046 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8009030:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009034:	3301      	adds	r3, #1
 8009036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800903a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800903e:	3301      	adds	r3, #1
 8009040:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009044:	e027      	b.n	8009096 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009046:	4b82      	ldr	r3, [pc, #520]	; (8009250 <tcp_slowtmr+0x580>)
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904c:	6a1b      	ldr	r3, [r3, #32]
 800904e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009052:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009058:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800905c:	4618      	mov	r0, r3
 800905e:	4b7f      	ldr	r3, [pc, #508]	; (800925c <tcp_slowtmr+0x58c>)
 8009060:	fb00 f303 	mul.w	r3, r0, r3
 8009064:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009066:	497c      	ldr	r1, [pc, #496]	; (8009258 <tcp_slowtmr+0x588>)
 8009068:	fba1 1303 	umull	r1, r3, r1, r3
 800906c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800906e:	429a      	cmp	r2, r3
 8009070:	d911      	bls.n	8009096 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8009072:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009074:	f004 ffd2 	bl	800e01c <tcp_keepalive>
 8009078:	4603      	mov	r3, r0
 800907a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800907e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009082:	2b00      	cmp	r3, #0
 8009084:	d107      	bne.n	8009096 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8009086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009088:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800908c:	3301      	adds	r3, #1
 800908e:	b2da      	uxtb	r2, r3
 8009090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009092:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8009096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800909a:	2b00      	cmp	r3, #0
 800909c:	d011      	beq.n	80090c2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800909e:	4b6c      	ldr	r3, [pc, #432]	; (8009250 <tcp_slowtmr+0x580>)
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a4:	6a1b      	ldr	r3, [r3, #32]
 80090a6:	1ad2      	subs	r2, r2, r3
 80090a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090aa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80090ae:	4619      	mov	r1, r3
 80090b0:	460b      	mov	r3, r1
 80090b2:	005b      	lsls	r3, r3, #1
 80090b4:	440b      	add	r3, r1
 80090b6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d302      	bcc.n	80090c2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80090bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090be:	f000 fe8d 	bl	8009ddc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80090c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c4:	7d1b      	ldrb	r3, [r3, #20]
 80090c6:	2b03      	cmp	r3, #3
 80090c8:	d10b      	bne.n	80090e2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80090ca:	4b61      	ldr	r3, [pc, #388]	; (8009250 <tcp_slowtmr+0x580>)
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d0:	6a1b      	ldr	r3, [r3, #32]
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	2b28      	cmp	r3, #40	; 0x28
 80090d6:	d904      	bls.n	80090e2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80090d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090dc:	3301      	adds	r3, #1
 80090de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80090e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e4:	7d1b      	ldrb	r3, [r3, #20]
 80090e6:	2b09      	cmp	r3, #9
 80090e8:	d10b      	bne.n	8009102 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80090ea:	4b59      	ldr	r3, [pc, #356]	; (8009250 <tcp_slowtmr+0x580>)
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f0:	6a1b      	ldr	r3, [r3, #32]
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	2bf0      	cmp	r3, #240	; 0xf0
 80090f6:	d904      	bls.n	8009102 <tcp_slowtmr+0x432>
        ++pcb_remove;
 80090f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090fc:	3301      	adds	r3, #1
 80090fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009106:	2b00      	cmp	r3, #0
 8009108:	d060      	beq.n	80091cc <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800910a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009110:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8009112:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009114:	f000 fcae 	bl	8009a74 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8009118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911a:	2b00      	cmp	r3, #0
 800911c:	d010      	beq.n	8009140 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800911e:	4b50      	ldr	r3, [pc, #320]	; (8009260 <tcp_slowtmr+0x590>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009124:	429a      	cmp	r2, r3
 8009126:	d106      	bne.n	8009136 <tcp_slowtmr+0x466>
 8009128:	4b4e      	ldr	r3, [pc, #312]	; (8009264 <tcp_slowtmr+0x594>)
 800912a:	f240 526d 	movw	r2, #1389	; 0x56d
 800912e:	494e      	ldr	r1, [pc, #312]	; (8009268 <tcp_slowtmr+0x598>)
 8009130:	484e      	ldr	r0, [pc, #312]	; (800926c <tcp_slowtmr+0x59c>)
 8009132:	f007 ffdb 	bl	80110ec <iprintf>
        prev->next = pcb->next;
 8009136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009138:	68da      	ldr	r2, [r3, #12]
 800913a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913c:	60da      	str	r2, [r3, #12]
 800913e:	e00f      	b.n	8009160 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009140:	4b47      	ldr	r3, [pc, #284]	; (8009260 <tcp_slowtmr+0x590>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009146:	429a      	cmp	r2, r3
 8009148:	d006      	beq.n	8009158 <tcp_slowtmr+0x488>
 800914a:	4b46      	ldr	r3, [pc, #280]	; (8009264 <tcp_slowtmr+0x594>)
 800914c:	f240 5271 	movw	r2, #1393	; 0x571
 8009150:	4947      	ldr	r1, [pc, #284]	; (8009270 <tcp_slowtmr+0x5a0>)
 8009152:	4846      	ldr	r0, [pc, #280]	; (800926c <tcp_slowtmr+0x59c>)
 8009154:	f007 ffca 	bl	80110ec <iprintf>
        tcp_active_pcbs = pcb->next;
 8009158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	4a40      	ldr	r2, [pc, #256]	; (8009260 <tcp_slowtmr+0x590>)
 800915e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8009160:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009164:	2b00      	cmp	r3, #0
 8009166:	d013      	beq.n	8009190 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800916c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009170:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8009172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009174:	3304      	adds	r3, #4
 8009176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009178:	8ad2      	ldrh	r2, [r2, #22]
 800917a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800917c:	8b09      	ldrh	r1, [r1, #24]
 800917e:	9102      	str	r1, [sp, #8]
 8009180:	9201      	str	r2, [sp, #4]
 8009182:	9300      	str	r3, [sp, #0]
 8009184:	462b      	mov	r3, r5
 8009186:	4622      	mov	r2, r4
 8009188:	4601      	mov	r1, r0
 800918a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800918c:	f004 fe92 	bl	800deb4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8009190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8009196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009198:	7d1b      	ldrb	r3, [r3, #20]
 800919a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800919c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80091a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80091a6:	6838      	ldr	r0, [r7, #0]
 80091a8:	f7ff f896 	bl	80082d8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80091ac:	4b31      	ldr	r3, [pc, #196]	; (8009274 <tcp_slowtmr+0x5a4>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d004      	beq.n	80091c2 <tcp_slowtmr+0x4f2>
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f06f 010c 	mvn.w	r1, #12
 80091be:	68b8      	ldr	r0, [r7, #8]
 80091c0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80091c2:	4b2c      	ldr	r3, [pc, #176]	; (8009274 <tcp_slowtmr+0x5a4>)
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d037      	beq.n	800923a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80091ca:	e592      	b.n	8008cf2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80091cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ce:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80091d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80091d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d8:	7f1b      	ldrb	r3, [r3, #28]
 80091da:	3301      	adds	r3, #1
 80091dc:	b2da      	uxtb	r2, r3
 80091de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80091e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e4:	7f1a      	ldrb	r2, [r3, #28]
 80091e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e8:	7f5b      	ldrb	r3, [r3, #29]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d325      	bcc.n	800923a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80091ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f0:	2200      	movs	r2, #0
 80091f2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80091f4:	4b1f      	ldr	r3, [pc, #124]	; (8009274 <tcp_slowtmr+0x5a4>)
 80091f6:	2200      	movs	r2, #0
 80091f8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80091fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00b      	beq.n	800921c <tcp_slowtmr+0x54c>
 8009204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009206:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800920a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800920c:	6912      	ldr	r2, [r2, #16]
 800920e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009210:	4610      	mov	r0, r2
 8009212:	4798      	blx	r3
 8009214:	4603      	mov	r3, r0
 8009216:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800921a:	e002      	b.n	8009222 <tcp_slowtmr+0x552>
 800921c:	2300      	movs	r3, #0
 800921e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8009222:	4b14      	ldr	r3, [pc, #80]	; (8009274 <tcp_slowtmr+0x5a4>)
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d000      	beq.n	800922c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800922a:	e562      	b.n	8008cf2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800922c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009230:	2b00      	cmp	r3, #0
 8009232:	d102      	bne.n	800923a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8009234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009236:	f004 f889 	bl	800d34c <tcp_output>
  while (pcb != NULL) {
 800923a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800923c:	2b00      	cmp	r3, #0
 800923e:	f47f ad5e 	bne.w	8008cfe <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009242:	2300      	movs	r3, #0
 8009244:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8009246:	4b0c      	ldr	r3, [pc, #48]	; (8009278 <tcp_slowtmr+0x5a8>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800924c:	e069      	b.n	8009322 <tcp_slowtmr+0x652>
 800924e:	bf00      	nop
 8009250:	20008828 	.word	0x20008828
 8009254:	000a4cb8 	.word	0x000a4cb8
 8009258:	10624dd3 	.word	0x10624dd3
 800925c:	000124f8 	.word	0x000124f8
 8009260:	20008834 	.word	0x20008834
 8009264:	08012df4 	.word	0x08012df4
 8009268:	0801322c 	.word	0x0801322c
 800926c:	08012e38 	.word	0x08012e38
 8009270:	08013258 	.word	0x08013258
 8009274:	2000883c 	.word	0x2000883c
 8009278:	20008838 	.word	0x20008838
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800927c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800927e:	7d1b      	ldrb	r3, [r3, #20]
 8009280:	2b0a      	cmp	r3, #10
 8009282:	d006      	beq.n	8009292 <tcp_slowtmr+0x5c2>
 8009284:	4b2b      	ldr	r3, [pc, #172]	; (8009334 <tcp_slowtmr+0x664>)
 8009286:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800928a:	492b      	ldr	r1, [pc, #172]	; (8009338 <tcp_slowtmr+0x668>)
 800928c:	482b      	ldr	r0, [pc, #172]	; (800933c <tcp_slowtmr+0x66c>)
 800928e:	f007 ff2d 	bl	80110ec <iprintf>
    pcb_remove = 0;
 8009292:	2300      	movs	r3, #0
 8009294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009298:	4b29      	ldr	r3, [pc, #164]	; (8009340 <tcp_slowtmr+0x670>)
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929e:	6a1b      	ldr	r3, [r3, #32]
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	2bf0      	cmp	r3, #240	; 0xf0
 80092a4:	d904      	bls.n	80092b0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80092a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092aa:	3301      	adds	r3, #1
 80092ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80092b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d02f      	beq.n	8009318 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80092b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092ba:	f000 fbdb 	bl	8009a74 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80092be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d010      	beq.n	80092e6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80092c4:	4b1f      	ldr	r3, [pc, #124]	; (8009344 <tcp_slowtmr+0x674>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d106      	bne.n	80092dc <tcp_slowtmr+0x60c>
 80092ce:	4b19      	ldr	r3, [pc, #100]	; (8009334 <tcp_slowtmr+0x664>)
 80092d0:	f240 52af 	movw	r2, #1455	; 0x5af
 80092d4:	491c      	ldr	r1, [pc, #112]	; (8009348 <tcp_slowtmr+0x678>)
 80092d6:	4819      	ldr	r0, [pc, #100]	; (800933c <tcp_slowtmr+0x66c>)
 80092d8:	f007 ff08 	bl	80110ec <iprintf>
        prev->next = pcb->next;
 80092dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092de:	68da      	ldr	r2, [r3, #12]
 80092e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e2:	60da      	str	r2, [r3, #12]
 80092e4:	e00f      	b.n	8009306 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80092e6:	4b17      	ldr	r3, [pc, #92]	; (8009344 <tcp_slowtmr+0x674>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d006      	beq.n	80092fe <tcp_slowtmr+0x62e>
 80092f0:	4b10      	ldr	r3, [pc, #64]	; (8009334 <tcp_slowtmr+0x664>)
 80092f2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80092f6:	4915      	ldr	r1, [pc, #84]	; (800934c <tcp_slowtmr+0x67c>)
 80092f8:	4810      	ldr	r0, [pc, #64]	; (800933c <tcp_slowtmr+0x66c>)
 80092fa:	f007 fef7 	bl	80110ec <iprintf>
        tcp_tw_pcbs = pcb->next;
 80092fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	4a10      	ldr	r2, [pc, #64]	; (8009344 <tcp_slowtmr+0x674>)
 8009304:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009308:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800930a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009310:	69f8      	ldr	r0, [r7, #28]
 8009312:	f7fe ffe1 	bl	80082d8 <tcp_free>
 8009316:	e004      	b.n	8009322 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8009318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800931c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009324:	2b00      	cmp	r3, #0
 8009326:	d1a9      	bne.n	800927c <tcp_slowtmr+0x5ac>
    }
  }
}
 8009328:	bf00      	nop
 800932a:	bf00      	nop
 800932c:	3730      	adds	r7, #48	; 0x30
 800932e:	46bd      	mov	sp, r7
 8009330:	bdb0      	pop	{r4, r5, r7, pc}
 8009332:	bf00      	nop
 8009334:	08012df4 	.word	0x08012df4
 8009338:	08013284 	.word	0x08013284
 800933c:	08012e38 	.word	0x08012e38
 8009340:	20008828 	.word	0x20008828
 8009344:	20008838 	.word	0x20008838
 8009348:	080132b4 	.word	0x080132b4
 800934c:	080132dc 	.word	0x080132dc

08009350 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009356:	4b2d      	ldr	r3, [pc, #180]	; (800940c <tcp_fasttmr+0xbc>)
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	3301      	adds	r3, #1
 800935c:	b2da      	uxtb	r2, r3
 800935e:	4b2b      	ldr	r3, [pc, #172]	; (800940c <tcp_fasttmr+0xbc>)
 8009360:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009362:	4b2b      	ldr	r3, [pc, #172]	; (8009410 <tcp_fasttmr+0xc0>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009368:	e048      	b.n	80093fc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	7f9a      	ldrb	r2, [r3, #30]
 800936e:	4b27      	ldr	r3, [pc, #156]	; (800940c <tcp_fasttmr+0xbc>)
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	429a      	cmp	r2, r3
 8009374:	d03f      	beq.n	80093f6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009376:	4b25      	ldr	r3, [pc, #148]	; (800940c <tcp_fasttmr+0xbc>)
 8009378:	781a      	ldrb	r2, [r3, #0]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	8b5b      	ldrh	r3, [r3, #26]
 8009382:	f003 0301 	and.w	r3, r3, #1
 8009386:	2b00      	cmp	r3, #0
 8009388:	d010      	beq.n	80093ac <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	8b5b      	ldrh	r3, [r3, #26]
 800938e:	f043 0302 	orr.w	r3, r3, #2
 8009392:	b29a      	uxth	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f003 ffd7 	bl	800d34c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	8b5b      	ldrh	r3, [r3, #26]
 80093a2:	f023 0303 	bic.w	r3, r3, #3
 80093a6:	b29a      	uxth	r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	8b5b      	ldrh	r3, [r3, #26]
 80093b0:	f003 0308 	and.w	r3, r3, #8
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d009      	beq.n	80093cc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	8b5b      	ldrh	r3, [r3, #26]
 80093bc:	f023 0308 	bic.w	r3, r3, #8
 80093c0:	b29a      	uxth	r2, r3
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f7ff f91a 	bl	8008600 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00a      	beq.n	80093f0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80093da:	4b0e      	ldr	r3, [pc, #56]	; (8009414 <tcp_fasttmr+0xc4>)
 80093dc:	2200      	movs	r2, #0
 80093de:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 f819 	bl	8009418 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80093e6:	4b0b      	ldr	r3, [pc, #44]	; (8009414 <tcp_fasttmr+0xc4>)
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d000      	beq.n	80093f0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80093ee:	e7b8      	b.n	8009362 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	607b      	str	r3, [r7, #4]
 80093f4:	e002      	b.n	80093fc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1b3      	bne.n	800936a <tcp_fasttmr+0x1a>
    }
  }
}
 8009402:	bf00      	nop
 8009404:	bf00      	nop
 8009406:	3708      	adds	r7, #8
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	2000883e 	.word	0x2000883e
 8009410:	20008834 	.word	0x20008834
 8009414:	2000883c 	.word	0x2000883c

08009418 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009418:	b590      	push	{r4, r7, lr}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d109      	bne.n	800943a <tcp_process_refused_data+0x22>
 8009426:	4b37      	ldr	r3, [pc, #220]	; (8009504 <tcp_process_refused_data+0xec>)
 8009428:	f240 6209 	movw	r2, #1545	; 0x609
 800942c:	4936      	ldr	r1, [pc, #216]	; (8009508 <tcp_process_refused_data+0xf0>)
 800942e:	4837      	ldr	r0, [pc, #220]	; (800950c <tcp_process_refused_data+0xf4>)
 8009430:	f007 fe5c 	bl	80110ec <iprintf>
 8009434:	f06f 030f 	mvn.w	r3, #15
 8009438:	e060      	b.n	80094fc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800943e:	7b5b      	ldrb	r3, [r3, #13]
 8009440:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009446:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00b      	beq.n	8009470 <tcp_process_refused_data+0x58>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6918      	ldr	r0, [r3, #16]
 8009462:	2300      	movs	r3, #0
 8009464:	68ba      	ldr	r2, [r7, #8]
 8009466:	6879      	ldr	r1, [r7, #4]
 8009468:	47a0      	blx	r4
 800946a:	4603      	mov	r3, r0
 800946c:	73fb      	strb	r3, [r7, #15]
 800946e:	e007      	b.n	8009480 <tcp_process_refused_data+0x68>
 8009470:	2300      	movs	r3, #0
 8009472:	68ba      	ldr	r2, [r7, #8]
 8009474:	6879      	ldr	r1, [r7, #4]
 8009476:	2000      	movs	r0, #0
 8009478:	f000 f8a4 	bl	80095c4 <tcp_recv_null>
 800947c:	4603      	mov	r3, r0
 800947e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d12a      	bne.n	80094de <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009488:	7bbb      	ldrb	r3, [r7, #14]
 800948a:	f003 0320 	and.w	r3, r3, #32
 800948e:	2b00      	cmp	r3, #0
 8009490:	d033      	beq.n	80094fa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009496:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800949a:	d005      	beq.n	80094a8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094a0:	3301      	adds	r3, #1
 80094a2:	b29a      	uxth	r2, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00b      	beq.n	80094ca <tcp_process_refused_data+0xb2>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6918      	ldr	r0, [r3, #16]
 80094bc:	2300      	movs	r3, #0
 80094be:	2200      	movs	r2, #0
 80094c0:	6879      	ldr	r1, [r7, #4]
 80094c2:	47a0      	blx	r4
 80094c4:	4603      	mov	r3, r0
 80094c6:	73fb      	strb	r3, [r7, #15]
 80094c8:	e001      	b.n	80094ce <tcp_process_refused_data+0xb6>
 80094ca:	2300      	movs	r3, #0
 80094cc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80094ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094d2:	f113 0f0d 	cmn.w	r3, #13
 80094d6:	d110      	bne.n	80094fa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80094d8:	f06f 030c 	mvn.w	r3, #12
 80094dc:	e00e      	b.n	80094fc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80094de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094e2:	f113 0f0d 	cmn.w	r3, #13
 80094e6:	d102      	bne.n	80094ee <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80094e8:	f06f 030c 	mvn.w	r3, #12
 80094ec:	e006      	b.n	80094fc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	68ba      	ldr	r2, [r7, #8]
 80094f2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80094f4:	f06f 0304 	mvn.w	r3, #4
 80094f8:	e000      	b.n	80094fc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3714      	adds	r7, #20
 8009500:	46bd      	mov	sp, r7
 8009502:	bd90      	pop	{r4, r7, pc}
 8009504:	08012df4 	.word	0x08012df4
 8009508:	08013304 	.word	0x08013304
 800950c:	08012e38 	.word	0x08012e38

08009510 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009518:	e007      	b.n	800952a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 f80a 	bl	800953a <tcp_seg_free>
    seg = next;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d1f4      	bne.n	800951a <tcp_segs_free+0xa>
  }
}
 8009530:	bf00      	nop
 8009532:	bf00      	nop
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b082      	sub	sp, #8
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d00c      	beq.n	8009562 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d004      	beq.n	800955a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	4618      	mov	r0, r3
 8009556:	f7fe fb8d 	bl	8007c74 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800955a:	6879      	ldr	r1, [r7, #4]
 800955c:	2003      	movs	r0, #3
 800955e:	f7fd fd13 	bl	8006f88 <memp_free>
  }
}
 8009562:	bf00      	nop
 8009564:	3708      	adds	r7, #8
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
	...

0800956c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d106      	bne.n	8009588 <tcp_seg_copy+0x1c>
 800957a:	4b0f      	ldr	r3, [pc, #60]	; (80095b8 <tcp_seg_copy+0x4c>)
 800957c:	f240 6282 	movw	r2, #1666	; 0x682
 8009580:	490e      	ldr	r1, [pc, #56]	; (80095bc <tcp_seg_copy+0x50>)
 8009582:	480f      	ldr	r0, [pc, #60]	; (80095c0 <tcp_seg_copy+0x54>)
 8009584:	f007 fdb2 	bl	80110ec <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009588:	2003      	movs	r0, #3
 800958a:	f7fd fc8d 	bl	8006ea8 <memp_malloc>
 800958e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d101      	bne.n	800959a <tcp_seg_copy+0x2e>
    return NULL;
 8009596:	2300      	movs	r3, #0
 8009598:	e00a      	b.n	80095b0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800959a:	2210      	movs	r2, #16
 800959c:	6879      	ldr	r1, [r7, #4]
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f007 feb9 	bl	8011316 <memcpy>
  pbuf_ref(cseg->p);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7fe fc03 	bl	8007db4 <pbuf_ref>
  return cseg;
 80095ae:	68fb      	ldr	r3, [r7, #12]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	08012df4 	.word	0x08012df4
 80095bc:	08013348 	.word	0x08013348
 80095c0:	08012e38 	.word	0x08012e38

080095c4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
 80095d0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d109      	bne.n	80095ec <tcp_recv_null+0x28>
 80095d8:	4b12      	ldr	r3, [pc, #72]	; (8009624 <tcp_recv_null+0x60>)
 80095da:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80095de:	4912      	ldr	r1, [pc, #72]	; (8009628 <tcp_recv_null+0x64>)
 80095e0:	4812      	ldr	r0, [pc, #72]	; (800962c <tcp_recv_null+0x68>)
 80095e2:	f007 fd83 	bl	80110ec <iprintf>
 80095e6:	f06f 030f 	mvn.w	r3, #15
 80095ea:	e016      	b.n	800961a <tcp_recv_null+0x56>

  if (p != NULL) {
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d009      	beq.n	8009606 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	891b      	ldrh	r3, [r3, #8]
 80095f6:	4619      	mov	r1, r3
 80095f8:	68b8      	ldr	r0, [r7, #8]
 80095fa:	f7ff f9bb 	bl	8008974 <tcp_recved>
    pbuf_free(p);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f7fe fb38 	bl	8007c74 <pbuf_free>
 8009604:	e008      	b.n	8009618 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8009606:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d104      	bne.n	8009618 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800960e:	68b8      	ldr	r0, [r7, #8]
 8009610:	f7ff f860 	bl	80086d4 <tcp_close>
 8009614:	4603      	mov	r3, r0
 8009616:	e000      	b.n	800961a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	08012df4 	.word	0x08012df4
 8009628:	08013364 	.word	0x08013364
 800962c:	08012e38 	.word	0x08012e38

08009630 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b086      	sub	sp, #24
 8009634:	af00      	add	r7, sp, #0
 8009636:	4603      	mov	r3, r0
 8009638:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800963a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800963e:	2b00      	cmp	r3, #0
 8009640:	db01      	blt.n	8009646 <tcp_kill_prio+0x16>
 8009642:	79fb      	ldrb	r3, [r7, #7]
 8009644:	e000      	b.n	8009648 <tcp_kill_prio+0x18>
 8009646:	237f      	movs	r3, #127	; 0x7f
 8009648:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800964a:	7afb      	ldrb	r3, [r7, #11]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d034      	beq.n	80096ba <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009650:	7afb      	ldrb	r3, [r7, #11]
 8009652:	3b01      	subs	r3, #1
 8009654:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009656:	2300      	movs	r3, #0
 8009658:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800965a:	2300      	movs	r3, #0
 800965c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800965e:	4b19      	ldr	r3, [pc, #100]	; (80096c4 <tcp_kill_prio+0x94>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	617b      	str	r3, [r7, #20]
 8009664:	e01f      	b.n	80096a6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	7d5b      	ldrb	r3, [r3, #21]
 800966a:	7afa      	ldrb	r2, [r7, #11]
 800966c:	429a      	cmp	r2, r3
 800966e:	d80c      	bhi.n	800968a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009674:	7afa      	ldrb	r2, [r7, #11]
 8009676:	429a      	cmp	r2, r3
 8009678:	d112      	bne.n	80096a0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800967a:	4b13      	ldr	r3, [pc, #76]	; (80096c8 <tcp_kill_prio+0x98>)
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	6a1b      	ldr	r3, [r3, #32]
 8009682:	1ad3      	subs	r3, r2, r3
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	429a      	cmp	r2, r3
 8009688:	d80a      	bhi.n	80096a0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800968a:	4b0f      	ldr	r3, [pc, #60]	; (80096c8 <tcp_kill_prio+0x98>)
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	6a1b      	ldr	r3, [r3, #32]
 8009692:	1ad3      	subs	r3, r2, r3
 8009694:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	7d5b      	ldrb	r3, [r3, #21]
 800969e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	617b      	str	r3, [r7, #20]
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1dc      	bne.n	8009666 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d004      	beq.n	80096bc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80096b2:	6938      	ldr	r0, [r7, #16]
 80096b4:	f7ff f8f8 	bl	80088a8 <tcp_abort>
 80096b8:	e000      	b.n	80096bc <tcp_kill_prio+0x8c>
    return;
 80096ba:	bf00      	nop
  }
}
 80096bc:	3718      	adds	r7, #24
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	20008834 	.word	0x20008834
 80096c8:	20008828 	.word	0x20008828

080096cc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b086      	sub	sp, #24
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	4603      	mov	r3, r0
 80096d4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80096d6:	79fb      	ldrb	r3, [r7, #7]
 80096d8:	2b08      	cmp	r3, #8
 80096da:	d009      	beq.n	80096f0 <tcp_kill_state+0x24>
 80096dc:	79fb      	ldrb	r3, [r7, #7]
 80096de:	2b09      	cmp	r3, #9
 80096e0:	d006      	beq.n	80096f0 <tcp_kill_state+0x24>
 80096e2:	4b1a      	ldr	r3, [pc, #104]	; (800974c <tcp_kill_state+0x80>)
 80096e4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80096e8:	4919      	ldr	r1, [pc, #100]	; (8009750 <tcp_kill_state+0x84>)
 80096ea:	481a      	ldr	r0, [pc, #104]	; (8009754 <tcp_kill_state+0x88>)
 80096ec:	f007 fcfe 	bl	80110ec <iprintf>

  inactivity = 0;
 80096f0:	2300      	movs	r3, #0
 80096f2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80096f4:	2300      	movs	r3, #0
 80096f6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80096f8:	4b17      	ldr	r3, [pc, #92]	; (8009758 <tcp_kill_state+0x8c>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	617b      	str	r3, [r7, #20]
 80096fe:	e017      	b.n	8009730 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	7d1b      	ldrb	r3, [r3, #20]
 8009704:	79fa      	ldrb	r2, [r7, #7]
 8009706:	429a      	cmp	r2, r3
 8009708:	d10f      	bne.n	800972a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800970a:	4b14      	ldr	r3, [pc, #80]	; (800975c <tcp_kill_state+0x90>)
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	6a1b      	ldr	r3, [r3, #32]
 8009712:	1ad3      	subs	r3, r2, r3
 8009714:	68fa      	ldr	r2, [r7, #12]
 8009716:	429a      	cmp	r2, r3
 8009718:	d807      	bhi.n	800972a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800971a:	4b10      	ldr	r3, [pc, #64]	; (800975c <tcp_kill_state+0x90>)
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	6a1b      	ldr	r3, [r3, #32]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	68db      	ldr	r3, [r3, #12]
 800972e:	617b      	str	r3, [r7, #20]
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d1e4      	bne.n	8009700 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d003      	beq.n	8009744 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800973c:	2100      	movs	r1, #0
 800973e:	6938      	ldr	r0, [r7, #16]
 8009740:	f7fe fff4 	bl	800872c <tcp_abandon>
  }
}
 8009744:	bf00      	nop
 8009746:	3718      	adds	r7, #24
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	08012df4 	.word	0x08012df4
 8009750:	08013380 	.word	0x08013380
 8009754:	08012e38 	.word	0x08012e38
 8009758:	20008834 	.word	0x20008834
 800975c:	20008828 	.word	0x20008828

08009760 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009766:	2300      	movs	r3, #0
 8009768:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800976a:	2300      	movs	r3, #0
 800976c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800976e:	4b12      	ldr	r3, [pc, #72]	; (80097b8 <tcp_kill_timewait+0x58>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	60fb      	str	r3, [r7, #12]
 8009774:	e012      	b.n	800979c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009776:	4b11      	ldr	r3, [pc, #68]	; (80097bc <tcp_kill_timewait+0x5c>)
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6a1b      	ldr	r3, [r3, #32]
 800977e:	1ad3      	subs	r3, r2, r3
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	429a      	cmp	r2, r3
 8009784:	d807      	bhi.n	8009796 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009786:	4b0d      	ldr	r3, [pc, #52]	; (80097bc <tcp_kill_timewait+0x5c>)
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6a1b      	ldr	r3, [r3, #32]
 800978e:	1ad3      	subs	r3, r2, r3
 8009790:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	60fb      	str	r3, [r7, #12]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d1e9      	bne.n	8009776 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d002      	beq.n	80097ae <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80097a8:	68b8      	ldr	r0, [r7, #8]
 80097aa:	f7ff f87d 	bl	80088a8 <tcp_abort>
  }
}
 80097ae:	bf00      	nop
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	20008838 	.word	0x20008838
 80097bc:	20008828 	.word	0x20008828

080097c0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80097c6:	4b10      	ldr	r3, [pc, #64]	; (8009808 <tcp_handle_closepend+0x48>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80097cc:	e014      	b.n	80097f8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	8b5b      	ldrh	r3, [r3, #26]
 80097d8:	f003 0308 	and.w	r3, r3, #8
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d009      	beq.n	80097f4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	8b5b      	ldrh	r3, [r3, #26]
 80097e4:	f023 0308 	bic.w	r3, r3, #8
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f7fe ff06 	bl	8008600 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1e7      	bne.n	80097ce <tcp_handle_closepend+0xe>
  }
}
 80097fe:	bf00      	nop
 8009800:	bf00      	nop
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	20008834 	.word	0x20008834

0800980c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	4603      	mov	r3, r0
 8009814:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009816:	2001      	movs	r0, #1
 8009818:	f7fd fb46 	bl	8006ea8 <memp_malloc>
 800981c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d126      	bne.n	8009872 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009824:	f7ff ffcc 	bl	80097c0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009828:	f7ff ff9a 	bl	8009760 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800982c:	2001      	movs	r0, #1
 800982e:	f7fd fb3b 	bl	8006ea8 <memp_malloc>
 8009832:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d11b      	bne.n	8009872 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800983a:	2009      	movs	r0, #9
 800983c:	f7ff ff46 	bl	80096cc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009840:	2001      	movs	r0, #1
 8009842:	f7fd fb31 	bl	8006ea8 <memp_malloc>
 8009846:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d111      	bne.n	8009872 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800984e:	2008      	movs	r0, #8
 8009850:	f7ff ff3c 	bl	80096cc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009854:	2001      	movs	r0, #1
 8009856:	f7fd fb27 	bl	8006ea8 <memp_malloc>
 800985a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d107      	bne.n	8009872 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009862:	79fb      	ldrb	r3, [r7, #7]
 8009864:	4618      	mov	r0, r3
 8009866:	f7ff fee3 	bl	8009630 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800986a:	2001      	movs	r0, #1
 800986c:	f7fd fb1c 	bl	8006ea8 <memp_malloc>
 8009870:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d03f      	beq.n	80098f8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009878:	229c      	movs	r2, #156	; 0x9c
 800987a:	2100      	movs	r1, #0
 800987c:	68f8      	ldr	r0, [r7, #12]
 800987e:	f007 fcd4 	bl	801122a <memset>
    pcb->prio = prio;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	79fa      	ldrb	r2, [r7, #7]
 8009886:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800988e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009898:	855a      	strh	r2, [r3, #42]	; 0x2a
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	22ff      	movs	r2, #255	; 0xff
 80098a6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f44f 7206 	mov.w	r2, #536	; 0x218
 80098ae:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2206      	movs	r2, #6
 80098b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2206      	movs	r2, #6
 80098bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80098c4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2201      	movs	r2, #1
 80098ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80098ce:	4b0d      	ldr	r3, [pc, #52]	; (8009904 <tcp_alloc+0xf8>)
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80098d6:	4b0c      	ldr	r3, [pc, #48]	; (8009908 <tcp_alloc+0xfc>)
 80098d8:	781a      	ldrb	r2, [r3, #0]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80098e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	4a08      	ldr	r2, [pc, #32]	; (800990c <tcp_alloc+0x100>)
 80098ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	4a07      	ldr	r2, [pc, #28]	; (8009910 <tcp_alloc+0x104>)
 80098f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80098f8:	68fb      	ldr	r3, [r7, #12]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	20008828 	.word	0x20008828
 8009908:	2000883e 	.word	0x2000883e
 800990c:	080095c5 	.word	0x080095c5
 8009910:	006ddd00 	.word	0x006ddd00

08009914 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8009918:	2040      	movs	r0, #64	; 0x40
 800991a:	f7ff ff77 	bl	800980c <tcp_alloc>
 800991e:	4603      	mov	r3, r0
}
 8009920:	4618      	mov	r0, r3
 8009922:	bd80      	pop	{r7, pc}

08009924 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d002      	beq.n	800993a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	683a      	ldr	r2, [r7, #0]
 8009938:	611a      	str	r2, [r3, #16]
  }
}
 800993a:	bf00      	nop
 800993c:	370c      	adds	r7, #12
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr
	...

08009948 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d00e      	beq.n	8009976 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	7d1b      	ldrb	r3, [r3, #20]
 800995c:	2b01      	cmp	r3, #1
 800995e:	d106      	bne.n	800996e <tcp_recv+0x26>
 8009960:	4b07      	ldr	r3, [pc, #28]	; (8009980 <tcp_recv+0x38>)
 8009962:	f240 72df 	movw	r2, #2015	; 0x7df
 8009966:	4907      	ldr	r1, [pc, #28]	; (8009984 <tcp_recv+0x3c>)
 8009968:	4807      	ldr	r0, [pc, #28]	; (8009988 <tcp_recv+0x40>)
 800996a:	f007 fbbf 	bl	80110ec <iprintf>
    pcb->recv = recv;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	683a      	ldr	r2, [r7, #0]
 8009972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8009976:	bf00      	nop
 8009978:	3708      	adds	r7, #8
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	08012df4 	.word	0x08012df4
 8009984:	08013390 	.word	0x08013390
 8009988:	08012e38 	.word	0x08012e38

0800998c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00e      	beq.n	80099ba <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	7d1b      	ldrb	r3, [r3, #20]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d106      	bne.n	80099b2 <tcp_sent+0x26>
 80099a4:	4b07      	ldr	r3, [pc, #28]	; (80099c4 <tcp_sent+0x38>)
 80099a6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80099aa:	4907      	ldr	r1, [pc, #28]	; (80099c8 <tcp_sent+0x3c>)
 80099ac:	4807      	ldr	r0, [pc, #28]	; (80099cc <tcp_sent+0x40>)
 80099ae:	f007 fb9d 	bl	80110ec <iprintf>
    pcb->sent = sent;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	683a      	ldr	r2, [r7, #0]
 80099b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80099ba:	bf00      	nop
 80099bc:	3708      	adds	r7, #8
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	08012df4 	.word	0x08012df4
 80099c8:	080133b8 	.word	0x080133b8
 80099cc:	08012e38 	.word	0x08012e38

080099d0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00e      	beq.n	80099fe <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	7d1b      	ldrb	r3, [r3, #20]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d106      	bne.n	80099f6 <tcp_err+0x26>
 80099e8:	4b07      	ldr	r3, [pc, #28]	; (8009a08 <tcp_err+0x38>)
 80099ea:	f640 020d 	movw	r2, #2061	; 0x80d
 80099ee:	4907      	ldr	r1, [pc, #28]	; (8009a0c <tcp_err+0x3c>)
 80099f0:	4807      	ldr	r0, [pc, #28]	; (8009a10 <tcp_err+0x40>)
 80099f2:	f007 fb7b 	bl	80110ec <iprintf>
    pcb->errf = err;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	683a      	ldr	r2, [r7, #0]
 80099fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80099fe:	bf00      	nop
 8009a00:	3708      	adds	r7, #8
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	08012df4 	.word	0x08012df4
 8009a0c:	080133e0 	.word	0x080133e0
 8009a10:	08012e38 	.word	0x08012e38

08009a14 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	4613      	mov	r3, r2
 8009a20:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d107      	bne.n	8009a38 <tcp_poll+0x24>
 8009a28:	4b0e      	ldr	r3, [pc, #56]	; (8009a64 <tcp_poll+0x50>)
 8009a2a:	f640 023d 	movw	r2, #2109	; 0x83d
 8009a2e:	490e      	ldr	r1, [pc, #56]	; (8009a68 <tcp_poll+0x54>)
 8009a30:	480e      	ldr	r0, [pc, #56]	; (8009a6c <tcp_poll+0x58>)
 8009a32:	f007 fb5b 	bl	80110ec <iprintf>
 8009a36:	e011      	b.n	8009a5c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	7d1b      	ldrb	r3, [r3, #20]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d106      	bne.n	8009a4e <tcp_poll+0x3a>
 8009a40:	4b08      	ldr	r3, [pc, #32]	; (8009a64 <tcp_poll+0x50>)
 8009a42:	f640 023e 	movw	r2, #2110	; 0x83e
 8009a46:	490a      	ldr	r1, [pc, #40]	; (8009a70 <tcp_poll+0x5c>)
 8009a48:	4808      	ldr	r0, [pc, #32]	; (8009a6c <tcp_poll+0x58>)
 8009a4a:	f007 fb4f 	bl	80110ec <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	68ba      	ldr	r2, [r7, #8]
 8009a52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	79fa      	ldrb	r2, [r7, #7]
 8009a5a:	775a      	strb	r2, [r3, #29]
}
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	08012df4 	.word	0x08012df4
 8009a68:	08013408 	.word	0x08013408
 8009a6c:	08012e38 	.word	0x08012e38
 8009a70:	08013420 	.word	0x08013420

08009a74 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d107      	bne.n	8009a92 <tcp_pcb_purge+0x1e>
 8009a82:	4b21      	ldr	r3, [pc, #132]	; (8009b08 <tcp_pcb_purge+0x94>)
 8009a84:	f640 0251 	movw	r2, #2129	; 0x851
 8009a88:	4920      	ldr	r1, [pc, #128]	; (8009b0c <tcp_pcb_purge+0x98>)
 8009a8a:	4821      	ldr	r0, [pc, #132]	; (8009b10 <tcp_pcb_purge+0x9c>)
 8009a8c:	f007 fb2e 	bl	80110ec <iprintf>
 8009a90:	e037      	b.n	8009b02 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	7d1b      	ldrb	r3, [r3, #20]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d033      	beq.n	8009b02 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009a9e:	2b0a      	cmp	r3, #10
 8009aa0:	d02f      	beq.n	8009b02 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d02b      	beq.n	8009b02 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d007      	beq.n	8009ac2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7fe f8dc 	bl	8007c74 <pbuf_free>
      pcb->refused_data = NULL;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d002      	beq.n	8009ad0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f986 	bl	8009ddc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ad6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7ff fd17 	bl	8009510 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7ff fd12 	bl	8009510 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	66da      	str	r2, [r3, #108]	; 0x6c
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009b02:	3708      	adds	r7, #8
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	08012df4 	.word	0x08012df4
 8009b0c:	08013440 	.word	0x08013440
 8009b10:	08012e38 	.word	0x08012e38

08009b14 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d106      	bne.n	8009b32 <tcp_pcb_remove+0x1e>
 8009b24:	4b3e      	ldr	r3, [pc, #248]	; (8009c20 <tcp_pcb_remove+0x10c>)
 8009b26:	f640 0283 	movw	r2, #2179	; 0x883
 8009b2a:	493e      	ldr	r1, [pc, #248]	; (8009c24 <tcp_pcb_remove+0x110>)
 8009b2c:	483e      	ldr	r0, [pc, #248]	; (8009c28 <tcp_pcb_remove+0x114>)
 8009b2e:	f007 fadd 	bl	80110ec <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d106      	bne.n	8009b46 <tcp_pcb_remove+0x32>
 8009b38:	4b39      	ldr	r3, [pc, #228]	; (8009c20 <tcp_pcb_remove+0x10c>)
 8009b3a:	f640 0284 	movw	r2, #2180	; 0x884
 8009b3e:	493b      	ldr	r1, [pc, #236]	; (8009c2c <tcp_pcb_remove+0x118>)
 8009b40:	4839      	ldr	r0, [pc, #228]	; (8009c28 <tcp_pcb_remove+0x114>)
 8009b42:	f007 fad3 	bl	80110ec <iprintf>

  TCP_RMV(pcblist, pcb);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	683a      	ldr	r2, [r7, #0]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d105      	bne.n	8009b5c <tcp_pcb_remove+0x48>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	68da      	ldr	r2, [r3, #12]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	601a      	str	r2, [r3, #0]
 8009b5a:	e013      	b.n	8009b84 <tcp_pcb_remove+0x70>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	60fb      	str	r3, [r7, #12]
 8009b62:	e00c      	b.n	8009b7e <tcp_pcb_remove+0x6a>
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	683a      	ldr	r2, [r7, #0]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d104      	bne.n	8009b78 <tcp_pcb_remove+0x64>
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	68da      	ldr	r2, [r3, #12]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	60da      	str	r2, [r3, #12]
 8009b76:	e005      	b.n	8009b84 <tcp_pcb_remove+0x70>
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	68db      	ldr	r3, [r3, #12]
 8009b7c:	60fb      	str	r3, [r7, #12]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d1ef      	bne.n	8009b64 <tcp_pcb_remove+0x50>
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	2200      	movs	r2, #0
 8009b88:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8009b8a:	6838      	ldr	r0, [r7, #0]
 8009b8c:	f7ff ff72 	bl	8009a74 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	7d1b      	ldrb	r3, [r3, #20]
 8009b94:	2b0a      	cmp	r3, #10
 8009b96:	d013      	beq.n	8009bc0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d00f      	beq.n	8009bc0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	8b5b      	ldrh	r3, [r3, #26]
 8009ba4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d009      	beq.n	8009bc0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	8b5b      	ldrh	r3, [r3, #26]
 8009bb0:	f043 0302 	orr.w	r3, r3, #2
 8009bb4:	b29a      	uxth	r2, r3
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009bba:	6838      	ldr	r0, [r7, #0]
 8009bbc:	f003 fbc6 	bl	800d34c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	7d1b      	ldrb	r3, [r3, #20]
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d020      	beq.n	8009c0a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d006      	beq.n	8009bde <tcp_pcb_remove+0xca>
 8009bd0:	4b13      	ldr	r3, [pc, #76]	; (8009c20 <tcp_pcb_remove+0x10c>)
 8009bd2:	f640 0293 	movw	r2, #2195	; 0x893
 8009bd6:	4916      	ldr	r1, [pc, #88]	; (8009c30 <tcp_pcb_remove+0x11c>)
 8009bd8:	4813      	ldr	r0, [pc, #76]	; (8009c28 <tcp_pcb_remove+0x114>)
 8009bda:	f007 fa87 	bl	80110ec <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d006      	beq.n	8009bf4 <tcp_pcb_remove+0xe0>
 8009be6:	4b0e      	ldr	r3, [pc, #56]	; (8009c20 <tcp_pcb_remove+0x10c>)
 8009be8:	f640 0294 	movw	r2, #2196	; 0x894
 8009bec:	4911      	ldr	r1, [pc, #68]	; (8009c34 <tcp_pcb_remove+0x120>)
 8009bee:	480e      	ldr	r0, [pc, #56]	; (8009c28 <tcp_pcb_remove+0x114>)
 8009bf0:	f007 fa7c 	bl	80110ec <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d006      	beq.n	8009c0a <tcp_pcb_remove+0xf6>
 8009bfc:	4b08      	ldr	r3, [pc, #32]	; (8009c20 <tcp_pcb_remove+0x10c>)
 8009bfe:	f640 0296 	movw	r2, #2198	; 0x896
 8009c02:	490d      	ldr	r1, [pc, #52]	; (8009c38 <tcp_pcb_remove+0x124>)
 8009c04:	4808      	ldr	r0, [pc, #32]	; (8009c28 <tcp_pcb_remove+0x114>)
 8009c06:	f007 fa71 	bl	80110ec <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	2200      	movs	r2, #0
 8009c14:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009c16:	bf00      	nop
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	08012df4 	.word	0x08012df4
 8009c24:	0801345c 	.word	0x0801345c
 8009c28:	08012e38 	.word	0x08012e38
 8009c2c:	08013478 	.word	0x08013478
 8009c30:	08013498 	.word	0x08013498
 8009c34:	080134b0 	.word	0x080134b0
 8009c38:	080134cc 	.word	0x080134cc

08009c3c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d106      	bne.n	8009c58 <tcp_next_iss+0x1c>
 8009c4a:	4b0a      	ldr	r3, [pc, #40]	; (8009c74 <tcp_next_iss+0x38>)
 8009c4c:	f640 02af 	movw	r2, #2223	; 0x8af
 8009c50:	4909      	ldr	r1, [pc, #36]	; (8009c78 <tcp_next_iss+0x3c>)
 8009c52:	480a      	ldr	r0, [pc, #40]	; (8009c7c <tcp_next_iss+0x40>)
 8009c54:	f007 fa4a 	bl	80110ec <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009c58:	4b09      	ldr	r3, [pc, #36]	; (8009c80 <tcp_next_iss+0x44>)
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	4b09      	ldr	r3, [pc, #36]	; (8009c84 <tcp_next_iss+0x48>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4413      	add	r3, r2
 8009c62:	4a07      	ldr	r2, [pc, #28]	; (8009c80 <tcp_next_iss+0x44>)
 8009c64:	6013      	str	r3, [r2, #0]
  return iss;
 8009c66:	4b06      	ldr	r3, [pc, #24]	; (8009c80 <tcp_next_iss+0x44>)
 8009c68:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3708      	adds	r7, #8
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	08012df4 	.word	0x08012df4
 8009c78:	080134e4 	.word	0x080134e4
 8009c7c:	08012e38 	.word	0x08012e38
 8009c80:	20000024 	.word	0x20000024
 8009c84:	20008828 	.word	0x20008828

08009c88 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b086      	sub	sp, #24
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	4603      	mov	r3, r0
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	607a      	str	r2, [r7, #4]
 8009c94:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d106      	bne.n	8009caa <tcp_eff_send_mss_netif+0x22>
 8009c9c:	4b14      	ldr	r3, [pc, #80]	; (8009cf0 <tcp_eff_send_mss_netif+0x68>)
 8009c9e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8009ca2:	4914      	ldr	r1, [pc, #80]	; (8009cf4 <tcp_eff_send_mss_netif+0x6c>)
 8009ca4:	4814      	ldr	r0, [pc, #80]	; (8009cf8 <tcp_eff_send_mss_netif+0x70>)
 8009ca6:	f007 fa21 	bl	80110ec <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d101      	bne.n	8009cb4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8009cb0:	89fb      	ldrh	r3, [r7, #14]
 8009cb2:	e019      	b.n	8009ce8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009cb8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009cba:	8afb      	ldrh	r3, [r7, #22]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d012      	beq.n	8009ce6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009cc0:	2328      	movs	r3, #40	; 0x28
 8009cc2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009cc4:	8afa      	ldrh	r2, [r7, #22]
 8009cc6:	8abb      	ldrh	r3, [r7, #20]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d904      	bls.n	8009cd6 <tcp_eff_send_mss_netif+0x4e>
 8009ccc:	8afa      	ldrh	r2, [r7, #22]
 8009cce:	8abb      	ldrh	r3, [r7, #20]
 8009cd0:	1ad3      	subs	r3, r2, r3
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	e000      	b.n	8009cd8 <tcp_eff_send_mss_netif+0x50>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009cda:	8a7a      	ldrh	r2, [r7, #18]
 8009cdc:	89fb      	ldrh	r3, [r7, #14]
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	bf28      	it	cs
 8009ce2:	4613      	movcs	r3, r2
 8009ce4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8009ce6:	89fb      	ldrh	r3, [r7, #14]
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3718      	adds	r7, #24
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	08012df4 	.word	0x08012df4
 8009cf4:	08013500 	.word	0x08013500
 8009cf8:	08012e38 	.word	0x08012e38

08009cfc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d119      	bne.n	8009d44 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009d10:	4b10      	ldr	r3, [pc, #64]	; (8009d54 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8009d12:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8009d16:	4910      	ldr	r1, [pc, #64]	; (8009d58 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8009d18:	4810      	ldr	r0, [pc, #64]	; (8009d5c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8009d1a:	f007 f9e7 	bl	80110ec <iprintf>

  while (pcb != NULL) {
 8009d1e:	e011      	b.n	8009d44 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d108      	bne.n	8009d3e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009d32:	68f8      	ldr	r0, [r7, #12]
 8009d34:	f7fe fdb8 	bl	80088a8 <tcp_abort>
      pcb = next;
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	60fb      	str	r3, [r7, #12]
 8009d3c:	e002      	b.n	8009d44 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d1ea      	bne.n	8009d20 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8009d4a:	bf00      	nop
 8009d4c:	bf00      	nop
 8009d4e:	3710      	adds	r7, #16
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	08012df4 	.word	0x08012df4
 8009d58:	08013528 	.word	0x08013528
 8009d5c:	08012e38 	.word	0x08012e38

08009d60 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d02a      	beq.n	8009dc6 <tcp_netif_ip_addr_changed+0x66>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d026      	beq.n	8009dc6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009d78:	4b15      	ldr	r3, [pc, #84]	; (8009dd0 <tcp_netif_ip_addr_changed+0x70>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f7ff ffbc 	bl	8009cfc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009d84:	4b13      	ldr	r3, [pc, #76]	; (8009dd4 <tcp_netif_ip_addr_changed+0x74>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4619      	mov	r1, r3
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f7ff ffb6 	bl	8009cfc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d017      	beq.n	8009dc6 <tcp_netif_ip_addr_changed+0x66>
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d013      	beq.n	8009dc6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009d9e:	4b0e      	ldr	r3, [pc, #56]	; (8009dd8 <tcp_netif_ip_addr_changed+0x78>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	60fb      	str	r3, [r7, #12]
 8009da4:	e00c      	b.n	8009dc0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d103      	bne.n	8009dba <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	60fb      	str	r3, [r7, #12]
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d1ef      	bne.n	8009da6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8009dc6:	bf00      	nop
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	20008834 	.word	0x20008834
 8009dd4:	2000882c 	.word	0x2000882c
 8009dd8:	20008830 	.word	0x20008830

08009ddc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d007      	beq.n	8009dfc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7ff fb8d 	bl	8009510 <tcp_segs_free>
    pcb->ooseq = NULL;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009dfc:	bf00      	nop
 8009dfe:	3708      	adds	r7, #8
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009e04:	b590      	push	{r4, r7, lr}
 8009e06:	b08d      	sub	sp, #52	; 0x34
 8009e08:	af04      	add	r7, sp, #16
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d105      	bne.n	8009e20 <tcp_input+0x1c>
 8009e14:	4b9b      	ldr	r3, [pc, #620]	; (800a084 <tcp_input+0x280>)
 8009e16:	2283      	movs	r2, #131	; 0x83
 8009e18:	499b      	ldr	r1, [pc, #620]	; (800a088 <tcp_input+0x284>)
 8009e1a:	489c      	ldr	r0, [pc, #624]	; (800a08c <tcp_input+0x288>)
 8009e1c:	f007 f966 	bl	80110ec <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	4a9a      	ldr	r2, [pc, #616]	; (800a090 <tcp_input+0x28c>)
 8009e26:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	895b      	ldrh	r3, [r3, #10]
 8009e2c:	2b13      	cmp	r3, #19
 8009e2e:	f240 83d1 	bls.w	800a5d4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009e32:	4b98      	ldr	r3, [pc, #608]	; (800a094 <tcp_input+0x290>)
 8009e34:	695b      	ldr	r3, [r3, #20]
 8009e36:	4a97      	ldr	r2, [pc, #604]	; (800a094 <tcp_input+0x290>)
 8009e38:	6812      	ldr	r2, [r2, #0]
 8009e3a:	4611      	mov	r1, r2
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f006 f86f 	bl	800ff20 <ip4_addr_isbroadcast_u32>
 8009e42:	4603      	mov	r3, r0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	f040 83c7 	bne.w	800a5d8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009e4a:	4b92      	ldr	r3, [pc, #584]	; (800a094 <tcp_input+0x290>)
 8009e4c:	695b      	ldr	r3, [r3, #20]
 8009e4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009e52:	2be0      	cmp	r3, #224	; 0xe0
 8009e54:	f000 83c0 	beq.w	800a5d8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009e58:	4b8d      	ldr	r3, [pc, #564]	; (800a090 <tcp_input+0x28c>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	899b      	ldrh	r3, [r3, #12]
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7fc fba9 	bl	80065b8 <lwip_htons>
 8009e66:	4603      	mov	r3, r0
 8009e68:	0b1b      	lsrs	r3, r3, #12
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009e72:	7cbb      	ldrb	r3, [r7, #18]
 8009e74:	2b13      	cmp	r3, #19
 8009e76:	f240 83b1 	bls.w	800a5dc <tcp_input+0x7d8>
 8009e7a:	7cbb      	ldrb	r3, [r7, #18]
 8009e7c:	b29a      	uxth	r2, r3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	891b      	ldrh	r3, [r3, #8]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	f200 83aa 	bhi.w	800a5dc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8009e88:	7cbb      	ldrb	r3, [r7, #18]
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	3b14      	subs	r3, #20
 8009e8e:	b29a      	uxth	r2, r3
 8009e90:	4b81      	ldr	r3, [pc, #516]	; (800a098 <tcp_input+0x294>)
 8009e92:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009e94:	4b81      	ldr	r3, [pc, #516]	; (800a09c <tcp_input+0x298>)
 8009e96:	2200      	movs	r2, #0
 8009e98:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	895a      	ldrh	r2, [r3, #10]
 8009e9e:	7cbb      	ldrb	r3, [r7, #18]
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d309      	bcc.n	8009eba <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009ea6:	4b7c      	ldr	r3, [pc, #496]	; (800a098 <tcp_input+0x294>)
 8009ea8:	881a      	ldrh	r2, [r3, #0]
 8009eaa:	4b7d      	ldr	r3, [pc, #500]	; (800a0a0 <tcp_input+0x29c>)
 8009eac:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8009eae:	7cbb      	ldrb	r3, [r7, #18]
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f7fd fe58 	bl	8007b68 <pbuf_remove_header>
 8009eb8:	e04e      	b.n	8009f58 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d105      	bne.n	8009ece <tcp_input+0xca>
 8009ec2:	4b70      	ldr	r3, [pc, #448]	; (800a084 <tcp_input+0x280>)
 8009ec4:	22c2      	movs	r2, #194	; 0xc2
 8009ec6:	4977      	ldr	r1, [pc, #476]	; (800a0a4 <tcp_input+0x2a0>)
 8009ec8:	4870      	ldr	r0, [pc, #448]	; (800a08c <tcp_input+0x288>)
 8009eca:	f007 f90f 	bl	80110ec <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8009ece:	2114      	movs	r1, #20
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f7fd fe49 	bl	8007b68 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	895a      	ldrh	r2, [r3, #10]
 8009eda:	4b71      	ldr	r3, [pc, #452]	; (800a0a0 <tcp_input+0x29c>)
 8009edc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009ede:	4b6e      	ldr	r3, [pc, #440]	; (800a098 <tcp_input+0x294>)
 8009ee0:	881a      	ldrh	r2, [r3, #0]
 8009ee2:	4b6f      	ldr	r3, [pc, #444]	; (800a0a0 <tcp_input+0x29c>)
 8009ee4:	881b      	ldrh	r3, [r3, #0]
 8009ee6:	1ad3      	subs	r3, r2, r3
 8009ee8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8009eea:	4b6d      	ldr	r3, [pc, #436]	; (800a0a0 <tcp_input+0x29c>)
 8009eec:	881b      	ldrh	r3, [r3, #0]
 8009eee:	4619      	mov	r1, r3
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f7fd fe39 	bl	8007b68 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	895b      	ldrh	r3, [r3, #10]
 8009efc:	8a3a      	ldrh	r2, [r7, #16]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	f200 836e 	bhi.w	800a5e0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	4a64      	ldr	r2, [pc, #400]	; (800a09c <tcp_input+0x298>)
 8009f0c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	8a3a      	ldrh	r2, [r7, #16]
 8009f14:	4611      	mov	r1, r2
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7fd fe26 	bl	8007b68 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	891a      	ldrh	r2, [r3, #8]
 8009f20:	8a3b      	ldrh	r3, [r7, #16]
 8009f22:	1ad3      	subs	r3, r2, r3
 8009f24:	b29a      	uxth	r2, r3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	895b      	ldrh	r3, [r3, #10]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d005      	beq.n	8009f3e <tcp_input+0x13a>
 8009f32:	4b54      	ldr	r3, [pc, #336]	; (800a084 <tcp_input+0x280>)
 8009f34:	22df      	movs	r2, #223	; 0xdf
 8009f36:	495c      	ldr	r1, [pc, #368]	; (800a0a8 <tcp_input+0x2a4>)
 8009f38:	4854      	ldr	r0, [pc, #336]	; (800a08c <tcp_input+0x288>)
 8009f3a:	f007 f8d7 	bl	80110ec <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	891a      	ldrh	r2, [r3, #8]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	891b      	ldrh	r3, [r3, #8]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d005      	beq.n	8009f58 <tcp_input+0x154>
 8009f4c:	4b4d      	ldr	r3, [pc, #308]	; (800a084 <tcp_input+0x280>)
 8009f4e:	22e0      	movs	r2, #224	; 0xe0
 8009f50:	4956      	ldr	r1, [pc, #344]	; (800a0ac <tcp_input+0x2a8>)
 8009f52:	484e      	ldr	r0, [pc, #312]	; (800a08c <tcp_input+0x288>)
 8009f54:	f007 f8ca 	bl	80110ec <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009f58:	4b4d      	ldr	r3, [pc, #308]	; (800a090 <tcp_input+0x28c>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	881b      	ldrh	r3, [r3, #0]
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	4a4b      	ldr	r2, [pc, #300]	; (800a090 <tcp_input+0x28c>)
 8009f62:	6814      	ldr	r4, [r2, #0]
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7fc fb27 	bl	80065b8 <lwip_htons>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009f6e:	4b48      	ldr	r3, [pc, #288]	; (800a090 <tcp_input+0x28c>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	885b      	ldrh	r3, [r3, #2]
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	4a46      	ldr	r2, [pc, #280]	; (800a090 <tcp_input+0x28c>)
 8009f78:	6814      	ldr	r4, [r2, #0]
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7fc fb1c 	bl	80065b8 <lwip_htons>
 8009f80:	4603      	mov	r3, r0
 8009f82:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009f84:	4b42      	ldr	r3, [pc, #264]	; (800a090 <tcp_input+0x28c>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	4a41      	ldr	r2, [pc, #260]	; (800a090 <tcp_input+0x28c>)
 8009f8c:	6814      	ldr	r4, [r2, #0]
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7fc fb27 	bl	80065e2 <lwip_htonl>
 8009f94:	4603      	mov	r3, r0
 8009f96:	6063      	str	r3, [r4, #4]
 8009f98:	6863      	ldr	r3, [r4, #4]
 8009f9a:	4a45      	ldr	r2, [pc, #276]	; (800a0b0 <tcp_input+0x2ac>)
 8009f9c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009f9e:	4b3c      	ldr	r3, [pc, #240]	; (800a090 <tcp_input+0x28c>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	4a3a      	ldr	r2, [pc, #232]	; (800a090 <tcp_input+0x28c>)
 8009fa6:	6814      	ldr	r4, [r2, #0]
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f7fc fb1a 	bl	80065e2 <lwip_htonl>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	60a3      	str	r3, [r4, #8]
 8009fb2:	68a3      	ldr	r3, [r4, #8]
 8009fb4:	4a3f      	ldr	r2, [pc, #252]	; (800a0b4 <tcp_input+0x2b0>)
 8009fb6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009fb8:	4b35      	ldr	r3, [pc, #212]	; (800a090 <tcp_input+0x28c>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	89db      	ldrh	r3, [r3, #14]
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	4a33      	ldr	r2, [pc, #204]	; (800a090 <tcp_input+0x28c>)
 8009fc2:	6814      	ldr	r4, [r2, #0]
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7fc faf7 	bl	80065b8 <lwip_htons>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8009fce:	4b30      	ldr	r3, [pc, #192]	; (800a090 <tcp_input+0x28c>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	899b      	ldrh	r3, [r3, #12]
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7fc faee 	bl	80065b8 <lwip_htons>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009fe4:	b2da      	uxtb	r2, r3
 8009fe6:	4b34      	ldr	r3, [pc, #208]	; (800a0b8 <tcp_input+0x2b4>)
 8009fe8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	891a      	ldrh	r2, [r3, #8]
 8009fee:	4b33      	ldr	r3, [pc, #204]	; (800a0bc <tcp_input+0x2b8>)
 8009ff0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009ff2:	4b31      	ldr	r3, [pc, #196]	; (800a0b8 <tcp_input+0x2b4>)
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	f003 0303 	and.w	r3, r3, #3
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00c      	beq.n	800a018 <tcp_input+0x214>
    tcplen++;
 8009ffe:	4b2f      	ldr	r3, [pc, #188]	; (800a0bc <tcp_input+0x2b8>)
 800a000:	881b      	ldrh	r3, [r3, #0]
 800a002:	3301      	adds	r3, #1
 800a004:	b29a      	uxth	r2, r3
 800a006:	4b2d      	ldr	r3, [pc, #180]	; (800a0bc <tcp_input+0x2b8>)
 800a008:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	891a      	ldrh	r2, [r3, #8]
 800a00e:	4b2b      	ldr	r3, [pc, #172]	; (800a0bc <tcp_input+0x2b8>)
 800a010:	881b      	ldrh	r3, [r3, #0]
 800a012:	429a      	cmp	r2, r3
 800a014:	f200 82e6 	bhi.w	800a5e4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a018:	2300      	movs	r3, #0
 800a01a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a01c:	4b28      	ldr	r3, [pc, #160]	; (800a0c0 <tcp_input+0x2bc>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	61fb      	str	r3, [r7, #28]
 800a022:	e09d      	b.n	800a160 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a024:	69fb      	ldr	r3, [r7, #28]
 800a026:	7d1b      	ldrb	r3, [r3, #20]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d105      	bne.n	800a038 <tcp_input+0x234>
 800a02c:	4b15      	ldr	r3, [pc, #84]	; (800a084 <tcp_input+0x280>)
 800a02e:	22fb      	movs	r2, #251	; 0xfb
 800a030:	4924      	ldr	r1, [pc, #144]	; (800a0c4 <tcp_input+0x2c0>)
 800a032:	4816      	ldr	r0, [pc, #88]	; (800a08c <tcp_input+0x288>)
 800a034:	f007 f85a 	bl	80110ec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	7d1b      	ldrb	r3, [r3, #20]
 800a03c:	2b0a      	cmp	r3, #10
 800a03e:	d105      	bne.n	800a04c <tcp_input+0x248>
 800a040:	4b10      	ldr	r3, [pc, #64]	; (800a084 <tcp_input+0x280>)
 800a042:	22fc      	movs	r2, #252	; 0xfc
 800a044:	4920      	ldr	r1, [pc, #128]	; (800a0c8 <tcp_input+0x2c4>)
 800a046:	4811      	ldr	r0, [pc, #68]	; (800a08c <tcp_input+0x288>)
 800a048:	f007 f850 	bl	80110ec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a04c:	69fb      	ldr	r3, [r7, #28]
 800a04e:	7d1b      	ldrb	r3, [r3, #20]
 800a050:	2b01      	cmp	r3, #1
 800a052:	d105      	bne.n	800a060 <tcp_input+0x25c>
 800a054:	4b0b      	ldr	r3, [pc, #44]	; (800a084 <tcp_input+0x280>)
 800a056:	22fd      	movs	r2, #253	; 0xfd
 800a058:	491c      	ldr	r1, [pc, #112]	; (800a0cc <tcp_input+0x2c8>)
 800a05a:	480c      	ldr	r0, [pc, #48]	; (800a08c <tcp_input+0x288>)
 800a05c:	f007 f846 	bl	80110ec <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	7a1b      	ldrb	r3, [r3, #8]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d033      	beq.n	800a0d0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	7a1a      	ldrb	r2, [r3, #8]
 800a06c:	4b09      	ldr	r3, [pc, #36]	; (800a094 <tcp_input+0x290>)
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a074:	3301      	adds	r3, #1
 800a076:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a078:	429a      	cmp	r2, r3
 800a07a:	d029      	beq.n	800a0d0 <tcp_input+0x2cc>
      prev = pcb;
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	61bb      	str	r3, [r7, #24]
      continue;
 800a080:	e06b      	b.n	800a15a <tcp_input+0x356>
 800a082:	bf00      	nop
 800a084:	0801355c 	.word	0x0801355c
 800a088:	08013590 	.word	0x08013590
 800a08c:	080135a8 	.word	0x080135a8
 800a090:	20008850 	.word	0x20008850
 800a094:	200052b8 	.word	0x200052b8
 800a098:	20008854 	.word	0x20008854
 800a09c:	20008858 	.word	0x20008858
 800a0a0:	20008856 	.word	0x20008856
 800a0a4:	080135d0 	.word	0x080135d0
 800a0a8:	080135e0 	.word	0x080135e0
 800a0ac:	080135ec 	.word	0x080135ec
 800a0b0:	20008860 	.word	0x20008860
 800a0b4:	20008864 	.word	0x20008864
 800a0b8:	2000886c 	.word	0x2000886c
 800a0bc:	2000886a 	.word	0x2000886a
 800a0c0:	20008834 	.word	0x20008834
 800a0c4:	0801360c 	.word	0x0801360c
 800a0c8:	08013634 	.word	0x08013634
 800a0cc:	08013660 	.word	0x08013660
    }

    if (pcb->remote_port == tcphdr->src &&
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	8b1a      	ldrh	r2, [r3, #24]
 800a0d4:	4b72      	ldr	r3, [pc, #456]	; (800a2a0 <tcp_input+0x49c>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	881b      	ldrh	r3, [r3, #0]
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d13a      	bne.n	800a156 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	8ada      	ldrh	r2, [r3, #22]
 800a0e4:	4b6e      	ldr	r3, [pc, #440]	; (800a2a0 <tcp_input+0x49c>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	885b      	ldrh	r3, [r3, #2]
 800a0ea:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d132      	bne.n	800a156 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a0f0:	69fb      	ldr	r3, [r7, #28]
 800a0f2:	685a      	ldr	r2, [r3, #4]
 800a0f4:	4b6b      	ldr	r3, [pc, #428]	; (800a2a4 <tcp_input+0x4a0>)
 800a0f6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d12c      	bne.n	800a156 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	4b68      	ldr	r3, [pc, #416]	; (800a2a4 <tcp_input+0x4a0>)
 800a102:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a104:	429a      	cmp	r2, r3
 800a106:	d126      	bne.n	800a156 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	69fa      	ldr	r2, [r7, #28]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d106      	bne.n	800a120 <tcp_input+0x31c>
 800a112:	4b65      	ldr	r3, [pc, #404]	; (800a2a8 <tcp_input+0x4a4>)
 800a114:	f240 120d 	movw	r2, #269	; 0x10d
 800a118:	4964      	ldr	r1, [pc, #400]	; (800a2ac <tcp_input+0x4a8>)
 800a11a:	4865      	ldr	r0, [pc, #404]	; (800a2b0 <tcp_input+0x4ac>)
 800a11c:	f006 ffe6 	bl	80110ec <iprintf>
      if (prev != NULL) {
 800a120:	69bb      	ldr	r3, [r7, #24]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00a      	beq.n	800a13c <tcp_input+0x338>
        prev->next = pcb->next;
 800a126:	69fb      	ldr	r3, [r7, #28]
 800a128:	68da      	ldr	r2, [r3, #12]
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a12e:	4b61      	ldr	r3, [pc, #388]	; (800a2b4 <tcp_input+0x4b0>)
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	69fb      	ldr	r3, [r7, #28]
 800a134:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a136:	4a5f      	ldr	r2, [pc, #380]	; (800a2b4 <tcp_input+0x4b0>)
 800a138:	69fb      	ldr	r3, [r7, #28]
 800a13a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	69fa      	ldr	r2, [r7, #28]
 800a142:	429a      	cmp	r2, r3
 800a144:	d111      	bne.n	800a16a <tcp_input+0x366>
 800a146:	4b58      	ldr	r3, [pc, #352]	; (800a2a8 <tcp_input+0x4a4>)
 800a148:	f240 1215 	movw	r2, #277	; 0x115
 800a14c:	495a      	ldr	r1, [pc, #360]	; (800a2b8 <tcp_input+0x4b4>)
 800a14e:	4858      	ldr	r0, [pc, #352]	; (800a2b0 <tcp_input+0x4ac>)
 800a150:	f006 ffcc 	bl	80110ec <iprintf>
      break;
 800a154:	e009      	b.n	800a16a <tcp_input+0x366>
    }
    prev = pcb;
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a15a:	69fb      	ldr	r3, [r7, #28]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	61fb      	str	r3, [r7, #28]
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	2b00      	cmp	r3, #0
 800a164:	f47f af5e 	bne.w	800a024 <tcp_input+0x220>
 800a168:	e000      	b.n	800a16c <tcp_input+0x368>
      break;
 800a16a:	bf00      	nop
  }

  if (pcb == NULL) {
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	f040 80aa 	bne.w	800a2c8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a174:	4b51      	ldr	r3, [pc, #324]	; (800a2bc <tcp_input+0x4b8>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	61fb      	str	r3, [r7, #28]
 800a17a:	e03f      	b.n	800a1fc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a17c:	69fb      	ldr	r3, [r7, #28]
 800a17e:	7d1b      	ldrb	r3, [r3, #20]
 800a180:	2b0a      	cmp	r3, #10
 800a182:	d006      	beq.n	800a192 <tcp_input+0x38e>
 800a184:	4b48      	ldr	r3, [pc, #288]	; (800a2a8 <tcp_input+0x4a4>)
 800a186:	f240 121f 	movw	r2, #287	; 0x11f
 800a18a:	494d      	ldr	r1, [pc, #308]	; (800a2c0 <tcp_input+0x4bc>)
 800a18c:	4848      	ldr	r0, [pc, #288]	; (800a2b0 <tcp_input+0x4ac>)
 800a18e:	f006 ffad 	bl	80110ec <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a192:	69fb      	ldr	r3, [r7, #28]
 800a194:	7a1b      	ldrb	r3, [r3, #8]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d009      	beq.n	800a1ae <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a19a:	69fb      	ldr	r3, [r7, #28]
 800a19c:	7a1a      	ldrb	r2, [r3, #8]
 800a19e:	4b41      	ldr	r3, [pc, #260]	; (800a2a4 <tcp_input+0x4a0>)
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d122      	bne.n	800a1f4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	8b1a      	ldrh	r2, [r3, #24]
 800a1b2:	4b3b      	ldr	r3, [pc, #236]	; (800a2a0 <tcp_input+0x49c>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	881b      	ldrh	r3, [r3, #0]
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d11b      	bne.n	800a1f6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	8ada      	ldrh	r2, [r3, #22]
 800a1c2:	4b37      	ldr	r3, [pc, #220]	; (800a2a0 <tcp_input+0x49c>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	885b      	ldrh	r3, [r3, #2]
 800a1c8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d113      	bne.n	800a1f6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a1ce:	69fb      	ldr	r3, [r7, #28]
 800a1d0:	685a      	ldr	r2, [r3, #4]
 800a1d2:	4b34      	ldr	r3, [pc, #208]	; (800a2a4 <tcp_input+0x4a0>)
 800a1d4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d10d      	bne.n	800a1f6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a1da:	69fb      	ldr	r3, [r7, #28]
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	4b31      	ldr	r3, [pc, #196]	; (800a2a4 <tcp_input+0x4a0>)
 800a1e0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d107      	bne.n	800a1f6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a1e6:	69f8      	ldr	r0, [r7, #28]
 800a1e8:	f000 fb56 	bl	800a898 <tcp_timewait_input>
        }
        pbuf_free(p);
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f7fd fd41 	bl	8007c74 <pbuf_free>
        return;
 800a1f2:	e1fd      	b.n	800a5f0 <tcp_input+0x7ec>
        continue;
 800a1f4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	61fb      	str	r3, [r7, #28]
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d1bc      	bne.n	800a17c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a202:	2300      	movs	r3, #0
 800a204:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a206:	4b2f      	ldr	r3, [pc, #188]	; (800a2c4 <tcp_input+0x4c0>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	617b      	str	r3, [r7, #20]
 800a20c:	e02a      	b.n	800a264 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	7a1b      	ldrb	r3, [r3, #8]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00c      	beq.n	800a230 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	7a1a      	ldrb	r2, [r3, #8]
 800a21a:	4b22      	ldr	r3, [pc, #136]	; (800a2a4 <tcp_input+0x4a0>)
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a222:	3301      	adds	r3, #1
 800a224:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a226:	429a      	cmp	r2, r3
 800a228:	d002      	beq.n	800a230 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	61bb      	str	r3, [r7, #24]
        continue;
 800a22e:	e016      	b.n	800a25e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	8ada      	ldrh	r2, [r3, #22]
 800a234:	4b1a      	ldr	r3, [pc, #104]	; (800a2a0 <tcp_input+0x49c>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	885b      	ldrh	r3, [r3, #2]
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d10c      	bne.n	800a25a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	4b17      	ldr	r3, [pc, #92]	; (800a2a4 <tcp_input+0x4a0>)
 800a246:	695b      	ldr	r3, [r3, #20]
 800a248:	429a      	cmp	r2, r3
 800a24a:	d00f      	beq.n	800a26c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00d      	beq.n	800a26e <tcp_input+0x46a>
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d009      	beq.n	800a26e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	617b      	str	r3, [r7, #20]
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d1d1      	bne.n	800a20e <tcp_input+0x40a>
 800a26a:	e000      	b.n	800a26e <tcp_input+0x46a>
            break;
 800a26c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d029      	beq.n	800a2c8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d00a      	beq.n	800a290 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	68da      	ldr	r2, [r3, #12]
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a282:	4b10      	ldr	r3, [pc, #64]	; (800a2c4 <tcp_input+0x4c0>)
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a28a:	4a0e      	ldr	r2, [pc, #56]	; (800a2c4 <tcp_input+0x4c0>)
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a290:	6978      	ldr	r0, [r7, #20]
 800a292:	f000 fa03 	bl	800a69c <tcp_listen_input>
      }
      pbuf_free(p);
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f7fd fcec 	bl	8007c74 <pbuf_free>
      return;
 800a29c:	e1a8      	b.n	800a5f0 <tcp_input+0x7ec>
 800a29e:	bf00      	nop
 800a2a0:	20008850 	.word	0x20008850
 800a2a4:	200052b8 	.word	0x200052b8
 800a2a8:	0801355c 	.word	0x0801355c
 800a2ac:	08013688 	.word	0x08013688
 800a2b0:	080135a8 	.word	0x080135a8
 800a2b4:	20008834 	.word	0x20008834
 800a2b8:	080136b4 	.word	0x080136b4
 800a2bc:	20008838 	.word	0x20008838
 800a2c0:	080136e0 	.word	0x080136e0
 800a2c4:	20008830 	.word	0x20008830
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	f000 8158 	beq.w	800a580 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a2d0:	4b95      	ldr	r3, [pc, #596]	; (800a528 <tcp_input+0x724>)
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	891a      	ldrh	r2, [r3, #8]
 800a2da:	4b93      	ldr	r3, [pc, #588]	; (800a528 <tcp_input+0x724>)
 800a2dc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a2de:	4a92      	ldr	r2, [pc, #584]	; (800a528 <tcp_input+0x724>)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a2e4:	4b91      	ldr	r3, [pc, #580]	; (800a52c <tcp_input+0x728>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a8f      	ldr	r2, [pc, #572]	; (800a528 <tcp_input+0x724>)
 800a2ea:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a2ec:	4b90      	ldr	r3, [pc, #576]	; (800a530 <tcp_input+0x72c>)
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a2f2:	4b90      	ldr	r3, [pc, #576]	; (800a534 <tcp_input+0x730>)
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a2f8:	4b8f      	ldr	r3, [pc, #572]	; (800a538 <tcp_input+0x734>)
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a2fe:	4b8f      	ldr	r3, [pc, #572]	; (800a53c <tcp_input+0x738>)
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	f003 0308 	and.w	r3, r3, #8
 800a306:	2b00      	cmp	r3, #0
 800a308:	d006      	beq.n	800a318 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	7b5b      	ldrb	r3, [r3, #13]
 800a30e:	f043 0301 	orr.w	r3, r3, #1
 800a312:	b2da      	uxtb	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a318:	69fb      	ldr	r3, [r7, #28]
 800a31a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d017      	beq.n	800a350 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a320:	69f8      	ldr	r0, [r7, #28]
 800a322:	f7ff f879 	bl	8009418 <tcp_process_refused_data>
 800a326:	4603      	mov	r3, r0
 800a328:	f113 0f0d 	cmn.w	r3, #13
 800a32c:	d007      	beq.n	800a33e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a332:	2b00      	cmp	r3, #0
 800a334:	d00c      	beq.n	800a350 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a336:	4b82      	ldr	r3, [pc, #520]	; (800a540 <tcp_input+0x73c>)
 800a338:	881b      	ldrh	r3, [r3, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d008      	beq.n	800a350 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a342:	2b00      	cmp	r3, #0
 800a344:	f040 80e3 	bne.w	800a50e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a348:	69f8      	ldr	r0, [r7, #28]
 800a34a:	f003 fe05 	bl	800df58 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a34e:	e0de      	b.n	800a50e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800a350:	4a7c      	ldr	r2, [pc, #496]	; (800a544 <tcp_input+0x740>)
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a356:	69f8      	ldr	r0, [r7, #28]
 800a358:	f000 fb18 	bl	800a98c <tcp_process>
 800a35c:	4603      	mov	r3, r0
 800a35e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a360:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a364:	f113 0f0d 	cmn.w	r3, #13
 800a368:	f000 80d3 	beq.w	800a512 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800a36c:	4b71      	ldr	r3, [pc, #452]	; (800a534 <tcp_input+0x730>)
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	f003 0308 	and.w	r3, r3, #8
 800a374:	2b00      	cmp	r3, #0
 800a376:	d015      	beq.n	800a3a4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d008      	beq.n	800a394 <tcp_input+0x590>
 800a382:	69fb      	ldr	r3, [r7, #28]
 800a384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a388:	69fa      	ldr	r2, [r7, #28]
 800a38a:	6912      	ldr	r2, [r2, #16]
 800a38c:	f06f 010d 	mvn.w	r1, #13
 800a390:	4610      	mov	r0, r2
 800a392:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a394:	69f9      	ldr	r1, [r7, #28]
 800a396:	486c      	ldr	r0, [pc, #432]	; (800a548 <tcp_input+0x744>)
 800a398:	f7ff fbbc 	bl	8009b14 <tcp_pcb_remove>
        tcp_free(pcb);
 800a39c:	69f8      	ldr	r0, [r7, #28]
 800a39e:	f7fd ff9b 	bl	80082d8 <tcp_free>
 800a3a2:	e0da      	b.n	800a55a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a3a8:	4b63      	ldr	r3, [pc, #396]	; (800a538 <tcp_input+0x734>)
 800a3aa:	881b      	ldrh	r3, [r3, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d01d      	beq.n	800a3ec <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a3b0:	4b61      	ldr	r3, [pc, #388]	; (800a538 <tcp_input+0x734>)
 800a3b2:	881b      	ldrh	r3, [r3, #0]
 800a3b4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a3b6:	69fb      	ldr	r3, [r7, #28]
 800a3b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00a      	beq.n	800a3d6 <tcp_input+0x5d2>
 800a3c0:	69fb      	ldr	r3, [r7, #28]
 800a3c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3c6:	69fa      	ldr	r2, [r7, #28]
 800a3c8:	6910      	ldr	r0, [r2, #16]
 800a3ca:	89fa      	ldrh	r2, [r7, #14]
 800a3cc:	69f9      	ldr	r1, [r7, #28]
 800a3ce:	4798      	blx	r3
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	74fb      	strb	r3, [r7, #19]
 800a3d4:	e001      	b.n	800a3da <tcp_input+0x5d6>
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a3da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a3de:	f113 0f0d 	cmn.w	r3, #13
 800a3e2:	f000 8098 	beq.w	800a516 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a3e6:	4b54      	ldr	r3, [pc, #336]	; (800a538 <tcp_input+0x734>)
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a3ec:	69f8      	ldr	r0, [r7, #28]
 800a3ee:	f000 f915 	bl	800a61c <tcp_input_delayed_close>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	f040 8090 	bne.w	800a51a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a3fa:	4b4d      	ldr	r3, [pc, #308]	; (800a530 <tcp_input+0x72c>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d041      	beq.n	800a486 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a406:	2b00      	cmp	r3, #0
 800a408:	d006      	beq.n	800a418 <tcp_input+0x614>
 800a40a:	4b50      	ldr	r3, [pc, #320]	; (800a54c <tcp_input+0x748>)
 800a40c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a410:	494f      	ldr	r1, [pc, #316]	; (800a550 <tcp_input+0x74c>)
 800a412:	4850      	ldr	r0, [pc, #320]	; (800a554 <tcp_input+0x750>)
 800a414:	f006 fe6a 	bl	80110ec <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a418:	69fb      	ldr	r3, [r7, #28]
 800a41a:	8b5b      	ldrh	r3, [r3, #26]
 800a41c:	f003 0310 	and.w	r3, r3, #16
 800a420:	2b00      	cmp	r3, #0
 800a422:	d008      	beq.n	800a436 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a424:	4b42      	ldr	r3, [pc, #264]	; (800a530 <tcp_input+0x72c>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4618      	mov	r0, r3
 800a42a:	f7fd fc23 	bl	8007c74 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a42e:	69f8      	ldr	r0, [r7, #28]
 800a430:	f7fe fa3a 	bl	80088a8 <tcp_abort>
            goto aborted;
 800a434:	e091      	b.n	800a55a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d00c      	beq.n	800a45a <tcp_input+0x656>
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a446:	69fb      	ldr	r3, [r7, #28]
 800a448:	6918      	ldr	r0, [r3, #16]
 800a44a:	4b39      	ldr	r3, [pc, #228]	; (800a530 <tcp_input+0x72c>)
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	2300      	movs	r3, #0
 800a450:	69f9      	ldr	r1, [r7, #28]
 800a452:	47a0      	blx	r4
 800a454:	4603      	mov	r3, r0
 800a456:	74fb      	strb	r3, [r7, #19]
 800a458:	e008      	b.n	800a46c <tcp_input+0x668>
 800a45a:	4b35      	ldr	r3, [pc, #212]	; (800a530 <tcp_input+0x72c>)
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	2300      	movs	r3, #0
 800a460:	69f9      	ldr	r1, [r7, #28]
 800a462:	2000      	movs	r0, #0
 800a464:	f7ff f8ae 	bl	80095c4 <tcp_recv_null>
 800a468:	4603      	mov	r3, r0
 800a46a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a46c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a470:	f113 0f0d 	cmn.w	r3, #13
 800a474:	d053      	beq.n	800a51e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a476:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d003      	beq.n	800a486 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a47e:	4b2c      	ldr	r3, [pc, #176]	; (800a530 <tcp_input+0x72c>)
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	69fb      	ldr	r3, [r7, #28]
 800a484:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a486:	4b2b      	ldr	r3, [pc, #172]	; (800a534 <tcp_input+0x730>)
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	f003 0320 	and.w	r3, r3, #32
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d030      	beq.n	800a4f4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800a492:	69fb      	ldr	r3, [r7, #28]
 800a494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a496:	2b00      	cmp	r3, #0
 800a498:	d009      	beq.n	800a4ae <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a49a:	69fb      	ldr	r3, [r7, #28]
 800a49c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a49e:	7b5a      	ldrb	r2, [r3, #13]
 800a4a0:	69fb      	ldr	r3, [r7, #28]
 800a4a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4a4:	f042 0220 	orr.w	r2, r2, #32
 800a4a8:	b2d2      	uxtb	r2, r2
 800a4aa:	735a      	strb	r2, [r3, #13]
 800a4ac:	e022      	b.n	800a4f4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a4ae:	69fb      	ldr	r3, [r7, #28]
 800a4b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4b2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a4b6:	d005      	beq.n	800a4c4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4bc:	3301      	adds	r3, #1
 800a4be:	b29a      	uxth	r2, r3
 800a4c0:	69fb      	ldr	r3, [r7, #28]
 800a4c2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d00b      	beq.n	800a4e6 <tcp_input+0x6e2>
 800a4ce:	69fb      	ldr	r3, [r7, #28]
 800a4d0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	6918      	ldr	r0, [r3, #16]
 800a4d8:	2300      	movs	r3, #0
 800a4da:	2200      	movs	r2, #0
 800a4dc:	69f9      	ldr	r1, [r7, #28]
 800a4de:	47a0      	blx	r4
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	74fb      	strb	r3, [r7, #19]
 800a4e4:	e001      	b.n	800a4ea <tcp_input+0x6e6>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a4ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a4ee:	f113 0f0d 	cmn.w	r3, #13
 800a4f2:	d016      	beq.n	800a522 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a4f4:	4b13      	ldr	r3, [pc, #76]	; (800a544 <tcp_input+0x740>)
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a4fa:	69f8      	ldr	r0, [r7, #28]
 800a4fc:	f000 f88e 	bl	800a61c <tcp_input_delayed_close>
 800a500:	4603      	mov	r3, r0
 800a502:	2b00      	cmp	r3, #0
 800a504:	d128      	bne.n	800a558 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a506:	69f8      	ldr	r0, [r7, #28]
 800a508:	f002 ff20 	bl	800d34c <tcp_output>
 800a50c:	e025      	b.n	800a55a <tcp_input+0x756>
        goto aborted;
 800a50e:	bf00      	nop
 800a510:	e023      	b.n	800a55a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a512:	bf00      	nop
 800a514:	e021      	b.n	800a55a <tcp_input+0x756>
              goto aborted;
 800a516:	bf00      	nop
 800a518:	e01f      	b.n	800a55a <tcp_input+0x756>
          goto aborted;
 800a51a:	bf00      	nop
 800a51c:	e01d      	b.n	800a55a <tcp_input+0x756>
            goto aborted;
 800a51e:	bf00      	nop
 800a520:	e01b      	b.n	800a55a <tcp_input+0x756>
              goto aborted;
 800a522:	bf00      	nop
 800a524:	e019      	b.n	800a55a <tcp_input+0x756>
 800a526:	bf00      	nop
 800a528:	20008840 	.word	0x20008840
 800a52c:	20008850 	.word	0x20008850
 800a530:	20008870 	.word	0x20008870
 800a534:	2000886d 	.word	0x2000886d
 800a538:	20008868 	.word	0x20008868
 800a53c:	2000886c 	.word	0x2000886c
 800a540:	2000886a 	.word	0x2000886a
 800a544:	20008874 	.word	0x20008874
 800a548:	20008834 	.word	0x20008834
 800a54c:	0801355c 	.word	0x0801355c
 800a550:	08013710 	.word	0x08013710
 800a554:	080135a8 	.word	0x080135a8
          goto aborted;
 800a558:	bf00      	nop
    tcp_input_pcb = NULL;
 800a55a:	4b27      	ldr	r3, [pc, #156]	; (800a5f8 <tcp_input+0x7f4>)
 800a55c:	2200      	movs	r2, #0
 800a55e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a560:	4b26      	ldr	r3, [pc, #152]	; (800a5fc <tcp_input+0x7f8>)
 800a562:	2200      	movs	r2, #0
 800a564:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a566:	4b26      	ldr	r3, [pc, #152]	; (800a600 <tcp_input+0x7fc>)
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d03f      	beq.n	800a5ee <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800a56e:	4b24      	ldr	r3, [pc, #144]	; (800a600 <tcp_input+0x7fc>)
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	4618      	mov	r0, r3
 800a574:	f7fd fb7e 	bl	8007c74 <pbuf_free>
      inseg.p = NULL;
 800a578:	4b21      	ldr	r3, [pc, #132]	; (800a600 <tcp_input+0x7fc>)
 800a57a:	2200      	movs	r2, #0
 800a57c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a57e:	e036      	b.n	800a5ee <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a580:	4b20      	ldr	r3, [pc, #128]	; (800a604 <tcp_input+0x800>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	899b      	ldrh	r3, [r3, #12]
 800a586:	b29b      	uxth	r3, r3
 800a588:	4618      	mov	r0, r3
 800a58a:	f7fc f815 	bl	80065b8 <lwip_htons>
 800a58e:	4603      	mov	r3, r0
 800a590:	b2db      	uxtb	r3, r3
 800a592:	f003 0304 	and.w	r3, r3, #4
 800a596:	2b00      	cmp	r3, #0
 800a598:	d118      	bne.n	800a5cc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a59a:	4b1b      	ldr	r3, [pc, #108]	; (800a608 <tcp_input+0x804>)
 800a59c:	6819      	ldr	r1, [r3, #0]
 800a59e:	4b1b      	ldr	r3, [pc, #108]	; (800a60c <tcp_input+0x808>)
 800a5a0:	881b      	ldrh	r3, [r3, #0]
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	4b1a      	ldr	r3, [pc, #104]	; (800a610 <tcp_input+0x80c>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a5aa:	4b16      	ldr	r3, [pc, #88]	; (800a604 <tcp_input+0x800>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a5ae:	885b      	ldrh	r3, [r3, #2]
 800a5b0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a5b2:	4a14      	ldr	r2, [pc, #80]	; (800a604 <tcp_input+0x800>)
 800a5b4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a5b6:	8812      	ldrh	r2, [r2, #0]
 800a5b8:	b292      	uxth	r2, r2
 800a5ba:	9202      	str	r2, [sp, #8]
 800a5bc:	9301      	str	r3, [sp, #4]
 800a5be:	4b15      	ldr	r3, [pc, #84]	; (800a614 <tcp_input+0x810>)
 800a5c0:	9300      	str	r3, [sp, #0]
 800a5c2:	4b15      	ldr	r3, [pc, #84]	; (800a618 <tcp_input+0x814>)
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	f003 fc74 	bl	800deb4 <tcp_rst>
    pbuf_free(p);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f7fd fb51 	bl	8007c74 <pbuf_free>
  return;
 800a5d2:	e00c      	b.n	800a5ee <tcp_input+0x7ea>
    goto dropped;
 800a5d4:	bf00      	nop
 800a5d6:	e006      	b.n	800a5e6 <tcp_input+0x7e2>
    goto dropped;
 800a5d8:	bf00      	nop
 800a5da:	e004      	b.n	800a5e6 <tcp_input+0x7e2>
    goto dropped;
 800a5dc:	bf00      	nop
 800a5de:	e002      	b.n	800a5e6 <tcp_input+0x7e2>
      goto dropped;
 800a5e0:	bf00      	nop
 800a5e2:	e000      	b.n	800a5e6 <tcp_input+0x7e2>
      goto dropped;
 800a5e4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f7fd fb44 	bl	8007c74 <pbuf_free>
 800a5ec:	e000      	b.n	800a5f0 <tcp_input+0x7ec>
  return;
 800a5ee:	bf00      	nop
}
 800a5f0:	3724      	adds	r7, #36	; 0x24
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd90      	pop	{r4, r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	20008874 	.word	0x20008874
 800a5fc:	20008870 	.word	0x20008870
 800a600:	20008840 	.word	0x20008840
 800a604:	20008850 	.word	0x20008850
 800a608:	20008864 	.word	0x20008864
 800a60c:	2000886a 	.word	0x2000886a
 800a610:	20008860 	.word	0x20008860
 800a614:	200052c8 	.word	0x200052c8
 800a618:	200052cc 	.word	0x200052cc

0800a61c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d106      	bne.n	800a638 <tcp_input_delayed_close+0x1c>
 800a62a:	4b17      	ldr	r3, [pc, #92]	; (800a688 <tcp_input_delayed_close+0x6c>)
 800a62c:	f240 225a 	movw	r2, #602	; 0x25a
 800a630:	4916      	ldr	r1, [pc, #88]	; (800a68c <tcp_input_delayed_close+0x70>)
 800a632:	4817      	ldr	r0, [pc, #92]	; (800a690 <tcp_input_delayed_close+0x74>)
 800a634:	f006 fd5a 	bl	80110ec <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a638:	4b16      	ldr	r3, [pc, #88]	; (800a694 <tcp_input_delayed_close+0x78>)
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	f003 0310 	and.w	r3, r3, #16
 800a640:	2b00      	cmp	r3, #0
 800a642:	d01c      	beq.n	800a67e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	8b5b      	ldrh	r3, [r3, #26]
 800a648:	f003 0310 	and.w	r3, r3, #16
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d10d      	bne.n	800a66c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a656:	2b00      	cmp	r3, #0
 800a658:	d008      	beq.n	800a66c <tcp_input_delayed_close+0x50>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	6912      	ldr	r2, [r2, #16]
 800a664:	f06f 010e 	mvn.w	r1, #14
 800a668:	4610      	mov	r0, r2
 800a66a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a66c:	6879      	ldr	r1, [r7, #4]
 800a66e:	480a      	ldr	r0, [pc, #40]	; (800a698 <tcp_input_delayed_close+0x7c>)
 800a670:	f7ff fa50 	bl	8009b14 <tcp_pcb_remove>
    tcp_free(pcb);
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f7fd fe2f 	bl	80082d8 <tcp_free>
    return 1;
 800a67a:	2301      	movs	r3, #1
 800a67c:	e000      	b.n	800a680 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a67e:	2300      	movs	r3, #0
}
 800a680:	4618      	mov	r0, r3
 800a682:	3708      	adds	r7, #8
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}
 800a688:	0801355c 	.word	0x0801355c
 800a68c:	0801372c 	.word	0x0801372c
 800a690:	080135a8 	.word	0x080135a8
 800a694:	2000886d 	.word	0x2000886d
 800a698:	20008834 	.word	0x20008834

0800a69c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a69c:	b590      	push	{r4, r7, lr}
 800a69e:	b08b      	sub	sp, #44	; 0x2c
 800a6a0:	af04      	add	r7, sp, #16
 800a6a2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a6a4:	4b6f      	ldr	r3, [pc, #444]	; (800a864 <tcp_listen_input+0x1c8>)
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	f003 0304 	and.w	r3, r3, #4
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	f040 80d2 	bne.w	800a856 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d106      	bne.n	800a6c6 <tcp_listen_input+0x2a>
 800a6b8:	4b6b      	ldr	r3, [pc, #428]	; (800a868 <tcp_listen_input+0x1cc>)
 800a6ba:	f240 2281 	movw	r2, #641	; 0x281
 800a6be:	496b      	ldr	r1, [pc, #428]	; (800a86c <tcp_listen_input+0x1d0>)
 800a6c0:	486b      	ldr	r0, [pc, #428]	; (800a870 <tcp_listen_input+0x1d4>)
 800a6c2:	f006 fd13 	bl	80110ec <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a6c6:	4b67      	ldr	r3, [pc, #412]	; (800a864 <tcp_listen_input+0x1c8>)
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	f003 0310 	and.w	r3, r3, #16
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d019      	beq.n	800a706 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6d2:	4b68      	ldr	r3, [pc, #416]	; (800a874 <tcp_listen_input+0x1d8>)
 800a6d4:	6819      	ldr	r1, [r3, #0]
 800a6d6:	4b68      	ldr	r3, [pc, #416]	; (800a878 <tcp_listen_input+0x1dc>)
 800a6d8:	881b      	ldrh	r3, [r3, #0]
 800a6da:	461a      	mov	r2, r3
 800a6dc:	4b67      	ldr	r3, [pc, #412]	; (800a87c <tcp_listen_input+0x1e0>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a6e2:	4b67      	ldr	r3, [pc, #412]	; (800a880 <tcp_listen_input+0x1e4>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6e6:	885b      	ldrh	r3, [r3, #2]
 800a6e8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a6ea:	4a65      	ldr	r2, [pc, #404]	; (800a880 <tcp_listen_input+0x1e4>)
 800a6ec:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6ee:	8812      	ldrh	r2, [r2, #0]
 800a6f0:	b292      	uxth	r2, r2
 800a6f2:	9202      	str	r2, [sp, #8]
 800a6f4:	9301      	str	r3, [sp, #4]
 800a6f6:	4b63      	ldr	r3, [pc, #396]	; (800a884 <tcp_listen_input+0x1e8>)
 800a6f8:	9300      	str	r3, [sp, #0]
 800a6fa:	4b63      	ldr	r3, [pc, #396]	; (800a888 <tcp_listen_input+0x1ec>)
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f003 fbd8 	bl	800deb4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a704:	e0a9      	b.n	800a85a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a706:	4b57      	ldr	r3, [pc, #348]	; (800a864 <tcp_listen_input+0x1c8>)
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	f003 0302 	and.w	r3, r3, #2
 800a70e:	2b00      	cmp	r3, #0
 800a710:	f000 80a3 	beq.w	800a85a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	7d5b      	ldrb	r3, [r3, #21]
 800a718:	4618      	mov	r0, r3
 800a71a:	f7ff f877 	bl	800980c <tcp_alloc>
 800a71e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d111      	bne.n	800a74a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	699b      	ldr	r3, [r3, #24]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00a      	beq.n	800a744 <tcp_listen_input+0xa8>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	699b      	ldr	r3, [r3, #24]
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	6910      	ldr	r0, [r2, #16]
 800a736:	f04f 32ff 	mov.w	r2, #4294967295
 800a73a:	2100      	movs	r1, #0
 800a73c:	4798      	blx	r3
 800a73e:	4603      	mov	r3, r0
 800a740:	73bb      	strb	r3, [r7, #14]
      return;
 800a742:	e08b      	b.n	800a85c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a744:	23f0      	movs	r3, #240	; 0xf0
 800a746:	73bb      	strb	r3, [r7, #14]
      return;
 800a748:	e088      	b.n	800a85c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a74a:	4b50      	ldr	r3, [pc, #320]	; (800a88c <tcp_listen_input+0x1f0>)
 800a74c:	695a      	ldr	r2, [r3, #20]
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a752:	4b4e      	ldr	r3, [pc, #312]	; (800a88c <tcp_listen_input+0x1f0>)
 800a754:	691a      	ldr	r2, [r3, #16]
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	8ada      	ldrh	r2, [r3, #22]
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a762:	4b47      	ldr	r3, [pc, #284]	; (800a880 <tcp_listen_input+0x1e4>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	881b      	ldrh	r3, [r3, #0]
 800a768:	b29a      	uxth	r2, r3
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	2203      	movs	r2, #3
 800a772:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a774:	4b41      	ldr	r3, [pc, #260]	; (800a87c <tcp_listen_input+0x1e0>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	1c5a      	adds	r2, r3, #1
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800a786:	6978      	ldr	r0, [r7, #20]
 800a788:	f7ff fa58 	bl	8009c3c <tcp_next_iss>
 800a78c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	693a      	ldr	r2, [r7, #16]
 800a792:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	693a      	ldr	r2, [r7, #16]
 800a798:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	693a      	ldr	r2, [r7, #16]
 800a79e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	693a      	ldr	r2, [r7, #16]
 800a7a4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a7a6:	4b35      	ldr	r3, [pc, #212]	; (800a87c <tcp_listen_input+0x1e0>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	1e5a      	subs	r2, r3, #1
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	691a      	ldr	r2, [r3, #16]
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	7a5b      	ldrb	r3, [r3, #9]
 800a7c2:	f003 030c 	and.w	r3, r3, #12
 800a7c6:	b2da      	uxtb	r2, r3
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	7a1a      	ldrb	r2, [r3, #8]
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a7d4:	4b2e      	ldr	r3, [pc, #184]	; (800a890 <tcp_listen_input+0x1f4>)
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	60da      	str	r2, [r3, #12]
 800a7dc:	4a2c      	ldr	r2, [pc, #176]	; (800a890 <tcp_listen_input+0x1f4>)
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	6013      	str	r3, [r2, #0]
 800a7e2:	f003 fd29 	bl	800e238 <tcp_timer_needed>
 800a7e6:	4b2b      	ldr	r3, [pc, #172]	; (800a894 <tcp_listen_input+0x1f8>)
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a7ec:	6978      	ldr	r0, [r7, #20]
 800a7ee:	f001 fd8f 	bl	800c310 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a7f2:	4b23      	ldr	r3, [pc, #140]	; (800a880 <tcp_listen_input+0x1e4>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	89db      	ldrh	r3, [r3, #14]
 800a7f8:	b29a      	uxth	r2, r3
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	3304      	adds	r3, #4
 800a814:	4618      	mov	r0, r3
 800a816:	f005 f8ed 	bl	800f9f4 <ip4_route>
 800a81a:	4601      	mov	r1, r0
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	3304      	adds	r3, #4
 800a820:	461a      	mov	r2, r3
 800a822:	4620      	mov	r0, r4
 800a824:	f7ff fa30 	bl	8009c88 <tcp_eff_send_mss_netif>
 800a828:	4603      	mov	r3, r0
 800a82a:	461a      	mov	r2, r3
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a830:	2112      	movs	r1, #18
 800a832:	6978      	ldr	r0, [r7, #20]
 800a834:	f002 fc9c 	bl	800d170 <tcp_enqueue_flags>
 800a838:	4603      	mov	r3, r0
 800a83a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a83c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d004      	beq.n	800a84e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a844:	2100      	movs	r1, #0
 800a846:	6978      	ldr	r0, [r7, #20]
 800a848:	f7fd ff70 	bl	800872c <tcp_abandon>
      return;
 800a84c:	e006      	b.n	800a85c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a84e:	6978      	ldr	r0, [r7, #20]
 800a850:	f002 fd7c 	bl	800d34c <tcp_output>
  return;
 800a854:	e001      	b.n	800a85a <tcp_listen_input+0x1be>
    return;
 800a856:	bf00      	nop
 800a858:	e000      	b.n	800a85c <tcp_listen_input+0x1c0>
  return;
 800a85a:	bf00      	nop
}
 800a85c:	371c      	adds	r7, #28
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd90      	pop	{r4, r7, pc}
 800a862:	bf00      	nop
 800a864:	2000886c 	.word	0x2000886c
 800a868:	0801355c 	.word	0x0801355c
 800a86c:	08013754 	.word	0x08013754
 800a870:	080135a8 	.word	0x080135a8
 800a874:	20008864 	.word	0x20008864
 800a878:	2000886a 	.word	0x2000886a
 800a87c:	20008860 	.word	0x20008860
 800a880:	20008850 	.word	0x20008850
 800a884:	200052c8 	.word	0x200052c8
 800a888:	200052cc 	.word	0x200052cc
 800a88c:	200052b8 	.word	0x200052b8
 800a890:	20008834 	.word	0x20008834
 800a894:	2000883c 	.word	0x2000883c

0800a898 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b086      	sub	sp, #24
 800a89c:	af04      	add	r7, sp, #16
 800a89e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a8a0:	4b2f      	ldr	r3, [pc, #188]	; (800a960 <tcp_timewait_input+0xc8>)
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	f003 0304 	and.w	r3, r3, #4
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d153      	bne.n	800a954 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d106      	bne.n	800a8c0 <tcp_timewait_input+0x28>
 800a8b2:	4b2c      	ldr	r3, [pc, #176]	; (800a964 <tcp_timewait_input+0xcc>)
 800a8b4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a8b8:	492b      	ldr	r1, [pc, #172]	; (800a968 <tcp_timewait_input+0xd0>)
 800a8ba:	482c      	ldr	r0, [pc, #176]	; (800a96c <tcp_timewait_input+0xd4>)
 800a8bc:	f006 fc16 	bl	80110ec <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a8c0:	4b27      	ldr	r3, [pc, #156]	; (800a960 <tcp_timewait_input+0xc8>)
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	f003 0302 	and.w	r3, r3, #2
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d02a      	beq.n	800a922 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a8cc:	4b28      	ldr	r3, [pc, #160]	; (800a970 <tcp_timewait_input+0xd8>)
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d4:	1ad3      	subs	r3, r2, r3
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	db2d      	blt.n	800a936 <tcp_timewait_input+0x9e>
 800a8da:	4b25      	ldr	r3, [pc, #148]	; (800a970 <tcp_timewait_input+0xd8>)
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e2:	6879      	ldr	r1, [r7, #4]
 800a8e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a8e6:	440b      	add	r3, r1
 800a8e8:	1ad3      	subs	r3, r2, r3
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	dc23      	bgt.n	800a936 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a8ee:	4b21      	ldr	r3, [pc, #132]	; (800a974 <tcp_timewait_input+0xdc>)
 800a8f0:	6819      	ldr	r1, [r3, #0]
 800a8f2:	4b21      	ldr	r3, [pc, #132]	; (800a978 <tcp_timewait_input+0xe0>)
 800a8f4:	881b      	ldrh	r3, [r3, #0]
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	4b1d      	ldr	r3, [pc, #116]	; (800a970 <tcp_timewait_input+0xd8>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a8fe:	4b1f      	ldr	r3, [pc, #124]	; (800a97c <tcp_timewait_input+0xe4>)
 800a900:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a902:	885b      	ldrh	r3, [r3, #2]
 800a904:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a906:	4a1d      	ldr	r2, [pc, #116]	; (800a97c <tcp_timewait_input+0xe4>)
 800a908:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a90a:	8812      	ldrh	r2, [r2, #0]
 800a90c:	b292      	uxth	r2, r2
 800a90e:	9202      	str	r2, [sp, #8]
 800a910:	9301      	str	r3, [sp, #4]
 800a912:	4b1b      	ldr	r3, [pc, #108]	; (800a980 <tcp_timewait_input+0xe8>)
 800a914:	9300      	str	r3, [sp, #0]
 800a916:	4b1b      	ldr	r3, [pc, #108]	; (800a984 <tcp_timewait_input+0xec>)
 800a918:	4602      	mov	r2, r0
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f003 faca 	bl	800deb4 <tcp_rst>
      return;
 800a920:	e01b      	b.n	800a95a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a922:	4b0f      	ldr	r3, [pc, #60]	; (800a960 <tcp_timewait_input+0xc8>)
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	f003 0301 	and.w	r3, r3, #1
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d003      	beq.n	800a936 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a92e:	4b16      	ldr	r3, [pc, #88]	; (800a988 <tcp_timewait_input+0xf0>)
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a936:	4b10      	ldr	r3, [pc, #64]	; (800a978 <tcp_timewait_input+0xe0>)
 800a938:	881b      	ldrh	r3, [r3, #0]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00c      	beq.n	800a958 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	8b5b      	ldrh	r3, [r3, #26]
 800a942:	f043 0302 	orr.w	r3, r3, #2
 800a946:	b29a      	uxth	r2, r3
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f002 fcfd 	bl	800d34c <tcp_output>
  }
  return;
 800a952:	e001      	b.n	800a958 <tcp_timewait_input+0xc0>
    return;
 800a954:	bf00      	nop
 800a956:	e000      	b.n	800a95a <tcp_timewait_input+0xc2>
  return;
 800a958:	bf00      	nop
}
 800a95a:	3708      	adds	r7, #8
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	2000886c 	.word	0x2000886c
 800a964:	0801355c 	.word	0x0801355c
 800a968:	08013774 	.word	0x08013774
 800a96c:	080135a8 	.word	0x080135a8
 800a970:	20008860 	.word	0x20008860
 800a974:	20008864 	.word	0x20008864
 800a978:	2000886a 	.word	0x2000886a
 800a97c:	20008850 	.word	0x20008850
 800a980:	200052c8 	.word	0x200052c8
 800a984:	200052cc 	.word	0x200052cc
 800a988:	20008828 	.word	0x20008828

0800a98c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a98c:	b590      	push	{r4, r7, lr}
 800a98e:	b08d      	sub	sp, #52	; 0x34
 800a990:	af04      	add	r7, sp, #16
 800a992:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a994:	2300      	movs	r3, #0
 800a996:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a998:	2300      	movs	r3, #0
 800a99a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d106      	bne.n	800a9b0 <tcp_process+0x24>
 800a9a2:	4b9d      	ldr	r3, [pc, #628]	; (800ac18 <tcp_process+0x28c>)
 800a9a4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a9a8:	499c      	ldr	r1, [pc, #624]	; (800ac1c <tcp_process+0x290>)
 800a9aa:	489d      	ldr	r0, [pc, #628]	; (800ac20 <tcp_process+0x294>)
 800a9ac:	f006 fb9e 	bl	80110ec <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a9b0:	4b9c      	ldr	r3, [pc, #624]	; (800ac24 <tcp_process+0x298>)
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	f003 0304 	and.w	r3, r3, #4
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d04e      	beq.n	800aa5a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	7d1b      	ldrb	r3, [r3, #20]
 800a9c0:	2b02      	cmp	r3, #2
 800a9c2:	d108      	bne.n	800a9d6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a9c8:	4b97      	ldr	r3, [pc, #604]	; (800ac28 <tcp_process+0x29c>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d123      	bne.n	800aa18 <tcp_process+0x8c>
        acceptable = 1;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	76fb      	strb	r3, [r7, #27]
 800a9d4:	e020      	b.n	800aa18 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9da:	4b94      	ldr	r3, [pc, #592]	; (800ac2c <tcp_process+0x2a0>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d102      	bne.n	800a9e8 <tcp_process+0x5c>
        acceptable = 1;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	76fb      	strb	r3, [r7, #27]
 800a9e6:	e017      	b.n	800aa18 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a9e8:	4b90      	ldr	r3, [pc, #576]	; (800ac2c <tcp_process+0x2a0>)
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f0:	1ad3      	subs	r3, r2, r3
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	db10      	blt.n	800aa18 <tcp_process+0x8c>
 800a9f6:	4b8d      	ldr	r3, [pc, #564]	; (800ac2c <tcp_process+0x2a0>)
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fe:	6879      	ldr	r1, [r7, #4]
 800aa00:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800aa02:	440b      	add	r3, r1
 800aa04:	1ad3      	subs	r3, r2, r3
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	dc06      	bgt.n	800aa18 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	8b5b      	ldrh	r3, [r3, #26]
 800aa0e:	f043 0302 	orr.w	r3, r3, #2
 800aa12:	b29a      	uxth	r2, r3
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800aa18:	7efb      	ldrb	r3, [r7, #27]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d01b      	beq.n	800aa56 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	7d1b      	ldrb	r3, [r3, #20]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d106      	bne.n	800aa34 <tcp_process+0xa8>
 800aa26:	4b7c      	ldr	r3, [pc, #496]	; (800ac18 <tcp_process+0x28c>)
 800aa28:	f44f 724e 	mov.w	r2, #824	; 0x338
 800aa2c:	4980      	ldr	r1, [pc, #512]	; (800ac30 <tcp_process+0x2a4>)
 800aa2e:	487c      	ldr	r0, [pc, #496]	; (800ac20 <tcp_process+0x294>)
 800aa30:	f006 fb5c 	bl	80110ec <iprintf>
      recv_flags |= TF_RESET;
 800aa34:	4b7f      	ldr	r3, [pc, #508]	; (800ac34 <tcp_process+0x2a8>)
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	f043 0308 	orr.w	r3, r3, #8
 800aa3c:	b2da      	uxtb	r2, r3
 800aa3e:	4b7d      	ldr	r3, [pc, #500]	; (800ac34 <tcp_process+0x2a8>)
 800aa40:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	8b5b      	ldrh	r3, [r3, #26]
 800aa46:	f023 0301 	bic.w	r3, r3, #1
 800aa4a:	b29a      	uxth	r2, r3
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800aa50:	f06f 030d 	mvn.w	r3, #13
 800aa54:	e37a      	b.n	800b14c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800aa56:	2300      	movs	r3, #0
 800aa58:	e378      	b.n	800b14c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800aa5a:	4b72      	ldr	r3, [pc, #456]	; (800ac24 <tcp_process+0x298>)
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	f003 0302 	and.w	r3, r3, #2
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d010      	beq.n	800aa88 <tcp_process+0xfc>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	7d1b      	ldrb	r3, [r3, #20]
 800aa6a:	2b02      	cmp	r3, #2
 800aa6c:	d00c      	beq.n	800aa88 <tcp_process+0xfc>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	7d1b      	ldrb	r3, [r3, #20]
 800aa72:	2b03      	cmp	r3, #3
 800aa74:	d008      	beq.n	800aa88 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	8b5b      	ldrh	r3, [r3, #26]
 800aa7a:	f043 0302 	orr.w	r3, r3, #2
 800aa7e:	b29a      	uxth	r2, r3
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800aa84:	2300      	movs	r3, #0
 800aa86:	e361      	b.n	800b14c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	8b5b      	ldrh	r3, [r3, #26]
 800aa8c:	f003 0310 	and.w	r3, r3, #16
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d103      	bne.n	800aa9c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800aa94:	4b68      	ldr	r3, [pc, #416]	; (800ac38 <tcp_process+0x2ac>)
 800aa96:	681a      	ldr	r2, [r3, #0]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f001 fc2f 	bl	800c310 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	7d1b      	ldrb	r3, [r3, #20]
 800aab6:	3b02      	subs	r3, #2
 800aab8:	2b07      	cmp	r3, #7
 800aaba:	f200 8337 	bhi.w	800b12c <tcp_process+0x7a0>
 800aabe:	a201      	add	r2, pc, #4	; (adr r2, 800aac4 <tcp_process+0x138>)
 800aac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac4:	0800aae5 	.word	0x0800aae5
 800aac8:	0800ad15 	.word	0x0800ad15
 800aacc:	0800ae8d 	.word	0x0800ae8d
 800aad0:	0800aeb7 	.word	0x0800aeb7
 800aad4:	0800afdb 	.word	0x0800afdb
 800aad8:	0800ae8d 	.word	0x0800ae8d
 800aadc:	0800b067 	.word	0x0800b067
 800aae0:	0800b0f7 	.word	0x0800b0f7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800aae4:	4b4f      	ldr	r3, [pc, #316]	; (800ac24 <tcp_process+0x298>)
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	f003 0310 	and.w	r3, r3, #16
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	f000 80e4 	beq.w	800acba <tcp_process+0x32e>
 800aaf2:	4b4c      	ldr	r3, [pc, #304]	; (800ac24 <tcp_process+0x298>)
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	f003 0302 	and.w	r3, r3, #2
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	f000 80dd 	beq.w	800acba <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab04:	1c5a      	adds	r2, r3, #1
 800ab06:	4b48      	ldr	r3, [pc, #288]	; (800ac28 <tcp_process+0x29c>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	f040 80d5 	bne.w	800acba <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ab10:	4b46      	ldr	r3, [pc, #280]	; (800ac2c <tcp_process+0x2a0>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	1c5a      	adds	r2, r3, #1
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ab22:	4b41      	ldr	r3, [pc, #260]	; (800ac28 <tcp_process+0x29c>)
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ab2a:	4b44      	ldr	r3, [pc, #272]	; (800ac3c <tcp_process+0x2b0>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	89db      	ldrh	r3, [r3, #14]
 800ab30:	b29a      	uxth	r2, r3
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ab44:	4b39      	ldr	r3, [pc, #228]	; (800ac2c <tcp_process+0x2a0>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	1e5a      	subs	r2, r3, #1
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2204      	movs	r2, #4
 800ab52:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	3304      	adds	r3, #4
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f004 ff49 	bl	800f9f4 <ip4_route>
 800ab62:	4601      	mov	r1, r0
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	3304      	adds	r3, #4
 800ab68:	461a      	mov	r2, r3
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f7ff f88c 	bl	8009c88 <tcp_eff_send_mss_netif>
 800ab70:	4603      	mov	r3, r0
 800ab72:	461a      	mov	r2, r3
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab7c:	009a      	lsls	r2, r3, #2
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab82:	005b      	lsls	r3, r3, #1
 800ab84:	f241 111c 	movw	r1, #4380	; 0x111c
 800ab88:	428b      	cmp	r3, r1
 800ab8a:	bf38      	it	cc
 800ab8c:	460b      	movcc	r3, r1
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d204      	bcs.n	800ab9c <tcp_process+0x210>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	e00d      	b.n	800abb8 <tcp_process+0x22c>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aba0:	005b      	lsls	r3, r3, #1
 800aba2:	f241 121c 	movw	r2, #4380	; 0x111c
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d904      	bls.n	800abb4 <tcp_process+0x228>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abae:	005b      	lsls	r3, r3, #1
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	e001      	b.n	800abb8 <tcp_process+0x22c>
 800abb4:	f241 131c 	movw	r3, #4380	; 0x111c
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d106      	bne.n	800abd6 <tcp_process+0x24a>
 800abc8:	4b13      	ldr	r3, [pc, #76]	; (800ac18 <tcp_process+0x28c>)
 800abca:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800abce:	491c      	ldr	r1, [pc, #112]	; (800ac40 <tcp_process+0x2b4>)
 800abd0:	4813      	ldr	r0, [pc, #76]	; (800ac20 <tcp_process+0x294>)
 800abd2:	f006 fa8b 	bl	80110ec <iprintf>
        --pcb->snd_queuelen;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800abdc:	3b01      	subs	r3, #1
 800abde:	b29a      	uxth	r2, r3
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abea:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d12a      	bne.n	800ac48 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abf6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d106      	bne.n	800ac0c <tcp_process+0x280>
 800abfe:	4b06      	ldr	r3, [pc, #24]	; (800ac18 <tcp_process+0x28c>)
 800ac00:	f44f 725d 	mov.w	r2, #884	; 0x374
 800ac04:	490f      	ldr	r1, [pc, #60]	; (800ac44 <tcp_process+0x2b8>)
 800ac06:	4806      	ldr	r0, [pc, #24]	; (800ac20 <tcp_process+0x294>)
 800ac08:	f006 fa70 	bl	80110ec <iprintf>
          pcb->unsent = rseg->next;
 800ac0c:	69fb      	ldr	r3, [r7, #28]
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	66da      	str	r2, [r3, #108]	; 0x6c
 800ac14:	e01c      	b.n	800ac50 <tcp_process+0x2c4>
 800ac16:	bf00      	nop
 800ac18:	0801355c 	.word	0x0801355c
 800ac1c:	08013794 	.word	0x08013794
 800ac20:	080135a8 	.word	0x080135a8
 800ac24:	2000886c 	.word	0x2000886c
 800ac28:	20008864 	.word	0x20008864
 800ac2c:	20008860 	.word	0x20008860
 800ac30:	080137b0 	.word	0x080137b0
 800ac34:	2000886d 	.word	0x2000886d
 800ac38:	20008828 	.word	0x20008828
 800ac3c:	20008850 	.word	0x20008850
 800ac40:	080137d0 	.word	0x080137d0
 800ac44:	080137e8 	.word	0x080137e8
        } else {
          pcb->unacked = rseg->next;
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800ac50:	69f8      	ldr	r0, [r7, #28]
 800ac52:	f7fe fc72 	bl	800953a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d104      	bne.n	800ac68 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac64:	861a      	strh	r2, [r3, #48]	; 0x30
 800ac66:	e006      	b.n	800ac76 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2200      	movs	r2, #0
 800ac72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d00a      	beq.n	800ac96 <tcp_process+0x30a>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac86:	687a      	ldr	r2, [r7, #4]
 800ac88:	6910      	ldr	r0, [r2, #16]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	6879      	ldr	r1, [r7, #4]
 800ac8e:	4798      	blx	r3
 800ac90:	4603      	mov	r3, r0
 800ac92:	76bb      	strb	r3, [r7, #26]
 800ac94:	e001      	b.n	800ac9a <tcp_process+0x30e>
 800ac96:	2300      	movs	r3, #0
 800ac98:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ac9a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ac9e:	f113 0f0d 	cmn.w	r3, #13
 800aca2:	d102      	bne.n	800acaa <tcp_process+0x31e>
          return ERR_ABRT;
 800aca4:	f06f 030c 	mvn.w	r3, #12
 800aca8:	e250      	b.n	800b14c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	8b5b      	ldrh	r3, [r3, #26]
 800acae:	f043 0302 	orr.w	r3, r3, #2
 800acb2:	b29a      	uxth	r2, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800acb8:	e23a      	b.n	800b130 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800acba:	4b98      	ldr	r3, [pc, #608]	; (800af1c <tcp_process+0x590>)
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	f003 0310 	and.w	r3, r3, #16
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	f000 8234 	beq.w	800b130 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800acc8:	4b95      	ldr	r3, [pc, #596]	; (800af20 <tcp_process+0x594>)
 800acca:	6819      	ldr	r1, [r3, #0]
 800accc:	4b95      	ldr	r3, [pc, #596]	; (800af24 <tcp_process+0x598>)
 800acce:	881b      	ldrh	r3, [r3, #0]
 800acd0:	461a      	mov	r2, r3
 800acd2:	4b95      	ldr	r3, [pc, #596]	; (800af28 <tcp_process+0x59c>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800acd8:	4b94      	ldr	r3, [pc, #592]	; (800af2c <tcp_process+0x5a0>)
 800acda:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800acdc:	885b      	ldrh	r3, [r3, #2]
 800acde:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ace0:	4a92      	ldr	r2, [pc, #584]	; (800af2c <tcp_process+0x5a0>)
 800ace2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ace4:	8812      	ldrh	r2, [r2, #0]
 800ace6:	b292      	uxth	r2, r2
 800ace8:	9202      	str	r2, [sp, #8]
 800acea:	9301      	str	r3, [sp, #4]
 800acec:	4b90      	ldr	r3, [pc, #576]	; (800af30 <tcp_process+0x5a4>)
 800acee:	9300      	str	r3, [sp, #0]
 800acf0:	4b90      	ldr	r3, [pc, #576]	; (800af34 <tcp_process+0x5a8>)
 800acf2:	4602      	mov	r2, r0
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f003 f8dd 	bl	800deb4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ad00:	2b05      	cmp	r3, #5
 800ad02:	f200 8215 	bhi.w	800b130 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f002 fea9 	bl	800da64 <tcp_rexmit_rto>
      break;
 800ad12:	e20d      	b.n	800b130 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ad14:	4b81      	ldr	r3, [pc, #516]	; (800af1c <tcp_process+0x590>)
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	f003 0310 	and.w	r3, r3, #16
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f000 80a1 	beq.w	800ae64 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ad22:	4b7f      	ldr	r3, [pc, #508]	; (800af20 <tcp_process+0x594>)
 800ad24:	681a      	ldr	r2, [r3, #0]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad2a:	1ad3      	subs	r3, r2, r3
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	db7e      	blt.n	800ae30 <tcp_process+0x4a4>
 800ad32:	4b7b      	ldr	r3, [pc, #492]	; (800af20 <tcp_process+0x594>)
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad3a:	1ad3      	subs	r3, r2, r3
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	dc77      	bgt.n	800ae30 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2204      	movs	r2, #4
 800ad44:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d102      	bne.n	800ad54 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ad4e:	23fa      	movs	r3, #250	; 0xfa
 800ad50:	76bb      	strb	r3, [r7, #26]
 800ad52:	e01d      	b.n	800ad90 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad58:	699b      	ldr	r3, [r3, #24]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d106      	bne.n	800ad6c <tcp_process+0x3e0>
 800ad5e:	4b76      	ldr	r3, [pc, #472]	; (800af38 <tcp_process+0x5ac>)
 800ad60:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ad64:	4975      	ldr	r1, [pc, #468]	; (800af3c <tcp_process+0x5b0>)
 800ad66:	4876      	ldr	r0, [pc, #472]	; (800af40 <tcp_process+0x5b4>)
 800ad68:	f006 f9c0 	bl	80110ec <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad70:	699b      	ldr	r3, [r3, #24]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00a      	beq.n	800ad8c <tcp_process+0x400>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad7a:	699b      	ldr	r3, [r3, #24]
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	6910      	ldr	r0, [r2, #16]
 800ad80:	2200      	movs	r2, #0
 800ad82:	6879      	ldr	r1, [r7, #4]
 800ad84:	4798      	blx	r3
 800ad86:	4603      	mov	r3, r0
 800ad88:	76bb      	strb	r3, [r7, #26]
 800ad8a:	e001      	b.n	800ad90 <tcp_process+0x404>
 800ad8c:	23f0      	movs	r3, #240	; 0xf0
 800ad8e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ad90:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d00a      	beq.n	800adae <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ad98:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ad9c:	f113 0f0d 	cmn.w	r3, #13
 800ada0:	d002      	beq.n	800ada8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f7fd fd80 	bl	80088a8 <tcp_abort>
            }
            return ERR_ABRT;
 800ada8:	f06f 030c 	mvn.w	r3, #12
 800adac:	e1ce      	b.n	800b14c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 fae0 	bl	800b374 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800adb4:	4b63      	ldr	r3, [pc, #396]	; (800af44 <tcp_process+0x5b8>)
 800adb6:	881b      	ldrh	r3, [r3, #0]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d005      	beq.n	800adc8 <tcp_process+0x43c>
            recv_acked--;
 800adbc:	4b61      	ldr	r3, [pc, #388]	; (800af44 <tcp_process+0x5b8>)
 800adbe:	881b      	ldrh	r3, [r3, #0]
 800adc0:	3b01      	subs	r3, #1
 800adc2:	b29a      	uxth	r2, r3
 800adc4:	4b5f      	ldr	r3, [pc, #380]	; (800af44 <tcp_process+0x5b8>)
 800adc6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800adcc:	009a      	lsls	r2, r3, #2
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800add2:	005b      	lsls	r3, r3, #1
 800add4:	f241 111c 	movw	r1, #4380	; 0x111c
 800add8:	428b      	cmp	r3, r1
 800adda:	bf38      	it	cc
 800addc:	460b      	movcc	r3, r1
 800adde:	429a      	cmp	r2, r3
 800ade0:	d204      	bcs.n	800adec <tcp_process+0x460>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	b29b      	uxth	r3, r3
 800adea:	e00d      	b.n	800ae08 <tcp_process+0x47c>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800adf0:	005b      	lsls	r3, r3, #1
 800adf2:	f241 121c 	movw	r2, #4380	; 0x111c
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d904      	bls.n	800ae04 <tcp_process+0x478>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800adfe:	005b      	lsls	r3, r3, #1
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	e001      	b.n	800ae08 <tcp_process+0x47c>
 800ae04:	f241 131c 	movw	r3, #4380	; 0x111c
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ae0e:	4b4e      	ldr	r3, [pc, #312]	; (800af48 <tcp_process+0x5bc>)
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	f003 0320 	and.w	r3, r3, #32
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d037      	beq.n	800ae8a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	8b5b      	ldrh	r3, [r3, #26]
 800ae1e:	f043 0302 	orr.w	r3, r3, #2
 800ae22:	b29a      	uxth	r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2207      	movs	r2, #7
 800ae2c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ae2e:	e02c      	b.n	800ae8a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae30:	4b3b      	ldr	r3, [pc, #236]	; (800af20 <tcp_process+0x594>)
 800ae32:	6819      	ldr	r1, [r3, #0]
 800ae34:	4b3b      	ldr	r3, [pc, #236]	; (800af24 <tcp_process+0x598>)
 800ae36:	881b      	ldrh	r3, [r3, #0]
 800ae38:	461a      	mov	r2, r3
 800ae3a:	4b3b      	ldr	r3, [pc, #236]	; (800af28 <tcp_process+0x59c>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ae40:	4b3a      	ldr	r3, [pc, #232]	; (800af2c <tcp_process+0x5a0>)
 800ae42:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae44:	885b      	ldrh	r3, [r3, #2]
 800ae46:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ae48:	4a38      	ldr	r2, [pc, #224]	; (800af2c <tcp_process+0x5a0>)
 800ae4a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae4c:	8812      	ldrh	r2, [r2, #0]
 800ae4e:	b292      	uxth	r2, r2
 800ae50:	9202      	str	r2, [sp, #8]
 800ae52:	9301      	str	r3, [sp, #4]
 800ae54:	4b36      	ldr	r3, [pc, #216]	; (800af30 <tcp_process+0x5a4>)
 800ae56:	9300      	str	r3, [sp, #0]
 800ae58:	4b36      	ldr	r3, [pc, #216]	; (800af34 <tcp_process+0x5a8>)
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f003 f829 	bl	800deb4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ae62:	e167      	b.n	800b134 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ae64:	4b2d      	ldr	r3, [pc, #180]	; (800af1c <tcp_process+0x590>)
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	f003 0302 	and.w	r3, r3, #2
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	f000 8161 	beq.w	800b134 <tcp_process+0x7a8>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae76:	1e5a      	subs	r2, r3, #1
 800ae78:	4b2b      	ldr	r3, [pc, #172]	; (800af28 <tcp_process+0x59c>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	f040 8159 	bne.w	800b134 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f002 fe10 	bl	800daa8 <tcp_rexmit>
      break;
 800ae88:	e154      	b.n	800b134 <tcp_process+0x7a8>
 800ae8a:	e153      	b.n	800b134 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f000 fa71 	bl	800b374 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ae92:	4b2d      	ldr	r3, [pc, #180]	; (800af48 <tcp_process+0x5bc>)
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	f003 0320 	and.w	r3, r3, #32
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f000 814c 	beq.w	800b138 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	8b5b      	ldrh	r3, [r3, #26]
 800aea4:	f043 0302 	orr.w	r3, r3, #2
 800aea8:	b29a      	uxth	r2, r3
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2207      	movs	r2, #7
 800aeb2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800aeb4:	e140      	b.n	800b138 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 fa5c 	bl	800b374 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800aebc:	4b22      	ldr	r3, [pc, #136]	; (800af48 <tcp_process+0x5bc>)
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	f003 0320 	and.w	r3, r3, #32
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d071      	beq.n	800afac <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aec8:	4b14      	ldr	r3, [pc, #80]	; (800af1c <tcp_process+0x590>)
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	f003 0310 	and.w	r3, r3, #16
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d060      	beq.n	800af96 <tcp_process+0x60a>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aed8:	4b11      	ldr	r3, [pc, #68]	; (800af20 <tcp_process+0x594>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d15a      	bne.n	800af96 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d156      	bne.n	800af96 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	8b5b      	ldrh	r3, [r3, #26]
 800aeec:	f043 0302 	orr.w	r3, r3, #2
 800aef0:	b29a      	uxth	r2, r3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f7fe fdbc 	bl	8009a74 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800aefc:	4b13      	ldr	r3, [pc, #76]	; (800af4c <tcp_process+0x5c0>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	429a      	cmp	r2, r3
 800af04:	d105      	bne.n	800af12 <tcp_process+0x586>
 800af06:	4b11      	ldr	r3, [pc, #68]	; (800af4c <tcp_process+0x5c0>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	4a0f      	ldr	r2, [pc, #60]	; (800af4c <tcp_process+0x5c0>)
 800af0e:	6013      	str	r3, [r2, #0]
 800af10:	e02e      	b.n	800af70 <tcp_process+0x5e4>
 800af12:	4b0e      	ldr	r3, [pc, #56]	; (800af4c <tcp_process+0x5c0>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	617b      	str	r3, [r7, #20]
 800af18:	e027      	b.n	800af6a <tcp_process+0x5de>
 800af1a:	bf00      	nop
 800af1c:	2000886c 	.word	0x2000886c
 800af20:	20008864 	.word	0x20008864
 800af24:	2000886a 	.word	0x2000886a
 800af28:	20008860 	.word	0x20008860
 800af2c:	20008850 	.word	0x20008850
 800af30:	200052c8 	.word	0x200052c8
 800af34:	200052cc 	.word	0x200052cc
 800af38:	0801355c 	.word	0x0801355c
 800af3c:	080137fc 	.word	0x080137fc
 800af40:	080135a8 	.word	0x080135a8
 800af44:	20008868 	.word	0x20008868
 800af48:	2000886d 	.word	0x2000886d
 800af4c:	20008834 	.word	0x20008834
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	429a      	cmp	r2, r3
 800af58:	d104      	bne.n	800af64 <tcp_process+0x5d8>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	68da      	ldr	r2, [r3, #12]
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	60da      	str	r2, [r3, #12]
 800af62:	e005      	b.n	800af70 <tcp_process+0x5e4>
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	617b      	str	r3, [r7, #20]
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d1ef      	bne.n	800af50 <tcp_process+0x5c4>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2200      	movs	r2, #0
 800af74:	60da      	str	r2, [r3, #12]
 800af76:	4b77      	ldr	r3, [pc, #476]	; (800b154 <tcp_process+0x7c8>)
 800af78:	2201      	movs	r2, #1
 800af7a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	220a      	movs	r2, #10
 800af80:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800af82:	4b75      	ldr	r3, [pc, #468]	; (800b158 <tcp_process+0x7cc>)
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	60da      	str	r2, [r3, #12]
 800af8a:	4a73      	ldr	r2, [pc, #460]	; (800b158 <tcp_process+0x7cc>)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6013      	str	r3, [r2, #0]
 800af90:	f003 f952 	bl	800e238 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800af94:	e0d2      	b.n	800b13c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	8b5b      	ldrh	r3, [r3, #26]
 800af9a:	f043 0302 	orr.w	r3, r3, #2
 800af9e:	b29a      	uxth	r2, r3
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2208      	movs	r2, #8
 800afa8:	751a      	strb	r2, [r3, #20]
      break;
 800afaa:	e0c7      	b.n	800b13c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800afac:	4b6b      	ldr	r3, [pc, #428]	; (800b15c <tcp_process+0x7d0>)
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	f003 0310 	and.w	r3, r3, #16
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	f000 80c1 	beq.w	800b13c <tcp_process+0x7b0>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800afbe:	4b68      	ldr	r3, [pc, #416]	; (800b160 <tcp_process+0x7d4>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	429a      	cmp	r2, r3
 800afc4:	f040 80ba 	bne.w	800b13c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f040 80b5 	bne.w	800b13c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2206      	movs	r2, #6
 800afd6:	751a      	strb	r2, [r3, #20]
      break;
 800afd8:	e0b0      	b.n	800b13c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 f9ca 	bl	800b374 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800afe0:	4b60      	ldr	r3, [pc, #384]	; (800b164 <tcp_process+0x7d8>)
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	f003 0320 	and.w	r3, r3, #32
 800afe8:	2b00      	cmp	r3, #0
 800afea:	f000 80a9 	beq.w	800b140 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	8b5b      	ldrh	r3, [r3, #26]
 800aff2:	f043 0302 	orr.w	r3, r3, #2
 800aff6:	b29a      	uxth	r2, r3
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f7fe fd39 	bl	8009a74 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b002:	4b59      	ldr	r3, [pc, #356]	; (800b168 <tcp_process+0x7dc>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	429a      	cmp	r2, r3
 800b00a:	d105      	bne.n	800b018 <tcp_process+0x68c>
 800b00c:	4b56      	ldr	r3, [pc, #344]	; (800b168 <tcp_process+0x7dc>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	68db      	ldr	r3, [r3, #12]
 800b012:	4a55      	ldr	r2, [pc, #340]	; (800b168 <tcp_process+0x7dc>)
 800b014:	6013      	str	r3, [r2, #0]
 800b016:	e013      	b.n	800b040 <tcp_process+0x6b4>
 800b018:	4b53      	ldr	r3, [pc, #332]	; (800b168 <tcp_process+0x7dc>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	613b      	str	r3, [r7, #16]
 800b01e:	e00c      	b.n	800b03a <tcp_process+0x6ae>
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	68db      	ldr	r3, [r3, #12]
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	429a      	cmp	r2, r3
 800b028:	d104      	bne.n	800b034 <tcp_process+0x6a8>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	68da      	ldr	r2, [r3, #12]
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	60da      	str	r2, [r3, #12]
 800b032:	e005      	b.n	800b040 <tcp_process+0x6b4>
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	613b      	str	r3, [r7, #16]
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d1ef      	bne.n	800b020 <tcp_process+0x694>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	60da      	str	r2, [r3, #12]
 800b046:	4b43      	ldr	r3, [pc, #268]	; (800b154 <tcp_process+0x7c8>)
 800b048:	2201      	movs	r2, #1
 800b04a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	220a      	movs	r2, #10
 800b050:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b052:	4b41      	ldr	r3, [pc, #260]	; (800b158 <tcp_process+0x7cc>)
 800b054:	681a      	ldr	r2, [r3, #0]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	60da      	str	r2, [r3, #12]
 800b05a:	4a3f      	ldr	r2, [pc, #252]	; (800b158 <tcp_process+0x7cc>)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6013      	str	r3, [r2, #0]
 800b060:	f003 f8ea 	bl	800e238 <tcp_timer_needed>
      }
      break;
 800b064:	e06c      	b.n	800b140 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 f984 	bl	800b374 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b06c:	4b3b      	ldr	r3, [pc, #236]	; (800b15c <tcp_process+0x7d0>)
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	f003 0310 	and.w	r3, r3, #16
 800b074:	2b00      	cmp	r3, #0
 800b076:	d065      	beq.n	800b144 <tcp_process+0x7b8>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b07c:	4b38      	ldr	r3, [pc, #224]	; (800b160 <tcp_process+0x7d4>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	429a      	cmp	r2, r3
 800b082:	d15f      	bne.n	800b144 <tcp_process+0x7b8>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d15b      	bne.n	800b144 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f7fe fcf1 	bl	8009a74 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b092:	4b35      	ldr	r3, [pc, #212]	; (800b168 <tcp_process+0x7dc>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d105      	bne.n	800b0a8 <tcp_process+0x71c>
 800b09c:	4b32      	ldr	r3, [pc, #200]	; (800b168 <tcp_process+0x7dc>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	68db      	ldr	r3, [r3, #12]
 800b0a2:	4a31      	ldr	r2, [pc, #196]	; (800b168 <tcp_process+0x7dc>)
 800b0a4:	6013      	str	r3, [r2, #0]
 800b0a6:	e013      	b.n	800b0d0 <tcp_process+0x744>
 800b0a8:	4b2f      	ldr	r3, [pc, #188]	; (800b168 <tcp_process+0x7dc>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	60fb      	str	r3, [r7, #12]
 800b0ae:	e00c      	b.n	800b0ca <tcp_process+0x73e>
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	68db      	ldr	r3, [r3, #12]
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d104      	bne.n	800b0c4 <tcp_process+0x738>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	68da      	ldr	r2, [r3, #12]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	60da      	str	r2, [r3, #12]
 800b0c2:	e005      	b.n	800b0d0 <tcp_process+0x744>
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	68db      	ldr	r3, [r3, #12]
 800b0c8:	60fb      	str	r3, [r7, #12]
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d1ef      	bne.n	800b0b0 <tcp_process+0x724>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	60da      	str	r2, [r3, #12]
 800b0d6:	4b1f      	ldr	r3, [pc, #124]	; (800b154 <tcp_process+0x7c8>)
 800b0d8:	2201      	movs	r2, #1
 800b0da:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	220a      	movs	r2, #10
 800b0e0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b0e2:	4b1d      	ldr	r3, [pc, #116]	; (800b158 <tcp_process+0x7cc>)
 800b0e4:	681a      	ldr	r2, [r3, #0]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	60da      	str	r2, [r3, #12]
 800b0ea:	4a1b      	ldr	r2, [pc, #108]	; (800b158 <tcp_process+0x7cc>)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6013      	str	r3, [r2, #0]
 800b0f0:	f003 f8a2 	bl	800e238 <tcp_timer_needed>
      }
      break;
 800b0f4:	e026      	b.n	800b144 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 f93c 	bl	800b374 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b0fc:	4b17      	ldr	r3, [pc, #92]	; (800b15c <tcp_process+0x7d0>)
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	f003 0310 	and.w	r3, r3, #16
 800b104:	2b00      	cmp	r3, #0
 800b106:	d01f      	beq.n	800b148 <tcp_process+0x7bc>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b10c:	4b14      	ldr	r3, [pc, #80]	; (800b160 <tcp_process+0x7d4>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	429a      	cmp	r2, r3
 800b112:	d119      	bne.n	800b148 <tcp_process+0x7bc>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d115      	bne.n	800b148 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b11c:	4b11      	ldr	r3, [pc, #68]	; (800b164 <tcp_process+0x7d8>)
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	f043 0310 	orr.w	r3, r3, #16
 800b124:	b2da      	uxtb	r2, r3
 800b126:	4b0f      	ldr	r3, [pc, #60]	; (800b164 <tcp_process+0x7d8>)
 800b128:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b12a:	e00d      	b.n	800b148 <tcp_process+0x7bc>
    default:
      break;
 800b12c:	bf00      	nop
 800b12e:	e00c      	b.n	800b14a <tcp_process+0x7be>
      break;
 800b130:	bf00      	nop
 800b132:	e00a      	b.n	800b14a <tcp_process+0x7be>
      break;
 800b134:	bf00      	nop
 800b136:	e008      	b.n	800b14a <tcp_process+0x7be>
      break;
 800b138:	bf00      	nop
 800b13a:	e006      	b.n	800b14a <tcp_process+0x7be>
      break;
 800b13c:	bf00      	nop
 800b13e:	e004      	b.n	800b14a <tcp_process+0x7be>
      break;
 800b140:	bf00      	nop
 800b142:	e002      	b.n	800b14a <tcp_process+0x7be>
      break;
 800b144:	bf00      	nop
 800b146:	e000      	b.n	800b14a <tcp_process+0x7be>
      break;
 800b148:	bf00      	nop
  }
  return ERR_OK;
 800b14a:	2300      	movs	r3, #0
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3724      	adds	r7, #36	; 0x24
 800b150:	46bd      	mov	sp, r7
 800b152:	bd90      	pop	{r4, r7, pc}
 800b154:	2000883c 	.word	0x2000883c
 800b158:	20008838 	.word	0x20008838
 800b15c:	2000886c 	.word	0x2000886c
 800b160:	20008864 	.word	0x20008864
 800b164:	2000886d 	.word	0x2000886d
 800b168:	20008834 	.word	0x20008834

0800b16c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b16c:	b590      	push	{r4, r7, lr}
 800b16e:	b085      	sub	sp, #20
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d106      	bne.n	800b18a <tcp_oos_insert_segment+0x1e>
 800b17c:	4b3b      	ldr	r3, [pc, #236]	; (800b26c <tcp_oos_insert_segment+0x100>)
 800b17e:	f240 421f 	movw	r2, #1055	; 0x41f
 800b182:	493b      	ldr	r1, [pc, #236]	; (800b270 <tcp_oos_insert_segment+0x104>)
 800b184:	483b      	ldr	r0, [pc, #236]	; (800b274 <tcp_oos_insert_segment+0x108>)
 800b186:	f005 ffb1 	bl	80110ec <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	68db      	ldr	r3, [r3, #12]
 800b18e:	899b      	ldrh	r3, [r3, #12]
 800b190:	b29b      	uxth	r3, r3
 800b192:	4618      	mov	r0, r3
 800b194:	f7fb fa10 	bl	80065b8 <lwip_htons>
 800b198:	4603      	mov	r3, r0
 800b19a:	b2db      	uxtb	r3, r3
 800b19c:	f003 0301 	and.w	r3, r3, #1
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d028      	beq.n	800b1f6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b1a4:	6838      	ldr	r0, [r7, #0]
 800b1a6:	f7fe f9b3 	bl	8009510 <tcp_segs_free>
    next = NULL;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	603b      	str	r3, [r7, #0]
 800b1ae:	e056      	b.n	800b25e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	899b      	ldrh	r3, [r3, #12]
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f7fb f9fd 	bl	80065b8 <lwip_htons>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	f003 0301 	and.w	r3, r3, #1
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00d      	beq.n	800b1e6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	899b      	ldrh	r3, [r3, #12]
 800b1d0:	b29c      	uxth	r4, r3
 800b1d2:	2001      	movs	r0, #1
 800b1d4:	f7fb f9f0 	bl	80065b8 <lwip_htons>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	461a      	mov	r2, r3
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	4322      	orrs	r2, r4
 800b1e2:	b292      	uxth	r2, r2
 800b1e4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b1f0:	68f8      	ldr	r0, [r7, #12]
 800b1f2:	f7fe f9a2 	bl	800953a <tcp_seg_free>
    while (next &&
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d00e      	beq.n	800b21a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	891b      	ldrh	r3, [r3, #8]
 800b200:	461a      	mov	r2, r3
 800b202:	4b1d      	ldr	r3, [pc, #116]	; (800b278 <tcp_oos_insert_segment+0x10c>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	441a      	add	r2, r3
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	6839      	ldr	r1, [r7, #0]
 800b210:	8909      	ldrh	r1, [r1, #8]
 800b212:	440b      	add	r3, r1
 800b214:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b216:	2b00      	cmp	r3, #0
 800b218:	daca      	bge.n	800b1b0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d01e      	beq.n	800b25e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	891b      	ldrh	r3, [r3, #8]
 800b224:	461a      	mov	r2, r3
 800b226:	4b14      	ldr	r3, [pc, #80]	; (800b278 <tcp_oos_insert_segment+0x10c>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	441a      	add	r2, r3
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	68db      	ldr	r3, [r3, #12]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b234:	2b00      	cmp	r3, #0
 800b236:	dd12      	ble.n	800b25e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	b29a      	uxth	r2, r3
 800b240:	4b0d      	ldr	r3, [pc, #52]	; (800b278 <tcp_oos_insert_segment+0x10c>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	b29b      	uxth	r3, r3
 800b246:	1ad3      	subs	r3, r2, r3
 800b248:	b29a      	uxth	r2, r3
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	685a      	ldr	r2, [r3, #4]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	891b      	ldrh	r3, [r3, #8]
 800b256:	4619      	mov	r1, r3
 800b258:	4610      	mov	r0, r2
 800b25a:	f7fc fb85 	bl	8007968 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	683a      	ldr	r2, [r7, #0]
 800b262:	601a      	str	r2, [r3, #0]
}
 800b264:	bf00      	nop
 800b266:	3714      	adds	r7, #20
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd90      	pop	{r4, r7, pc}
 800b26c:	0801355c 	.word	0x0801355c
 800b270:	0801381c 	.word	0x0801381c
 800b274:	080135a8 	.word	0x080135a8
 800b278:	20008860 	.word	0x20008860

0800b27c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b27c:	b5b0      	push	{r4, r5, r7, lr}
 800b27e:	b086      	sub	sp, #24
 800b280:	af00      	add	r7, sp, #0
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	60b9      	str	r1, [r7, #8]
 800b286:	607a      	str	r2, [r7, #4]
 800b288:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b28a:	e03e      	b.n	800b30a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7fc fd72 	bl	8007d84 <pbuf_clen>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b2aa:	8a7a      	ldrh	r2, [r7, #18]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d906      	bls.n	800b2be <tcp_free_acked_segments+0x42>
 800b2b0:	4b2a      	ldr	r3, [pc, #168]	; (800b35c <tcp_free_acked_segments+0xe0>)
 800b2b2:	f240 4257 	movw	r2, #1111	; 0x457
 800b2b6:	492a      	ldr	r1, [pc, #168]	; (800b360 <tcp_free_acked_segments+0xe4>)
 800b2b8:	482a      	ldr	r0, [pc, #168]	; (800b364 <tcp_free_acked_segments+0xe8>)
 800b2ba:	f005 ff17 	bl	80110ec <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800b2c4:	8a7b      	ldrh	r3, [r7, #18]
 800b2c6:	1ad3      	subs	r3, r2, r3
 800b2c8:	b29a      	uxth	r2, r3
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	891a      	ldrh	r2, [r3, #8]
 800b2d4:	4b24      	ldr	r3, [pc, #144]	; (800b368 <tcp_free_acked_segments+0xec>)
 800b2d6:	881b      	ldrh	r3, [r3, #0]
 800b2d8:	4413      	add	r3, r2
 800b2da:	b29a      	uxth	r2, r3
 800b2dc:	4b22      	ldr	r3, [pc, #136]	; (800b368 <tcp_free_acked_segments+0xec>)
 800b2de:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b2e0:	6978      	ldr	r0, [r7, #20]
 800b2e2:	f7fe f92a 	bl	800953a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d00c      	beq.n	800b30a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d109      	bne.n	800b30a <tcp_free_acked_segments+0x8e>
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d106      	bne.n	800b30a <tcp_free_acked_segments+0x8e>
 800b2fc:	4b17      	ldr	r3, [pc, #92]	; (800b35c <tcp_free_acked_segments+0xe0>)
 800b2fe:	f240 4261 	movw	r2, #1121	; 0x461
 800b302:	491a      	ldr	r1, [pc, #104]	; (800b36c <tcp_free_acked_segments+0xf0>)
 800b304:	4817      	ldr	r0, [pc, #92]	; (800b364 <tcp_free_acked_segments+0xe8>)
 800b306:	f005 fef1 	bl	80110ec <iprintf>
  while (seg_list != NULL &&
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d020      	beq.n	800b352 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	4618      	mov	r0, r3
 800b318:	f7fb f963 	bl	80065e2 <lwip_htonl>
 800b31c:	4604      	mov	r4, r0
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	891b      	ldrh	r3, [r3, #8]
 800b322:	461d      	mov	r5, r3
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	899b      	ldrh	r3, [r3, #12]
 800b32a:	b29b      	uxth	r3, r3
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7fb f943 	bl	80065b8 <lwip_htons>
 800b332:	4603      	mov	r3, r0
 800b334:	b2db      	uxtb	r3, r3
 800b336:	f003 0303 	and.w	r3, r3, #3
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d001      	beq.n	800b342 <tcp_free_acked_segments+0xc6>
 800b33e:	2301      	movs	r3, #1
 800b340:	e000      	b.n	800b344 <tcp_free_acked_segments+0xc8>
 800b342:	2300      	movs	r3, #0
 800b344:	442b      	add	r3, r5
 800b346:	18e2      	adds	r2, r4, r3
 800b348:	4b09      	ldr	r3, [pc, #36]	; (800b370 <tcp_free_acked_segments+0xf4>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b34e:	2b00      	cmp	r3, #0
 800b350:	dd9c      	ble.n	800b28c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b352:	68bb      	ldr	r3, [r7, #8]
}
 800b354:	4618      	mov	r0, r3
 800b356:	3718      	adds	r7, #24
 800b358:	46bd      	mov	sp, r7
 800b35a:	bdb0      	pop	{r4, r5, r7, pc}
 800b35c:	0801355c 	.word	0x0801355c
 800b360:	08013844 	.word	0x08013844
 800b364:	080135a8 	.word	0x080135a8
 800b368:	20008868 	.word	0x20008868
 800b36c:	0801386c 	.word	0x0801386c
 800b370:	20008864 	.word	0x20008864

0800b374 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b374:	b5b0      	push	{r4, r5, r7, lr}
 800b376:	b094      	sub	sp, #80	; 0x50
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b37c:	2300      	movs	r3, #0
 800b37e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d106      	bne.n	800b394 <tcp_receive+0x20>
 800b386:	4b91      	ldr	r3, [pc, #580]	; (800b5cc <tcp_receive+0x258>)
 800b388:	f240 427b 	movw	r2, #1147	; 0x47b
 800b38c:	4990      	ldr	r1, [pc, #576]	; (800b5d0 <tcp_receive+0x25c>)
 800b38e:	4891      	ldr	r0, [pc, #580]	; (800b5d4 <tcp_receive+0x260>)
 800b390:	f005 feac 	bl	80110ec <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	7d1b      	ldrb	r3, [r3, #20]
 800b398:	2b03      	cmp	r3, #3
 800b39a:	d806      	bhi.n	800b3aa <tcp_receive+0x36>
 800b39c:	4b8b      	ldr	r3, [pc, #556]	; (800b5cc <tcp_receive+0x258>)
 800b39e:	f240 427c 	movw	r2, #1148	; 0x47c
 800b3a2:	498d      	ldr	r1, [pc, #564]	; (800b5d8 <tcp_receive+0x264>)
 800b3a4:	488b      	ldr	r0, [pc, #556]	; (800b5d4 <tcp_receive+0x260>)
 800b3a6:	f005 fea1 	bl	80110ec <iprintf>

  if (flags & TCP_ACK) {
 800b3aa:	4b8c      	ldr	r3, [pc, #560]	; (800b5dc <tcp_receive+0x268>)
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	f003 0310 	and.w	r3, r3, #16
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	f000 8264 	beq.w	800b880 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b3be:	461a      	mov	r2, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3c4:	4413      	add	r3, r2
 800b3c6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b3cc:	4b84      	ldr	r3, [pc, #528]	; (800b5e0 <tcp_receive+0x26c>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	1ad3      	subs	r3, r2, r3
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	db1b      	blt.n	800b40e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b3da:	4b81      	ldr	r3, [pc, #516]	; (800b5e0 <tcp_receive+0x26c>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d106      	bne.n	800b3f0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b3e6:	4b7f      	ldr	r3, [pc, #508]	; (800b5e4 <tcp_receive+0x270>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	1ad3      	subs	r3, r2, r3
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	db0e      	blt.n	800b40e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b3f4:	4b7b      	ldr	r3, [pc, #492]	; (800b5e4 <tcp_receive+0x270>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d125      	bne.n	800b448 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b3fc:	4b7a      	ldr	r3, [pc, #488]	; (800b5e8 <tcp_receive+0x274>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	89db      	ldrh	r3, [r3, #14]
 800b402:	b29a      	uxth	r2, r3
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d91c      	bls.n	800b448 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b40e:	4b76      	ldr	r3, [pc, #472]	; (800b5e8 <tcp_receive+0x274>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	89db      	ldrh	r3, [r3, #14]
 800b414:	b29a      	uxth	r2, r3
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b428:	429a      	cmp	r2, r3
 800b42a:	d205      	bcs.n	800b438 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800b438:	4b69      	ldr	r3, [pc, #420]	; (800b5e0 <tcp_receive+0x26c>)
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800b440:	4b68      	ldr	r3, [pc, #416]	; (800b5e4 <tcp_receive+0x270>)
 800b442:	681a      	ldr	r2, [r3, #0]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b448:	4b66      	ldr	r3, [pc, #408]	; (800b5e4 <tcp_receive+0x270>)
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b450:	1ad3      	subs	r3, r2, r3
 800b452:	2b00      	cmp	r3, #0
 800b454:	dc58      	bgt.n	800b508 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800b456:	4b65      	ldr	r3, [pc, #404]	; (800b5ec <tcp_receive+0x278>)
 800b458:	881b      	ldrh	r3, [r3, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d14b      	bne.n	800b4f6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800b468:	4413      	add	r3, r2
 800b46a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d142      	bne.n	800b4f6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b476:	2b00      	cmp	r3, #0
 800b478:	db3d      	blt.n	800b4f6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b47e:	4b59      	ldr	r3, [pc, #356]	; (800b5e4 <tcp_receive+0x270>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	429a      	cmp	r2, r3
 800b484:	d137      	bne.n	800b4f6 <tcp_receive+0x182>
              found_dupack = 1;
 800b486:	2301      	movs	r3, #1
 800b488:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b490:	2bff      	cmp	r3, #255	; 0xff
 800b492:	d007      	beq.n	800b4a4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b49a:	3301      	adds	r3, #1
 800b49c:	b2da      	uxtb	r2, r3
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b4aa:	2b03      	cmp	r3, #3
 800b4ac:	d91b      	bls.n	800b4e6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4b8:	4413      	add	r3, r2
 800b4ba:	b29a      	uxth	r2, r3
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d30a      	bcc.n	800b4dc <tcp_receive+0x168>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b4d0:	4413      	add	r3, r2
 800b4d2:	b29a      	uxth	r2, r3
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b4da:	e004      	b.n	800b4e6 <tcp_receive+0x172>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b4ec:	2b02      	cmp	r3, #2
 800b4ee:	d902      	bls.n	800b4f6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f002 fb45 	bl	800db80 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b4f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	f040 8161 	bne.w	800b7c0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2200      	movs	r2, #0
 800b502:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b506:	e15b      	b.n	800b7c0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b508:	4b36      	ldr	r3, [pc, #216]	; (800b5e4 <tcp_receive+0x270>)
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b510:	1ad3      	subs	r3, r2, r3
 800b512:	3b01      	subs	r3, #1
 800b514:	2b00      	cmp	r3, #0
 800b516:	f2c0 814e 	blt.w	800b7b6 <tcp_receive+0x442>
 800b51a:	4b32      	ldr	r3, [pc, #200]	; (800b5e4 <tcp_receive+0x270>)
 800b51c:	681a      	ldr	r2, [r3, #0]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b522:	1ad3      	subs	r3, r2, r3
 800b524:	2b00      	cmp	r3, #0
 800b526:	f300 8146 	bgt.w	800b7b6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	8b5b      	ldrh	r3, [r3, #26]
 800b52e:	f003 0304 	and.w	r3, r3, #4
 800b532:	2b00      	cmp	r3, #0
 800b534:	d010      	beq.n	800b558 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	8b5b      	ldrh	r3, [r3, #26]
 800b53a:	f023 0304 	bic.w	r3, r3, #4
 800b53e:	b29a      	uxth	r2, r3
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2200      	movs	r2, #0
 800b554:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b566:	10db      	asrs	r3, r3, #3
 800b568:	b21b      	sxth	r3, r3
 800b56a:	b29a      	uxth	r2, r3
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b572:	b29b      	uxth	r3, r3
 800b574:	4413      	add	r3, r2
 800b576:	b29b      	uxth	r3, r3
 800b578:	b21a      	sxth	r2, r3
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b580:	4b18      	ldr	r3, [pc, #96]	; (800b5e4 <tcp_receive+0x270>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	b29a      	uxth	r2, r3
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	1ad3      	subs	r3, r2, r3
 800b58e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800b598:	4b12      	ldr	r3, [pc, #72]	; (800b5e4 <tcp_receive+0x270>)
 800b59a:	681a      	ldr	r2, [r3, #0]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	7d1b      	ldrb	r3, [r3, #20]
 800b5a4:	2b03      	cmp	r3, #3
 800b5a6:	f240 8097 	bls.w	800b6d8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d245      	bcs.n	800b646 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	8b5b      	ldrh	r3, [r3, #26]
 800b5be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d014      	beq.n	800b5f0 <tcp_receive+0x27c>
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	e013      	b.n	800b5f2 <tcp_receive+0x27e>
 800b5ca:	bf00      	nop
 800b5cc:	0801355c 	.word	0x0801355c
 800b5d0:	0801388c 	.word	0x0801388c
 800b5d4:	080135a8 	.word	0x080135a8
 800b5d8:	080138a8 	.word	0x080138a8
 800b5dc:	2000886c 	.word	0x2000886c
 800b5e0:	20008860 	.word	0x20008860
 800b5e4:	20008864 	.word	0x20008864
 800b5e8:	20008850 	.word	0x20008850
 800b5ec:	2000886a 	.word	0x2000886a
 800b5f0:	2302      	movs	r3, #2
 800b5f2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b5f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800b5fa:	b29a      	uxth	r2, r3
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b600:	fb12 f303 	smulbb	r3, r2, r3
 800b604:	b29b      	uxth	r3, r3
 800b606:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b608:	4293      	cmp	r3, r2
 800b60a:	bf28      	it	cs
 800b60c:	4613      	movcs	r3, r2
 800b60e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b616:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b618:	4413      	add	r3, r2
 800b61a:	b29a      	uxth	r2, r3
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b622:	429a      	cmp	r2, r3
 800b624:	d309      	bcc.n	800b63a <tcp_receive+0x2c6>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b62c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b62e:	4413      	add	r3, r2
 800b630:	b29a      	uxth	r2, r3
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b638:	e04e      	b.n	800b6d8 <tcp_receive+0x364>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b640:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b644:	e048      	b.n	800b6d8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b64c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b64e:	4413      	add	r3, r2
 800b650:	b29a      	uxth	r2, r3
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b658:	429a      	cmp	r2, r3
 800b65a:	d309      	bcc.n	800b670 <tcp_receive+0x2fc>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b662:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b664:	4413      	add	r3, r2
 800b666:	b29a      	uxth	r2, r3
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b66e:	e004      	b.n	800b67a <tcp_receive+0x306>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b676:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b686:	429a      	cmp	r2, r3
 800b688:	d326      	bcc.n	800b6d8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b696:	1ad3      	subs	r3, r2, r3
 800b698:	b29a      	uxth	r2, r3
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b6aa:	4413      	add	r3, r2
 800b6ac:	b29a      	uxth	r2, r3
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d30a      	bcc.n	800b6ce <tcp_receive+0x35a>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b6c2:	4413      	add	r3, r2
 800b6c4:	b29a      	uxth	r2, r3
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800b6cc:	e004      	b.n	800b6d8 <tcp_receive+0x364>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b6d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6e0:	4a98      	ldr	r2, [pc, #608]	; (800b944 <tcp_receive+0x5d0>)
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f7ff fdca 	bl	800b27c <tcp_free_acked_segments>
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6f6:	4a94      	ldr	r2, [pc, #592]	; (800b948 <tcp_receive+0x5d4>)
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f7ff fdbf 	bl	800b27c <tcp_free_acked_segments>
 800b6fe:	4602      	mov	r2, r0
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d104      	bne.n	800b716 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b712:	861a      	strh	r2, [r3, #48]	; 0x30
 800b714:	e002      	b.n	800b71c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2200      	movs	r2, #0
 800b71a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2200      	movs	r2, #0
 800b720:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b726:	2b00      	cmp	r3, #0
 800b728:	d103      	bne.n	800b732 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2200      	movs	r2, #0
 800b72e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b738:	4b84      	ldr	r3, [pc, #528]	; (800b94c <tcp_receive+0x5d8>)
 800b73a:	881b      	ldrh	r3, [r3, #0]
 800b73c:	4413      	add	r3, r2
 800b73e:	b29a      	uxth	r2, r3
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	8b5b      	ldrh	r3, [r3, #26]
 800b74a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d035      	beq.n	800b7be <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b756:	2b00      	cmp	r3, #0
 800b758:	d118      	bne.n	800b78c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d00c      	beq.n	800b77c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b76a:	68db      	ldr	r3, [r3, #12]
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	4618      	mov	r0, r3
 800b770:	f7fa ff37 	bl	80065e2 <lwip_htonl>
 800b774:	4603      	mov	r3, r0
 800b776:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b778:	2b00      	cmp	r3, #0
 800b77a:	dc20      	bgt.n	800b7be <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	8b5b      	ldrh	r3, [r3, #26]
 800b780:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b784:	b29a      	uxth	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b78a:	e018      	b.n	800b7be <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b794:	68db      	ldr	r3, [r3, #12]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	4618      	mov	r0, r3
 800b79a:	f7fa ff22 	bl	80065e2 <lwip_htonl>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	1ae3      	subs	r3, r4, r3
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	dc0b      	bgt.n	800b7be <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	8b5b      	ldrh	r3, [r3, #26]
 800b7aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b7ae:	b29a      	uxth	r2, r3
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b7b4:	e003      	b.n	800b7be <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f002 fbce 	bl	800df58 <tcp_send_empty_ack>
 800b7bc:	e000      	b.n	800b7c0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b7be:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d05b      	beq.n	800b880 <tcp_receive+0x50c>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7cc:	4b60      	ldr	r3, [pc, #384]	; (800b950 <tcp_receive+0x5dc>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	1ad3      	subs	r3, r2, r3
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	da54      	bge.n	800b880 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b7d6:	4b5f      	ldr	r3, [pc, #380]	; (800b954 <tcp_receive+0x5e0>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	b29a      	uxth	r2, r3
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	1ad3      	subs	r3, r2, r3
 800b7e4:	b29b      	uxth	r3, r3
 800b7e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b7ea:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b7f4:	10db      	asrs	r3, r3, #3
 800b7f6:	b21b      	sxth	r3, r3
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	1ad3      	subs	r3, r2, r3
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b808:	b29a      	uxth	r2, r3
 800b80a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b80e:	4413      	add	r3, r2
 800b810:	b29b      	uxth	r3, r3
 800b812:	b21a      	sxth	r2, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800b818:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	da05      	bge.n	800b82c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800b820:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b824:	425b      	negs	r3, r3
 800b826:	b29b      	uxth	r3, r3
 800b828:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b82c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b836:	109b      	asrs	r3, r3, #2
 800b838:	b21b      	sxth	r3, r3
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	1ad3      	subs	r3, r2, r3
 800b83e:	b29b      	uxth	r3, r3
 800b840:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b84a:	b29a      	uxth	r2, r3
 800b84c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b850:	4413      	add	r3, r2
 800b852:	b29b      	uxth	r3, r3
 800b854:	b21a      	sxth	r2, r3
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b860:	10db      	asrs	r3, r3, #3
 800b862:	b21b      	sxth	r3, r3
 800b864:	b29a      	uxth	r2, r3
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	4413      	add	r3, r2
 800b870:	b29b      	uxth	r3, r3
 800b872:	b21a      	sxth	r2, r3
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2200      	movs	r2, #0
 800b87e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b880:	4b35      	ldr	r3, [pc, #212]	; (800b958 <tcp_receive+0x5e4>)
 800b882:	881b      	ldrh	r3, [r3, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	f000 84e2 	beq.w	800c24e <tcp_receive+0xeda>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	7d1b      	ldrb	r3, [r3, #20]
 800b88e:	2b06      	cmp	r3, #6
 800b890:	f200 84dd 	bhi.w	800c24e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b898:	4b30      	ldr	r3, [pc, #192]	; (800b95c <tcp_receive+0x5e8>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	1ad3      	subs	r3, r2, r3
 800b89e:	3b01      	subs	r3, #1
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	f2c0 808f 	blt.w	800b9c4 <tcp_receive+0x650>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b8aa:	4b2b      	ldr	r3, [pc, #172]	; (800b958 <tcp_receive+0x5e4>)
 800b8ac:	881b      	ldrh	r3, [r3, #0]
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	4b2a      	ldr	r3, [pc, #168]	; (800b95c <tcp_receive+0x5e8>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	440b      	add	r3, r1
 800b8b6:	1ad3      	subs	r3, r2, r3
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	f300 8082 	bgt.w	800b9c4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b8c0:	4b27      	ldr	r3, [pc, #156]	; (800b960 <tcp_receive+0x5ec>)
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b8ca:	4b24      	ldr	r3, [pc, #144]	; (800b95c <tcp_receive+0x5e8>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	1ad3      	subs	r3, r2, r3
 800b8d0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b8d2:	4b23      	ldr	r3, [pc, #140]	; (800b960 <tcp_receive+0x5ec>)
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d106      	bne.n	800b8e8 <tcp_receive+0x574>
 800b8da:	4b22      	ldr	r3, [pc, #136]	; (800b964 <tcp_receive+0x5f0>)
 800b8dc:	f240 5294 	movw	r2, #1428	; 0x594
 800b8e0:	4921      	ldr	r1, [pc, #132]	; (800b968 <tcp_receive+0x5f4>)
 800b8e2:	4822      	ldr	r0, [pc, #136]	; (800b96c <tcp_receive+0x5f8>)
 800b8e4:	f005 fc02 	bl	80110ec <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d906      	bls.n	800b900 <tcp_receive+0x58c>
 800b8f2:	4b1c      	ldr	r3, [pc, #112]	; (800b964 <tcp_receive+0x5f0>)
 800b8f4:	f240 5295 	movw	r2, #1429	; 0x595
 800b8f8:	491d      	ldr	r1, [pc, #116]	; (800b970 <tcp_receive+0x5fc>)
 800b8fa:	481c      	ldr	r0, [pc, #112]	; (800b96c <tcp_receive+0x5f8>)
 800b8fc:	f005 fbf6 	bl	80110ec <iprintf>
      off = (u16_t)off32;
 800b900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b902:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b906:	4b16      	ldr	r3, [pc, #88]	; (800b960 <tcp_receive+0x5ec>)
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	891b      	ldrh	r3, [r3, #8]
 800b90c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b910:	429a      	cmp	r2, r3
 800b912:	d906      	bls.n	800b922 <tcp_receive+0x5ae>
 800b914:	4b13      	ldr	r3, [pc, #76]	; (800b964 <tcp_receive+0x5f0>)
 800b916:	f240 5297 	movw	r2, #1431	; 0x597
 800b91a:	4916      	ldr	r1, [pc, #88]	; (800b974 <tcp_receive+0x600>)
 800b91c:	4813      	ldr	r0, [pc, #76]	; (800b96c <tcp_receive+0x5f8>)
 800b91e:	f005 fbe5 	bl	80110ec <iprintf>
      inseg.len -= off;
 800b922:	4b0f      	ldr	r3, [pc, #60]	; (800b960 <tcp_receive+0x5ec>)
 800b924:	891a      	ldrh	r2, [r3, #8]
 800b926:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b92a:	1ad3      	subs	r3, r2, r3
 800b92c:	b29a      	uxth	r2, r3
 800b92e:	4b0c      	ldr	r3, [pc, #48]	; (800b960 <tcp_receive+0x5ec>)
 800b930:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b932:	4b0b      	ldr	r3, [pc, #44]	; (800b960 <tcp_receive+0x5ec>)
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	891a      	ldrh	r2, [r3, #8]
 800b938:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b93c:	1ad3      	subs	r3, r2, r3
 800b93e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800b940:	e02a      	b.n	800b998 <tcp_receive+0x624>
 800b942:	bf00      	nop
 800b944:	080138c4 	.word	0x080138c4
 800b948:	080138cc 	.word	0x080138cc
 800b94c:	20008868 	.word	0x20008868
 800b950:	20008864 	.word	0x20008864
 800b954:	20008828 	.word	0x20008828
 800b958:	2000886a 	.word	0x2000886a
 800b95c:	20008860 	.word	0x20008860
 800b960:	20008840 	.word	0x20008840
 800b964:	0801355c 	.word	0x0801355c
 800b968:	080138d4 	.word	0x080138d4
 800b96c:	080135a8 	.word	0x080135a8
 800b970:	080138e4 	.word	0x080138e4
 800b974:	080138f4 	.word	0x080138f4
        off -= p->len;
 800b978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b97a:	895b      	ldrh	r3, [r3, #10]
 800b97c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b980:	1ad3      	subs	r3, r2, r3
 800b982:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b988:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b98a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b98c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b98e:	2200      	movs	r2, #0
 800b990:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800b998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b99a:	895b      	ldrh	r3, [r3, #10]
 800b99c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d8e9      	bhi.n	800b978 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b9a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b9ac:	f7fc f8dc 	bl	8007b68 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b4:	4a91      	ldr	r2, [pc, #580]	; (800bbfc <tcp_receive+0x888>)
 800b9b6:	6013      	str	r3, [r2, #0]
 800b9b8:	4b91      	ldr	r3, [pc, #580]	; (800bc00 <tcp_receive+0x88c>)
 800b9ba:	68db      	ldr	r3, [r3, #12]
 800b9bc:	4a8f      	ldr	r2, [pc, #572]	; (800bbfc <tcp_receive+0x888>)
 800b9be:	6812      	ldr	r2, [r2, #0]
 800b9c0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b9c2:	e00d      	b.n	800b9e0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b9c4:	4b8d      	ldr	r3, [pc, #564]	; (800bbfc <tcp_receive+0x888>)
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9cc:	1ad3      	subs	r3, r2, r3
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	da06      	bge.n	800b9e0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	8b5b      	ldrh	r3, [r3, #26]
 800b9d6:	f043 0302 	orr.w	r3, r3, #2
 800b9da:	b29a      	uxth	r2, r3
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b9e0:	4b86      	ldr	r3, [pc, #536]	; (800bbfc <tcp_receive+0x888>)
 800b9e2:	681a      	ldr	r2, [r3, #0]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e8:	1ad3      	subs	r3, r2, r3
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	f2c0 842a 	blt.w	800c244 <tcp_receive+0xed0>
 800b9f0:	4b82      	ldr	r3, [pc, #520]	; (800bbfc <tcp_receive+0x888>)
 800b9f2:	681a      	ldr	r2, [r3, #0]
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f8:	6879      	ldr	r1, [r7, #4]
 800b9fa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b9fc:	440b      	add	r3, r1
 800b9fe:	1ad3      	subs	r3, r2, r3
 800ba00:	3301      	adds	r3, #1
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	f300 841e 	bgt.w	800c244 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba0c:	4b7b      	ldr	r3, [pc, #492]	; (800bbfc <tcp_receive+0x888>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	f040 829a 	bne.w	800bf4a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ba16:	4b7a      	ldr	r3, [pc, #488]	; (800bc00 <tcp_receive+0x88c>)
 800ba18:	891c      	ldrh	r4, [r3, #8]
 800ba1a:	4b79      	ldr	r3, [pc, #484]	; (800bc00 <tcp_receive+0x88c>)
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	899b      	ldrh	r3, [r3, #12]
 800ba20:	b29b      	uxth	r3, r3
 800ba22:	4618      	mov	r0, r3
 800ba24:	f7fa fdc8 	bl	80065b8 <lwip_htons>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	f003 0303 	and.w	r3, r3, #3
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d001      	beq.n	800ba38 <tcp_receive+0x6c4>
 800ba34:	2301      	movs	r3, #1
 800ba36:	e000      	b.n	800ba3a <tcp_receive+0x6c6>
 800ba38:	2300      	movs	r3, #0
 800ba3a:	4423      	add	r3, r4
 800ba3c:	b29a      	uxth	r2, r3
 800ba3e:	4b71      	ldr	r3, [pc, #452]	; (800bc04 <tcp_receive+0x890>)
 800ba40:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ba46:	4b6f      	ldr	r3, [pc, #444]	; (800bc04 <tcp_receive+0x890>)
 800ba48:	881b      	ldrh	r3, [r3, #0]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d275      	bcs.n	800bb3a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ba4e:	4b6c      	ldr	r3, [pc, #432]	; (800bc00 <tcp_receive+0x88c>)
 800ba50:	68db      	ldr	r3, [r3, #12]
 800ba52:	899b      	ldrh	r3, [r3, #12]
 800ba54:	b29b      	uxth	r3, r3
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7fa fdae 	bl	80065b8 <lwip_htons>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	b2db      	uxtb	r3, r3
 800ba60:	f003 0301 	and.w	r3, r3, #1
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d01f      	beq.n	800baa8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ba68:	4b65      	ldr	r3, [pc, #404]	; (800bc00 <tcp_receive+0x88c>)
 800ba6a:	68db      	ldr	r3, [r3, #12]
 800ba6c:	899b      	ldrh	r3, [r3, #12]
 800ba6e:	b29b      	uxth	r3, r3
 800ba70:	b21b      	sxth	r3, r3
 800ba72:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ba76:	b21c      	sxth	r4, r3
 800ba78:	4b61      	ldr	r3, [pc, #388]	; (800bc00 <tcp_receive+0x88c>)
 800ba7a:	68db      	ldr	r3, [r3, #12]
 800ba7c:	899b      	ldrh	r3, [r3, #12]
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7fa fd99 	bl	80065b8 <lwip_htons>
 800ba86:	4603      	mov	r3, r0
 800ba88:	b2db      	uxtb	r3, r3
 800ba8a:	b29b      	uxth	r3, r3
 800ba8c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7fa fd90 	bl	80065b8 <lwip_htons>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	b21b      	sxth	r3, r3
 800ba9c:	4323      	orrs	r3, r4
 800ba9e:	b21a      	sxth	r2, r3
 800baa0:	4b57      	ldr	r3, [pc, #348]	; (800bc00 <tcp_receive+0x88c>)
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	b292      	uxth	r2, r2
 800baa6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800baac:	4b54      	ldr	r3, [pc, #336]	; (800bc00 <tcp_receive+0x88c>)
 800baae:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bab0:	4b53      	ldr	r3, [pc, #332]	; (800bc00 <tcp_receive+0x88c>)
 800bab2:	68db      	ldr	r3, [r3, #12]
 800bab4:	899b      	ldrh	r3, [r3, #12]
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	4618      	mov	r0, r3
 800baba:	f7fa fd7d 	bl	80065b8 <lwip_htons>
 800babe:	4603      	mov	r3, r0
 800bac0:	b2db      	uxtb	r3, r3
 800bac2:	f003 0302 	and.w	r3, r3, #2
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d005      	beq.n	800bad6 <tcp_receive+0x762>
            inseg.len -= 1;
 800baca:	4b4d      	ldr	r3, [pc, #308]	; (800bc00 <tcp_receive+0x88c>)
 800bacc:	891b      	ldrh	r3, [r3, #8]
 800bace:	3b01      	subs	r3, #1
 800bad0:	b29a      	uxth	r2, r3
 800bad2:	4b4b      	ldr	r3, [pc, #300]	; (800bc00 <tcp_receive+0x88c>)
 800bad4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800bad6:	4b4a      	ldr	r3, [pc, #296]	; (800bc00 <tcp_receive+0x88c>)
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	4a49      	ldr	r2, [pc, #292]	; (800bc00 <tcp_receive+0x88c>)
 800badc:	8912      	ldrh	r2, [r2, #8]
 800bade:	4611      	mov	r1, r2
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7fb ff41 	bl	8007968 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800bae6:	4b46      	ldr	r3, [pc, #280]	; (800bc00 <tcp_receive+0x88c>)
 800bae8:	891c      	ldrh	r4, [r3, #8]
 800baea:	4b45      	ldr	r3, [pc, #276]	; (800bc00 <tcp_receive+0x88c>)
 800baec:	68db      	ldr	r3, [r3, #12]
 800baee:	899b      	ldrh	r3, [r3, #12]
 800baf0:	b29b      	uxth	r3, r3
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7fa fd60 	bl	80065b8 <lwip_htons>
 800baf8:	4603      	mov	r3, r0
 800bafa:	b2db      	uxtb	r3, r3
 800bafc:	f003 0303 	and.w	r3, r3, #3
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d001      	beq.n	800bb08 <tcp_receive+0x794>
 800bb04:	2301      	movs	r3, #1
 800bb06:	e000      	b.n	800bb0a <tcp_receive+0x796>
 800bb08:	2300      	movs	r3, #0
 800bb0a:	4423      	add	r3, r4
 800bb0c:	b29a      	uxth	r2, r3
 800bb0e:	4b3d      	ldr	r3, [pc, #244]	; (800bc04 <tcp_receive+0x890>)
 800bb10:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bb12:	4b3c      	ldr	r3, [pc, #240]	; (800bc04 <tcp_receive+0x890>)
 800bb14:	881b      	ldrh	r3, [r3, #0]
 800bb16:	461a      	mov	r2, r3
 800bb18:	4b38      	ldr	r3, [pc, #224]	; (800bbfc <tcp_receive+0x888>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	441a      	add	r2, r3
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb22:	6879      	ldr	r1, [r7, #4]
 800bb24:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bb26:	440b      	add	r3, r1
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d006      	beq.n	800bb3a <tcp_receive+0x7c6>
 800bb2c:	4b36      	ldr	r3, [pc, #216]	; (800bc08 <tcp_receive+0x894>)
 800bb2e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800bb32:	4936      	ldr	r1, [pc, #216]	; (800bc0c <tcp_receive+0x898>)
 800bb34:	4836      	ldr	r0, [pc, #216]	; (800bc10 <tcp_receive+0x89c>)
 800bb36:	f005 fad9 	bl	80110ec <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	f000 80e7 	beq.w	800bd12 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bb44:	4b2e      	ldr	r3, [pc, #184]	; (800bc00 <tcp_receive+0x88c>)
 800bb46:	68db      	ldr	r3, [r3, #12]
 800bb48:	899b      	ldrh	r3, [r3, #12]
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7fa fd33 	bl	80065b8 <lwip_htons>
 800bb52:	4603      	mov	r3, r0
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	f003 0301 	and.w	r3, r3, #1
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d010      	beq.n	800bb80 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800bb5e:	e00a      	b.n	800bb76 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb64:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800bb70:	68f8      	ldr	r0, [r7, #12]
 800bb72:	f7fd fce2 	bl	800953a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d1f0      	bne.n	800bb60 <tcp_receive+0x7ec>
 800bb7e:	e0c8      	b.n	800bd12 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb84:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800bb86:	e052      	b.n	800bc2e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bb88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb8a:	68db      	ldr	r3, [r3, #12]
 800bb8c:	899b      	ldrh	r3, [r3, #12]
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7fa fd11 	bl	80065b8 <lwip_htons>
 800bb96:	4603      	mov	r3, r0
 800bb98:	b2db      	uxtb	r3, r3
 800bb9a:	f003 0301 	and.w	r3, r3, #1
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d03d      	beq.n	800bc1e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800bba2:	4b17      	ldr	r3, [pc, #92]	; (800bc00 <tcp_receive+0x88c>)
 800bba4:	68db      	ldr	r3, [r3, #12]
 800bba6:	899b      	ldrh	r3, [r3, #12]
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7fa fd04 	bl	80065b8 <lwip_htons>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d130      	bne.n	800bc1e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800bbbc:	4b10      	ldr	r3, [pc, #64]	; (800bc00 <tcp_receive+0x88c>)
 800bbbe:	68db      	ldr	r3, [r3, #12]
 800bbc0:	899b      	ldrh	r3, [r3, #12]
 800bbc2:	b29c      	uxth	r4, r3
 800bbc4:	2001      	movs	r0, #1
 800bbc6:	f7fa fcf7 	bl	80065b8 <lwip_htons>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	461a      	mov	r2, r3
 800bbce:	4b0c      	ldr	r3, [pc, #48]	; (800bc00 <tcp_receive+0x88c>)
 800bbd0:	68db      	ldr	r3, [r3, #12]
 800bbd2:	4322      	orrs	r2, r4
 800bbd4:	b292      	uxth	r2, r2
 800bbd6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800bbd8:	4b09      	ldr	r3, [pc, #36]	; (800bc00 <tcp_receive+0x88c>)
 800bbda:	891c      	ldrh	r4, [r3, #8]
 800bbdc:	4b08      	ldr	r3, [pc, #32]	; (800bc00 <tcp_receive+0x88c>)
 800bbde:	68db      	ldr	r3, [r3, #12]
 800bbe0:	899b      	ldrh	r3, [r3, #12]
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7fa fce7 	bl	80065b8 <lwip_htons>
 800bbea:	4603      	mov	r3, r0
 800bbec:	b2db      	uxtb	r3, r3
 800bbee:	f003 0303 	and.w	r3, r3, #3
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d00e      	beq.n	800bc14 <tcp_receive+0x8a0>
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	e00d      	b.n	800bc16 <tcp_receive+0x8a2>
 800bbfa:	bf00      	nop
 800bbfc:	20008860 	.word	0x20008860
 800bc00:	20008840 	.word	0x20008840
 800bc04:	2000886a 	.word	0x2000886a
 800bc08:	0801355c 	.word	0x0801355c
 800bc0c:	08013904 	.word	0x08013904
 800bc10:	080135a8 	.word	0x080135a8
 800bc14:	2300      	movs	r3, #0
 800bc16:	4423      	add	r3, r4
 800bc18:	b29a      	uxth	r2, r3
 800bc1a:	4b98      	ldr	r3, [pc, #608]	; (800be7c <tcp_receive+0xb08>)
 800bc1c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800bc1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc20:	613b      	str	r3, [r7, #16]
              next = next->next;
 800bc22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800bc28:	6938      	ldr	r0, [r7, #16]
 800bc2a:	f7fd fc86 	bl	800953a <tcp_seg_free>
            while (next &&
 800bc2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d00e      	beq.n	800bc52 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800bc34:	4b91      	ldr	r3, [pc, #580]	; (800be7c <tcp_receive+0xb08>)
 800bc36:	881b      	ldrh	r3, [r3, #0]
 800bc38:	461a      	mov	r2, r3
 800bc3a:	4b91      	ldr	r3, [pc, #580]	; (800be80 <tcp_receive+0xb0c>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	441a      	add	r2, r3
 800bc40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bc48:	8909      	ldrh	r1, [r1, #8]
 800bc4a:	440b      	add	r3, r1
 800bc4c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	da9a      	bge.n	800bb88 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800bc52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d059      	beq.n	800bd0c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800bc58:	4b88      	ldr	r3, [pc, #544]	; (800be7c <tcp_receive+0xb08>)
 800bc5a:	881b      	ldrh	r3, [r3, #0]
 800bc5c:	461a      	mov	r2, r3
 800bc5e:	4b88      	ldr	r3, [pc, #544]	; (800be80 <tcp_receive+0xb0c>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	441a      	add	r2, r3
 800bc64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	dd4d      	ble.n	800bd0c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800bc70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc72:	68db      	ldr	r3, [r3, #12]
 800bc74:	685b      	ldr	r3, [r3, #4]
 800bc76:	b29a      	uxth	r2, r3
 800bc78:	4b81      	ldr	r3, [pc, #516]	; (800be80 <tcp_receive+0xb0c>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	1ad3      	subs	r3, r2, r3
 800bc80:	b29a      	uxth	r2, r3
 800bc82:	4b80      	ldr	r3, [pc, #512]	; (800be84 <tcp_receive+0xb10>)
 800bc84:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bc86:	4b7f      	ldr	r3, [pc, #508]	; (800be84 <tcp_receive+0xb10>)
 800bc88:	68db      	ldr	r3, [r3, #12]
 800bc8a:	899b      	ldrh	r3, [r3, #12]
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7fa fc92 	bl	80065b8 <lwip_htons>
 800bc94:	4603      	mov	r3, r0
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	f003 0302 	and.w	r3, r3, #2
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d005      	beq.n	800bcac <tcp_receive+0x938>
                inseg.len -= 1;
 800bca0:	4b78      	ldr	r3, [pc, #480]	; (800be84 <tcp_receive+0xb10>)
 800bca2:	891b      	ldrh	r3, [r3, #8]
 800bca4:	3b01      	subs	r3, #1
 800bca6:	b29a      	uxth	r2, r3
 800bca8:	4b76      	ldr	r3, [pc, #472]	; (800be84 <tcp_receive+0xb10>)
 800bcaa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800bcac:	4b75      	ldr	r3, [pc, #468]	; (800be84 <tcp_receive+0xb10>)
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	4a74      	ldr	r2, [pc, #464]	; (800be84 <tcp_receive+0xb10>)
 800bcb2:	8912      	ldrh	r2, [r2, #8]
 800bcb4:	4611      	mov	r1, r2
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7fb fe56 	bl	8007968 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800bcbc:	4b71      	ldr	r3, [pc, #452]	; (800be84 <tcp_receive+0xb10>)
 800bcbe:	891c      	ldrh	r4, [r3, #8]
 800bcc0:	4b70      	ldr	r3, [pc, #448]	; (800be84 <tcp_receive+0xb10>)
 800bcc2:	68db      	ldr	r3, [r3, #12]
 800bcc4:	899b      	ldrh	r3, [r3, #12]
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f7fa fc75 	bl	80065b8 <lwip_htons>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	f003 0303 	and.w	r3, r3, #3
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d001      	beq.n	800bcde <tcp_receive+0x96a>
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e000      	b.n	800bce0 <tcp_receive+0x96c>
 800bcde:	2300      	movs	r3, #0
 800bce0:	4423      	add	r3, r4
 800bce2:	b29a      	uxth	r2, r3
 800bce4:	4b65      	ldr	r3, [pc, #404]	; (800be7c <tcp_receive+0xb08>)
 800bce6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800bce8:	4b64      	ldr	r3, [pc, #400]	; (800be7c <tcp_receive+0xb08>)
 800bcea:	881b      	ldrh	r3, [r3, #0]
 800bcec:	461a      	mov	r2, r3
 800bcee:	4b64      	ldr	r3, [pc, #400]	; (800be80 <tcp_receive+0xb0c>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	441a      	add	r2, r3
 800bcf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcf6:	68db      	ldr	r3, [r3, #12]
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d006      	beq.n	800bd0c <tcp_receive+0x998>
 800bcfe:	4b62      	ldr	r3, [pc, #392]	; (800be88 <tcp_receive+0xb14>)
 800bd00:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800bd04:	4961      	ldr	r1, [pc, #388]	; (800be8c <tcp_receive+0xb18>)
 800bd06:	4862      	ldr	r0, [pc, #392]	; (800be90 <tcp_receive+0xb1c>)
 800bd08:	f005 f9f0 	bl	80110ec <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bd10:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800bd12:	4b5a      	ldr	r3, [pc, #360]	; (800be7c <tcp_receive+0xb08>)
 800bd14:	881b      	ldrh	r3, [r3, #0]
 800bd16:	461a      	mov	r2, r3
 800bd18:	4b59      	ldr	r3, [pc, #356]	; (800be80 <tcp_receive+0xb0c>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	441a      	add	r2, r3
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bd26:	4b55      	ldr	r3, [pc, #340]	; (800be7c <tcp_receive+0xb08>)
 800bd28:	881b      	ldrh	r3, [r3, #0]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d206      	bcs.n	800bd3c <tcp_receive+0x9c8>
 800bd2e:	4b56      	ldr	r3, [pc, #344]	; (800be88 <tcp_receive+0xb14>)
 800bd30:	f240 6207 	movw	r2, #1543	; 0x607
 800bd34:	4957      	ldr	r1, [pc, #348]	; (800be94 <tcp_receive+0xb20>)
 800bd36:	4856      	ldr	r0, [pc, #344]	; (800be90 <tcp_receive+0xb1c>)
 800bd38:	f005 f9d8 	bl	80110ec <iprintf>
        pcb->rcv_wnd -= tcplen;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bd40:	4b4e      	ldr	r3, [pc, #312]	; (800be7c <tcp_receive+0xb08>)
 800bd42:	881b      	ldrh	r3, [r3, #0]
 800bd44:	1ad3      	subs	r3, r2, r3
 800bd46:	b29a      	uxth	r2, r3
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f7fc fdb7 	bl	80088c0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800bd52:	4b4c      	ldr	r3, [pc, #304]	; (800be84 <tcp_receive+0xb10>)
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	891b      	ldrh	r3, [r3, #8]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d006      	beq.n	800bd6a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800bd5c:	4b49      	ldr	r3, [pc, #292]	; (800be84 <tcp_receive+0xb10>)
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	4a4d      	ldr	r2, [pc, #308]	; (800be98 <tcp_receive+0xb24>)
 800bd62:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800bd64:	4b47      	ldr	r3, [pc, #284]	; (800be84 <tcp_receive+0xb10>)
 800bd66:	2200      	movs	r2, #0
 800bd68:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bd6a:	4b46      	ldr	r3, [pc, #280]	; (800be84 <tcp_receive+0xb10>)
 800bd6c:	68db      	ldr	r3, [r3, #12]
 800bd6e:	899b      	ldrh	r3, [r3, #12]
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7fa fc20 	bl	80065b8 <lwip_htons>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	f003 0301 	and.w	r3, r3, #1
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	f000 80b8 	beq.w	800bef6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800bd86:	4b45      	ldr	r3, [pc, #276]	; (800be9c <tcp_receive+0xb28>)
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	f043 0320 	orr.w	r3, r3, #32
 800bd8e:	b2da      	uxtb	r2, r3
 800bd90:	4b42      	ldr	r3, [pc, #264]	; (800be9c <tcp_receive+0xb28>)
 800bd92:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800bd94:	e0af      	b.n	800bef6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd9a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bda0:	68db      	ldr	r3, [r3, #12]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	4a36      	ldr	r2, [pc, #216]	; (800be80 <tcp_receive+0xb0c>)
 800bda6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	891b      	ldrh	r3, [r3, #8]
 800bdac:	461c      	mov	r4, r3
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	899b      	ldrh	r3, [r3, #12]
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7fa fbfe 	bl	80065b8 <lwip_htons>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	b2db      	uxtb	r3, r3
 800bdc0:	f003 0303 	and.w	r3, r3, #3
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d001      	beq.n	800bdcc <tcp_receive+0xa58>
 800bdc8:	2301      	movs	r3, #1
 800bdca:	e000      	b.n	800bdce <tcp_receive+0xa5a>
 800bdcc:	2300      	movs	r3, #0
 800bdce:	191a      	adds	r2, r3, r4
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd4:	441a      	add	r2, r3
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdde:	461c      	mov	r4, r3
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	891b      	ldrh	r3, [r3, #8]
 800bde4:	461d      	mov	r5, r3
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	68db      	ldr	r3, [r3, #12]
 800bdea:	899b      	ldrh	r3, [r3, #12]
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7fa fbe2 	bl	80065b8 <lwip_htons>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	b2db      	uxtb	r3, r3
 800bdf8:	f003 0303 	and.w	r3, r3, #3
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d001      	beq.n	800be04 <tcp_receive+0xa90>
 800be00:	2301      	movs	r3, #1
 800be02:	e000      	b.n	800be06 <tcp_receive+0xa92>
 800be04:	2300      	movs	r3, #0
 800be06:	442b      	add	r3, r5
 800be08:	429c      	cmp	r4, r3
 800be0a:	d206      	bcs.n	800be1a <tcp_receive+0xaa6>
 800be0c:	4b1e      	ldr	r3, [pc, #120]	; (800be88 <tcp_receive+0xb14>)
 800be0e:	f240 622b 	movw	r2, #1579	; 0x62b
 800be12:	4923      	ldr	r1, [pc, #140]	; (800bea0 <tcp_receive+0xb2c>)
 800be14:	481e      	ldr	r0, [pc, #120]	; (800be90 <tcp_receive+0xb1c>)
 800be16:	f005 f969 	bl	80110ec <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	891b      	ldrh	r3, [r3, #8]
 800be1e:	461c      	mov	r4, r3
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	68db      	ldr	r3, [r3, #12]
 800be24:	899b      	ldrh	r3, [r3, #12]
 800be26:	b29b      	uxth	r3, r3
 800be28:	4618      	mov	r0, r3
 800be2a:	f7fa fbc5 	bl	80065b8 <lwip_htons>
 800be2e:	4603      	mov	r3, r0
 800be30:	b2db      	uxtb	r3, r3
 800be32:	f003 0303 	and.w	r3, r3, #3
 800be36:	2b00      	cmp	r3, #0
 800be38:	d001      	beq.n	800be3e <tcp_receive+0xaca>
 800be3a:	2301      	movs	r3, #1
 800be3c:	e000      	b.n	800be40 <tcp_receive+0xacc>
 800be3e:	2300      	movs	r3, #0
 800be40:	1919      	adds	r1, r3, r4
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800be46:	b28b      	uxth	r3, r1
 800be48:	1ad3      	subs	r3, r2, r3
 800be4a:	b29a      	uxth	r2, r3
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f7fc fd35 	bl	80088c0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	891b      	ldrh	r3, [r3, #8]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d028      	beq.n	800beb2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800be60:	4b0d      	ldr	r3, [pc, #52]	; (800be98 <tcp_receive+0xb24>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d01d      	beq.n	800bea4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800be68:	4b0b      	ldr	r3, [pc, #44]	; (800be98 <tcp_receive+0xb24>)
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	4619      	mov	r1, r3
 800be72:	4610      	mov	r0, r2
 800be74:	f7fb ffc0 	bl	8007df8 <pbuf_cat>
 800be78:	e018      	b.n	800beac <tcp_receive+0xb38>
 800be7a:	bf00      	nop
 800be7c:	2000886a 	.word	0x2000886a
 800be80:	20008860 	.word	0x20008860
 800be84:	20008840 	.word	0x20008840
 800be88:	0801355c 	.word	0x0801355c
 800be8c:	0801393c 	.word	0x0801393c
 800be90:	080135a8 	.word	0x080135a8
 800be94:	08013978 	.word	0x08013978
 800be98:	20008870 	.word	0x20008870
 800be9c:	2000886d 	.word	0x2000886d
 800bea0:	08013998 	.word	0x08013998
            } else {
              recv_data = cseg->p;
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	685b      	ldr	r3, [r3, #4]
 800bea8:	4a70      	ldr	r2, [pc, #448]	; (800c06c <tcp_receive+0xcf8>)
 800beaa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	2200      	movs	r2, #0
 800beb0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	68db      	ldr	r3, [r3, #12]
 800beb6:	899b      	ldrh	r3, [r3, #12]
 800beb8:	b29b      	uxth	r3, r3
 800beba:	4618      	mov	r0, r3
 800bebc:	f7fa fb7c 	bl	80065b8 <lwip_htons>
 800bec0:	4603      	mov	r3, r0
 800bec2:	b2db      	uxtb	r3, r3
 800bec4:	f003 0301 	and.w	r3, r3, #1
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d00d      	beq.n	800bee8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800becc:	4b68      	ldr	r3, [pc, #416]	; (800c070 <tcp_receive+0xcfc>)
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	f043 0320 	orr.w	r3, r3, #32
 800bed4:	b2da      	uxtb	r2, r3
 800bed6:	4b66      	ldr	r3, [pc, #408]	; (800c070 <tcp_receive+0xcfc>)
 800bed8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	7d1b      	ldrb	r3, [r3, #20]
 800bede:	2b04      	cmp	r3, #4
 800bee0:	d102      	bne.n	800bee8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2207      	movs	r2, #7
 800bee6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	681a      	ldr	r2, [r3, #0]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800bef0:	68b8      	ldr	r0, [r7, #8]
 800bef2:	f7fd fb22 	bl	800953a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800befa:	2b00      	cmp	r3, #0
 800befc:	d008      	beq.n	800bf10 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	685a      	ldr	r2, [r3, #4]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	f43f af43 	beq.w	800bd96 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	8b5b      	ldrh	r3, [r3, #26]
 800bf14:	f003 0301 	and.w	r3, r3, #1
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d00e      	beq.n	800bf3a <tcp_receive+0xbc6>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	8b5b      	ldrh	r3, [r3, #26]
 800bf20:	f023 0301 	bic.w	r3, r3, #1
 800bf24:	b29a      	uxth	r2, r3
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	835a      	strh	r2, [r3, #26]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	8b5b      	ldrh	r3, [r3, #26]
 800bf2e:	f043 0302 	orr.w	r3, r3, #2
 800bf32:	b29a      	uxth	r2, r3
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800bf38:	e188      	b.n	800c24c <tcp_receive+0xed8>
        tcp_ack(pcb);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	8b5b      	ldrh	r3, [r3, #26]
 800bf3e:	f043 0301 	orr.w	r3, r3, #1
 800bf42:	b29a      	uxth	r2, r3
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800bf48:	e180      	b.n	800c24c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d106      	bne.n	800bf60 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800bf52:	4848      	ldr	r0, [pc, #288]	; (800c074 <tcp_receive+0xd00>)
 800bf54:	f7fd fb0a 	bl	800956c <tcp_seg_copy>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	675a      	str	r2, [r3, #116]	; 0x74
 800bf5e:	e16d      	b.n	800c23c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800bf60:	2300      	movs	r3, #0
 800bf62:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf68:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf6a:	e157      	b.n	800c21c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800bf6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6e:	68db      	ldr	r3, [r3, #12]
 800bf70:	685a      	ldr	r2, [r3, #4]
 800bf72:	4b41      	ldr	r3, [pc, #260]	; (800c078 <tcp_receive+0xd04>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d11d      	bne.n	800bfb6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800bf7a:	4b3e      	ldr	r3, [pc, #248]	; (800c074 <tcp_receive+0xd00>)
 800bf7c:	891a      	ldrh	r2, [r3, #8]
 800bf7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf80:	891b      	ldrh	r3, [r3, #8]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	f240 814f 	bls.w	800c226 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bf88:	483a      	ldr	r0, [pc, #232]	; (800c074 <tcp_receive+0xd00>)
 800bf8a:	f7fd faef 	bl	800956c <tcp_seg_copy>
 800bf8e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	f000 8149 	beq.w	800c22a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800bf98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d003      	beq.n	800bfa6 <tcp_receive+0xc32>
                    prev->next = cseg;
 800bf9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfa0:	697a      	ldr	r2, [r7, #20]
 800bfa2:	601a      	str	r2, [r3, #0]
 800bfa4:	e002      	b.n	800bfac <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	697a      	ldr	r2, [r7, #20]
 800bfaa:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800bfac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bfae:	6978      	ldr	r0, [r7, #20]
 800bfb0:	f7ff f8dc 	bl	800b16c <tcp_oos_insert_segment>
                }
                break;
 800bfb4:	e139      	b.n	800c22a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800bfb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d117      	bne.n	800bfec <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800bfbc:	4b2e      	ldr	r3, [pc, #184]	; (800c078 <tcp_receive+0xd04>)
 800bfbe:	681a      	ldr	r2, [r3, #0]
 800bfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc2:	68db      	ldr	r3, [r3, #12]
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	1ad3      	subs	r3, r2, r3
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	da57      	bge.n	800c07c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800bfcc:	4829      	ldr	r0, [pc, #164]	; (800c074 <tcp_receive+0xd00>)
 800bfce:	f7fd facd 	bl	800956c <tcp_seg_copy>
 800bfd2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800bfd4:	69bb      	ldr	r3, [r7, #24]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	f000 8129 	beq.w	800c22e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	69ba      	ldr	r2, [r7, #24]
 800bfe0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800bfe2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bfe4:	69b8      	ldr	r0, [r7, #24]
 800bfe6:	f7ff f8c1 	bl	800b16c <tcp_oos_insert_segment>
                  }
                  break;
 800bfea:	e120      	b.n	800c22e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800bfec:	4b22      	ldr	r3, [pc, #136]	; (800c078 <tcp_receive+0xd04>)
 800bfee:	681a      	ldr	r2, [r3, #0]
 800bff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	1ad3      	subs	r3, r2, r3
 800bff8:	3b01      	subs	r3, #1
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	db3e      	blt.n	800c07c <tcp_receive+0xd08>
 800bffe:	4b1e      	ldr	r3, [pc, #120]	; (800c078 <tcp_receive+0xd04>)
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c004:	68db      	ldr	r3, [r3, #12]
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	1ad3      	subs	r3, r2, r3
 800c00a:	3301      	adds	r3, #1
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	dc35      	bgt.n	800c07c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c010:	4818      	ldr	r0, [pc, #96]	; (800c074 <tcp_receive+0xd00>)
 800c012:	f7fd faab 	bl	800956c <tcp_seg_copy>
 800c016:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c018:	69fb      	ldr	r3, [r7, #28]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	f000 8109 	beq.w	800c232 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c022:	68db      	ldr	r3, [r3, #12]
 800c024:	685b      	ldr	r3, [r3, #4]
 800c026:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c028:	8912      	ldrh	r2, [r2, #8]
 800c02a:	441a      	add	r2, r3
 800c02c:	4b12      	ldr	r3, [pc, #72]	; (800c078 <tcp_receive+0xd04>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	1ad3      	subs	r3, r2, r3
 800c032:	2b00      	cmp	r3, #0
 800c034:	dd12      	ble.n	800c05c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c036:	4b10      	ldr	r3, [pc, #64]	; (800c078 <tcp_receive+0xd04>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	b29a      	uxth	r2, r3
 800c03c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c03e:	68db      	ldr	r3, [r3, #12]
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	b29b      	uxth	r3, r3
 800c044:	1ad3      	subs	r3, r2, r3
 800c046:	b29a      	uxth	r2, r3
 800c048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c04a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c04c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c04e:	685a      	ldr	r2, [r3, #4]
 800c050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c052:	891b      	ldrh	r3, [r3, #8]
 800c054:	4619      	mov	r1, r3
 800c056:	4610      	mov	r0, r2
 800c058:	f7fb fc86 	bl	8007968 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c05c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c05e:	69fa      	ldr	r2, [r7, #28]
 800c060:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c062:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c064:	69f8      	ldr	r0, [r7, #28]
 800c066:	f7ff f881 	bl	800b16c <tcp_oos_insert_segment>
                  }
                  break;
 800c06a:	e0e2      	b.n	800c232 <tcp_receive+0xebe>
 800c06c:	20008870 	.word	0x20008870
 800c070:	2000886d 	.word	0x2000886d
 800c074:	20008840 	.word	0x20008840
 800c078:	20008860 	.word	0x20008860
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c07e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2b00      	cmp	r3, #0
 800c086:	f040 80c6 	bne.w	800c216 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c08a:	4b80      	ldr	r3, [pc, #512]	; (800c28c <tcp_receive+0xf18>)
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c090:	68db      	ldr	r3, [r3, #12]
 800c092:	685b      	ldr	r3, [r3, #4]
 800c094:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c096:	2b00      	cmp	r3, #0
 800c098:	f340 80bd 	ble.w	800c216 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c09e:	68db      	ldr	r3, [r3, #12]
 800c0a0:	899b      	ldrh	r3, [r3, #12]
 800c0a2:	b29b      	uxth	r3, r3
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f7fa fa87 	bl	80065b8 <lwip_htons>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	f003 0301 	and.w	r3, r3, #1
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	f040 80bf 	bne.w	800c236 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c0b8:	4875      	ldr	r0, [pc, #468]	; (800c290 <tcp_receive+0xf1c>)
 800c0ba:	f7fd fa57 	bl	800956c <tcp_seg_copy>
 800c0be:	4602      	mov	r2, r0
 800c0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	f000 80b6 	beq.w	800c23a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d0:	68db      	ldr	r3, [r3, #12]
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0d6:	8912      	ldrh	r2, [r2, #8]
 800c0d8:	441a      	add	r2, r3
 800c0da:	4b6c      	ldr	r3, [pc, #432]	; (800c28c <tcp_receive+0xf18>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	1ad3      	subs	r3, r2, r3
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	dd12      	ble.n	800c10a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c0e4:	4b69      	ldr	r3, [pc, #420]	; (800c28c <tcp_receive+0xf18>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	b29a      	uxth	r2, r3
 800c0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ec:	68db      	ldr	r3, [r3, #12]
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	b29b      	uxth	r3, r3
 800c0f2:	1ad3      	subs	r3, r2, r3
 800c0f4:	b29a      	uxth	r2, r3
 800c0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fc:	685a      	ldr	r2, [r3, #4]
 800c0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c100:	891b      	ldrh	r3, [r3, #8]
 800c102:	4619      	mov	r1, r3
 800c104:	4610      	mov	r0, r2
 800c106:	f7fb fc2f 	bl	8007968 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c10a:	4b62      	ldr	r3, [pc, #392]	; (800c294 <tcp_receive+0xf20>)
 800c10c:	881b      	ldrh	r3, [r3, #0]
 800c10e:	461a      	mov	r2, r3
 800c110:	4b5e      	ldr	r3, [pc, #376]	; (800c28c <tcp_receive+0xf18>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	441a      	add	r2, r3
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c11a:	6879      	ldr	r1, [r7, #4]
 800c11c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c11e:	440b      	add	r3, r1
 800c120:	1ad3      	subs	r3, r2, r3
 800c122:	2b00      	cmp	r3, #0
 800c124:	f340 8089 	ble.w	800c23a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	68db      	ldr	r3, [r3, #12]
 800c12e:	899b      	ldrh	r3, [r3, #12]
 800c130:	b29b      	uxth	r3, r3
 800c132:	4618      	mov	r0, r3
 800c134:	f7fa fa40 	bl	80065b8 <lwip_htons>
 800c138:	4603      	mov	r3, r0
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	f003 0301 	and.w	r3, r3, #1
 800c140:	2b00      	cmp	r3, #0
 800c142:	d022      	beq.n	800c18a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	68db      	ldr	r3, [r3, #12]
 800c14a:	899b      	ldrh	r3, [r3, #12]
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	b21b      	sxth	r3, r3
 800c150:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c154:	b21c      	sxth	r4, r3
 800c156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	899b      	ldrh	r3, [r3, #12]
 800c15e:	b29b      	uxth	r3, r3
 800c160:	4618      	mov	r0, r3
 800c162:	f7fa fa29 	bl	80065b8 <lwip_htons>
 800c166:	4603      	mov	r3, r0
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c170:	b29b      	uxth	r3, r3
 800c172:	4618      	mov	r0, r3
 800c174:	f7fa fa20 	bl	80065b8 <lwip_htons>
 800c178:	4603      	mov	r3, r0
 800c17a:	b21b      	sxth	r3, r3
 800c17c:	4323      	orrs	r3, r4
 800c17e:	b21a      	sxth	r2, r3
 800c180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	68db      	ldr	r3, [r3, #12]
 800c186:	b292      	uxth	r2, r2
 800c188:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c18e:	b29a      	uxth	r2, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c194:	4413      	add	r3, r2
 800c196:	b299      	uxth	r1, r3
 800c198:	4b3c      	ldr	r3, [pc, #240]	; (800c28c <tcp_receive+0xf18>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	b29a      	uxth	r2, r3
 800c19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	1a8a      	subs	r2, r1, r2
 800c1a4:	b292      	uxth	r2, r2
 800c1a6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	685a      	ldr	r2, [r3, #4]
 800c1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	891b      	ldrh	r3, [r3, #8]
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	4610      	mov	r0, r2
 800c1b8:	f7fb fbd6 	bl	8007968 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	891c      	ldrh	r4, [r3, #8]
 800c1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	68db      	ldr	r3, [r3, #12]
 800c1c8:	899b      	ldrh	r3, [r3, #12]
 800c1ca:	b29b      	uxth	r3, r3
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f7fa f9f3 	bl	80065b8 <lwip_htons>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	f003 0303 	and.w	r3, r3, #3
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d001      	beq.n	800c1e2 <tcp_receive+0xe6e>
 800c1de:	2301      	movs	r3, #1
 800c1e0:	e000      	b.n	800c1e4 <tcp_receive+0xe70>
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	4423      	add	r3, r4
 800c1e6:	b29a      	uxth	r2, r3
 800c1e8:	4b2a      	ldr	r3, [pc, #168]	; (800c294 <tcp_receive+0xf20>)
 800c1ea:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c1ec:	4b29      	ldr	r3, [pc, #164]	; (800c294 <tcp_receive+0xf20>)
 800c1ee:	881b      	ldrh	r3, [r3, #0]
 800c1f0:	461a      	mov	r2, r3
 800c1f2:	4b26      	ldr	r3, [pc, #152]	; (800c28c <tcp_receive+0xf18>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	441a      	add	r2, r3
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1fc:	6879      	ldr	r1, [r7, #4]
 800c1fe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c200:	440b      	add	r3, r1
 800c202:	429a      	cmp	r2, r3
 800c204:	d019      	beq.n	800c23a <tcp_receive+0xec6>
 800c206:	4b24      	ldr	r3, [pc, #144]	; (800c298 <tcp_receive+0xf24>)
 800c208:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800c20c:	4923      	ldr	r1, [pc, #140]	; (800c29c <tcp_receive+0xf28>)
 800c20e:	4824      	ldr	r0, [pc, #144]	; (800c2a0 <tcp_receive+0xf2c>)
 800c210:	f004 ff6c 	bl	80110ec <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c214:	e011      	b.n	800c23a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c21e:	2b00      	cmp	r3, #0
 800c220:	f47f aea4 	bne.w	800bf6c <tcp_receive+0xbf8>
 800c224:	e00a      	b.n	800c23c <tcp_receive+0xec8>
                break;
 800c226:	bf00      	nop
 800c228:	e008      	b.n	800c23c <tcp_receive+0xec8>
                break;
 800c22a:	bf00      	nop
 800c22c:	e006      	b.n	800c23c <tcp_receive+0xec8>
                  break;
 800c22e:	bf00      	nop
 800c230:	e004      	b.n	800c23c <tcp_receive+0xec8>
                  break;
 800c232:	bf00      	nop
 800c234:	e002      	b.n	800c23c <tcp_receive+0xec8>
                  break;
 800c236:	bf00      	nop
 800c238:	e000      	b.n	800c23c <tcp_receive+0xec8>
                break;
 800c23a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f001 fe8b 	bl	800df58 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c242:	e003      	b.n	800c24c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f001 fe87 	bl	800df58 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c24a:	e01a      	b.n	800c282 <tcp_receive+0xf0e>
 800c24c:	e019      	b.n	800c282 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c24e:	4b0f      	ldr	r3, [pc, #60]	; (800c28c <tcp_receive+0xf18>)
 800c250:	681a      	ldr	r2, [r3, #0]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c256:	1ad3      	subs	r3, r2, r3
 800c258:	2b00      	cmp	r3, #0
 800c25a:	db0a      	blt.n	800c272 <tcp_receive+0xefe>
 800c25c:	4b0b      	ldr	r3, [pc, #44]	; (800c28c <tcp_receive+0xf18>)
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c264:	6879      	ldr	r1, [r7, #4]
 800c266:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c268:	440b      	add	r3, r1
 800c26a:	1ad3      	subs	r3, r2, r3
 800c26c:	3301      	adds	r3, #1
 800c26e:	2b00      	cmp	r3, #0
 800c270:	dd07      	ble.n	800c282 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	8b5b      	ldrh	r3, [r3, #26]
 800c276:	f043 0302 	orr.w	r3, r3, #2
 800c27a:	b29a      	uxth	r2, r3
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c280:	e7ff      	b.n	800c282 <tcp_receive+0xf0e>
 800c282:	bf00      	nop
 800c284:	3750      	adds	r7, #80	; 0x50
 800c286:	46bd      	mov	sp, r7
 800c288:	bdb0      	pop	{r4, r5, r7, pc}
 800c28a:	bf00      	nop
 800c28c:	20008860 	.word	0x20008860
 800c290:	20008840 	.word	0x20008840
 800c294:	2000886a 	.word	0x2000886a
 800c298:	0801355c 	.word	0x0801355c
 800c29c:	08013904 	.word	0x08013904
 800c2a0:	080135a8 	.word	0x080135a8

0800c2a4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b083      	sub	sp, #12
 800c2a8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c2aa:	4b15      	ldr	r3, [pc, #84]	; (800c300 <tcp_get_next_optbyte+0x5c>)
 800c2ac:	881b      	ldrh	r3, [r3, #0]
 800c2ae:	1c5a      	adds	r2, r3, #1
 800c2b0:	b291      	uxth	r1, r2
 800c2b2:	4a13      	ldr	r2, [pc, #76]	; (800c300 <tcp_get_next_optbyte+0x5c>)
 800c2b4:	8011      	strh	r1, [r2, #0]
 800c2b6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c2b8:	4b12      	ldr	r3, [pc, #72]	; (800c304 <tcp_get_next_optbyte+0x60>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d004      	beq.n	800c2ca <tcp_get_next_optbyte+0x26>
 800c2c0:	4b11      	ldr	r3, [pc, #68]	; (800c308 <tcp_get_next_optbyte+0x64>)
 800c2c2:	881b      	ldrh	r3, [r3, #0]
 800c2c4:	88fa      	ldrh	r2, [r7, #6]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d208      	bcs.n	800c2dc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c2ca:	4b10      	ldr	r3, [pc, #64]	; (800c30c <tcp_get_next_optbyte+0x68>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	3314      	adds	r3, #20
 800c2d0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c2d2:	88fb      	ldrh	r3, [r7, #6]
 800c2d4:	683a      	ldr	r2, [r7, #0]
 800c2d6:	4413      	add	r3, r2
 800c2d8:	781b      	ldrb	r3, [r3, #0]
 800c2da:	e00b      	b.n	800c2f4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c2dc:	88fb      	ldrh	r3, [r7, #6]
 800c2de:	b2da      	uxtb	r2, r3
 800c2e0:	4b09      	ldr	r3, [pc, #36]	; (800c308 <tcp_get_next_optbyte+0x64>)
 800c2e2:	881b      	ldrh	r3, [r3, #0]
 800c2e4:	b2db      	uxtb	r3, r3
 800c2e6:	1ad3      	subs	r3, r2, r3
 800c2e8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c2ea:	4b06      	ldr	r3, [pc, #24]	; (800c304 <tcp_get_next_optbyte+0x60>)
 800c2ec:	681a      	ldr	r2, [r3, #0]
 800c2ee:	797b      	ldrb	r3, [r7, #5]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	370c      	adds	r7, #12
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr
 800c300:	2000885c 	.word	0x2000885c
 800c304:	20008858 	.word	0x20008858
 800c308:	20008856 	.word	0x20008856
 800c30c:	20008850 	.word	0x20008850

0800c310 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d106      	bne.n	800c32c <tcp_parseopt+0x1c>
 800c31e:	4b32      	ldr	r3, [pc, #200]	; (800c3e8 <tcp_parseopt+0xd8>)
 800c320:	f240 727d 	movw	r2, #1917	; 0x77d
 800c324:	4931      	ldr	r1, [pc, #196]	; (800c3ec <tcp_parseopt+0xdc>)
 800c326:	4832      	ldr	r0, [pc, #200]	; (800c3f0 <tcp_parseopt+0xe0>)
 800c328:	f004 fee0 	bl	80110ec <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c32c:	4b31      	ldr	r3, [pc, #196]	; (800c3f4 <tcp_parseopt+0xe4>)
 800c32e:	881b      	ldrh	r3, [r3, #0]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d055      	beq.n	800c3e0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c334:	4b30      	ldr	r3, [pc, #192]	; (800c3f8 <tcp_parseopt+0xe8>)
 800c336:	2200      	movs	r2, #0
 800c338:	801a      	strh	r2, [r3, #0]
 800c33a:	e045      	b.n	800c3c8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800c33c:	f7ff ffb2 	bl	800c2a4 <tcp_get_next_optbyte>
 800c340:	4603      	mov	r3, r0
 800c342:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c344:	7bfb      	ldrb	r3, [r7, #15]
 800c346:	2b02      	cmp	r3, #2
 800c348:	d006      	beq.n	800c358 <tcp_parseopt+0x48>
 800c34a:	2b02      	cmp	r3, #2
 800c34c:	dc2b      	bgt.n	800c3a6 <tcp_parseopt+0x96>
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d041      	beq.n	800c3d6 <tcp_parseopt+0xc6>
 800c352:	2b01      	cmp	r3, #1
 800c354:	d127      	bne.n	800c3a6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800c356:	e037      	b.n	800c3c8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c358:	f7ff ffa4 	bl	800c2a4 <tcp_get_next_optbyte>
 800c35c:	4603      	mov	r3, r0
 800c35e:	2b04      	cmp	r3, #4
 800c360:	d13b      	bne.n	800c3da <tcp_parseopt+0xca>
 800c362:	4b25      	ldr	r3, [pc, #148]	; (800c3f8 <tcp_parseopt+0xe8>)
 800c364:	881b      	ldrh	r3, [r3, #0]
 800c366:	3301      	adds	r3, #1
 800c368:	4a22      	ldr	r2, [pc, #136]	; (800c3f4 <tcp_parseopt+0xe4>)
 800c36a:	8812      	ldrh	r2, [r2, #0]
 800c36c:	4293      	cmp	r3, r2
 800c36e:	da34      	bge.n	800c3da <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c370:	f7ff ff98 	bl	800c2a4 <tcp_get_next_optbyte>
 800c374:	4603      	mov	r3, r0
 800c376:	b29b      	uxth	r3, r3
 800c378:	021b      	lsls	r3, r3, #8
 800c37a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c37c:	f7ff ff92 	bl	800c2a4 <tcp_get_next_optbyte>
 800c380:	4603      	mov	r3, r0
 800c382:	b29a      	uxth	r2, r3
 800c384:	89bb      	ldrh	r3, [r7, #12]
 800c386:	4313      	orrs	r3, r2
 800c388:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c38a:	89bb      	ldrh	r3, [r7, #12]
 800c38c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c390:	d804      	bhi.n	800c39c <tcp_parseopt+0x8c>
 800c392:	89bb      	ldrh	r3, [r7, #12]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d001      	beq.n	800c39c <tcp_parseopt+0x8c>
 800c398:	89ba      	ldrh	r2, [r7, #12]
 800c39a:	e001      	b.n	800c3a0 <tcp_parseopt+0x90>
 800c39c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800c3a4:	e010      	b.n	800c3c8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c3a6:	f7ff ff7d 	bl	800c2a4 <tcp_get_next_optbyte>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c3ae:	7afb      	ldrb	r3, [r7, #11]
 800c3b0:	2b01      	cmp	r3, #1
 800c3b2:	d914      	bls.n	800c3de <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c3b4:	7afb      	ldrb	r3, [r7, #11]
 800c3b6:	b29a      	uxth	r2, r3
 800c3b8:	4b0f      	ldr	r3, [pc, #60]	; (800c3f8 <tcp_parseopt+0xe8>)
 800c3ba:	881b      	ldrh	r3, [r3, #0]
 800c3bc:	4413      	add	r3, r2
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	3b02      	subs	r3, #2
 800c3c2:	b29a      	uxth	r2, r3
 800c3c4:	4b0c      	ldr	r3, [pc, #48]	; (800c3f8 <tcp_parseopt+0xe8>)
 800c3c6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c3c8:	4b0b      	ldr	r3, [pc, #44]	; (800c3f8 <tcp_parseopt+0xe8>)
 800c3ca:	881a      	ldrh	r2, [r3, #0]
 800c3cc:	4b09      	ldr	r3, [pc, #36]	; (800c3f4 <tcp_parseopt+0xe4>)
 800c3ce:	881b      	ldrh	r3, [r3, #0]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d3b3      	bcc.n	800c33c <tcp_parseopt+0x2c>
 800c3d4:	e004      	b.n	800c3e0 <tcp_parseopt+0xd0>
          return;
 800c3d6:	bf00      	nop
 800c3d8:	e002      	b.n	800c3e0 <tcp_parseopt+0xd0>
            return;
 800c3da:	bf00      	nop
 800c3dc:	e000      	b.n	800c3e0 <tcp_parseopt+0xd0>
            return;
 800c3de:	bf00      	nop
      }
    }
  }
}
 800c3e0:	3710      	adds	r7, #16
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	0801355c 	.word	0x0801355c
 800c3ec:	080139c0 	.word	0x080139c0
 800c3f0:	080135a8 	.word	0x080135a8
 800c3f4:	20008854 	.word	0x20008854
 800c3f8:	2000885c 	.word	0x2000885c

0800c3fc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c400:	4b05      	ldr	r3, [pc, #20]	; (800c418 <tcp_trigger_input_pcb_close+0x1c>)
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	f043 0310 	orr.w	r3, r3, #16
 800c408:	b2da      	uxtb	r2, r3
 800c40a:	4b03      	ldr	r3, [pc, #12]	; (800c418 <tcp_trigger_input_pcb_close+0x1c>)
 800c40c:	701a      	strb	r2, [r3, #0]
}
 800c40e:	bf00      	nop
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr
 800c418:	2000886d 	.word	0x2000886d

0800c41c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d00a      	beq.n	800c444 <tcp_route+0x28>
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	7a1b      	ldrb	r3, [r3, #8]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d006      	beq.n	800c444 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	7a1b      	ldrb	r3, [r3, #8]
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7fb f8ba 	bl	80075b4 <netif_get_by_index>
 800c440:	4603      	mov	r3, r0
 800c442:	e003      	b.n	800c44c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f003 fad5 	bl	800f9f4 <ip4_route>
 800c44a:	4603      	mov	r3, r0
  }
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3710      	adds	r7, #16
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}

0800c454 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c454:	b590      	push	{r4, r7, lr}
 800c456:	b087      	sub	sp, #28
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	603b      	str	r3, [r7, #0]
 800c460:	4613      	mov	r3, r2
 800c462:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d105      	bne.n	800c476 <tcp_create_segment+0x22>
 800c46a:	4b44      	ldr	r3, [pc, #272]	; (800c57c <tcp_create_segment+0x128>)
 800c46c:	22a3      	movs	r2, #163	; 0xa3
 800c46e:	4944      	ldr	r1, [pc, #272]	; (800c580 <tcp_create_segment+0x12c>)
 800c470:	4844      	ldr	r0, [pc, #272]	; (800c584 <tcp_create_segment+0x130>)
 800c472:	f004 fe3b 	bl	80110ec <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d105      	bne.n	800c488 <tcp_create_segment+0x34>
 800c47c:	4b3f      	ldr	r3, [pc, #252]	; (800c57c <tcp_create_segment+0x128>)
 800c47e:	22a4      	movs	r2, #164	; 0xa4
 800c480:	4941      	ldr	r1, [pc, #260]	; (800c588 <tcp_create_segment+0x134>)
 800c482:	4840      	ldr	r0, [pc, #256]	; (800c584 <tcp_create_segment+0x130>)
 800c484:	f004 fe32 	bl	80110ec <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c488:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c48c:	009b      	lsls	r3, r3, #2
 800c48e:	b2db      	uxtb	r3, r3
 800c490:	f003 0304 	and.w	r3, r3, #4
 800c494:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c496:	2003      	movs	r0, #3
 800c498:	f7fa fd06 	bl	8006ea8 <memp_malloc>
 800c49c:	6138      	str	r0, [r7, #16]
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d104      	bne.n	800c4ae <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c4a4:	68b8      	ldr	r0, [r7, #8]
 800c4a6:	f7fb fbe5 	bl	8007c74 <pbuf_free>
    return NULL;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	e061      	b.n	800c572 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c4b4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	68ba      	ldr	r2, [r7, #8]
 800c4c0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	891a      	ldrh	r2, [r3, #8]
 800c4c6:	7dfb      	ldrb	r3, [r7, #23]
 800c4c8:	b29b      	uxth	r3, r3
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d205      	bcs.n	800c4da <tcp_create_segment+0x86>
 800c4ce:	4b2b      	ldr	r3, [pc, #172]	; (800c57c <tcp_create_segment+0x128>)
 800c4d0:	22b0      	movs	r2, #176	; 0xb0
 800c4d2:	492e      	ldr	r1, [pc, #184]	; (800c58c <tcp_create_segment+0x138>)
 800c4d4:	482b      	ldr	r0, [pc, #172]	; (800c584 <tcp_create_segment+0x130>)
 800c4d6:	f004 fe09 	bl	80110ec <iprintf>
  seg->len = p->tot_len - optlen;
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	891a      	ldrh	r2, [r3, #8]
 800c4de:	7dfb      	ldrb	r3, [r7, #23]
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	1ad3      	subs	r3, r2, r3
 800c4e4:	b29a      	uxth	r2, r3
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c4ea:	2114      	movs	r1, #20
 800c4ec:	68b8      	ldr	r0, [r7, #8]
 800c4ee:	f7fb fb2b 	bl	8007b48 <pbuf_add_header>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d004      	beq.n	800c502 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c4f8:	6938      	ldr	r0, [r7, #16]
 800c4fa:	f7fd f81e 	bl	800953a <tcp_seg_free>
    return NULL;
 800c4fe:	2300      	movs	r3, #0
 800c500:	e037      	b.n	800c572 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	685a      	ldr	r2, [r3, #4]
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	8ada      	ldrh	r2, [r3, #22]
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	68dc      	ldr	r4, [r3, #12]
 800c514:	4610      	mov	r0, r2
 800c516:	f7fa f84f 	bl	80065b8 <lwip_htons>
 800c51a:	4603      	mov	r3, r0
 800c51c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	8b1a      	ldrh	r2, [r3, #24]
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	68dc      	ldr	r4, [r3, #12]
 800c526:	4610      	mov	r0, r2
 800c528:	f7fa f846 	bl	80065b8 <lwip_htons>
 800c52c:	4603      	mov	r3, r0
 800c52e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	68dc      	ldr	r4, [r3, #12]
 800c534:	6838      	ldr	r0, [r7, #0]
 800c536:	f7fa f854 	bl	80065e2 <lwip_htonl>
 800c53a:	4603      	mov	r3, r0
 800c53c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c53e:	7dfb      	ldrb	r3, [r7, #23]
 800c540:	089b      	lsrs	r3, r3, #2
 800c542:	b2db      	uxtb	r3, r3
 800c544:	b29b      	uxth	r3, r3
 800c546:	3305      	adds	r3, #5
 800c548:	b29b      	uxth	r3, r3
 800c54a:	031b      	lsls	r3, r3, #12
 800c54c:	b29a      	uxth	r2, r3
 800c54e:	79fb      	ldrb	r3, [r7, #7]
 800c550:	b29b      	uxth	r3, r3
 800c552:	4313      	orrs	r3, r2
 800c554:	b29a      	uxth	r2, r3
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	68dc      	ldr	r4, [r3, #12]
 800c55a:	4610      	mov	r0, r2
 800c55c:	f7fa f82c 	bl	80065b8 <lwip_htons>
 800c560:	4603      	mov	r3, r0
 800c562:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	68db      	ldr	r3, [r3, #12]
 800c568:	2200      	movs	r2, #0
 800c56a:	749a      	strb	r2, [r3, #18]
 800c56c:	2200      	movs	r2, #0
 800c56e:	74da      	strb	r2, [r3, #19]
  return seg;
 800c570:	693b      	ldr	r3, [r7, #16]
}
 800c572:	4618      	mov	r0, r3
 800c574:	371c      	adds	r7, #28
 800c576:	46bd      	mov	sp, r7
 800c578:	bd90      	pop	{r4, r7, pc}
 800c57a:	bf00      	nop
 800c57c:	080139dc 	.word	0x080139dc
 800c580:	08013a10 	.word	0x08013a10
 800c584:	08013a30 	.word	0x08013a30
 800c588:	08013a58 	.word	0x08013a58
 800c58c:	08013a7c 	.word	0x08013a7c

0800c590 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b086      	sub	sp, #24
 800c594:	af00      	add	r7, sp, #0
 800c596:	607b      	str	r3, [r7, #4]
 800c598:	4603      	mov	r3, r0
 800c59a:	73fb      	strb	r3, [r7, #15]
 800c59c:	460b      	mov	r3, r1
 800c59e:	81bb      	strh	r3, [r7, #12]
 800c5a0:	4613      	mov	r3, r2
 800c5a2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800c5a4:	89bb      	ldrh	r3, [r7, #12]
 800c5a6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d105      	bne.n	800c5ba <tcp_pbuf_prealloc+0x2a>
 800c5ae:	4b30      	ldr	r3, [pc, #192]	; (800c670 <tcp_pbuf_prealloc+0xe0>)
 800c5b0:	22e8      	movs	r2, #232	; 0xe8
 800c5b2:	4930      	ldr	r1, [pc, #192]	; (800c674 <tcp_pbuf_prealloc+0xe4>)
 800c5b4:	4830      	ldr	r0, [pc, #192]	; (800c678 <tcp_pbuf_prealloc+0xe8>)
 800c5b6:	f004 fd99 	bl	80110ec <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800c5ba:	6a3b      	ldr	r3, [r7, #32]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d105      	bne.n	800c5cc <tcp_pbuf_prealloc+0x3c>
 800c5c0:	4b2b      	ldr	r3, [pc, #172]	; (800c670 <tcp_pbuf_prealloc+0xe0>)
 800c5c2:	22e9      	movs	r2, #233	; 0xe9
 800c5c4:	492d      	ldr	r1, [pc, #180]	; (800c67c <tcp_pbuf_prealloc+0xec>)
 800c5c6:	482c      	ldr	r0, [pc, #176]	; (800c678 <tcp_pbuf_prealloc+0xe8>)
 800c5c8:	f004 fd90 	bl	80110ec <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800c5cc:	89ba      	ldrh	r2, [r7, #12]
 800c5ce:	897b      	ldrh	r3, [r7, #10]
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d221      	bcs.n	800c618 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c5d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c5d8:	f003 0302 	and.w	r3, r3, #2
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d111      	bne.n	800c604 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800c5e0:	6a3b      	ldr	r3, [r7, #32]
 800c5e2:	8b5b      	ldrh	r3, [r3, #26]
 800c5e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d115      	bne.n	800c618 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800c5ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d007      	beq.n	800c604 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800c5f4:	6a3b      	ldr	r3, [r7, #32]
 800c5f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d103      	bne.n	800c604 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800c5fc:	6a3b      	ldr	r3, [r7, #32]
 800c5fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800c600:	2b00      	cmp	r3, #0
 800c602:	d009      	beq.n	800c618 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800c604:	89bb      	ldrh	r3, [r7, #12]
 800c606:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800c60a:	f023 0203 	bic.w	r2, r3, #3
 800c60e:	897b      	ldrh	r3, [r7, #10]
 800c610:	4293      	cmp	r3, r2
 800c612:	bf28      	it	cs
 800c614:	4613      	movcs	r3, r2
 800c616:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800c618:	8af9      	ldrh	r1, [r7, #22]
 800c61a:	7bfb      	ldrb	r3, [r7, #15]
 800c61c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c620:	4618      	mov	r0, r3
 800c622:	f7fb f843 	bl	80076ac <pbuf_alloc>
 800c626:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d101      	bne.n	800c632 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800c62e:	2300      	movs	r3, #0
 800c630:	e019      	b.n	800c666 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d006      	beq.n	800c648 <tcp_pbuf_prealloc+0xb8>
 800c63a:	4b0d      	ldr	r3, [pc, #52]	; (800c670 <tcp_pbuf_prealloc+0xe0>)
 800c63c:	f240 120b 	movw	r2, #267	; 0x10b
 800c640:	490f      	ldr	r1, [pc, #60]	; (800c680 <tcp_pbuf_prealloc+0xf0>)
 800c642:	480d      	ldr	r0, [pc, #52]	; (800c678 <tcp_pbuf_prealloc+0xe8>)
 800c644:	f004 fd52 	bl	80110ec <iprintf>
  *oversize = p->len - length;
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	895a      	ldrh	r2, [r3, #10]
 800c64c:	89bb      	ldrh	r3, [r7, #12]
 800c64e:	1ad3      	subs	r3, r2, r3
 800c650:	b29a      	uxth	r2, r3
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	89ba      	ldrh	r2, [r7, #12]
 800c65a:	811a      	strh	r2, [r3, #8]
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	891a      	ldrh	r2, [r3, #8]
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	815a      	strh	r2, [r3, #10]
  return p;
 800c664:	693b      	ldr	r3, [r7, #16]
}
 800c666:	4618      	mov	r0, r3
 800c668:	3718      	adds	r7, #24
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	080139dc 	.word	0x080139dc
 800c674:	08013a94 	.word	0x08013a94
 800c678:	08013a30 	.word	0x08013a30
 800c67c:	08013ab8 	.word	0x08013ab8
 800c680:	08013ad8 	.word	0x08013ad8

0800c684 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	460b      	mov	r3, r1
 800c68e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d106      	bne.n	800c6a4 <tcp_write_checks+0x20>
 800c696:	4b33      	ldr	r3, [pc, #204]	; (800c764 <tcp_write_checks+0xe0>)
 800c698:	f240 1233 	movw	r2, #307	; 0x133
 800c69c:	4932      	ldr	r1, [pc, #200]	; (800c768 <tcp_write_checks+0xe4>)
 800c69e:	4833      	ldr	r0, [pc, #204]	; (800c76c <tcp_write_checks+0xe8>)
 800c6a0:	f004 fd24 	bl	80110ec <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	7d1b      	ldrb	r3, [r3, #20]
 800c6a8:	2b04      	cmp	r3, #4
 800c6aa:	d00e      	beq.n	800c6ca <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800c6b0:	2b07      	cmp	r3, #7
 800c6b2:	d00a      	beq.n	800c6ca <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800c6b8:	2b02      	cmp	r3, #2
 800c6ba:	d006      	beq.n	800c6ca <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800c6c0:	2b03      	cmp	r3, #3
 800c6c2:	d002      	beq.n	800c6ca <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800c6c4:	f06f 030a 	mvn.w	r3, #10
 800c6c8:	e048      	b.n	800c75c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800c6ca:	887b      	ldrh	r3, [r7, #2]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d101      	bne.n	800c6d4 <tcp_write_checks+0x50>
    return ERR_OK;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	e043      	b.n	800c75c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c6da:	887a      	ldrh	r2, [r7, #2]
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	d909      	bls.n	800c6f4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	8b5b      	ldrh	r3, [r3, #26]
 800c6e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6e8:	b29a      	uxth	r2, r3
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c6f2:	e033      	b.n	800c75c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c6fa:	2b08      	cmp	r3, #8
 800c6fc:	d909      	bls.n	800c712 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	8b5b      	ldrh	r3, [r3, #26]
 800c702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c706:	b29a      	uxth	r2, r3
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800c70c:	f04f 33ff 	mov.w	r3, #4294967295
 800c710:	e024      	b.n	800c75c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d00f      	beq.n	800c73c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c720:	2b00      	cmp	r3, #0
 800c722:	d11a      	bne.n	800c75a <tcp_write_checks+0xd6>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d116      	bne.n	800c75a <tcp_write_checks+0xd6>
 800c72c:	4b0d      	ldr	r3, [pc, #52]	; (800c764 <tcp_write_checks+0xe0>)
 800c72e:	f240 1255 	movw	r2, #341	; 0x155
 800c732:	490f      	ldr	r1, [pc, #60]	; (800c770 <tcp_write_checks+0xec>)
 800c734:	480d      	ldr	r0, [pc, #52]	; (800c76c <tcp_write_checks+0xe8>)
 800c736:	f004 fcd9 	bl	80110ec <iprintf>
 800c73a:	e00e      	b.n	800c75a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c740:	2b00      	cmp	r3, #0
 800c742:	d103      	bne.n	800c74c <tcp_write_checks+0xc8>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d006      	beq.n	800c75a <tcp_write_checks+0xd6>
 800c74c:	4b05      	ldr	r3, [pc, #20]	; (800c764 <tcp_write_checks+0xe0>)
 800c74e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800c752:	4908      	ldr	r1, [pc, #32]	; (800c774 <tcp_write_checks+0xf0>)
 800c754:	4805      	ldr	r0, [pc, #20]	; (800c76c <tcp_write_checks+0xe8>)
 800c756:	f004 fcc9 	bl	80110ec <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800c75a:	2300      	movs	r3, #0
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	080139dc 	.word	0x080139dc
 800c768:	08013aec 	.word	0x08013aec
 800c76c:	08013a30 	.word	0x08013a30
 800c770:	08013b0c 	.word	0x08013b0c
 800c774:	08013b48 	.word	0x08013b48

0800c778 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800c778:	b590      	push	{r4, r7, lr}
 800c77a:	b09b      	sub	sp, #108	; 0x6c
 800c77c:	af04      	add	r7, sp, #16
 800c77e:	60f8      	str	r0, [r7, #12]
 800c780:	60b9      	str	r1, [r7, #8]
 800c782:	4611      	mov	r1, r2
 800c784:	461a      	mov	r2, r3
 800c786:	460b      	mov	r3, r1
 800c788:	80fb      	strh	r3, [r7, #6]
 800c78a:	4613      	mov	r3, r2
 800c78c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800c78e:	2300      	movs	r3, #0
 800c790:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c792:	2300      	movs	r3, #0
 800c794:	653b      	str	r3, [r7, #80]	; 0x50
 800c796:	2300      	movs	r3, #0
 800c798:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c79a:	2300      	movs	r3, #0
 800c79c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c79e:	2300      	movs	r3, #0
 800c7a0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d109      	bne.n	800c7d4 <tcp_write+0x5c>
 800c7c0:	4ba4      	ldr	r3, [pc, #656]	; (800ca54 <tcp_write+0x2dc>)
 800c7c2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800c7c6:	49a4      	ldr	r1, [pc, #656]	; (800ca58 <tcp_write+0x2e0>)
 800c7c8:	48a4      	ldr	r0, [pc, #656]	; (800ca5c <tcp_write+0x2e4>)
 800c7ca:	f004 fc8f 	bl	80110ec <iprintf>
 800c7ce:	f06f 030f 	mvn.w	r3, #15
 800c7d2:	e32a      	b.n	800ce2a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c7da:	085b      	lsrs	r3, r3, #1
 800c7dc:	b29a      	uxth	r2, r3
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	bf28      	it	cs
 800c7e6:	4613      	movcs	r3, r2
 800c7e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800c7ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d102      	bne.n	800c7f6 <tcp_write+0x7e>
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7f4:	e000      	b.n	800c7f8 <tcp_write+0x80>
 800c7f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c7f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d109      	bne.n	800c814 <tcp_write+0x9c>
 800c800:	4b94      	ldr	r3, [pc, #592]	; (800ca54 <tcp_write+0x2dc>)
 800c802:	f240 12ad 	movw	r2, #429	; 0x1ad
 800c806:	4996      	ldr	r1, [pc, #600]	; (800ca60 <tcp_write+0x2e8>)
 800c808:	4894      	ldr	r0, [pc, #592]	; (800ca5c <tcp_write+0x2e4>)
 800c80a:	f004 fc6f 	bl	80110ec <iprintf>
 800c80e:	f06f 030f 	mvn.w	r3, #15
 800c812:	e30a      	b.n	800ce2a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800c814:	88fb      	ldrh	r3, [r7, #6]
 800c816:	4619      	mov	r1, r3
 800c818:	68f8      	ldr	r0, [r7, #12]
 800c81a:	f7ff ff33 	bl	800c684 <tcp_write_checks>
 800c81e:	4603      	mov	r3, r0
 800c820:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800c824:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d002      	beq.n	800c832 <tcp_write+0xba>
    return err;
 800c82c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c830:	e2fb      	b.n	800ce2a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c838:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c83c:	2300      	movs	r3, #0
 800c83e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c846:	2b00      	cmp	r3, #0
 800c848:	f000 80f6 	beq.w	800ca38 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c850:	653b      	str	r3, [r7, #80]	; 0x50
 800c852:	e002      	b.n	800c85a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800c854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c85a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d1f8      	bne.n	800c854 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800c862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c864:	7a9b      	ldrb	r3, [r3, #10]
 800c866:	009b      	lsls	r3, r3, #2
 800c868:	b29b      	uxth	r3, r3
 800c86a:	f003 0304 	and.w	r3, r3, #4
 800c86e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c870:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c874:	891b      	ldrh	r3, [r3, #8]
 800c876:	4619      	mov	r1, r3
 800c878:	8c3b      	ldrh	r3, [r7, #32]
 800c87a:	440b      	add	r3, r1
 800c87c:	429a      	cmp	r2, r3
 800c87e:	da06      	bge.n	800c88e <tcp_write+0x116>
 800c880:	4b74      	ldr	r3, [pc, #464]	; (800ca54 <tcp_write+0x2dc>)
 800c882:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c886:	4977      	ldr	r1, [pc, #476]	; (800ca64 <tcp_write+0x2ec>)
 800c888:	4874      	ldr	r0, [pc, #464]	; (800ca5c <tcp_write+0x2e4>)
 800c88a:	f004 fc2f 	bl	80110ec <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800c88e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c890:	891a      	ldrh	r2, [r3, #8]
 800c892:	8c3b      	ldrh	r3, [r7, #32]
 800c894:	4413      	add	r3, r2
 800c896:	b29b      	uxth	r3, r3
 800c898:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c89a:	1ad3      	subs	r3, r2, r3
 800c89c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c8a4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800c8a6:	8a7b      	ldrh	r3, [r7, #18]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d026      	beq.n	800c8fa <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800c8ac:	8a7b      	ldrh	r3, [r7, #18]
 800c8ae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d206      	bcs.n	800c8c2 <tcp_write+0x14a>
 800c8b4:	4b67      	ldr	r3, [pc, #412]	; (800ca54 <tcp_write+0x2dc>)
 800c8b6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800c8ba:	496b      	ldr	r1, [pc, #428]	; (800ca68 <tcp_write+0x2f0>)
 800c8bc:	4867      	ldr	r0, [pc, #412]	; (800ca5c <tcp_write+0x2e4>)
 800c8be:	f004 fc15 	bl	80110ec <iprintf>
      seg = last_unsent;
 800c8c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8c4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800c8c6:	8a7b      	ldrh	r3, [r7, #18]
 800c8c8:	88fa      	ldrh	r2, [r7, #6]
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	bf28      	it	cs
 800c8ce:	4613      	movcs	r3, r2
 800c8d0:	b29b      	uxth	r3, r3
 800c8d2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	bf28      	it	cs
 800c8d8:	4613      	movcs	r3, r2
 800c8da:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800c8dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c8e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c8e2:	4413      	add	r3, r2
 800c8e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800c8e8:	8a7a      	ldrh	r2, [r7, #18]
 800c8ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c8ec:	1ad3      	subs	r3, r2, r3
 800c8ee:	b29b      	uxth	r3, r3
 800c8f0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800c8f2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c8f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c8f6:	1ad3      	subs	r3, r2, r3
 800c8f8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800c8fa:	8a7b      	ldrh	r3, [r7, #18]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d00b      	beq.n	800c918 <tcp_write+0x1a0>
 800c900:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c904:	88fb      	ldrh	r3, [r7, #6]
 800c906:	429a      	cmp	r2, r3
 800c908:	d006      	beq.n	800c918 <tcp_write+0x1a0>
 800c90a:	4b52      	ldr	r3, [pc, #328]	; (800ca54 <tcp_write+0x2dc>)
 800c90c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c910:	4956      	ldr	r1, [pc, #344]	; (800ca6c <tcp_write+0x2f4>)
 800c912:	4852      	ldr	r0, [pc, #328]	; (800ca5c <tcp_write+0x2e4>)
 800c914:	f004 fbea 	bl	80110ec <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800c918:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c91c:	88fb      	ldrh	r3, [r7, #6]
 800c91e:	429a      	cmp	r2, r3
 800c920:	f080 8167 	bcs.w	800cbf2 <tcp_write+0x47a>
 800c924:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c926:	2b00      	cmp	r3, #0
 800c928:	f000 8163 	beq.w	800cbf2 <tcp_write+0x47a>
 800c92c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c92e:	891b      	ldrh	r3, [r3, #8]
 800c930:	2b00      	cmp	r3, #0
 800c932:	f000 815e 	beq.w	800cbf2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c936:	88fa      	ldrh	r2, [r7, #6]
 800c938:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c93c:	1ad2      	subs	r2, r2, r3
 800c93e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c940:	4293      	cmp	r3, r2
 800c942:	bfa8      	it	ge
 800c944:	4613      	movge	r3, r2
 800c946:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800c948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c94a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c94c:	797b      	ldrb	r3, [r7, #5]
 800c94e:	f003 0301 	and.w	r3, r3, #1
 800c952:	2b00      	cmp	r3, #0
 800c954:	d027      	beq.n	800c9a6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800c956:	f107 0012 	add.w	r0, r7, #18
 800c95a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c95c:	8bf9      	ldrh	r1, [r7, #30]
 800c95e:	2301      	movs	r3, #1
 800c960:	9302      	str	r3, [sp, #8]
 800c962:	797b      	ldrb	r3, [r7, #5]
 800c964:	9301      	str	r3, [sp, #4]
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	9300      	str	r3, [sp, #0]
 800c96a:	4603      	mov	r3, r0
 800c96c:	2000      	movs	r0, #0
 800c96e:	f7ff fe0f 	bl	800c590 <tcp_pbuf_prealloc>
 800c972:	6578      	str	r0, [r7, #84]	; 0x54
 800c974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c976:	2b00      	cmp	r3, #0
 800c978:	f000 8225 	beq.w	800cdc6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800c97c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c97e:	6858      	ldr	r0, [r3, #4]
 800c980:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c984:	68ba      	ldr	r2, [r7, #8]
 800c986:	4413      	add	r3, r2
 800c988:	8bfa      	ldrh	r2, [r7, #30]
 800c98a:	4619      	mov	r1, r3
 800c98c:	f004 fcc3 	bl	8011316 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800c990:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c992:	f7fb f9f7 	bl	8007d84 <pbuf_clen>
 800c996:	4603      	mov	r3, r0
 800c998:	461a      	mov	r2, r3
 800c99a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c99e:	4413      	add	r3, r2
 800c9a0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800c9a4:	e041      	b.n	800ca2a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800c9a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	637b      	str	r3, [r7, #52]	; 0x34
 800c9ac:	e002      	b.n	800c9b4 <tcp_write+0x23c>
 800c9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	637b      	str	r3, [r7, #52]	; 0x34
 800c9b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d1f8      	bne.n	800c9ae <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c9bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9be:	7b1b      	ldrb	r3, [r3, #12]
 800c9c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d115      	bne.n	800c9f4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800c9c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ca:	685b      	ldr	r3, [r3, #4]
 800c9cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9ce:	8952      	ldrh	r2, [r2, #10]
 800c9d0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c9d2:	68ba      	ldr	r2, [r7, #8]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d10d      	bne.n	800c9f4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800c9d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d006      	beq.n	800c9ee <tcp_write+0x276>
 800c9e0:	4b1c      	ldr	r3, [pc, #112]	; (800ca54 <tcp_write+0x2dc>)
 800c9e2:	f240 2231 	movw	r2, #561	; 0x231
 800c9e6:	4922      	ldr	r1, [pc, #136]	; (800ca70 <tcp_write+0x2f8>)
 800c9e8:	481c      	ldr	r0, [pc, #112]	; (800ca5c <tcp_write+0x2e4>)
 800c9ea:	f004 fb7f 	bl	80110ec <iprintf>
          extendlen = seglen;
 800c9ee:	8bfb      	ldrh	r3, [r7, #30]
 800c9f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800c9f2:	e01a      	b.n	800ca2a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800c9f4:	8bfb      	ldrh	r3, [r7, #30]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	2000      	movs	r0, #0
 800c9fc:	f7fa fe56 	bl	80076ac <pbuf_alloc>
 800ca00:	6578      	str	r0, [r7, #84]	; 0x54
 800ca02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	f000 81e0 	beq.w	800cdca <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800ca0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ca0e:	68ba      	ldr	r2, [r7, #8]
 800ca10:	441a      	add	r2, r3
 800ca12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca14:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800ca16:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ca18:	f7fb f9b4 	bl	8007d84 <pbuf_clen>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	461a      	mov	r2, r3
 800ca20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ca24:	4413      	add	r3, r2
 800ca26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800ca2a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ca2e:	8bfb      	ldrh	r3, [r7, #30]
 800ca30:	4413      	add	r3, r2
 800ca32:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ca36:	e0dc      	b.n	800cbf2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	f000 80d7 	beq.w	800cbf2 <tcp_write+0x47a>
 800ca44:	4b03      	ldr	r3, [pc, #12]	; (800ca54 <tcp_write+0x2dc>)
 800ca46:	f240 224a 	movw	r2, #586	; 0x24a
 800ca4a:	490a      	ldr	r1, [pc, #40]	; (800ca74 <tcp_write+0x2fc>)
 800ca4c:	4803      	ldr	r0, [pc, #12]	; (800ca5c <tcp_write+0x2e4>)
 800ca4e:	f004 fb4d 	bl	80110ec <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800ca52:	e0ce      	b.n	800cbf2 <tcp_write+0x47a>
 800ca54:	080139dc 	.word	0x080139dc
 800ca58:	08013b7c 	.word	0x08013b7c
 800ca5c:	08013a30 	.word	0x08013a30
 800ca60:	08013b94 	.word	0x08013b94
 800ca64:	08013bc8 	.word	0x08013bc8
 800ca68:	08013be0 	.word	0x08013be0
 800ca6c:	08013c00 	.word	0x08013c00
 800ca70:	08013c20 	.word	0x08013c20
 800ca74:	08013c4c 	.word	0x08013c4c
    struct pbuf *p;
    u16_t left = len - pos;
 800ca78:	88fa      	ldrh	r2, [r7, #6]
 800ca7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ca7e:	1ad3      	subs	r3, r2, r3
 800ca80:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800ca82:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ca8a:	1ad3      	subs	r3, r2, r3
 800ca8c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800ca8e:	8b7a      	ldrh	r2, [r7, #26]
 800ca90:	8bbb      	ldrh	r3, [r7, #28]
 800ca92:	4293      	cmp	r3, r2
 800ca94:	bf28      	it	cs
 800ca96:	4613      	movcs	r3, r2
 800ca98:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ca9a:	797b      	ldrb	r3, [r7, #5]
 800ca9c:	f003 0301 	and.w	r3, r3, #1
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d036      	beq.n	800cb12 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800caa4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800caa8:	b29a      	uxth	r2, r3
 800caaa:	8b3b      	ldrh	r3, [r7, #24]
 800caac:	4413      	add	r3, r2
 800caae:	b299      	uxth	r1, r3
 800cab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	bf0c      	ite	eq
 800cab6:	2301      	moveq	r3, #1
 800cab8:	2300      	movne	r3, #0
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	f107 0012 	add.w	r0, r7, #18
 800cac0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cac2:	9302      	str	r3, [sp, #8]
 800cac4:	797b      	ldrb	r3, [r7, #5]
 800cac6:	9301      	str	r3, [sp, #4]
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	9300      	str	r3, [sp, #0]
 800cacc:	4603      	mov	r3, r0
 800cace:	2036      	movs	r0, #54	; 0x36
 800cad0:	f7ff fd5e 	bl	800c590 <tcp_pbuf_prealloc>
 800cad4:	6338      	str	r0, [r7, #48]	; 0x30
 800cad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad8:	2b00      	cmp	r3, #0
 800cada:	f000 8178 	beq.w	800cdce <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800cade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae0:	895b      	ldrh	r3, [r3, #10]
 800cae2:	8b3a      	ldrh	r2, [r7, #24]
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d906      	bls.n	800caf6 <tcp_write+0x37e>
 800cae8:	4b8c      	ldr	r3, [pc, #560]	; (800cd1c <tcp_write+0x5a4>)
 800caea:	f240 2266 	movw	r2, #614	; 0x266
 800caee:	498c      	ldr	r1, [pc, #560]	; (800cd20 <tcp_write+0x5a8>)
 800caf0:	488c      	ldr	r0, [pc, #560]	; (800cd24 <tcp_write+0x5ac>)
 800caf2:	f004 fafb 	bl	80110ec <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800caf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf8:	685a      	ldr	r2, [r3, #4]
 800cafa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cafe:	18d0      	adds	r0, r2, r3
 800cb00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cb04:	68ba      	ldr	r2, [r7, #8]
 800cb06:	4413      	add	r3, r2
 800cb08:	8b3a      	ldrh	r2, [r7, #24]
 800cb0a:	4619      	mov	r1, r3
 800cb0c:	f004 fc03 	bl	8011316 <memcpy>
 800cb10:	e02f      	b.n	800cb72 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800cb12:	8a7b      	ldrh	r3, [r7, #18]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d006      	beq.n	800cb26 <tcp_write+0x3ae>
 800cb18:	4b80      	ldr	r3, [pc, #512]	; (800cd1c <tcp_write+0x5a4>)
 800cb1a:	f240 2271 	movw	r2, #625	; 0x271
 800cb1e:	4982      	ldr	r1, [pc, #520]	; (800cd28 <tcp_write+0x5b0>)
 800cb20:	4880      	ldr	r0, [pc, #512]	; (800cd24 <tcp_write+0x5ac>)
 800cb22:	f004 fae3 	bl	80110ec <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800cb26:	8b3b      	ldrh	r3, [r7, #24]
 800cb28:	2201      	movs	r2, #1
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	2036      	movs	r0, #54	; 0x36
 800cb2e:	f7fa fdbd 	bl	80076ac <pbuf_alloc>
 800cb32:	6178      	str	r0, [r7, #20]
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	f000 814b 	beq.w	800cdd2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800cb3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cb40:	68ba      	ldr	r2, [r7, #8]
 800cb42:	441a      	add	r2, r3
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cb48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cb52:	4619      	mov	r1, r3
 800cb54:	2036      	movs	r0, #54	; 0x36
 800cb56:	f7fa fda9 	bl	80076ac <pbuf_alloc>
 800cb5a:	6338      	str	r0, [r7, #48]	; 0x30
 800cb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d103      	bne.n	800cb6a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800cb62:	6978      	ldr	r0, [r7, #20]
 800cb64:	f7fb f886 	bl	8007c74 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800cb68:	e136      	b.n	800cdd8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800cb6a:	6979      	ldr	r1, [r7, #20]
 800cb6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb6e:	f7fb f943 	bl	8007df8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800cb72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb74:	f7fb f906 	bl	8007d84 <pbuf_clen>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cb80:	4413      	add	r3, r2
 800cb82:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800cb86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cb8a:	2b09      	cmp	r3, #9
 800cb8c:	d903      	bls.n	800cb96 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800cb8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb90:	f7fb f870 	bl	8007c74 <pbuf_free>
      goto memerr;
 800cb94:	e120      	b.n	800cdd8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cb9a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cb9e:	441a      	add	r2, r3
 800cba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cba4:	9300      	str	r3, [sp, #0]
 800cba6:	4613      	mov	r3, r2
 800cba8:	2200      	movs	r2, #0
 800cbaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cbac:	68f8      	ldr	r0, [r7, #12]
 800cbae:	f7ff fc51 	bl	800c454 <tcp_create_segment>
 800cbb2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800cbb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	f000 810d 	beq.w	800cdd6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800cbbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d102      	bne.n	800cbc8 <tcp_write+0x450>
      queue = seg;
 800cbc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbc4:	647b      	str	r3, [r7, #68]	; 0x44
 800cbc6:	e00c      	b.n	800cbe2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800cbc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d106      	bne.n	800cbdc <tcp_write+0x464>
 800cbce:	4b53      	ldr	r3, [pc, #332]	; (800cd1c <tcp_write+0x5a4>)
 800cbd0:	f240 22ab 	movw	r2, #683	; 0x2ab
 800cbd4:	4955      	ldr	r1, [pc, #340]	; (800cd2c <tcp_write+0x5b4>)
 800cbd6:	4853      	ldr	r0, [pc, #332]	; (800cd24 <tcp_write+0x5ac>)
 800cbd8:	f004 fa88 	bl	80110ec <iprintf>
      prev_seg->next = seg;
 800cbdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cbe0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800cbe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbe4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800cbe6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cbea:	8b3b      	ldrh	r3, [r7, #24]
 800cbec:	4413      	add	r3, r2
 800cbee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800cbf2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cbf6:	88fb      	ldrh	r3, [r7, #6]
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	f4ff af3d 	bcc.w	800ca78 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800cbfe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d02c      	beq.n	800cc5e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800cc04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc0a:	e01e      	b.n	800cc4a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800cc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0e:	891a      	ldrh	r2, [r3, #8]
 800cc10:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cc12:	4413      	add	r3, r2
 800cc14:	b29a      	uxth	r2, r3
 800cc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc18:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800cc1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d110      	bne.n	800cc44 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800cc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc24:	685b      	ldr	r3, [r3, #4]
 800cc26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc28:	8952      	ldrh	r2, [r2, #10]
 800cc2a:	4413      	add	r3, r2
 800cc2c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800cc2e:	68b9      	ldr	r1, [r7, #8]
 800cc30:	4618      	mov	r0, r3
 800cc32:	f004 fb70 	bl	8011316 <memcpy>
        p->len += oversize_used;
 800cc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc38:	895a      	ldrh	r2, [r3, #10]
 800cc3a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cc3c:	4413      	add	r3, r2
 800cc3e:	b29a      	uxth	r2, r3
 800cc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc42:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800cc44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d1dd      	bne.n	800cc0c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800cc50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc52:	891a      	ldrh	r2, [r3, #8]
 800cc54:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cc56:	4413      	add	r3, r2
 800cc58:	b29a      	uxth	r2, r3
 800cc5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc5c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800cc5e:	8a7a      	ldrh	r2, [r7, #18]
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800cc66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d018      	beq.n	800cc9e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800cc6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d106      	bne.n	800cc80 <tcp_write+0x508>
 800cc72:	4b2a      	ldr	r3, [pc, #168]	; (800cd1c <tcp_write+0x5a4>)
 800cc74:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800cc78:	492d      	ldr	r1, [pc, #180]	; (800cd30 <tcp_write+0x5b8>)
 800cc7a:	482a      	ldr	r0, [pc, #168]	; (800cd24 <tcp_write+0x5ac>)
 800cc7c:	f004 fa36 	bl	80110ec <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800cc80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7fb f8b6 	bl	8007df8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800cc8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc8e:	891a      	ldrh	r2, [r3, #8]
 800cc90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc92:	891b      	ldrh	r3, [r3, #8]
 800cc94:	4413      	add	r3, r2
 800cc96:	b29a      	uxth	r2, r3
 800cc98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc9a:	811a      	strh	r2, [r3, #8]
 800cc9c:	e037      	b.n	800cd0e <tcp_write+0x596>
  } else if (extendlen > 0) {
 800cc9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d034      	beq.n	800cd0e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800cca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d003      	beq.n	800ccb2 <tcp_write+0x53a>
 800ccaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d106      	bne.n	800ccc0 <tcp_write+0x548>
 800ccb2:	4b1a      	ldr	r3, [pc, #104]	; (800cd1c <tcp_write+0x5a4>)
 800ccb4:	f240 22e6 	movw	r2, #742	; 0x2e6
 800ccb8:	491e      	ldr	r1, [pc, #120]	; (800cd34 <tcp_write+0x5bc>)
 800ccba:	481a      	ldr	r0, [pc, #104]	; (800cd24 <tcp_write+0x5ac>)
 800ccbc:	f004 fa16 	bl	80110ec <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ccc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	62bb      	str	r3, [r7, #40]	; 0x28
 800ccc6:	e009      	b.n	800ccdc <tcp_write+0x564>
      p->tot_len += extendlen;
 800ccc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccca:	891a      	ldrh	r2, [r3, #8]
 800cccc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ccce:	4413      	add	r3, r2
 800ccd0:	b29a      	uxth	r2, r3
 800ccd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ccd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	62bb      	str	r3, [r7, #40]	; 0x28
 800ccdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d1f1      	bne.n	800ccc8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800cce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce6:	891a      	ldrh	r2, [r3, #8]
 800cce8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ccea:	4413      	add	r3, r2
 800ccec:	b29a      	uxth	r2, r3
 800ccee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800ccf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf4:	895a      	ldrh	r2, [r3, #10]
 800ccf6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ccf8:	4413      	add	r3, r2
 800ccfa:	b29a      	uxth	r2, r3
 800ccfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccfe:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800cd00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd02:	891a      	ldrh	r2, [r3, #8]
 800cd04:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cd06:	4413      	add	r3, r2
 800cd08:	b29a      	uxth	r2, r3
 800cd0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd0c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800cd0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d111      	bne.n	800cd38 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd18:	66da      	str	r2, [r3, #108]	; 0x6c
 800cd1a:	e010      	b.n	800cd3e <tcp_write+0x5c6>
 800cd1c:	080139dc 	.word	0x080139dc
 800cd20:	08013c7c 	.word	0x08013c7c
 800cd24:	08013a30 	.word	0x08013a30
 800cd28:	08013cbc 	.word	0x08013cbc
 800cd2c:	08013ccc 	.word	0x08013ccc
 800cd30:	08013ce0 	.word	0x08013ce0
 800cd34:	08013d18 	.word	0x08013d18
  } else {
    last_unsent->next = queue;
 800cd38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd3c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cd42:	88fb      	ldrh	r3, [r7, #6]
 800cd44:	441a      	add	r2, r3
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800cd50:	88fb      	ldrh	r3, [r7, #6]
 800cd52:	1ad3      	subs	r3, r2, r3
 800cd54:	b29a      	uxth	r2, r3
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800cd62:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d00e      	beq.n	800cd8e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d10a      	bne.n	800cd8e <tcp_write+0x616>
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d106      	bne.n	800cd8e <tcp_write+0x616>
 800cd80:	4b2c      	ldr	r3, [pc, #176]	; (800ce34 <tcp_write+0x6bc>)
 800cd82:	f240 3212 	movw	r2, #786	; 0x312
 800cd86:	492c      	ldr	r1, [pc, #176]	; (800ce38 <tcp_write+0x6c0>)
 800cd88:	482c      	ldr	r0, [pc, #176]	; (800ce3c <tcp_write+0x6c4>)
 800cd8a:	f004 f9af 	bl	80110ec <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800cd8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d016      	beq.n	800cdc2 <tcp_write+0x64a>
 800cd94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd96:	68db      	ldr	r3, [r3, #12]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d012      	beq.n	800cdc2 <tcp_write+0x64a>
 800cd9c:	797b      	ldrb	r3, [r7, #5]
 800cd9e:	f003 0302 	and.w	r3, r3, #2
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d10d      	bne.n	800cdc2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800cda6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cda8:	68db      	ldr	r3, [r3, #12]
 800cdaa:	899b      	ldrh	r3, [r3, #12]
 800cdac:	b29c      	uxth	r4, r3
 800cdae:	2008      	movs	r0, #8
 800cdb0:	f7f9 fc02 	bl	80065b8 <lwip_htons>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	461a      	mov	r2, r3
 800cdb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdba:	68db      	ldr	r3, [r3, #12]
 800cdbc:	4322      	orrs	r2, r4
 800cdbe:	b292      	uxth	r2, r2
 800cdc0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	e031      	b.n	800ce2a <tcp_write+0x6b2>
          goto memerr;
 800cdc6:	bf00      	nop
 800cdc8:	e006      	b.n	800cdd8 <tcp_write+0x660>
            goto memerr;
 800cdca:	bf00      	nop
 800cdcc:	e004      	b.n	800cdd8 <tcp_write+0x660>
        goto memerr;
 800cdce:	bf00      	nop
 800cdd0:	e002      	b.n	800cdd8 <tcp_write+0x660>
        goto memerr;
 800cdd2:	bf00      	nop
 800cdd4:	e000      	b.n	800cdd8 <tcp_write+0x660>
      goto memerr;
 800cdd6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	8b5b      	ldrh	r3, [r3, #26]
 800cddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cde0:	b29a      	uxth	r2, r3
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800cde6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d002      	beq.n	800cdf2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800cdec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800cdee:	f7fa ff41 	bl	8007c74 <pbuf_free>
  }
  if (queue != NULL) {
 800cdf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d002      	beq.n	800cdfe <tcp_write+0x686>
    tcp_segs_free(queue);
 800cdf8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cdfa:	f7fc fb89 	bl	8009510 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d00e      	beq.n	800ce26 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d10a      	bne.n	800ce26 <tcp_write+0x6ae>
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d106      	bne.n	800ce26 <tcp_write+0x6ae>
 800ce18:	4b06      	ldr	r3, [pc, #24]	; (800ce34 <tcp_write+0x6bc>)
 800ce1a:	f240 3227 	movw	r2, #807	; 0x327
 800ce1e:	4906      	ldr	r1, [pc, #24]	; (800ce38 <tcp_write+0x6c0>)
 800ce20:	4806      	ldr	r0, [pc, #24]	; (800ce3c <tcp_write+0x6c4>)
 800ce22:	f004 f963 	bl	80110ec <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800ce26:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	375c      	adds	r7, #92	; 0x5c
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd90      	pop	{r4, r7, pc}
 800ce32:	bf00      	nop
 800ce34:	080139dc 	.word	0x080139dc
 800ce38:	08013d50 	.word	0x08013d50
 800ce3c:	08013a30 	.word	0x08013a30

0800ce40 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ce40:	b590      	push	{r4, r7, lr}
 800ce42:	b08b      	sub	sp, #44	; 0x2c
 800ce44:	af02      	add	r7, sp, #8
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	460b      	mov	r3, r1
 800ce4a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	61fb      	str	r3, [r7, #28]
 800ce50:	2300      	movs	r3, #0
 800ce52:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ce54:	2300      	movs	r3, #0
 800ce56:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d106      	bne.n	800ce6c <tcp_split_unsent_seg+0x2c>
 800ce5e:	4b95      	ldr	r3, [pc, #596]	; (800d0b4 <tcp_split_unsent_seg+0x274>)
 800ce60:	f240 324b 	movw	r2, #843	; 0x34b
 800ce64:	4994      	ldr	r1, [pc, #592]	; (800d0b8 <tcp_split_unsent_seg+0x278>)
 800ce66:	4895      	ldr	r0, [pc, #596]	; (800d0bc <tcp_split_unsent_seg+0x27c>)
 800ce68:	f004 f940 	bl	80110ec <iprintf>

  useg = pcb->unsent;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce70:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d102      	bne.n	800ce7e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ce78:	f04f 33ff 	mov.w	r3, #4294967295
 800ce7c:	e116      	b.n	800d0ac <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ce7e:	887b      	ldrh	r3, [r7, #2]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d109      	bne.n	800ce98 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ce84:	4b8b      	ldr	r3, [pc, #556]	; (800d0b4 <tcp_split_unsent_seg+0x274>)
 800ce86:	f240 3253 	movw	r2, #851	; 0x353
 800ce8a:	498d      	ldr	r1, [pc, #564]	; (800d0c0 <tcp_split_unsent_seg+0x280>)
 800ce8c:	488b      	ldr	r0, [pc, #556]	; (800d0bc <tcp_split_unsent_seg+0x27c>)
 800ce8e:	f004 f92d 	bl	80110ec <iprintf>
    return ERR_VAL;
 800ce92:	f06f 0305 	mvn.w	r3, #5
 800ce96:	e109      	b.n	800d0ac <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	891b      	ldrh	r3, [r3, #8]
 800ce9c:	887a      	ldrh	r2, [r7, #2]
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	d301      	bcc.n	800cea6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800cea2:	2300      	movs	r3, #0
 800cea4:	e102      	b.n	800d0ac <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ceaa:	887a      	ldrh	r2, [r7, #2]
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d906      	bls.n	800cebe <tcp_split_unsent_seg+0x7e>
 800ceb0:	4b80      	ldr	r3, [pc, #512]	; (800d0b4 <tcp_split_unsent_seg+0x274>)
 800ceb2:	f240 325b 	movw	r2, #859	; 0x35b
 800ceb6:	4983      	ldr	r1, [pc, #524]	; (800d0c4 <tcp_split_unsent_seg+0x284>)
 800ceb8:	4880      	ldr	r0, [pc, #512]	; (800d0bc <tcp_split_unsent_seg+0x27c>)
 800ceba:	f004 f917 	bl	80110ec <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	891b      	ldrh	r3, [r3, #8]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d106      	bne.n	800ced4 <tcp_split_unsent_seg+0x94>
 800cec6:	4b7b      	ldr	r3, [pc, #492]	; (800d0b4 <tcp_split_unsent_seg+0x274>)
 800cec8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800cecc:	497e      	ldr	r1, [pc, #504]	; (800d0c8 <tcp_split_unsent_seg+0x288>)
 800cece:	487b      	ldr	r0, [pc, #492]	; (800d0bc <tcp_split_unsent_seg+0x27c>)
 800ced0:	f004 f90c 	bl	80110ec <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	7a9b      	ldrb	r3, [r3, #10]
 800ced8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ceda:	7bfb      	ldrb	r3, [r7, #15]
 800cedc:	009b      	lsls	r3, r3, #2
 800cede:	b2db      	uxtb	r3, r3
 800cee0:	f003 0304 	and.w	r3, r3, #4
 800cee4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	891a      	ldrh	r2, [r3, #8]
 800ceea:	887b      	ldrh	r3, [r7, #2]
 800ceec:	1ad3      	subs	r3, r2, r3
 800ceee:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800cef0:	7bbb      	ldrb	r3, [r7, #14]
 800cef2:	b29a      	uxth	r2, r3
 800cef4:	89bb      	ldrh	r3, [r7, #12]
 800cef6:	4413      	add	r3, r2
 800cef8:	b29b      	uxth	r3, r3
 800cefa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cefe:	4619      	mov	r1, r3
 800cf00:	2036      	movs	r0, #54	; 0x36
 800cf02:	f7fa fbd3 	bl	80076ac <pbuf_alloc>
 800cf06:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	f000 80b7 	beq.w	800d07e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	891a      	ldrh	r2, [r3, #8]
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	891b      	ldrh	r3, [r3, #8]
 800cf1a:	1ad3      	subs	r3, r2, r3
 800cf1c:	b29a      	uxth	r2, r3
 800cf1e:	887b      	ldrh	r3, [r7, #2]
 800cf20:	4413      	add	r3, r2
 800cf22:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	6858      	ldr	r0, [r3, #4]
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	685a      	ldr	r2, [r3, #4]
 800cf2c:	7bbb      	ldrb	r3, [r7, #14]
 800cf2e:	18d1      	adds	r1, r2, r3
 800cf30:	897b      	ldrh	r3, [r7, #10]
 800cf32:	89ba      	ldrh	r2, [r7, #12]
 800cf34:	f7fb f888 	bl	8008048 <pbuf_copy_partial>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	89bb      	ldrh	r3, [r7, #12]
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	f040 809f 	bne.w	800d082 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	68db      	ldr	r3, [r3, #12]
 800cf48:	899b      	ldrh	r3, [r3, #12]
 800cf4a:	b29b      	uxth	r3, r3
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f7f9 fb33 	bl	80065b8 <lwip_htons>
 800cf52:	4603      	mov	r3, r0
 800cf54:	b2db      	uxtb	r3, r3
 800cf56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf5a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800cf60:	7efb      	ldrb	r3, [r7, #27]
 800cf62:	f003 0308 	and.w	r3, r3, #8
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d007      	beq.n	800cf7a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800cf6a:	7efb      	ldrb	r3, [r7, #27]
 800cf6c:	f023 0308 	bic.w	r3, r3, #8
 800cf70:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800cf72:	7ebb      	ldrb	r3, [r7, #26]
 800cf74:	f043 0308 	orr.w	r3, r3, #8
 800cf78:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800cf7a:	7efb      	ldrb	r3, [r7, #27]
 800cf7c:	f003 0301 	and.w	r3, r3, #1
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d007      	beq.n	800cf94 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800cf84:	7efb      	ldrb	r3, [r7, #27]
 800cf86:	f023 0301 	bic.w	r3, r3, #1
 800cf8a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800cf8c:	7ebb      	ldrb	r3, [r7, #26]
 800cf8e:	f043 0301 	orr.w	r3, r3, #1
 800cf92:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	68db      	ldr	r3, [r3, #12]
 800cf98:	685b      	ldr	r3, [r3, #4]
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7f9 fb21 	bl	80065e2 <lwip_htonl>
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	887b      	ldrh	r3, [r7, #2]
 800cfa4:	18d1      	adds	r1, r2, r3
 800cfa6:	7eba      	ldrb	r2, [r7, #26]
 800cfa8:	7bfb      	ldrb	r3, [r7, #15]
 800cfaa:	9300      	str	r3, [sp, #0]
 800cfac:	460b      	mov	r3, r1
 800cfae:	6939      	ldr	r1, [r7, #16]
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f7ff fa4f 	bl	800c454 <tcp_create_segment>
 800cfb6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800cfb8:	69fb      	ldr	r3, [r7, #28]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d063      	beq.n	800d086 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	685b      	ldr	r3, [r3, #4]
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7fa fede 	bl	8007d84 <pbuf_clen>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	461a      	mov	r2, r3
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cfd2:	1a9b      	subs	r3, r3, r2
 800cfd4:	b29a      	uxth	r2, r3
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	6858      	ldr	r0, [r3, #4]
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	891a      	ldrh	r2, [r3, #8]
 800cfe6:	89bb      	ldrh	r3, [r7, #12]
 800cfe8:	1ad3      	subs	r3, r2, r3
 800cfea:	b29b      	uxth	r3, r3
 800cfec:	4619      	mov	r1, r3
 800cfee:	f7fa fcbb 	bl	8007968 <pbuf_realloc>
  useg->len -= remainder;
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	891a      	ldrh	r2, [r3, #8]
 800cff6:	89bb      	ldrh	r3, [r7, #12]
 800cff8:	1ad3      	subs	r3, r2, r3
 800cffa:	b29a      	uxth	r2, r3
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	68db      	ldr	r3, [r3, #12]
 800d004:	899b      	ldrh	r3, [r3, #12]
 800d006:	b29c      	uxth	r4, r3
 800d008:	7efb      	ldrb	r3, [r7, #27]
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	4618      	mov	r0, r3
 800d00e:	f7f9 fad3 	bl	80065b8 <lwip_htons>
 800d012:	4603      	mov	r3, r0
 800d014:	461a      	mov	r2, r3
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	68db      	ldr	r3, [r3, #12]
 800d01a:	4322      	orrs	r2, r4
 800d01c:	b292      	uxth	r2, r2
 800d01e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d020:	697b      	ldr	r3, [r7, #20]
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	4618      	mov	r0, r3
 800d026:	f7fa fead 	bl	8007d84 <pbuf_clen>
 800d02a:	4603      	mov	r3, r0
 800d02c:	461a      	mov	r2, r3
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d034:	4413      	add	r3, r2
 800d036:	b29a      	uxth	r2, r3
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d03e:	69fb      	ldr	r3, [r7, #28]
 800d040:	685b      	ldr	r3, [r3, #4]
 800d042:	4618      	mov	r0, r3
 800d044:	f7fa fe9e 	bl	8007d84 <pbuf_clen>
 800d048:	4603      	mov	r3, r0
 800d04a:	461a      	mov	r2, r3
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d052:	4413      	add	r3, r2
 800d054:	b29a      	uxth	r2, r3
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	681a      	ldr	r2, [r3, #0]
 800d060:	69fb      	ldr	r3, [r7, #28]
 800d062:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	69fa      	ldr	r2, [r7, #28]
 800d068:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800d06a:	69fb      	ldr	r3, [r7, #28]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d103      	bne.n	800d07a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2200      	movs	r2, #0
 800d076:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800d07a:	2300      	movs	r3, #0
 800d07c:	e016      	b.n	800d0ac <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800d07e:	bf00      	nop
 800d080:	e002      	b.n	800d088 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d082:	bf00      	nop
 800d084:	e000      	b.n	800d088 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d086:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800d088:	69fb      	ldr	r3, [r7, #28]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d006      	beq.n	800d09c <tcp_split_unsent_seg+0x25c>
 800d08e:	4b09      	ldr	r3, [pc, #36]	; (800d0b4 <tcp_split_unsent_seg+0x274>)
 800d090:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800d094:	490d      	ldr	r1, [pc, #52]	; (800d0cc <tcp_split_unsent_seg+0x28c>)
 800d096:	4809      	ldr	r0, [pc, #36]	; (800d0bc <tcp_split_unsent_seg+0x27c>)
 800d098:	f004 f828 	bl	80110ec <iprintf>
  if (p != NULL) {
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d002      	beq.n	800d0a8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800d0a2:	6938      	ldr	r0, [r7, #16]
 800d0a4:	f7fa fde6 	bl	8007c74 <pbuf_free>
  }

  return ERR_MEM;
 800d0a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3724      	adds	r7, #36	; 0x24
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd90      	pop	{r4, r7, pc}
 800d0b4:	080139dc 	.word	0x080139dc
 800d0b8:	08013d70 	.word	0x08013d70
 800d0bc:	08013a30 	.word	0x08013a30
 800d0c0:	08013d94 	.word	0x08013d94
 800d0c4:	08013db8 	.word	0x08013db8
 800d0c8:	08013dc8 	.word	0x08013dc8
 800d0cc:	08013dd8 	.word	0x08013dd8

0800d0d0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d0d0:	b590      	push	{r4, r7, lr}
 800d0d2:	b085      	sub	sp, #20
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d106      	bne.n	800d0ec <tcp_send_fin+0x1c>
 800d0de:	4b21      	ldr	r3, [pc, #132]	; (800d164 <tcp_send_fin+0x94>)
 800d0e0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800d0e4:	4920      	ldr	r1, [pc, #128]	; (800d168 <tcp_send_fin+0x98>)
 800d0e6:	4821      	ldr	r0, [pc, #132]	; (800d16c <tcp_send_fin+0x9c>)
 800d0e8:	f004 f800 	bl	80110ec <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d02e      	beq.n	800d152 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0f8:	60fb      	str	r3, [r7, #12]
 800d0fa:	e002      	b.n	800d102 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d1f8      	bne.n	800d0fc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	68db      	ldr	r3, [r3, #12]
 800d10e:	899b      	ldrh	r3, [r3, #12]
 800d110:	b29b      	uxth	r3, r3
 800d112:	4618      	mov	r0, r3
 800d114:	f7f9 fa50 	bl	80065b8 <lwip_htons>
 800d118:	4603      	mov	r3, r0
 800d11a:	b2db      	uxtb	r3, r3
 800d11c:	f003 0307 	and.w	r3, r3, #7
 800d120:	2b00      	cmp	r3, #0
 800d122:	d116      	bne.n	800d152 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	68db      	ldr	r3, [r3, #12]
 800d128:	899b      	ldrh	r3, [r3, #12]
 800d12a:	b29c      	uxth	r4, r3
 800d12c:	2001      	movs	r0, #1
 800d12e:	f7f9 fa43 	bl	80065b8 <lwip_htons>
 800d132:	4603      	mov	r3, r0
 800d134:	461a      	mov	r2, r3
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	68db      	ldr	r3, [r3, #12]
 800d13a:	4322      	orrs	r2, r4
 800d13c:	b292      	uxth	r2, r2
 800d13e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	8b5b      	ldrh	r3, [r3, #26]
 800d144:	f043 0320 	orr.w	r3, r3, #32
 800d148:	b29a      	uxth	r2, r3
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800d14e:	2300      	movs	r3, #0
 800d150:	e004      	b.n	800d15c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d152:	2101      	movs	r1, #1
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f000 f80b 	bl	800d170 <tcp_enqueue_flags>
 800d15a:	4603      	mov	r3, r0
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3714      	adds	r7, #20
 800d160:	46bd      	mov	sp, r7
 800d162:	bd90      	pop	{r4, r7, pc}
 800d164:	080139dc 	.word	0x080139dc
 800d168:	08013de4 	.word	0x08013de4
 800d16c:	08013a30 	.word	0x08013a30

0800d170 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b08a      	sub	sp, #40	; 0x28
 800d174:	af02      	add	r7, sp, #8
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	460b      	mov	r3, r1
 800d17a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d17c:	2300      	movs	r3, #0
 800d17e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800d180:	2300      	movs	r3, #0
 800d182:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d184:	78fb      	ldrb	r3, [r7, #3]
 800d186:	f003 0303 	and.w	r3, r3, #3
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d106      	bne.n	800d19c <tcp_enqueue_flags+0x2c>
 800d18e:	4b67      	ldr	r3, [pc, #412]	; (800d32c <tcp_enqueue_flags+0x1bc>)
 800d190:	f240 4211 	movw	r2, #1041	; 0x411
 800d194:	4966      	ldr	r1, [pc, #408]	; (800d330 <tcp_enqueue_flags+0x1c0>)
 800d196:	4867      	ldr	r0, [pc, #412]	; (800d334 <tcp_enqueue_flags+0x1c4>)
 800d198:	f003 ffa8 	bl	80110ec <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d106      	bne.n	800d1b0 <tcp_enqueue_flags+0x40>
 800d1a2:	4b62      	ldr	r3, [pc, #392]	; (800d32c <tcp_enqueue_flags+0x1bc>)
 800d1a4:	f240 4213 	movw	r2, #1043	; 0x413
 800d1a8:	4963      	ldr	r1, [pc, #396]	; (800d338 <tcp_enqueue_flags+0x1c8>)
 800d1aa:	4862      	ldr	r0, [pc, #392]	; (800d334 <tcp_enqueue_flags+0x1c4>)
 800d1ac:	f003 ff9e 	bl	80110ec <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800d1b0:	78fb      	ldrb	r3, [r7, #3]
 800d1b2:	f003 0302 	and.w	r3, r3, #2
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d001      	beq.n	800d1be <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d1be:	7ffb      	ldrb	r3, [r7, #31]
 800d1c0:	009b      	lsls	r3, r3, #2
 800d1c2:	b2db      	uxtb	r3, r3
 800d1c4:	f003 0304 	and.w	r3, r3, #4
 800d1c8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d1ca:	7dfb      	ldrb	r3, [r7, #23]
 800d1cc:	b29b      	uxth	r3, r3
 800d1ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d1d2:	4619      	mov	r1, r3
 800d1d4:	2036      	movs	r0, #54	; 0x36
 800d1d6:	f7fa fa69 	bl	80076ac <pbuf_alloc>
 800d1da:	6138      	str	r0, [r7, #16]
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d109      	bne.n	800d1f6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	8b5b      	ldrh	r3, [r3, #26]
 800d1e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1ea:	b29a      	uxth	r2, r3
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d1f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d1f4:	e095      	b.n	800d322 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	895a      	ldrh	r2, [r3, #10]
 800d1fa:	7dfb      	ldrb	r3, [r7, #23]
 800d1fc:	b29b      	uxth	r3, r3
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d206      	bcs.n	800d210 <tcp_enqueue_flags+0xa0>
 800d202:	4b4a      	ldr	r3, [pc, #296]	; (800d32c <tcp_enqueue_flags+0x1bc>)
 800d204:	f240 4239 	movw	r2, #1081	; 0x439
 800d208:	494c      	ldr	r1, [pc, #304]	; (800d33c <tcp_enqueue_flags+0x1cc>)
 800d20a:	484a      	ldr	r0, [pc, #296]	; (800d334 <tcp_enqueue_flags+0x1c4>)
 800d20c:	f003 ff6e 	bl	80110ec <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800d214:	78fa      	ldrb	r2, [r7, #3]
 800d216:	7ffb      	ldrb	r3, [r7, #31]
 800d218:	9300      	str	r3, [sp, #0]
 800d21a:	460b      	mov	r3, r1
 800d21c:	6939      	ldr	r1, [r7, #16]
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f7ff f918 	bl	800c454 <tcp_create_segment>
 800d224:	60f8      	str	r0, [r7, #12]
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d109      	bne.n	800d240 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	8b5b      	ldrh	r3, [r3, #26]
 800d230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d234:	b29a      	uxth	r2, r3
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d23a:	f04f 33ff 	mov.w	r3, #4294967295
 800d23e:	e070      	b.n	800d322 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	68db      	ldr	r3, [r3, #12]
 800d244:	f003 0303 	and.w	r3, r3, #3
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d006      	beq.n	800d25a <tcp_enqueue_flags+0xea>
 800d24c:	4b37      	ldr	r3, [pc, #220]	; (800d32c <tcp_enqueue_flags+0x1bc>)
 800d24e:	f240 4242 	movw	r2, #1090	; 0x442
 800d252:	493b      	ldr	r1, [pc, #236]	; (800d340 <tcp_enqueue_flags+0x1d0>)
 800d254:	4837      	ldr	r0, [pc, #220]	; (800d334 <tcp_enqueue_flags+0x1c4>)
 800d256:	f003 ff49 	bl	80110ec <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	891b      	ldrh	r3, [r3, #8]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d006      	beq.n	800d270 <tcp_enqueue_flags+0x100>
 800d262:	4b32      	ldr	r3, [pc, #200]	; (800d32c <tcp_enqueue_flags+0x1bc>)
 800d264:	f240 4243 	movw	r2, #1091	; 0x443
 800d268:	4936      	ldr	r1, [pc, #216]	; (800d344 <tcp_enqueue_flags+0x1d4>)
 800d26a:	4832      	ldr	r0, [pc, #200]	; (800d334 <tcp_enqueue_flags+0x1c4>)
 800d26c:	f003 ff3e 	bl	80110ec <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d274:	2b00      	cmp	r3, #0
 800d276:	d103      	bne.n	800d280 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	68fa      	ldr	r2, [r7, #12]
 800d27c:	66da      	str	r2, [r3, #108]	; 0x6c
 800d27e:	e00d      	b.n	800d29c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d284:	61bb      	str	r3, [r7, #24]
 800d286:	e002      	b.n	800d28e <tcp_enqueue_flags+0x11e>
 800d288:	69bb      	ldr	r3, [r7, #24]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	61bb      	str	r3, [r7, #24]
 800d28e:	69bb      	ldr	r3, [r7, #24]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d1f8      	bne.n	800d288 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800d296:	69bb      	ldr	r3, [r7, #24]
 800d298:	68fa      	ldr	r2, [r7, #12]
 800d29a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d2a4:	78fb      	ldrb	r3, [r7, #3]
 800d2a6:	f003 0302 	and.w	r3, r3, #2
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d104      	bne.n	800d2b8 <tcp_enqueue_flags+0x148>
 800d2ae:	78fb      	ldrb	r3, [r7, #3]
 800d2b0:	f003 0301 	and.w	r3, r3, #1
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d004      	beq.n	800d2c2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2bc:	1c5a      	adds	r2, r3, #1
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d2c2:	78fb      	ldrb	r3, [r7, #3]
 800d2c4:	f003 0301 	and.w	r3, r3, #1
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d006      	beq.n	800d2da <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	8b5b      	ldrh	r3, [r3, #26]
 800d2d0:	f043 0320 	orr.w	r3, r3, #32
 800d2d4:	b29a      	uxth	r2, r3
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	685b      	ldr	r3, [r3, #4]
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f7fa fd50 	bl	8007d84 <pbuf_clen>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d2ee:	4413      	add	r3, r2
 800d2f0:	b29a      	uxth	r2, r3
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d00e      	beq.n	800d320 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d306:	2b00      	cmp	r3, #0
 800d308:	d10a      	bne.n	800d320 <tcp_enqueue_flags+0x1b0>
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d106      	bne.n	800d320 <tcp_enqueue_flags+0x1b0>
 800d312:	4b06      	ldr	r3, [pc, #24]	; (800d32c <tcp_enqueue_flags+0x1bc>)
 800d314:	f240 4265 	movw	r2, #1125	; 0x465
 800d318:	490b      	ldr	r1, [pc, #44]	; (800d348 <tcp_enqueue_flags+0x1d8>)
 800d31a:	4806      	ldr	r0, [pc, #24]	; (800d334 <tcp_enqueue_flags+0x1c4>)
 800d31c:	f003 fee6 	bl	80110ec <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d320:	2300      	movs	r3, #0
}
 800d322:	4618      	mov	r0, r3
 800d324:	3720      	adds	r7, #32
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	bf00      	nop
 800d32c:	080139dc 	.word	0x080139dc
 800d330:	08013e00 	.word	0x08013e00
 800d334:	08013a30 	.word	0x08013a30
 800d338:	08013e58 	.word	0x08013e58
 800d33c:	08013e78 	.word	0x08013e78
 800d340:	08013eb4 	.word	0x08013eb4
 800d344:	08013ecc 	.word	0x08013ecc
 800d348:	08013ef8 	.word	0x08013ef8

0800d34c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d34c:	b5b0      	push	{r4, r5, r7, lr}
 800d34e:	b08a      	sub	sp, #40	; 0x28
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d106      	bne.n	800d368 <tcp_output+0x1c>
 800d35a:	4b8a      	ldr	r3, [pc, #552]	; (800d584 <tcp_output+0x238>)
 800d35c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d360:	4989      	ldr	r1, [pc, #548]	; (800d588 <tcp_output+0x23c>)
 800d362:	488a      	ldr	r0, [pc, #552]	; (800d58c <tcp_output+0x240>)
 800d364:	f003 fec2 	bl	80110ec <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	7d1b      	ldrb	r3, [r3, #20]
 800d36c:	2b01      	cmp	r3, #1
 800d36e:	d106      	bne.n	800d37e <tcp_output+0x32>
 800d370:	4b84      	ldr	r3, [pc, #528]	; (800d584 <tcp_output+0x238>)
 800d372:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d376:	4986      	ldr	r1, [pc, #536]	; (800d590 <tcp_output+0x244>)
 800d378:	4884      	ldr	r0, [pc, #528]	; (800d58c <tcp_output+0x240>)
 800d37a:	f003 feb7 	bl	80110ec <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d37e:	4b85      	ldr	r3, [pc, #532]	; (800d594 <tcp_output+0x248>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	687a      	ldr	r2, [r7, #4]
 800d384:	429a      	cmp	r2, r3
 800d386:	d101      	bne.n	800d38c <tcp_output+0x40>
    return ERR_OK;
 800d388:	2300      	movs	r3, #0
 800d38a:	e1ce      	b.n	800d72a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d398:	4293      	cmp	r3, r2
 800d39a:	bf28      	it	cs
 800d39c:	4613      	movcs	r3, r2
 800d39e:	b29b      	uxth	r3, r3
 800d3a0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800d3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d10b      	bne.n	800d3c6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	8b5b      	ldrh	r3, [r3, #26]
 800d3b2:	f003 0302 	and.w	r3, r3, #2
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	f000 81aa 	beq.w	800d710 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f000 fdcb 	bl	800df58 <tcp_send_empty_ack>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	e1b1      	b.n	800d72a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d3c6:	6879      	ldr	r1, [r7, #4]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	3304      	adds	r3, #4
 800d3cc:	461a      	mov	r2, r3
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f7ff f824 	bl	800c41c <tcp_route>
 800d3d4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d102      	bne.n	800d3e2 <tcp_output+0x96>
    return ERR_RTE;
 800d3dc:	f06f 0303 	mvn.w	r3, #3
 800d3e0:	e1a3      	b.n	800d72a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d003      	beq.n	800d3f0 <tcp_output+0xa4>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d111      	bne.n	800d414 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d002      	beq.n	800d3fc <tcp_output+0xb0>
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	3304      	adds	r3, #4
 800d3fa:	e000      	b.n	800d3fe <tcp_output+0xb2>
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d102      	bne.n	800d40c <tcp_output+0xc0>
      return ERR_RTE;
 800d406:	f06f 0303 	mvn.w	r3, #3
 800d40a:	e18e      	b.n	800d72a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d416:	68db      	ldr	r3, [r3, #12]
 800d418:	685b      	ldr	r3, [r3, #4]
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7f9 f8e1 	bl	80065e2 <lwip_htonl>
 800d420:	4602      	mov	r2, r0
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d426:	1ad3      	subs	r3, r2, r3
 800d428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d42a:	8912      	ldrh	r2, [r2, #8]
 800d42c:	4413      	add	r3, r2
 800d42e:	69ba      	ldr	r2, [r7, #24]
 800d430:	429a      	cmp	r2, r3
 800d432:	d227      	bcs.n	800d484 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d43a:	461a      	mov	r2, r3
 800d43c:	69bb      	ldr	r3, [r7, #24]
 800d43e:	4293      	cmp	r3, r2
 800d440:	d114      	bne.n	800d46c <tcp_output+0x120>
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d446:	2b00      	cmp	r3, #0
 800d448:	d110      	bne.n	800d46c <tcp_output+0x120>
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d450:	2b00      	cmp	r3, #0
 800d452:	d10b      	bne.n	800d46c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2200      	movs	r2, #0
 800d458:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2201      	movs	r2, #1
 800d460:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2200      	movs	r2, #0
 800d468:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	8b5b      	ldrh	r3, [r3, #26]
 800d470:	f003 0302 	and.w	r3, r3, #2
 800d474:	2b00      	cmp	r3, #0
 800d476:	f000 814d 	beq.w	800d714 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f000 fd6c 	bl	800df58 <tcp_send_empty_ack>
 800d480:	4603      	mov	r3, r0
 800d482:	e152      	b.n	800d72a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2200      	movs	r2, #0
 800d488:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d490:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d492:	6a3b      	ldr	r3, [r7, #32]
 800d494:	2b00      	cmp	r3, #0
 800d496:	f000 811c 	beq.w	800d6d2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d49a:	e002      	b.n	800d4a2 <tcp_output+0x156>
 800d49c:	6a3b      	ldr	r3, [r7, #32]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	623b      	str	r3, [r7, #32]
 800d4a2:	6a3b      	ldr	r3, [r7, #32]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d1f8      	bne.n	800d49c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d4aa:	e112      	b.n	800d6d2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ae:	68db      	ldr	r3, [r3, #12]
 800d4b0:	899b      	ldrh	r3, [r3, #12]
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f7f9 f87f 	bl	80065b8 <lwip_htons>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	b2db      	uxtb	r3, r3
 800d4be:	f003 0304 	and.w	r3, r3, #4
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d006      	beq.n	800d4d4 <tcp_output+0x188>
 800d4c6:	4b2f      	ldr	r3, [pc, #188]	; (800d584 <tcp_output+0x238>)
 800d4c8:	f240 5236 	movw	r2, #1334	; 0x536
 800d4cc:	4932      	ldr	r1, [pc, #200]	; (800d598 <tcp_output+0x24c>)
 800d4ce:	482f      	ldr	r0, [pc, #188]	; (800d58c <tcp_output+0x240>)
 800d4d0:	f003 fe0c 	bl	80110ec <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d01f      	beq.n	800d51c <tcp_output+0x1d0>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	8b5b      	ldrh	r3, [r3, #26]
 800d4e0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d119      	bne.n	800d51c <tcp_output+0x1d0>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d00b      	beq.n	800d508 <tcp_output+0x1bc>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d110      	bne.n	800d51c <tcp_output+0x1d0>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4fe:	891a      	ldrh	r2, [r3, #8]
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d504:	429a      	cmp	r2, r3
 800d506:	d209      	bcs.n	800d51c <tcp_output+0x1d0>
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d004      	beq.n	800d51c <tcp_output+0x1d0>
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d518:	2b08      	cmp	r3, #8
 800d51a:	d901      	bls.n	800d520 <tcp_output+0x1d4>
 800d51c:	2301      	movs	r3, #1
 800d51e:	e000      	b.n	800d522 <tcp_output+0x1d6>
 800d520:	2300      	movs	r3, #0
 800d522:	2b00      	cmp	r3, #0
 800d524:	d106      	bne.n	800d534 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	8b5b      	ldrh	r3, [r3, #26]
 800d52a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d52e:	2b00      	cmp	r3, #0
 800d530:	f000 80e4 	beq.w	800d6fc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	7d1b      	ldrb	r3, [r3, #20]
 800d538:	2b02      	cmp	r3, #2
 800d53a:	d00d      	beq.n	800d558 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d53e:	68db      	ldr	r3, [r3, #12]
 800d540:	899b      	ldrh	r3, [r3, #12]
 800d542:	b29c      	uxth	r4, r3
 800d544:	2010      	movs	r0, #16
 800d546:	f7f9 f837 	bl	80065b8 <lwip_htons>
 800d54a:	4603      	mov	r3, r0
 800d54c:	461a      	mov	r2, r3
 800d54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d550:	68db      	ldr	r3, [r3, #12]
 800d552:	4322      	orrs	r2, r4
 800d554:	b292      	uxth	r2, r2
 800d556:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d558:	697a      	ldr	r2, [r7, #20]
 800d55a:	6879      	ldr	r1, [r7, #4]
 800d55c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d55e:	f000 f909 	bl	800d774 <tcp_output_segment>
 800d562:	4603      	mov	r3, r0
 800d564:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d016      	beq.n	800d59c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	8b5b      	ldrh	r3, [r3, #26]
 800d572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d576:	b29a      	uxth	r2, r3
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	835a      	strh	r2, [r3, #26]
      return err;
 800d57c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d580:	e0d3      	b.n	800d72a <tcp_output+0x3de>
 800d582:	bf00      	nop
 800d584:	080139dc 	.word	0x080139dc
 800d588:	08013f20 	.word	0x08013f20
 800d58c:	08013a30 	.word	0x08013a30
 800d590:	08013f38 	.word	0x08013f38
 800d594:	20008874 	.word	0x20008874
 800d598:	08013f60 	.word	0x08013f60
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59e:	681a      	ldr	r2, [r3, #0]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	7d1b      	ldrb	r3, [r3, #20]
 800d5a8:	2b02      	cmp	r3, #2
 800d5aa:	d006      	beq.n	800d5ba <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	8b5b      	ldrh	r3, [r3, #26]
 800d5b0:	f023 0303 	bic.w	r3, r3, #3
 800d5b4:	b29a      	uxth	r2, r3
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5bc:	68db      	ldr	r3, [r3, #12]
 800d5be:	685b      	ldr	r3, [r3, #4]
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f7f9 f80e 	bl	80065e2 <lwip_htonl>
 800d5c6:	4604      	mov	r4, r0
 800d5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ca:	891b      	ldrh	r3, [r3, #8]
 800d5cc:	461d      	mov	r5, r3
 800d5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d0:	68db      	ldr	r3, [r3, #12]
 800d5d2:	899b      	ldrh	r3, [r3, #12]
 800d5d4:	b29b      	uxth	r3, r3
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7f8 ffee 	bl	80065b8 <lwip_htons>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	b2db      	uxtb	r3, r3
 800d5e0:	f003 0303 	and.w	r3, r3, #3
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d001      	beq.n	800d5ec <tcp_output+0x2a0>
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	e000      	b.n	800d5ee <tcp_output+0x2a2>
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	442b      	add	r3, r5
 800d5f0:	4423      	add	r3, r4
 800d5f2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	1ad3      	subs	r3, r2, r3
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	da02      	bge.n	800d606 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	68ba      	ldr	r2, [r7, #8]
 800d604:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d608:	891b      	ldrh	r3, [r3, #8]
 800d60a:	461c      	mov	r4, r3
 800d60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60e:	68db      	ldr	r3, [r3, #12]
 800d610:	899b      	ldrh	r3, [r3, #12]
 800d612:	b29b      	uxth	r3, r3
 800d614:	4618      	mov	r0, r3
 800d616:	f7f8 ffcf 	bl	80065b8 <lwip_htons>
 800d61a:	4603      	mov	r3, r0
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	f003 0303 	and.w	r3, r3, #3
 800d622:	2b00      	cmp	r3, #0
 800d624:	d001      	beq.n	800d62a <tcp_output+0x2de>
 800d626:	2301      	movs	r3, #1
 800d628:	e000      	b.n	800d62c <tcp_output+0x2e0>
 800d62a:	2300      	movs	r3, #0
 800d62c:	4423      	add	r3, r4
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d049      	beq.n	800d6c6 <tcp_output+0x37a>
      seg->next = NULL;
 800d632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d634:	2200      	movs	r2, #0
 800d636:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d105      	bne.n	800d64c <tcp_output+0x300>
        pcb->unacked = seg;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d644:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800d646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d648:	623b      	str	r3, [r7, #32]
 800d64a:	e03f      	b.n	800d6cc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d64e:	68db      	ldr	r3, [r3, #12]
 800d650:	685b      	ldr	r3, [r3, #4]
 800d652:	4618      	mov	r0, r3
 800d654:	f7f8 ffc5 	bl	80065e2 <lwip_htonl>
 800d658:	4604      	mov	r4, r0
 800d65a:	6a3b      	ldr	r3, [r7, #32]
 800d65c:	68db      	ldr	r3, [r3, #12]
 800d65e:	685b      	ldr	r3, [r3, #4]
 800d660:	4618      	mov	r0, r3
 800d662:	f7f8 ffbe 	bl	80065e2 <lwip_htonl>
 800d666:	4603      	mov	r3, r0
 800d668:	1ae3      	subs	r3, r4, r3
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	da24      	bge.n	800d6b8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	3370      	adds	r3, #112	; 0x70
 800d672:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d674:	e002      	b.n	800d67c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d676:	69fb      	ldr	r3, [r7, #28]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d67c:	69fb      	ldr	r3, [r7, #28]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d011      	beq.n	800d6a8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d684:	69fb      	ldr	r3, [r7, #28]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	68db      	ldr	r3, [r3, #12]
 800d68a:	685b      	ldr	r3, [r3, #4]
 800d68c:	4618      	mov	r0, r3
 800d68e:	f7f8 ffa8 	bl	80065e2 <lwip_htonl>
 800d692:	4604      	mov	r4, r0
 800d694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d696:	68db      	ldr	r3, [r3, #12]
 800d698:	685b      	ldr	r3, [r3, #4]
 800d69a:	4618      	mov	r0, r3
 800d69c:	f7f8 ffa1 	bl	80065e2 <lwip_htonl>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	dbe6      	blt.n	800d676 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800d6a8:	69fb      	ldr	r3, [r7, #28]
 800d6aa:	681a      	ldr	r2, [r3, #0]
 800d6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ae:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d6b0:	69fb      	ldr	r3, [r7, #28]
 800d6b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6b4:	601a      	str	r2, [r3, #0]
 800d6b6:	e009      	b.n	800d6cc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d6b8:	6a3b      	ldr	r3, [r7, #32]
 800d6ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6bc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d6be:	6a3b      	ldr	r3, [r7, #32]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	623b      	str	r3, [r7, #32]
 800d6c4:	e002      	b.n	800d6cc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d6c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d6c8:	f7fb ff37 	bl	800953a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6d0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800d6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d012      	beq.n	800d6fe <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6da:	68db      	ldr	r3, [r3, #12]
 800d6dc:	685b      	ldr	r3, [r3, #4]
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7f8 ff7f 	bl	80065e2 <lwip_htonl>
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6ea:	1ad3      	subs	r3, r2, r3
 800d6ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6ee:	8912      	ldrh	r2, [r2, #8]
 800d6f0:	4413      	add	r3, r2
  while (seg != NULL &&
 800d6f2:	69ba      	ldr	r2, [r7, #24]
 800d6f4:	429a      	cmp	r2, r3
 800d6f6:	f4bf aed9 	bcs.w	800d4ac <tcp_output+0x160>
 800d6fa:	e000      	b.n	800d6fe <tcp_output+0x3b2>
      break;
 800d6fc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d702:	2b00      	cmp	r3, #0
 800d704:	d108      	bne.n	800d718 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2200      	movs	r2, #0
 800d70a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800d70e:	e004      	b.n	800d71a <tcp_output+0x3ce>
    goto output_done;
 800d710:	bf00      	nop
 800d712:	e002      	b.n	800d71a <tcp_output+0x3ce>
    goto output_done;
 800d714:	bf00      	nop
 800d716:	e000      	b.n	800d71a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d718:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	8b5b      	ldrh	r3, [r3, #26]
 800d71e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d722:	b29a      	uxth	r2, r3
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d728:	2300      	movs	r3, #0
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3728      	adds	r7, #40	; 0x28
 800d72e:	46bd      	mov	sp, r7
 800d730:	bdb0      	pop	{r4, r5, r7, pc}
 800d732:	bf00      	nop

0800d734 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d106      	bne.n	800d750 <tcp_output_segment_busy+0x1c>
 800d742:	4b09      	ldr	r3, [pc, #36]	; (800d768 <tcp_output_segment_busy+0x34>)
 800d744:	f240 529a 	movw	r2, #1434	; 0x59a
 800d748:	4908      	ldr	r1, [pc, #32]	; (800d76c <tcp_output_segment_busy+0x38>)
 800d74a:	4809      	ldr	r0, [pc, #36]	; (800d770 <tcp_output_segment_busy+0x3c>)
 800d74c:	f003 fcce 	bl	80110ec <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	685b      	ldr	r3, [r3, #4]
 800d754:	7b9b      	ldrb	r3, [r3, #14]
 800d756:	2b01      	cmp	r3, #1
 800d758:	d001      	beq.n	800d75e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800d75a:	2301      	movs	r3, #1
 800d75c:	e000      	b.n	800d760 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800d75e:	2300      	movs	r3, #0
}
 800d760:	4618      	mov	r0, r3
 800d762:	3708      	adds	r7, #8
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}
 800d768:	080139dc 	.word	0x080139dc
 800d76c:	08013f78 	.word	0x08013f78
 800d770:	08013a30 	.word	0x08013a30

0800d774 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800d774:	b5b0      	push	{r4, r5, r7, lr}
 800d776:	b08c      	sub	sp, #48	; 0x30
 800d778:	af04      	add	r7, sp, #16
 800d77a:	60f8      	str	r0, [r7, #12]
 800d77c:	60b9      	str	r1, [r7, #8]
 800d77e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d106      	bne.n	800d794 <tcp_output_segment+0x20>
 800d786:	4b64      	ldr	r3, [pc, #400]	; (800d918 <tcp_output_segment+0x1a4>)
 800d788:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800d78c:	4963      	ldr	r1, [pc, #396]	; (800d91c <tcp_output_segment+0x1a8>)
 800d78e:	4864      	ldr	r0, [pc, #400]	; (800d920 <tcp_output_segment+0x1ac>)
 800d790:	f003 fcac 	bl	80110ec <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d106      	bne.n	800d7a8 <tcp_output_segment+0x34>
 800d79a:	4b5f      	ldr	r3, [pc, #380]	; (800d918 <tcp_output_segment+0x1a4>)
 800d79c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d7a0:	4960      	ldr	r1, [pc, #384]	; (800d924 <tcp_output_segment+0x1b0>)
 800d7a2:	485f      	ldr	r0, [pc, #380]	; (800d920 <tcp_output_segment+0x1ac>)
 800d7a4:	f003 fca2 	bl	80110ec <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d106      	bne.n	800d7bc <tcp_output_segment+0x48>
 800d7ae:	4b5a      	ldr	r3, [pc, #360]	; (800d918 <tcp_output_segment+0x1a4>)
 800d7b0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800d7b4:	495c      	ldr	r1, [pc, #368]	; (800d928 <tcp_output_segment+0x1b4>)
 800d7b6:	485a      	ldr	r0, [pc, #360]	; (800d920 <tcp_output_segment+0x1ac>)
 800d7b8:	f003 fc98 	bl	80110ec <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800d7bc:	68f8      	ldr	r0, [r7, #12]
 800d7be:	f7ff ffb9 	bl	800d734 <tcp_output_segment_busy>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d001      	beq.n	800d7cc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	e0a1      	b.n	800d910 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	68dc      	ldr	r4, [r3, #12]
 800d7d4:	4610      	mov	r0, r2
 800d7d6:	f7f8 ff04 	bl	80065e2 <lwip_htonl>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	68dc      	ldr	r4, [r3, #12]
 800d7e6:	4610      	mov	r0, r2
 800d7e8:	f7f8 fee6 	bl	80065b8 <lwip_htons>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f4:	68ba      	ldr	r2, [r7, #8]
 800d7f6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d7f8:	441a      	add	r2, r3
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	68db      	ldr	r3, [r3, #12]
 800d802:	3314      	adds	r3, #20
 800d804:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	7a9b      	ldrb	r3, [r3, #10]
 800d80a:	f003 0301 	and.w	r3, r3, #1
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d015      	beq.n	800d83e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	3304      	adds	r3, #4
 800d816:	461a      	mov	r2, r3
 800d818:	6879      	ldr	r1, [r7, #4]
 800d81a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d81e:	f7fc fa33 	bl	8009c88 <tcp_eff_send_mss_netif>
 800d822:	4603      	mov	r3, r0
 800d824:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d826:	8b7b      	ldrh	r3, [r7, #26]
 800d828:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800d82c:	4618      	mov	r0, r3
 800d82e:	f7f8 fed8 	bl	80065e2 <lwip_htonl>
 800d832:	4602      	mov	r2, r0
 800d834:	69fb      	ldr	r3, [r7, #28]
 800d836:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d838:	69fb      	ldr	r3, [r7, #28]
 800d83a:	3304      	adds	r3, #4
 800d83c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d844:	2b00      	cmp	r3, #0
 800d846:	da02      	bge.n	800d84e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	2200      	movs	r2, #0
 800d84c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d852:	2b00      	cmp	r3, #0
 800d854:	d10c      	bne.n	800d870 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d856:	4b35      	ldr	r3, [pc, #212]	; (800d92c <tcp_output_segment+0x1b8>)
 800d858:	681a      	ldr	r2, [r3, #0]
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	68db      	ldr	r3, [r3, #12]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	4618      	mov	r0, r3
 800d866:	f7f8 febc 	bl	80065e2 <lwip_htonl>
 800d86a:	4602      	mov	r2, r0
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	68da      	ldr	r2, [r3, #12]
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	685b      	ldr	r3, [r3, #4]
 800d87a:	1ad3      	subs	r3, r2, r3
 800d87c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	685b      	ldr	r3, [r3, #4]
 800d882:	8959      	ldrh	r1, [r3, #10]
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	685b      	ldr	r3, [r3, #4]
 800d888:	8b3a      	ldrh	r2, [r7, #24]
 800d88a:	1a8a      	subs	r2, r1, r2
 800d88c:	b292      	uxth	r2, r2
 800d88e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	685b      	ldr	r3, [r3, #4]
 800d894:	8919      	ldrh	r1, [r3, #8]
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	8b3a      	ldrh	r2, [r7, #24]
 800d89c:	1a8a      	subs	r2, r1, r2
 800d89e:	b292      	uxth	r2, r2
 800d8a0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	68fa      	ldr	r2, [r7, #12]
 800d8a8:	68d2      	ldr	r2, [r2, #12]
 800d8aa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	68db      	ldr	r3, [r3, #12]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	741a      	strb	r2, [r3, #16]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	68da      	ldr	r2, [r3, #12]
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	7a9b      	ldrb	r3, [r3, #10]
 800d8c0:	f003 0301 	and.w	r3, r3, #1
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d001      	beq.n	800d8cc <tcp_output_segment+0x158>
 800d8c8:	2318      	movs	r3, #24
 800d8ca:	e000      	b.n	800d8ce <tcp_output_segment+0x15a>
 800d8cc:	2314      	movs	r3, #20
 800d8ce:	4413      	add	r3, r2
 800d8d0:	69fa      	ldr	r2, [r7, #28]
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	d006      	beq.n	800d8e4 <tcp_output_segment+0x170>
 800d8d6:	4b10      	ldr	r3, [pc, #64]	; (800d918 <tcp_output_segment+0x1a4>)
 800d8d8:	f240 621c 	movw	r2, #1564	; 0x61c
 800d8dc:	4914      	ldr	r1, [pc, #80]	; (800d930 <tcp_output_segment+0x1bc>)
 800d8de:	4810      	ldr	r0, [pc, #64]	; (800d920 <tcp_output_segment+0x1ac>)
 800d8e0:	f003 fc04 	bl	80110ec <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	6858      	ldr	r0, [r3, #4]
 800d8e8:	68b9      	ldr	r1, [r7, #8]
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	1d1c      	adds	r4, r3, #4
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	7add      	ldrb	r5, [r3, #11]
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	7a9b      	ldrb	r3, [r3, #10]
 800d8f6:	687a      	ldr	r2, [r7, #4]
 800d8f8:	9202      	str	r2, [sp, #8]
 800d8fa:	2206      	movs	r2, #6
 800d8fc:	9201      	str	r2, [sp, #4]
 800d8fe:	9300      	str	r3, [sp, #0]
 800d900:	462b      	mov	r3, r5
 800d902:	4622      	mov	r2, r4
 800d904:	f002 fa34 	bl	800fd70 <ip4_output_if>
 800d908:	4603      	mov	r3, r0
 800d90a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d90c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d910:	4618      	mov	r0, r3
 800d912:	3720      	adds	r7, #32
 800d914:	46bd      	mov	sp, r7
 800d916:	bdb0      	pop	{r4, r5, r7, pc}
 800d918:	080139dc 	.word	0x080139dc
 800d91c:	08013fa0 	.word	0x08013fa0
 800d920:	08013a30 	.word	0x08013a30
 800d924:	08013fc0 	.word	0x08013fc0
 800d928:	08013fe0 	.word	0x08013fe0
 800d92c:	20008828 	.word	0x20008828
 800d930:	08014004 	.word	0x08014004

0800d934 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d934:	b5b0      	push	{r4, r5, r7, lr}
 800d936:	b084      	sub	sp, #16
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d106      	bne.n	800d950 <tcp_rexmit_rto_prepare+0x1c>
 800d942:	4b31      	ldr	r3, [pc, #196]	; (800da08 <tcp_rexmit_rto_prepare+0xd4>)
 800d944:	f240 6263 	movw	r2, #1635	; 0x663
 800d948:	4930      	ldr	r1, [pc, #192]	; (800da0c <tcp_rexmit_rto_prepare+0xd8>)
 800d94a:	4831      	ldr	r0, [pc, #196]	; (800da10 <tcp_rexmit_rto_prepare+0xdc>)
 800d94c:	f003 fbce 	bl	80110ec <iprintf>

  if (pcb->unacked == NULL) {
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d954:	2b00      	cmp	r3, #0
 800d956:	d102      	bne.n	800d95e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d958:	f06f 0305 	mvn.w	r3, #5
 800d95c:	e050      	b.n	800da00 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d962:	60fb      	str	r3, [r7, #12]
 800d964:	e00b      	b.n	800d97e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d966:	68f8      	ldr	r0, [r7, #12]
 800d968:	f7ff fee4 	bl	800d734 <tcp_output_segment_busy>
 800d96c:	4603      	mov	r3, r0
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d002      	beq.n	800d978 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d972:	f06f 0305 	mvn.w	r3, #5
 800d976:	e043      	b.n	800da00 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	60fb      	str	r3, [r7, #12]
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d1ef      	bne.n	800d966 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d986:	68f8      	ldr	r0, [r7, #12]
 800d988:	f7ff fed4 	bl	800d734 <tcp_output_segment_busy>
 800d98c:	4603      	mov	r3, r0
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d002      	beq.n	800d998 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d992:	f06f 0305 	mvn.w	r3, #5
 800d996:	e033      	b.n	800da00 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	8b5b      	ldrh	r3, [r3, #26]
 800d9b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d9b6:	b29a      	uxth	r2, r3
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	68db      	ldr	r3, [r3, #12]
 800d9c0:	685b      	ldr	r3, [r3, #4]
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7f8 fe0d 	bl	80065e2 <lwip_htonl>
 800d9c8:	4604      	mov	r4, r0
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	891b      	ldrh	r3, [r3, #8]
 800d9ce:	461d      	mov	r5, r3
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	68db      	ldr	r3, [r3, #12]
 800d9d4:	899b      	ldrh	r3, [r3, #12]
 800d9d6:	b29b      	uxth	r3, r3
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f7f8 fded 	bl	80065b8 <lwip_htons>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	b2db      	uxtb	r3, r3
 800d9e2:	f003 0303 	and.w	r3, r3, #3
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d001      	beq.n	800d9ee <tcp_rexmit_rto_prepare+0xba>
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	e000      	b.n	800d9f0 <tcp_rexmit_rto_prepare+0xbc>
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	442b      	add	r3, r5
 800d9f2:	18e2      	adds	r2, r4, r3
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800d9fe:	2300      	movs	r3, #0
}
 800da00:	4618      	mov	r0, r3
 800da02:	3710      	adds	r7, #16
 800da04:	46bd      	mov	sp, r7
 800da06:	bdb0      	pop	{r4, r5, r7, pc}
 800da08:	080139dc 	.word	0x080139dc
 800da0c:	08014018 	.word	0x08014018
 800da10:	08013a30 	.word	0x08013a30

0800da14 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b082      	sub	sp, #8
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d106      	bne.n	800da30 <tcp_rexmit_rto_commit+0x1c>
 800da22:	4b0d      	ldr	r3, [pc, #52]	; (800da58 <tcp_rexmit_rto_commit+0x44>)
 800da24:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800da28:	490c      	ldr	r1, [pc, #48]	; (800da5c <tcp_rexmit_rto_commit+0x48>)
 800da2a:	480d      	ldr	r0, [pc, #52]	; (800da60 <tcp_rexmit_rto_commit+0x4c>)
 800da2c:	f003 fb5e 	bl	80110ec <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800da36:	2bff      	cmp	r3, #255	; 0xff
 800da38:	d007      	beq.n	800da4a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800da40:	3301      	adds	r3, #1
 800da42:	b2da      	uxtb	r2, r3
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f7ff fc7e 	bl	800d34c <tcp_output>
}
 800da50:	bf00      	nop
 800da52:	3708      	adds	r7, #8
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}
 800da58:	080139dc 	.word	0x080139dc
 800da5c:	0801403c 	.word	0x0801403c
 800da60:	08013a30 	.word	0x08013a30

0800da64 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b082      	sub	sp, #8
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d106      	bne.n	800da80 <tcp_rexmit_rto+0x1c>
 800da72:	4b0a      	ldr	r3, [pc, #40]	; (800da9c <tcp_rexmit_rto+0x38>)
 800da74:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800da78:	4909      	ldr	r1, [pc, #36]	; (800daa0 <tcp_rexmit_rto+0x3c>)
 800da7a:	480a      	ldr	r0, [pc, #40]	; (800daa4 <tcp_rexmit_rto+0x40>)
 800da7c:	f003 fb36 	bl	80110ec <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f7ff ff57 	bl	800d934 <tcp_rexmit_rto_prepare>
 800da86:	4603      	mov	r3, r0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d102      	bne.n	800da92 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f7ff ffc1 	bl	800da14 <tcp_rexmit_rto_commit>
  }
}
 800da92:	bf00      	nop
 800da94:	3708      	adds	r7, #8
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	bf00      	nop
 800da9c:	080139dc 	.word	0x080139dc
 800daa0:	08014060 	.word	0x08014060
 800daa4:	08013a30 	.word	0x08013a30

0800daa8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800daa8:	b590      	push	{r4, r7, lr}
 800daaa:	b085      	sub	sp, #20
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d106      	bne.n	800dac4 <tcp_rexmit+0x1c>
 800dab6:	4b2f      	ldr	r3, [pc, #188]	; (800db74 <tcp_rexmit+0xcc>)
 800dab8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800dabc:	492e      	ldr	r1, [pc, #184]	; (800db78 <tcp_rexmit+0xd0>)
 800dabe:	482f      	ldr	r0, [pc, #188]	; (800db7c <tcp_rexmit+0xd4>)
 800dac0:	f003 fb14 	bl	80110ec <iprintf>

  if (pcb->unacked == NULL) {
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d102      	bne.n	800dad2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800dacc:	f06f 0305 	mvn.w	r3, #5
 800dad0:	e04c      	b.n	800db6c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dad6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800dad8:	68b8      	ldr	r0, [r7, #8]
 800dada:	f7ff fe2b 	bl	800d734 <tcp_output_segment_busy>
 800dade:	4603      	mov	r3, r0
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d002      	beq.n	800daea <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800dae4:	f06f 0305 	mvn.w	r3, #5
 800dae8:	e040      	b.n	800db6c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	681a      	ldr	r2, [r3, #0]
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	336c      	adds	r3, #108	; 0x6c
 800daf6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800daf8:	e002      	b.n	800db00 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d011      	beq.n	800db2c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	68db      	ldr	r3, [r3, #12]
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	4618      	mov	r0, r3
 800db12:	f7f8 fd66 	bl	80065e2 <lwip_htonl>
 800db16:	4604      	mov	r4, r0
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	68db      	ldr	r3, [r3, #12]
 800db1c:	685b      	ldr	r3, [r3, #4]
 800db1e:	4618      	mov	r0, r3
 800db20:	f7f8 fd5f 	bl	80065e2 <lwip_htonl>
 800db24:	4603      	mov	r3, r0
 800db26:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800db28:	2b00      	cmp	r3, #0
 800db2a:	dbe6      	blt.n	800dafa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	681a      	ldr	r2, [r3, #0]
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	68ba      	ldr	r2, [r7, #8]
 800db38:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d103      	bne.n	800db4a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2200      	movs	r2, #0
 800db46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800db50:	2bff      	cmp	r3, #255	; 0xff
 800db52:	d007      	beq.n	800db64 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800db5a:	3301      	adds	r3, #1
 800db5c:	b2da      	uxtb	r2, r3
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2200      	movs	r2, #0
 800db68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800db6a:	2300      	movs	r3, #0
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3714      	adds	r7, #20
 800db70:	46bd      	mov	sp, r7
 800db72:	bd90      	pop	{r4, r7, pc}
 800db74:	080139dc 	.word	0x080139dc
 800db78:	0801407c 	.word	0x0801407c
 800db7c:	08013a30 	.word	0x08013a30

0800db80 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b082      	sub	sp, #8
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d106      	bne.n	800db9c <tcp_rexmit_fast+0x1c>
 800db8e:	4b2a      	ldr	r3, [pc, #168]	; (800dc38 <tcp_rexmit_fast+0xb8>)
 800db90:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800db94:	4929      	ldr	r1, [pc, #164]	; (800dc3c <tcp_rexmit_fast+0xbc>)
 800db96:	482a      	ldr	r0, [pc, #168]	; (800dc40 <tcp_rexmit_fast+0xc0>)
 800db98:	f003 faa8 	bl	80110ec <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d045      	beq.n	800dc30 <tcp_rexmit_fast+0xb0>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	8b5b      	ldrh	r3, [r3, #26]
 800dba8:	f003 0304 	and.w	r3, r3, #4
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d13f      	bne.n	800dc30 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f7ff ff79 	bl	800daa8 <tcp_rexmit>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d139      	bne.n	800dc30 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	bf28      	it	cs
 800dbcc:	4613      	movcs	r3, r2
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	da00      	bge.n	800dbd6 <tcp_rexmit_fast+0x56>
 800dbd4:	3301      	adds	r3, #1
 800dbd6:	105b      	asrs	r3, r3, #1
 800dbd8:	b29a      	uxth	r2, r3
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dbec:	005b      	lsls	r3, r3, #1
 800dbee:	429a      	cmp	r2, r3
 800dbf0:	d206      	bcs.n	800dc00 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dbf6:	005b      	lsls	r3, r3, #1
 800dbf8:	b29a      	uxth	r2, r3
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc0a:	4619      	mov	r1, r3
 800dc0c:	0049      	lsls	r1, r1, #1
 800dc0e:	440b      	add	r3, r1
 800dc10:	b29b      	uxth	r3, r3
 800dc12:	4413      	add	r3, r2
 800dc14:	b29a      	uxth	r2, r3
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	8b5b      	ldrh	r3, [r3, #26]
 800dc20:	f043 0304 	orr.w	r3, r3, #4
 800dc24:	b29a      	uxth	r2, r3
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800dc30:	bf00      	nop
 800dc32:	3708      	adds	r7, #8
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}
 800dc38:	080139dc 	.word	0x080139dc
 800dc3c:	08014094 	.word	0x08014094
 800dc40:	08013a30 	.word	0x08013a30

0800dc44 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b086      	sub	sp, #24
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	60f8      	str	r0, [r7, #12]
 800dc4c:	607b      	str	r3, [r7, #4]
 800dc4e:	460b      	mov	r3, r1
 800dc50:	817b      	strh	r3, [r7, #10]
 800dc52:	4613      	mov	r3, r2
 800dc54:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800dc56:	897a      	ldrh	r2, [r7, #10]
 800dc58:	893b      	ldrh	r3, [r7, #8]
 800dc5a:	4413      	add	r3, r2
 800dc5c:	b29b      	uxth	r3, r3
 800dc5e:	3314      	adds	r3, #20
 800dc60:	b29b      	uxth	r3, r3
 800dc62:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dc66:	4619      	mov	r1, r3
 800dc68:	2022      	movs	r0, #34	; 0x22
 800dc6a:	f7f9 fd1f 	bl	80076ac <pbuf_alloc>
 800dc6e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d04d      	beq.n	800dd12 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800dc76:	897b      	ldrh	r3, [r7, #10]
 800dc78:	3313      	adds	r3, #19
 800dc7a:	697a      	ldr	r2, [r7, #20]
 800dc7c:	8952      	ldrh	r2, [r2, #10]
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	db06      	blt.n	800dc90 <tcp_output_alloc_header_common+0x4c>
 800dc82:	4b26      	ldr	r3, [pc, #152]	; (800dd1c <tcp_output_alloc_header_common+0xd8>)
 800dc84:	f240 7223 	movw	r2, #1827	; 0x723
 800dc88:	4925      	ldr	r1, [pc, #148]	; (800dd20 <tcp_output_alloc_header_common+0xdc>)
 800dc8a:	4826      	ldr	r0, [pc, #152]	; (800dd24 <tcp_output_alloc_header_common+0xe0>)
 800dc8c:	f003 fa2e 	bl	80110ec <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	685b      	ldr	r3, [r3, #4]
 800dc94:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800dc96:	8c3b      	ldrh	r3, [r7, #32]
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f7f8 fc8d 	bl	80065b8 <lwip_htons>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	461a      	mov	r2, r3
 800dca2:	693b      	ldr	r3, [r7, #16]
 800dca4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800dca6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f7f8 fc85 	bl	80065b8 <lwip_htons>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	461a      	mov	r2, r3
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	687a      	ldr	r2, [r7, #4]
 800dcba:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800dcbc:	68f8      	ldr	r0, [r7, #12]
 800dcbe:	f7f8 fc90 	bl	80065e2 <lwip_htonl>
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800dcc8:	897b      	ldrh	r3, [r7, #10]
 800dcca:	089b      	lsrs	r3, r3, #2
 800dccc:	b29b      	uxth	r3, r3
 800dcce:	3305      	adds	r3, #5
 800dcd0:	b29b      	uxth	r3, r3
 800dcd2:	031b      	lsls	r3, r3, #12
 800dcd4:	b29a      	uxth	r2, r3
 800dcd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	4313      	orrs	r3, r2
 800dcde:	b29b      	uxth	r3, r3
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7f8 fc69 	bl	80065b8 <lwip_htons>
 800dce6:	4603      	mov	r3, r0
 800dce8:	461a      	mov	r2, r3
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800dcee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7f8 fc61 	bl	80065b8 <lwip_htons>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	461a      	mov	r2, r3
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	2200      	movs	r2, #0
 800dd02:	741a      	strb	r2, [r3, #16]
 800dd04:	2200      	movs	r2, #0
 800dd06:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	749a      	strb	r2, [r3, #18]
 800dd0e:	2200      	movs	r2, #0
 800dd10:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800dd12:	697b      	ldr	r3, [r7, #20]
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3718      	adds	r7, #24
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}
 800dd1c:	080139dc 	.word	0x080139dc
 800dd20:	080140b4 	.word	0x080140b4
 800dd24:	08013a30 	.word	0x08013a30

0800dd28 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800dd28:	b5b0      	push	{r4, r5, r7, lr}
 800dd2a:	b08a      	sub	sp, #40	; 0x28
 800dd2c:	af04      	add	r7, sp, #16
 800dd2e:	60f8      	str	r0, [r7, #12]
 800dd30:	607b      	str	r3, [r7, #4]
 800dd32:	460b      	mov	r3, r1
 800dd34:	817b      	strh	r3, [r7, #10]
 800dd36:	4613      	mov	r3, r2
 800dd38:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d106      	bne.n	800dd4e <tcp_output_alloc_header+0x26>
 800dd40:	4b15      	ldr	r3, [pc, #84]	; (800dd98 <tcp_output_alloc_header+0x70>)
 800dd42:	f240 7242 	movw	r2, #1858	; 0x742
 800dd46:	4915      	ldr	r1, [pc, #84]	; (800dd9c <tcp_output_alloc_header+0x74>)
 800dd48:	4815      	ldr	r0, [pc, #84]	; (800dda0 <tcp_output_alloc_header+0x78>)
 800dd4a:	f003 f9cf 	bl	80110ec <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	8adb      	ldrh	r3, [r3, #22]
 800dd56:	68fa      	ldr	r2, [r7, #12]
 800dd58:	8b12      	ldrh	r2, [r2, #24]
 800dd5a:	68f9      	ldr	r1, [r7, #12]
 800dd5c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800dd5e:	893d      	ldrh	r5, [r7, #8]
 800dd60:	897c      	ldrh	r4, [r7, #10]
 800dd62:	9103      	str	r1, [sp, #12]
 800dd64:	2110      	movs	r1, #16
 800dd66:	9102      	str	r1, [sp, #8]
 800dd68:	9201      	str	r2, [sp, #4]
 800dd6a:	9300      	str	r3, [sp, #0]
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	462a      	mov	r2, r5
 800dd70:	4621      	mov	r1, r4
 800dd72:	f7ff ff67 	bl	800dc44 <tcp_output_alloc_header_common>
 800dd76:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d006      	beq.n	800dd8c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd82:	68fa      	ldr	r2, [r7, #12]
 800dd84:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800dd86:	441a      	add	r2, r3
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800dd8c:	697b      	ldr	r3, [r7, #20]
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3718      	adds	r7, #24
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bdb0      	pop	{r4, r5, r7, pc}
 800dd96:	bf00      	nop
 800dd98:	080139dc 	.word	0x080139dc
 800dd9c:	080140e4 	.word	0x080140e4
 800dda0:	08013a30 	.word	0x08013a30

0800dda4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b088      	sub	sp, #32
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	60f8      	str	r0, [r7, #12]
 800ddac:	60b9      	str	r1, [r7, #8]
 800ddae:	4611      	mov	r1, r2
 800ddb0:	461a      	mov	r2, r3
 800ddb2:	460b      	mov	r3, r1
 800ddb4:	71fb      	strb	r3, [r7, #7]
 800ddb6:	4613      	mov	r3, r2
 800ddb8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d106      	bne.n	800ddd2 <tcp_output_fill_options+0x2e>
 800ddc4:	4b12      	ldr	r3, [pc, #72]	; (800de10 <tcp_output_fill_options+0x6c>)
 800ddc6:	f240 7256 	movw	r2, #1878	; 0x756
 800ddca:	4912      	ldr	r1, [pc, #72]	; (800de14 <tcp_output_fill_options+0x70>)
 800ddcc:	4812      	ldr	r0, [pc, #72]	; (800de18 <tcp_output_fill_options+0x74>)
 800ddce:	f003 f98d 	bl	80110ec <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	685b      	ldr	r3, [r3, #4]
 800ddd6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800ddd8:	69bb      	ldr	r3, [r7, #24]
 800ddda:	3314      	adds	r3, #20
 800dddc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ddde:	8bfb      	ldrh	r3, [r7, #30]
 800dde0:	009b      	lsls	r3, r3, #2
 800dde2:	461a      	mov	r2, r3
 800dde4:	79fb      	ldrb	r3, [r7, #7]
 800dde6:	009b      	lsls	r3, r3, #2
 800dde8:	f003 0304 	and.w	r3, r3, #4
 800ddec:	4413      	add	r3, r2
 800ddee:	3314      	adds	r3, #20
 800ddf0:	69ba      	ldr	r2, [r7, #24]
 800ddf2:	4413      	add	r3, r2
 800ddf4:	697a      	ldr	r2, [r7, #20]
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d006      	beq.n	800de08 <tcp_output_fill_options+0x64>
 800ddfa:	4b05      	ldr	r3, [pc, #20]	; (800de10 <tcp_output_fill_options+0x6c>)
 800ddfc:	f240 7275 	movw	r2, #1909	; 0x775
 800de00:	4906      	ldr	r1, [pc, #24]	; (800de1c <tcp_output_fill_options+0x78>)
 800de02:	4805      	ldr	r0, [pc, #20]	; (800de18 <tcp_output_fill_options+0x74>)
 800de04:	f003 f972 	bl	80110ec <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800de08:	bf00      	nop
 800de0a:	3720      	adds	r7, #32
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	080139dc 	.word	0x080139dc
 800de14:	0801410c 	.word	0x0801410c
 800de18:	08013a30 	.word	0x08013a30
 800de1c:	08014004 	.word	0x08014004

0800de20 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b08a      	sub	sp, #40	; 0x28
 800de24:	af04      	add	r7, sp, #16
 800de26:	60f8      	str	r0, [r7, #12]
 800de28:	60b9      	str	r1, [r7, #8]
 800de2a:	607a      	str	r2, [r7, #4]
 800de2c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d106      	bne.n	800de42 <tcp_output_control_segment+0x22>
 800de34:	4b1c      	ldr	r3, [pc, #112]	; (800dea8 <tcp_output_control_segment+0x88>)
 800de36:	f240 7287 	movw	r2, #1927	; 0x787
 800de3a:	491c      	ldr	r1, [pc, #112]	; (800deac <tcp_output_control_segment+0x8c>)
 800de3c:	481c      	ldr	r0, [pc, #112]	; (800deb0 <tcp_output_control_segment+0x90>)
 800de3e:	f003 f955 	bl	80110ec <iprintf>

  netif = tcp_route(pcb, src, dst);
 800de42:	683a      	ldr	r2, [r7, #0]
 800de44:	6879      	ldr	r1, [r7, #4]
 800de46:	68f8      	ldr	r0, [r7, #12]
 800de48:	f7fe fae8 	bl	800c41c <tcp_route>
 800de4c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d102      	bne.n	800de5a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800de54:	23fc      	movs	r3, #252	; 0xfc
 800de56:	75fb      	strb	r3, [r7, #23]
 800de58:	e01c      	b.n	800de94 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d006      	beq.n	800de6e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	7adb      	ldrb	r3, [r3, #11]
 800de64:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	7a9b      	ldrb	r3, [r3, #10]
 800de6a:	757b      	strb	r3, [r7, #21]
 800de6c:	e003      	b.n	800de76 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800de6e:	23ff      	movs	r3, #255	; 0xff
 800de70:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800de72:	2300      	movs	r3, #0
 800de74:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800de76:	7dba      	ldrb	r2, [r7, #22]
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	9302      	str	r3, [sp, #8]
 800de7c:	2306      	movs	r3, #6
 800de7e:	9301      	str	r3, [sp, #4]
 800de80:	7d7b      	ldrb	r3, [r7, #21]
 800de82:	9300      	str	r3, [sp, #0]
 800de84:	4613      	mov	r3, r2
 800de86:	683a      	ldr	r2, [r7, #0]
 800de88:	6879      	ldr	r1, [r7, #4]
 800de8a:	68b8      	ldr	r0, [r7, #8]
 800de8c:	f001 ff70 	bl	800fd70 <ip4_output_if>
 800de90:	4603      	mov	r3, r0
 800de92:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800de94:	68b8      	ldr	r0, [r7, #8]
 800de96:	f7f9 feed 	bl	8007c74 <pbuf_free>
  return err;
 800de9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3718      	adds	r7, #24
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	080139dc 	.word	0x080139dc
 800deac:	08014134 	.word	0x08014134
 800deb0:	08013a30 	.word	0x08013a30

0800deb4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800deb4:	b590      	push	{r4, r7, lr}
 800deb6:	b08b      	sub	sp, #44	; 0x2c
 800deb8:	af04      	add	r7, sp, #16
 800deba:	60f8      	str	r0, [r7, #12]
 800debc:	60b9      	str	r1, [r7, #8]
 800debe:	607a      	str	r2, [r7, #4]
 800dec0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d106      	bne.n	800ded6 <tcp_rst+0x22>
 800dec8:	4b1f      	ldr	r3, [pc, #124]	; (800df48 <tcp_rst+0x94>)
 800deca:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800dece:	491f      	ldr	r1, [pc, #124]	; (800df4c <tcp_rst+0x98>)
 800ded0:	481f      	ldr	r0, [pc, #124]	; (800df50 <tcp_rst+0x9c>)
 800ded2:	f003 f90b 	bl	80110ec <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ded6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d106      	bne.n	800deea <tcp_rst+0x36>
 800dedc:	4b1a      	ldr	r3, [pc, #104]	; (800df48 <tcp_rst+0x94>)
 800dede:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800dee2:	491c      	ldr	r1, [pc, #112]	; (800df54 <tcp_rst+0xa0>)
 800dee4:	481a      	ldr	r0, [pc, #104]	; (800df50 <tcp_rst+0x9c>)
 800dee6:	f003 f901 	bl	80110ec <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800deea:	2300      	movs	r3, #0
 800deec:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800deee:	f246 0308 	movw	r3, #24584	; 0x6008
 800def2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800def4:	7dfb      	ldrb	r3, [r7, #23]
 800def6:	b29c      	uxth	r4, r3
 800def8:	68b8      	ldr	r0, [r7, #8]
 800defa:	f7f8 fb72 	bl	80065e2 <lwip_htonl>
 800defe:	4602      	mov	r2, r0
 800df00:	8abb      	ldrh	r3, [r7, #20]
 800df02:	9303      	str	r3, [sp, #12]
 800df04:	2314      	movs	r3, #20
 800df06:	9302      	str	r3, [sp, #8]
 800df08:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800df0a:	9301      	str	r3, [sp, #4]
 800df0c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800df0e:	9300      	str	r3, [sp, #0]
 800df10:	4613      	mov	r3, r2
 800df12:	2200      	movs	r2, #0
 800df14:	4621      	mov	r1, r4
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f7ff fe94 	bl	800dc44 <tcp_output_alloc_header_common>
 800df1c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d00c      	beq.n	800df3e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800df24:	7dfb      	ldrb	r3, [r7, #23]
 800df26:	2200      	movs	r2, #0
 800df28:	6939      	ldr	r1, [r7, #16]
 800df2a:	68f8      	ldr	r0, [r7, #12]
 800df2c:	f7ff ff3a 	bl	800dda4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800df30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df32:	683a      	ldr	r2, [r7, #0]
 800df34:	6939      	ldr	r1, [r7, #16]
 800df36:	68f8      	ldr	r0, [r7, #12]
 800df38:	f7ff ff72 	bl	800de20 <tcp_output_control_segment>
 800df3c:	e000      	b.n	800df40 <tcp_rst+0x8c>
    return;
 800df3e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800df40:	371c      	adds	r7, #28
 800df42:	46bd      	mov	sp, r7
 800df44:	bd90      	pop	{r4, r7, pc}
 800df46:	bf00      	nop
 800df48:	080139dc 	.word	0x080139dc
 800df4c:	08014160 	.word	0x08014160
 800df50:	08013a30 	.word	0x08013a30
 800df54:	0801417c 	.word	0x0801417c

0800df58 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800df58:	b590      	push	{r4, r7, lr}
 800df5a:	b087      	sub	sp, #28
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800df60:	2300      	movs	r3, #0
 800df62:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800df64:	2300      	movs	r3, #0
 800df66:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d106      	bne.n	800df7c <tcp_send_empty_ack+0x24>
 800df6e:	4b28      	ldr	r3, [pc, #160]	; (800e010 <tcp_send_empty_ack+0xb8>)
 800df70:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800df74:	4927      	ldr	r1, [pc, #156]	; (800e014 <tcp_send_empty_ack+0xbc>)
 800df76:	4828      	ldr	r0, [pc, #160]	; (800e018 <tcp_send_empty_ack+0xc0>)
 800df78:	f003 f8b8 	bl	80110ec <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800df7c:	7dfb      	ldrb	r3, [r7, #23]
 800df7e:	009b      	lsls	r3, r3, #2
 800df80:	b2db      	uxtb	r3, r3
 800df82:	f003 0304 	and.w	r3, r3, #4
 800df86:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800df88:	7d7b      	ldrb	r3, [r7, #21]
 800df8a:	b29c      	uxth	r4, r3
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df90:	4618      	mov	r0, r3
 800df92:	f7f8 fb26 	bl	80065e2 <lwip_htonl>
 800df96:	4603      	mov	r3, r0
 800df98:	2200      	movs	r2, #0
 800df9a:	4621      	mov	r1, r4
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f7ff fec3 	bl	800dd28 <tcp_output_alloc_header>
 800dfa2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d109      	bne.n	800dfbe <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	8b5b      	ldrh	r3, [r3, #26]
 800dfae:	f043 0303 	orr.w	r3, r3, #3
 800dfb2:	b29a      	uxth	r2, r3
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800dfb8:	f06f 0301 	mvn.w	r3, #1
 800dfbc:	e023      	b.n	800e006 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800dfbe:	7dbb      	ldrb	r3, [r7, #22]
 800dfc0:	7dfa      	ldrb	r2, [r7, #23]
 800dfc2:	6939      	ldr	r1, [r7, #16]
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f7ff feed 	bl	800dda4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dfca:	687a      	ldr	r2, [r7, #4]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	3304      	adds	r3, #4
 800dfd0:	6939      	ldr	r1, [r7, #16]
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f7ff ff24 	bl	800de20 <tcp_output_control_segment>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800dfdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d007      	beq.n	800dff4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	8b5b      	ldrh	r3, [r3, #26]
 800dfe8:	f043 0303 	orr.w	r3, r3, #3
 800dfec:	b29a      	uxth	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	835a      	strh	r2, [r3, #26]
 800dff2:	e006      	b.n	800e002 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	8b5b      	ldrh	r3, [r3, #26]
 800dff8:	f023 0303 	bic.w	r3, r3, #3
 800dffc:	b29a      	uxth	r2, r3
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800e002:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e006:	4618      	mov	r0, r3
 800e008:	371c      	adds	r7, #28
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd90      	pop	{r4, r7, pc}
 800e00e:	bf00      	nop
 800e010:	080139dc 	.word	0x080139dc
 800e014:	08014198 	.word	0x08014198
 800e018:	08013a30 	.word	0x08013a30

0800e01c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e01c:	b590      	push	{r4, r7, lr}
 800e01e:	b087      	sub	sp, #28
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e024:	2300      	movs	r3, #0
 800e026:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d106      	bne.n	800e03c <tcp_keepalive+0x20>
 800e02e:	4b18      	ldr	r3, [pc, #96]	; (800e090 <tcp_keepalive+0x74>)
 800e030:	f640 0224 	movw	r2, #2084	; 0x824
 800e034:	4917      	ldr	r1, [pc, #92]	; (800e094 <tcp_keepalive+0x78>)
 800e036:	4818      	ldr	r0, [pc, #96]	; (800e098 <tcp_keepalive+0x7c>)
 800e038:	f003 f858 	bl	80110ec <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e03c:	7dfb      	ldrb	r3, [r7, #23]
 800e03e:	b29c      	uxth	r4, r3
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e044:	3b01      	subs	r3, #1
 800e046:	4618      	mov	r0, r3
 800e048:	f7f8 facb 	bl	80065e2 <lwip_htonl>
 800e04c:	4603      	mov	r3, r0
 800e04e:	2200      	movs	r2, #0
 800e050:	4621      	mov	r1, r4
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f7ff fe68 	bl	800dd28 <tcp_output_alloc_header>
 800e058:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e05a:	693b      	ldr	r3, [r7, #16]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d102      	bne.n	800e066 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e060:	f04f 33ff 	mov.w	r3, #4294967295
 800e064:	e010      	b.n	800e088 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e066:	7dfb      	ldrb	r3, [r7, #23]
 800e068:	2200      	movs	r2, #0
 800e06a:	6939      	ldr	r1, [r7, #16]
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f7ff fe99 	bl	800dda4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e072:	687a      	ldr	r2, [r7, #4]
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	3304      	adds	r3, #4
 800e078:	6939      	ldr	r1, [r7, #16]
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f7ff fed0 	bl	800de20 <tcp_output_control_segment>
 800e080:	4603      	mov	r3, r0
 800e082:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e084:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e088:	4618      	mov	r0, r3
 800e08a:	371c      	adds	r7, #28
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd90      	pop	{r4, r7, pc}
 800e090:	080139dc 	.word	0x080139dc
 800e094:	080141b8 	.word	0x080141b8
 800e098:	08013a30 	.word	0x08013a30

0800e09c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e09c:	b590      	push	{r4, r7, lr}
 800e09e:	b08b      	sub	sp, #44	; 0x2c
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d106      	bne.n	800e0be <tcp_zero_window_probe+0x22>
 800e0b0:	4b4c      	ldr	r3, [pc, #304]	; (800e1e4 <tcp_zero_window_probe+0x148>)
 800e0b2:	f640 024f 	movw	r2, #2127	; 0x84f
 800e0b6:	494c      	ldr	r1, [pc, #304]	; (800e1e8 <tcp_zero_window_probe+0x14c>)
 800e0b8:	484c      	ldr	r0, [pc, #304]	; (800e1ec <tcp_zero_window_probe+0x150>)
 800e0ba:	f003 f817 	bl	80110ec <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0c2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800e0c4:	6a3b      	ldr	r3, [r7, #32]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d101      	bne.n	800e0ce <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	e086      	b.n	800e1dc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e0d4:	2bff      	cmp	r3, #255	; 0xff
 800e0d6:	d007      	beq.n	800e0e8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e0de:	3301      	adds	r3, #1
 800e0e0:	b2da      	uxtb	r2, r3
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e0e8:	6a3b      	ldr	r3, [r7, #32]
 800e0ea:	68db      	ldr	r3, [r3, #12]
 800e0ec:	899b      	ldrh	r3, [r3, #12]
 800e0ee:	b29b      	uxth	r3, r3
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f7f8 fa61 	bl	80065b8 <lwip_htons>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	b2db      	uxtb	r3, r3
 800e0fa:	f003 0301 	and.w	r3, r3, #1
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d005      	beq.n	800e10e <tcp_zero_window_probe+0x72>
 800e102:	6a3b      	ldr	r3, [r7, #32]
 800e104:	891b      	ldrh	r3, [r3, #8]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d101      	bne.n	800e10e <tcp_zero_window_probe+0x72>
 800e10a:	2301      	movs	r3, #1
 800e10c:	e000      	b.n	800e110 <tcp_zero_window_probe+0x74>
 800e10e:	2300      	movs	r3, #0
 800e110:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800e112:	7ffb      	ldrb	r3, [r7, #31]
 800e114:	2b00      	cmp	r3, #0
 800e116:	bf0c      	ite	eq
 800e118:	2301      	moveq	r3, #1
 800e11a:	2300      	movne	r3, #0
 800e11c:	b2db      	uxtb	r3, r3
 800e11e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e124:	b299      	uxth	r1, r3
 800e126:	6a3b      	ldr	r3, [r7, #32]
 800e128:	68db      	ldr	r3, [r3, #12]
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	8bba      	ldrh	r2, [r7, #28]
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f7ff fdfa 	bl	800dd28 <tcp_output_alloc_header>
 800e134:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e136:	69bb      	ldr	r3, [r7, #24]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d102      	bne.n	800e142 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800e13c:	f04f 33ff 	mov.w	r3, #4294967295
 800e140:	e04c      	b.n	800e1dc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e142:	69bb      	ldr	r3, [r7, #24]
 800e144:	685b      	ldr	r3, [r3, #4]
 800e146:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800e148:	7ffb      	ldrb	r3, [r7, #31]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d011      	beq.n	800e172 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	899b      	ldrh	r3, [r3, #12]
 800e152:	b29b      	uxth	r3, r3
 800e154:	b21b      	sxth	r3, r3
 800e156:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e15a:	b21c      	sxth	r4, r3
 800e15c:	2011      	movs	r0, #17
 800e15e:	f7f8 fa2b 	bl	80065b8 <lwip_htons>
 800e162:	4603      	mov	r3, r0
 800e164:	b21b      	sxth	r3, r3
 800e166:	4323      	orrs	r3, r4
 800e168:	b21b      	sxth	r3, r3
 800e16a:	b29a      	uxth	r2, r3
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	819a      	strh	r2, [r3, #12]
 800e170:	e010      	b.n	800e194 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800e172:	69bb      	ldr	r3, [r7, #24]
 800e174:	685b      	ldr	r3, [r3, #4]
 800e176:	3314      	adds	r3, #20
 800e178:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e17a:	6a3b      	ldr	r3, [r7, #32]
 800e17c:	6858      	ldr	r0, [r3, #4]
 800e17e:	6a3b      	ldr	r3, [r7, #32]
 800e180:	685b      	ldr	r3, [r3, #4]
 800e182:	891a      	ldrh	r2, [r3, #8]
 800e184:	6a3b      	ldr	r3, [r7, #32]
 800e186:	891b      	ldrh	r3, [r3, #8]
 800e188:	1ad3      	subs	r3, r2, r3
 800e18a:	b29b      	uxth	r3, r3
 800e18c:	2201      	movs	r2, #1
 800e18e:	6939      	ldr	r1, [r7, #16]
 800e190:	f7f9 ff5a 	bl	8008048 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e194:	6a3b      	ldr	r3, [r7, #32]
 800e196:	68db      	ldr	r3, [r3, #12]
 800e198:	685b      	ldr	r3, [r3, #4]
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7f8 fa21 	bl	80065e2 <lwip_htonl>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	1ad3      	subs	r3, r2, r3
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	da02      	bge.n	800e1b8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	68fa      	ldr	r2, [r7, #12]
 800e1b6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e1b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1bc:	2200      	movs	r2, #0
 800e1be:	69b9      	ldr	r1, [r7, #24]
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f7ff fdef 	bl	800dda4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e1c6:	687a      	ldr	r2, [r7, #4]
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	3304      	adds	r3, #4
 800e1cc:	69b9      	ldr	r1, [r7, #24]
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f7ff fe26 	bl	800de20 <tcp_output_control_segment>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e1d8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e1dc:	4618      	mov	r0, r3
 800e1de:	372c      	adds	r7, #44	; 0x2c
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd90      	pop	{r4, r7, pc}
 800e1e4:	080139dc 	.word	0x080139dc
 800e1e8:	080141d4 	.word	0x080141d4
 800e1ec:	08013a30 	.word	0x08013a30

0800e1f0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e1f8:	f7fa f8a6 	bl	8008348 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e1fc:	4b0a      	ldr	r3, [pc, #40]	; (800e228 <tcpip_tcp_timer+0x38>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d103      	bne.n	800e20c <tcpip_tcp_timer+0x1c>
 800e204:	4b09      	ldr	r3, [pc, #36]	; (800e22c <tcpip_tcp_timer+0x3c>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d005      	beq.n	800e218 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e20c:	2200      	movs	r2, #0
 800e20e:	4908      	ldr	r1, [pc, #32]	; (800e230 <tcpip_tcp_timer+0x40>)
 800e210:	20fa      	movs	r0, #250	; 0xfa
 800e212:	f000 f8f3 	bl	800e3fc <sys_timeout>
 800e216:	e003      	b.n	800e220 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e218:	4b06      	ldr	r3, [pc, #24]	; (800e234 <tcpip_tcp_timer+0x44>)
 800e21a:	2200      	movs	r2, #0
 800e21c:	601a      	str	r2, [r3, #0]
  }
}
 800e21e:	bf00      	nop
 800e220:	bf00      	nop
 800e222:	3708      	adds	r7, #8
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}
 800e228:	20008834 	.word	0x20008834
 800e22c:	20008838 	.word	0x20008838
 800e230:	0800e1f1 	.word	0x0800e1f1
 800e234:	20008880 	.word	0x20008880

0800e238 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e23c:	4b0a      	ldr	r3, [pc, #40]	; (800e268 <tcp_timer_needed+0x30>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d10f      	bne.n	800e264 <tcp_timer_needed+0x2c>
 800e244:	4b09      	ldr	r3, [pc, #36]	; (800e26c <tcp_timer_needed+0x34>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d103      	bne.n	800e254 <tcp_timer_needed+0x1c>
 800e24c:	4b08      	ldr	r3, [pc, #32]	; (800e270 <tcp_timer_needed+0x38>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d007      	beq.n	800e264 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e254:	4b04      	ldr	r3, [pc, #16]	; (800e268 <tcp_timer_needed+0x30>)
 800e256:	2201      	movs	r2, #1
 800e258:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e25a:	2200      	movs	r2, #0
 800e25c:	4905      	ldr	r1, [pc, #20]	; (800e274 <tcp_timer_needed+0x3c>)
 800e25e:	20fa      	movs	r0, #250	; 0xfa
 800e260:	f000 f8cc 	bl	800e3fc <sys_timeout>
  }
}
 800e264:	bf00      	nop
 800e266:	bd80      	pop	{r7, pc}
 800e268:	20008880 	.word	0x20008880
 800e26c:	20008834 	.word	0x20008834
 800e270:	20008838 	.word	0x20008838
 800e274:	0800e1f1 	.word	0x0800e1f1

0800e278 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b086      	sub	sp, #24
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	60f8      	str	r0, [r7, #12]
 800e280:	60b9      	str	r1, [r7, #8]
 800e282:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e284:	2006      	movs	r0, #6
 800e286:	f7f8 fe0f 	bl	8006ea8 <memp_malloc>
 800e28a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d109      	bne.n	800e2a6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d151      	bne.n	800e33c <sys_timeout_abs+0xc4>
 800e298:	4b2a      	ldr	r3, [pc, #168]	; (800e344 <sys_timeout_abs+0xcc>)
 800e29a:	22be      	movs	r2, #190	; 0xbe
 800e29c:	492a      	ldr	r1, [pc, #168]	; (800e348 <sys_timeout_abs+0xd0>)
 800e29e:	482b      	ldr	r0, [pc, #172]	; (800e34c <sys_timeout_abs+0xd4>)
 800e2a0:	f002 ff24 	bl	80110ec <iprintf>
    return;
 800e2a4:	e04a      	b.n	800e33c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	68ba      	ldr	r2, [r7, #8]
 800e2b0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	687a      	ldr	r2, [r7, #4]
 800e2b6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	68fa      	ldr	r2, [r7, #12]
 800e2bc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e2be:	4b24      	ldr	r3, [pc, #144]	; (800e350 <sys_timeout_abs+0xd8>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d103      	bne.n	800e2ce <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800e2c6:	4a22      	ldr	r2, [pc, #136]	; (800e350 <sys_timeout_abs+0xd8>)
 800e2c8:	693b      	ldr	r3, [r7, #16]
 800e2ca:	6013      	str	r3, [r2, #0]
    return;
 800e2cc:	e037      	b.n	800e33e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	685a      	ldr	r2, [r3, #4]
 800e2d2:	4b1f      	ldr	r3, [pc, #124]	; (800e350 <sys_timeout_abs+0xd8>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	685b      	ldr	r3, [r3, #4]
 800e2d8:	1ad3      	subs	r3, r2, r3
 800e2da:	0fdb      	lsrs	r3, r3, #31
 800e2dc:	f003 0301 	and.w	r3, r3, #1
 800e2e0:	b2db      	uxtb	r3, r3
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d007      	beq.n	800e2f6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e2e6:	4b1a      	ldr	r3, [pc, #104]	; (800e350 <sys_timeout_abs+0xd8>)
 800e2e8:	681a      	ldr	r2, [r3, #0]
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e2ee:	4a18      	ldr	r2, [pc, #96]	; (800e350 <sys_timeout_abs+0xd8>)
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	6013      	str	r3, [r2, #0]
 800e2f4:	e023      	b.n	800e33e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e2f6:	4b16      	ldr	r3, [pc, #88]	; (800e350 <sys_timeout_abs+0xd8>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	617b      	str	r3, [r7, #20]
 800e2fc:	e01a      	b.n	800e334 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d00b      	beq.n	800e31e <sys_timeout_abs+0xa6>
 800e306:	693b      	ldr	r3, [r7, #16]
 800e308:	685a      	ldr	r2, [r3, #4]
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	685b      	ldr	r3, [r3, #4]
 800e310:	1ad3      	subs	r3, r2, r3
 800e312:	0fdb      	lsrs	r3, r3, #31
 800e314:	f003 0301 	and.w	r3, r3, #1
 800e318:	b2db      	uxtb	r3, r3
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d007      	beq.n	800e32e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	681a      	ldr	r2, [r3, #0]
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e326:	697b      	ldr	r3, [r7, #20]
 800e328:	693a      	ldr	r2, [r7, #16]
 800e32a:	601a      	str	r2, [r3, #0]
        break;
 800e32c:	e007      	b.n	800e33e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e32e:	697b      	ldr	r3, [r7, #20]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	617b      	str	r3, [r7, #20]
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d1e1      	bne.n	800e2fe <sys_timeout_abs+0x86>
 800e33a:	e000      	b.n	800e33e <sys_timeout_abs+0xc6>
    return;
 800e33c:	bf00      	nop
      }
    }
  }
}
 800e33e:	3718      	adds	r7, #24
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}
 800e344:	080141f8 	.word	0x080141f8
 800e348:	0801422c 	.word	0x0801422c
 800e34c:	0801426c 	.word	0x0801426c
 800e350:	20008878 	.word	0x20008878

0800e354 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b086      	sub	sp, #24
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	685b      	ldr	r3, [r3, #4]
 800e364:	4798      	blx	r3

  now = sys_now();
 800e366:	f7f7 ff1b 	bl	80061a0 <sys_now>
 800e36a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	681a      	ldr	r2, [r3, #0]
 800e370:	4b0f      	ldr	r3, [pc, #60]	; (800e3b0 <lwip_cyclic_timer+0x5c>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	4413      	add	r3, r2
 800e376:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e378:	68fa      	ldr	r2, [r7, #12]
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	1ad3      	subs	r3, r2, r3
 800e37e:	0fdb      	lsrs	r3, r3, #31
 800e380:	f003 0301 	and.w	r3, r3, #1
 800e384:	b2db      	uxtb	r3, r3
 800e386:	2b00      	cmp	r3, #0
 800e388:	d009      	beq.n	800e39e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e38a:	697b      	ldr	r3, [r7, #20]
 800e38c:	681a      	ldr	r2, [r3, #0]
 800e38e:	693b      	ldr	r3, [r7, #16]
 800e390:	4413      	add	r3, r2
 800e392:	687a      	ldr	r2, [r7, #4]
 800e394:	4907      	ldr	r1, [pc, #28]	; (800e3b4 <lwip_cyclic_timer+0x60>)
 800e396:	4618      	mov	r0, r3
 800e398:	f7ff ff6e 	bl	800e278 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e39c:	e004      	b.n	800e3a8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e39e:	687a      	ldr	r2, [r7, #4]
 800e3a0:	4904      	ldr	r1, [pc, #16]	; (800e3b4 <lwip_cyclic_timer+0x60>)
 800e3a2:	68f8      	ldr	r0, [r7, #12]
 800e3a4:	f7ff ff68 	bl	800e278 <sys_timeout_abs>
}
 800e3a8:	bf00      	nop
 800e3aa:	3718      	adds	r7, #24
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}
 800e3b0:	2000887c 	.word	0x2000887c
 800e3b4:	0800e355 	.word	0x0800e355

0800e3b8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b082      	sub	sp, #8
 800e3bc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e3be:	2301      	movs	r3, #1
 800e3c0:	607b      	str	r3, [r7, #4]
 800e3c2:	e00e      	b.n	800e3e2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e3c4:	4a0b      	ldr	r2, [pc, #44]	; (800e3f4 <sys_timeouts_init+0x3c>)
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	00db      	lsls	r3, r3, #3
 800e3d0:	4a08      	ldr	r2, [pc, #32]	; (800e3f4 <sys_timeouts_init+0x3c>)
 800e3d2:	4413      	add	r3, r2
 800e3d4:	461a      	mov	r2, r3
 800e3d6:	4908      	ldr	r1, [pc, #32]	; (800e3f8 <sys_timeouts_init+0x40>)
 800e3d8:	f000 f810 	bl	800e3fc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	3301      	adds	r3, #1
 800e3e0:	607b      	str	r3, [r7, #4]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2b02      	cmp	r3, #2
 800e3e6:	d9ed      	bls.n	800e3c4 <sys_timeouts_init+0xc>
  }
}
 800e3e8:	bf00      	nop
 800e3ea:	bf00      	nop
 800e3ec:	3708      	adds	r7, #8
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}
 800e3f2:	bf00      	nop
 800e3f4:	08014de4 	.word	0x08014de4
 800e3f8:	0800e355 	.word	0x0800e355

0800e3fc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b086      	sub	sp, #24
 800e400:	af00      	add	r7, sp, #0
 800e402:	60f8      	str	r0, [r7, #12]
 800e404:	60b9      	str	r1, [r7, #8]
 800e406:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e40e:	d306      	bcc.n	800e41e <sys_timeout+0x22>
 800e410:	4b0a      	ldr	r3, [pc, #40]	; (800e43c <sys_timeout+0x40>)
 800e412:	f240 1229 	movw	r2, #297	; 0x129
 800e416:	490a      	ldr	r1, [pc, #40]	; (800e440 <sys_timeout+0x44>)
 800e418:	480a      	ldr	r0, [pc, #40]	; (800e444 <sys_timeout+0x48>)
 800e41a:	f002 fe67 	bl	80110ec <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e41e:	f7f7 febf 	bl	80061a0 <sys_now>
 800e422:	4602      	mov	r2, r0
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	4413      	add	r3, r2
 800e428:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e42a:	687a      	ldr	r2, [r7, #4]
 800e42c:	68b9      	ldr	r1, [r7, #8]
 800e42e:	6978      	ldr	r0, [r7, #20]
 800e430:	f7ff ff22 	bl	800e278 <sys_timeout_abs>
#endif
}
 800e434:	bf00      	nop
 800e436:	3718      	adds	r7, #24
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}
 800e43c:	080141f8 	.word	0x080141f8
 800e440:	08014294 	.word	0x08014294
 800e444:	0801426c 	.word	0x0801426c

0800e448 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b084      	sub	sp, #16
 800e44c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e44e:	f7f7 fea7 	bl	80061a0 <sys_now>
 800e452:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800e454:	4b1a      	ldr	r3, [pc, #104]	; (800e4c0 <sys_check_timeouts+0x78>)
 800e456:	781b      	ldrb	r3, [r3, #0]
 800e458:	b2db      	uxtb	r3, r3
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d001      	beq.n	800e462 <sys_check_timeouts+0x1a>
 800e45e:	f7f9 f8cf 	bl	8007600 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800e462:	4b18      	ldr	r3, [pc, #96]	; (800e4c4 <sys_check_timeouts+0x7c>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d022      	beq.n	800e4b4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	685b      	ldr	r3, [r3, #4]
 800e472:	68fa      	ldr	r2, [r7, #12]
 800e474:	1ad3      	subs	r3, r2, r3
 800e476:	0fdb      	lsrs	r3, r3, #31
 800e478:	f003 0301 	and.w	r3, r3, #1
 800e47c:	b2db      	uxtb	r3, r3
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d11a      	bne.n	800e4b8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	4a0f      	ldr	r2, [pc, #60]	; (800e4c4 <sys_check_timeouts+0x7c>)
 800e488:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	689b      	ldr	r3, [r3, #8]
 800e48e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	68db      	ldr	r3, [r3, #12]
 800e494:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	685b      	ldr	r3, [r3, #4]
 800e49a:	4a0b      	ldr	r2, [pc, #44]	; (800e4c8 <sys_check_timeouts+0x80>)
 800e49c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e49e:	68b9      	ldr	r1, [r7, #8]
 800e4a0:	2006      	movs	r0, #6
 800e4a2:	f7f8 fd71 	bl	8006f88 <memp_free>
    if (handler != NULL) {
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d0d3      	beq.n	800e454 <sys_check_timeouts+0xc>
      handler(arg);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6838      	ldr	r0, [r7, #0]
 800e4b0:	4798      	blx	r3
  do {
 800e4b2:	e7cf      	b.n	800e454 <sys_check_timeouts+0xc>
      return;
 800e4b4:	bf00      	nop
 800e4b6:	e000      	b.n	800e4ba <sys_check_timeouts+0x72>
      return;
 800e4b8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e4ba:	3710      	adds	r7, #16
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}
 800e4c0:	20008825 	.word	0x20008825
 800e4c4:	20008878 	.word	0x20008878
 800e4c8:	2000887c 	.word	0x2000887c

0800e4cc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e4d0:	f002 fd0c 	bl	8010eec <rand>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	b29b      	uxth	r3, r3
 800e4d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e4dc:	b29b      	uxth	r3, r3
 800e4de:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e4e2:	b29a      	uxth	r2, r3
 800e4e4:	4b01      	ldr	r3, [pc, #4]	; (800e4ec <udp_init+0x20>)
 800e4e6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e4e8:	bf00      	nop
 800e4ea:	bd80      	pop	{r7, pc}
 800e4ec:	20000028 	.word	0x20000028

0800e4f0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b084      	sub	sp, #16
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	60f8      	str	r0, [r7, #12]
 800e4f8:	60b9      	str	r1, [r7, #8]
 800e4fa:	4613      	mov	r3, r2
 800e4fc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d105      	bne.n	800e510 <udp_input_local_match+0x20>
 800e504:	4b27      	ldr	r3, [pc, #156]	; (800e5a4 <udp_input_local_match+0xb4>)
 800e506:	2287      	movs	r2, #135	; 0x87
 800e508:	4927      	ldr	r1, [pc, #156]	; (800e5a8 <udp_input_local_match+0xb8>)
 800e50a:	4828      	ldr	r0, [pc, #160]	; (800e5ac <udp_input_local_match+0xbc>)
 800e50c:	f002 fdee 	bl	80110ec <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d105      	bne.n	800e522 <udp_input_local_match+0x32>
 800e516:	4b23      	ldr	r3, [pc, #140]	; (800e5a4 <udp_input_local_match+0xb4>)
 800e518:	2288      	movs	r2, #136	; 0x88
 800e51a:	4925      	ldr	r1, [pc, #148]	; (800e5b0 <udp_input_local_match+0xc0>)
 800e51c:	4823      	ldr	r0, [pc, #140]	; (800e5ac <udp_input_local_match+0xbc>)
 800e51e:	f002 fde5 	bl	80110ec <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	7a1b      	ldrb	r3, [r3, #8]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d00b      	beq.n	800e542 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	7a1a      	ldrb	r2, [r3, #8]
 800e52e:	4b21      	ldr	r3, [pc, #132]	; (800e5b4 <udp_input_local_match+0xc4>)
 800e530:	685b      	ldr	r3, [r3, #4]
 800e532:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e536:	3301      	adds	r3, #1
 800e538:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e53a:	429a      	cmp	r2, r3
 800e53c:	d001      	beq.n	800e542 <udp_input_local_match+0x52>
    return 0;
 800e53e:	2300      	movs	r3, #0
 800e540:	e02b      	b.n	800e59a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e542:	79fb      	ldrb	r3, [r7, #7]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d018      	beq.n	800e57a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d013      	beq.n	800e576 <udp_input_local_match+0x86>
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d00f      	beq.n	800e576 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e556:	4b17      	ldr	r3, [pc, #92]	; (800e5b4 <udp_input_local_match+0xc4>)
 800e558:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e55a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e55e:	d00a      	beq.n	800e576 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	681a      	ldr	r2, [r3, #0]
 800e564:	4b13      	ldr	r3, [pc, #76]	; (800e5b4 <udp_input_local_match+0xc4>)
 800e566:	695b      	ldr	r3, [r3, #20]
 800e568:	405a      	eors	r2, r3
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	3308      	adds	r3, #8
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e572:	2b00      	cmp	r3, #0
 800e574:	d110      	bne.n	800e598 <udp_input_local_match+0xa8>
          return 1;
 800e576:	2301      	movs	r3, #1
 800e578:	e00f      	b.n	800e59a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d009      	beq.n	800e594 <udp_input_local_match+0xa4>
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d005      	beq.n	800e594 <udp_input_local_match+0xa4>
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681a      	ldr	r2, [r3, #0]
 800e58c:	4b09      	ldr	r3, [pc, #36]	; (800e5b4 <udp_input_local_match+0xc4>)
 800e58e:	695b      	ldr	r3, [r3, #20]
 800e590:	429a      	cmp	r2, r3
 800e592:	d101      	bne.n	800e598 <udp_input_local_match+0xa8>
        return 1;
 800e594:	2301      	movs	r3, #1
 800e596:	e000      	b.n	800e59a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e598:	2300      	movs	r3, #0
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3710      	adds	r7, #16
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}
 800e5a2:	bf00      	nop
 800e5a4:	080142e0 	.word	0x080142e0
 800e5a8:	08014310 	.word	0x08014310
 800e5ac:	08014334 	.word	0x08014334
 800e5b0:	0801435c 	.word	0x0801435c
 800e5b4:	200052b8 	.word	0x200052b8

0800e5b8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e5b8:	b590      	push	{r4, r7, lr}
 800e5ba:	b08d      	sub	sp, #52	; 0x34
 800e5bc:	af02      	add	r7, sp, #8
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d105      	bne.n	800e5d8 <udp_input+0x20>
 800e5cc:	4b7c      	ldr	r3, [pc, #496]	; (800e7c0 <udp_input+0x208>)
 800e5ce:	22cf      	movs	r2, #207	; 0xcf
 800e5d0:	497c      	ldr	r1, [pc, #496]	; (800e7c4 <udp_input+0x20c>)
 800e5d2:	487d      	ldr	r0, [pc, #500]	; (800e7c8 <udp_input+0x210>)
 800e5d4:	f002 fd8a 	bl	80110ec <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d105      	bne.n	800e5ea <udp_input+0x32>
 800e5de:	4b78      	ldr	r3, [pc, #480]	; (800e7c0 <udp_input+0x208>)
 800e5e0:	22d0      	movs	r2, #208	; 0xd0
 800e5e2:	497a      	ldr	r1, [pc, #488]	; (800e7cc <udp_input+0x214>)
 800e5e4:	4878      	ldr	r0, [pc, #480]	; (800e7c8 <udp_input+0x210>)
 800e5e6:	f002 fd81 	bl	80110ec <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	895b      	ldrh	r3, [r3, #10]
 800e5ee:	2b07      	cmp	r3, #7
 800e5f0:	d803      	bhi.n	800e5fa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f7f9 fb3e 	bl	8007c74 <pbuf_free>
    goto end;
 800e5f8:	e0de      	b.n	800e7b8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	685b      	ldr	r3, [r3, #4]
 800e5fe:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e600:	4b73      	ldr	r3, [pc, #460]	; (800e7d0 <udp_input+0x218>)
 800e602:	695b      	ldr	r3, [r3, #20]
 800e604:	4a72      	ldr	r2, [pc, #456]	; (800e7d0 <udp_input+0x218>)
 800e606:	6812      	ldr	r2, [r2, #0]
 800e608:	4611      	mov	r1, r2
 800e60a:	4618      	mov	r0, r3
 800e60c:	f001 fc88 	bl	800ff20 <ip4_addr_isbroadcast_u32>
 800e610:	4603      	mov	r3, r0
 800e612:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e614:	697b      	ldr	r3, [r7, #20]
 800e616:	881b      	ldrh	r3, [r3, #0]
 800e618:	b29b      	uxth	r3, r3
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7f7 ffcc 	bl	80065b8 <lwip_htons>
 800e620:	4603      	mov	r3, r0
 800e622:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e624:	697b      	ldr	r3, [r7, #20]
 800e626:	885b      	ldrh	r3, [r3, #2]
 800e628:	b29b      	uxth	r3, r3
 800e62a:	4618      	mov	r0, r3
 800e62c:	f7f7 ffc4 	bl	80065b8 <lwip_htons>
 800e630:	4603      	mov	r3, r0
 800e632:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e634:	2300      	movs	r3, #0
 800e636:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e638:	2300      	movs	r3, #0
 800e63a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e63c:	2300      	movs	r3, #0
 800e63e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e640:	4b64      	ldr	r3, [pc, #400]	; (800e7d4 <udp_input+0x21c>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	627b      	str	r3, [r7, #36]	; 0x24
 800e646:	e054      	b.n	800e6f2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64a:	8a5b      	ldrh	r3, [r3, #18]
 800e64c:	89fa      	ldrh	r2, [r7, #14]
 800e64e:	429a      	cmp	r2, r3
 800e650:	d14a      	bne.n	800e6e8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e652:	7cfb      	ldrb	r3, [r7, #19]
 800e654:	461a      	mov	r2, r3
 800e656:	6839      	ldr	r1, [r7, #0]
 800e658:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e65a:	f7ff ff49 	bl	800e4f0 <udp_input_local_match>
 800e65e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e660:	2b00      	cmp	r3, #0
 800e662:	d041      	beq.n	800e6e8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e666:	7c1b      	ldrb	r3, [r3, #16]
 800e668:	f003 0304 	and.w	r3, r3, #4
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d11d      	bne.n	800e6ac <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e670:	69fb      	ldr	r3, [r7, #28]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d102      	bne.n	800e67c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800e676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e678:	61fb      	str	r3, [r7, #28]
 800e67a:	e017      	b.n	800e6ac <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e67c:	7cfb      	ldrb	r3, [r7, #19]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d014      	beq.n	800e6ac <udp_input+0xf4>
 800e682:	4b53      	ldr	r3, [pc, #332]	; (800e7d0 <udp_input+0x218>)
 800e684:	695b      	ldr	r3, [r3, #20]
 800e686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e68a:	d10f      	bne.n	800e6ac <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e68c:	69fb      	ldr	r3, [r7, #28]
 800e68e:	681a      	ldr	r2, [r3, #0]
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	3304      	adds	r3, #4
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	429a      	cmp	r2, r3
 800e698:	d008      	beq.n	800e6ac <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e69c:	681a      	ldr	r2, [r3, #0]
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	3304      	adds	r3, #4
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	429a      	cmp	r2, r3
 800e6a6:	d101      	bne.n	800e6ac <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800e6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6aa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800e6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ae:	8a9b      	ldrh	r3, [r3, #20]
 800e6b0:	8a3a      	ldrh	r2, [r7, #16]
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d118      	bne.n	800e6e8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d005      	beq.n	800e6ca <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800e6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c0:	685a      	ldr	r2, [r3, #4]
 800e6c2:	4b43      	ldr	r3, [pc, #268]	; (800e7d0 <udp_input+0x218>)
 800e6c4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	d10e      	bne.n	800e6e8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800e6ca:	6a3b      	ldr	r3, [r7, #32]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d014      	beq.n	800e6fa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800e6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d2:	68da      	ldr	r2, [r3, #12]
 800e6d4:	6a3b      	ldr	r3, [r7, #32]
 800e6d6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800e6d8:	4b3e      	ldr	r3, [pc, #248]	; (800e7d4 <udp_input+0x21c>)
 800e6da:	681a      	ldr	r2, [r3, #0]
 800e6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6de:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800e6e0:	4a3c      	ldr	r2, [pc, #240]	; (800e7d4 <udp_input+0x21c>)
 800e6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800e6e6:	e008      	b.n	800e6fa <udp_input+0x142>
      }
    }

    prev = pcb;
 800e6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ea:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ee:	68db      	ldr	r3, [r3, #12]
 800e6f0:	627b      	str	r3, [r7, #36]	; 0x24
 800e6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d1a7      	bne.n	800e648 <udp_input+0x90>
 800e6f8:	e000      	b.n	800e6fc <udp_input+0x144>
        break;
 800e6fa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800e6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d101      	bne.n	800e706 <udp_input+0x14e>
    pcb = uncon_pcb;
 800e702:	69fb      	ldr	r3, [r7, #28]
 800e704:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800e706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d002      	beq.n	800e712 <udp_input+0x15a>
    for_us = 1;
 800e70c:	2301      	movs	r3, #1
 800e70e:	76fb      	strb	r3, [r7, #27]
 800e710:	e00a      	b.n	800e728 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	3304      	adds	r3, #4
 800e716:	681a      	ldr	r2, [r3, #0]
 800e718:	4b2d      	ldr	r3, [pc, #180]	; (800e7d0 <udp_input+0x218>)
 800e71a:	695b      	ldr	r3, [r3, #20]
 800e71c:	429a      	cmp	r2, r3
 800e71e:	bf0c      	ite	eq
 800e720:	2301      	moveq	r3, #1
 800e722:	2300      	movne	r3, #0
 800e724:	b2db      	uxtb	r3, r3
 800e726:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800e728:	7efb      	ldrb	r3, [r7, #27]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d041      	beq.n	800e7b2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e72e:	2108      	movs	r1, #8
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	f7f9 fa19 	bl	8007b68 <pbuf_remove_header>
 800e736:	4603      	mov	r3, r0
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d00a      	beq.n	800e752 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e73c:	4b20      	ldr	r3, [pc, #128]	; (800e7c0 <udp_input+0x208>)
 800e73e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800e742:	4925      	ldr	r1, [pc, #148]	; (800e7d8 <udp_input+0x220>)
 800e744:	4820      	ldr	r0, [pc, #128]	; (800e7c8 <udp_input+0x210>)
 800e746:	f002 fcd1 	bl	80110ec <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f7f9 fa92 	bl	8007c74 <pbuf_free>
      goto end;
 800e750:	e032      	b.n	800e7b8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800e752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e754:	2b00      	cmp	r3, #0
 800e756:	d012      	beq.n	800e77e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800e758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e75a:	699b      	ldr	r3, [r3, #24]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d00a      	beq.n	800e776 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e762:	699c      	ldr	r4, [r3, #24]
 800e764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e766:	69d8      	ldr	r0, [r3, #28]
 800e768:	8a3b      	ldrh	r3, [r7, #16]
 800e76a:	9300      	str	r3, [sp, #0]
 800e76c:	4b1b      	ldr	r3, [pc, #108]	; (800e7dc <udp_input+0x224>)
 800e76e:	687a      	ldr	r2, [r7, #4]
 800e770:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e772:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800e774:	e021      	b.n	800e7ba <udp_input+0x202>
        pbuf_free(p);
 800e776:	6878      	ldr	r0, [r7, #4]
 800e778:	f7f9 fa7c 	bl	8007c74 <pbuf_free>
        goto end;
 800e77c:	e01c      	b.n	800e7b8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e77e:	7cfb      	ldrb	r3, [r7, #19]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d112      	bne.n	800e7aa <udp_input+0x1f2>
 800e784:	4b12      	ldr	r3, [pc, #72]	; (800e7d0 <udp_input+0x218>)
 800e786:	695b      	ldr	r3, [r3, #20]
 800e788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e78c:	2be0      	cmp	r3, #224	; 0xe0
 800e78e:	d00c      	beq.n	800e7aa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e790:	4b0f      	ldr	r3, [pc, #60]	; (800e7d0 <udp_input+0x218>)
 800e792:	899b      	ldrh	r3, [r3, #12]
 800e794:	3308      	adds	r3, #8
 800e796:	b29b      	uxth	r3, r3
 800e798:	b21b      	sxth	r3, r3
 800e79a:	4619      	mov	r1, r3
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f7f9 fa56 	bl	8007c4e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e7a2:	2103      	movs	r1, #3
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f001 f89b 	bl	800f8e0 <icmp_dest_unreach>
      pbuf_free(p);
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f7f9 fa62 	bl	8007c74 <pbuf_free>
  return;
 800e7b0:	e003      	b.n	800e7ba <udp_input+0x202>
    pbuf_free(p);
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f7f9 fa5e 	bl	8007c74 <pbuf_free>
  return;
 800e7b8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e7ba:	372c      	adds	r7, #44	; 0x2c
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd90      	pop	{r4, r7, pc}
 800e7c0:	080142e0 	.word	0x080142e0
 800e7c4:	08014384 	.word	0x08014384
 800e7c8:	08014334 	.word	0x08014334
 800e7cc:	0801439c 	.word	0x0801439c
 800e7d0:	200052b8 	.word	0x200052b8
 800e7d4:	20008884 	.word	0x20008884
 800e7d8:	080143b8 	.word	0x080143b8
 800e7dc:	200052c8 	.word	0x200052c8

0800e7e0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	b085      	sub	sp, #20
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d01e      	beq.n	800e82e <udp_netif_ip_addr_changed+0x4e>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d01a      	beq.n	800e82e <udp_netif_ip_addr_changed+0x4e>
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d017      	beq.n	800e82e <udp_netif_ip_addr_changed+0x4e>
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d013      	beq.n	800e82e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e806:	4b0d      	ldr	r3, [pc, #52]	; (800e83c <udp_netif_ip_addr_changed+0x5c>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	60fb      	str	r3, [r7, #12]
 800e80c:	e00c      	b.n	800e828 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	681a      	ldr	r2, [r3, #0]
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	429a      	cmp	r2, r3
 800e818:	d103      	bne.n	800e822 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	681a      	ldr	r2, [r3, #0]
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	68db      	ldr	r3, [r3, #12]
 800e826:	60fb      	str	r3, [r7, #12]
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d1ef      	bne.n	800e80e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e82e:	bf00      	nop
 800e830:	3714      	adds	r7, #20
 800e832:	46bd      	mov	sp, r7
 800e834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e838:	4770      	bx	lr
 800e83a:	bf00      	nop
 800e83c:	20008884 	.word	0x20008884

0800e840 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b082      	sub	sp, #8
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e848:	4915      	ldr	r1, [pc, #84]	; (800e8a0 <etharp_free_entry+0x60>)
 800e84a:	687a      	ldr	r2, [r7, #4]
 800e84c:	4613      	mov	r3, r2
 800e84e:	005b      	lsls	r3, r3, #1
 800e850:	4413      	add	r3, r2
 800e852:	00db      	lsls	r3, r3, #3
 800e854:	440b      	add	r3, r1
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d013      	beq.n	800e884 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e85c:	4910      	ldr	r1, [pc, #64]	; (800e8a0 <etharp_free_entry+0x60>)
 800e85e:	687a      	ldr	r2, [r7, #4]
 800e860:	4613      	mov	r3, r2
 800e862:	005b      	lsls	r3, r3, #1
 800e864:	4413      	add	r3, r2
 800e866:	00db      	lsls	r3, r3, #3
 800e868:	440b      	add	r3, r1
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	4618      	mov	r0, r3
 800e86e:	f7f9 fa01 	bl	8007c74 <pbuf_free>
    arp_table[i].q = NULL;
 800e872:	490b      	ldr	r1, [pc, #44]	; (800e8a0 <etharp_free_entry+0x60>)
 800e874:	687a      	ldr	r2, [r7, #4]
 800e876:	4613      	mov	r3, r2
 800e878:	005b      	lsls	r3, r3, #1
 800e87a:	4413      	add	r3, r2
 800e87c:	00db      	lsls	r3, r3, #3
 800e87e:	440b      	add	r3, r1
 800e880:	2200      	movs	r2, #0
 800e882:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e884:	4906      	ldr	r1, [pc, #24]	; (800e8a0 <etharp_free_entry+0x60>)
 800e886:	687a      	ldr	r2, [r7, #4]
 800e888:	4613      	mov	r3, r2
 800e88a:	005b      	lsls	r3, r3, #1
 800e88c:	4413      	add	r3, r2
 800e88e:	00db      	lsls	r3, r3, #3
 800e890:	440b      	add	r3, r1
 800e892:	3314      	adds	r3, #20
 800e894:	2200      	movs	r2, #0
 800e896:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e898:	bf00      	nop
 800e89a:	3708      	adds	r7, #8
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}
 800e8a0:	20008888 	.word	0x20008888

0800e8a4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b082      	sub	sp, #8
 800e8a8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	607b      	str	r3, [r7, #4]
 800e8ae:	e096      	b.n	800e9de <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e8b0:	494f      	ldr	r1, [pc, #316]	; (800e9f0 <etharp_tmr+0x14c>)
 800e8b2:	687a      	ldr	r2, [r7, #4]
 800e8b4:	4613      	mov	r3, r2
 800e8b6:	005b      	lsls	r3, r3, #1
 800e8b8:	4413      	add	r3, r2
 800e8ba:	00db      	lsls	r3, r3, #3
 800e8bc:	440b      	add	r3, r1
 800e8be:	3314      	adds	r3, #20
 800e8c0:	781b      	ldrb	r3, [r3, #0]
 800e8c2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e8c4:	78fb      	ldrb	r3, [r7, #3]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	f000 8086 	beq.w	800e9d8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800e8cc:	4948      	ldr	r1, [pc, #288]	; (800e9f0 <etharp_tmr+0x14c>)
 800e8ce:	687a      	ldr	r2, [r7, #4]
 800e8d0:	4613      	mov	r3, r2
 800e8d2:	005b      	lsls	r3, r3, #1
 800e8d4:	4413      	add	r3, r2
 800e8d6:	00db      	lsls	r3, r3, #3
 800e8d8:	440b      	add	r3, r1
 800e8da:	3312      	adds	r3, #18
 800e8dc:	881b      	ldrh	r3, [r3, #0]
 800e8de:	3301      	adds	r3, #1
 800e8e0:	b298      	uxth	r0, r3
 800e8e2:	4943      	ldr	r1, [pc, #268]	; (800e9f0 <etharp_tmr+0x14c>)
 800e8e4:	687a      	ldr	r2, [r7, #4]
 800e8e6:	4613      	mov	r3, r2
 800e8e8:	005b      	lsls	r3, r3, #1
 800e8ea:	4413      	add	r3, r2
 800e8ec:	00db      	lsls	r3, r3, #3
 800e8ee:	440b      	add	r3, r1
 800e8f0:	3312      	adds	r3, #18
 800e8f2:	4602      	mov	r2, r0
 800e8f4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e8f6:	493e      	ldr	r1, [pc, #248]	; (800e9f0 <etharp_tmr+0x14c>)
 800e8f8:	687a      	ldr	r2, [r7, #4]
 800e8fa:	4613      	mov	r3, r2
 800e8fc:	005b      	lsls	r3, r3, #1
 800e8fe:	4413      	add	r3, r2
 800e900:	00db      	lsls	r3, r3, #3
 800e902:	440b      	add	r3, r1
 800e904:	3312      	adds	r3, #18
 800e906:	881b      	ldrh	r3, [r3, #0]
 800e908:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e90c:	d215      	bcs.n	800e93a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e90e:	4938      	ldr	r1, [pc, #224]	; (800e9f0 <etharp_tmr+0x14c>)
 800e910:	687a      	ldr	r2, [r7, #4]
 800e912:	4613      	mov	r3, r2
 800e914:	005b      	lsls	r3, r3, #1
 800e916:	4413      	add	r3, r2
 800e918:	00db      	lsls	r3, r3, #3
 800e91a:	440b      	add	r3, r1
 800e91c:	3314      	adds	r3, #20
 800e91e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e920:	2b01      	cmp	r3, #1
 800e922:	d10e      	bne.n	800e942 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e924:	4932      	ldr	r1, [pc, #200]	; (800e9f0 <etharp_tmr+0x14c>)
 800e926:	687a      	ldr	r2, [r7, #4]
 800e928:	4613      	mov	r3, r2
 800e92a:	005b      	lsls	r3, r3, #1
 800e92c:	4413      	add	r3, r2
 800e92e:	00db      	lsls	r3, r3, #3
 800e930:	440b      	add	r3, r1
 800e932:	3312      	adds	r3, #18
 800e934:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e936:	2b04      	cmp	r3, #4
 800e938:	d903      	bls.n	800e942 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f7ff ff80 	bl	800e840 <etharp_free_entry>
 800e940:	e04a      	b.n	800e9d8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e942:	492b      	ldr	r1, [pc, #172]	; (800e9f0 <etharp_tmr+0x14c>)
 800e944:	687a      	ldr	r2, [r7, #4]
 800e946:	4613      	mov	r3, r2
 800e948:	005b      	lsls	r3, r3, #1
 800e94a:	4413      	add	r3, r2
 800e94c:	00db      	lsls	r3, r3, #3
 800e94e:	440b      	add	r3, r1
 800e950:	3314      	adds	r3, #20
 800e952:	781b      	ldrb	r3, [r3, #0]
 800e954:	2b03      	cmp	r3, #3
 800e956:	d10a      	bne.n	800e96e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e958:	4925      	ldr	r1, [pc, #148]	; (800e9f0 <etharp_tmr+0x14c>)
 800e95a:	687a      	ldr	r2, [r7, #4]
 800e95c:	4613      	mov	r3, r2
 800e95e:	005b      	lsls	r3, r3, #1
 800e960:	4413      	add	r3, r2
 800e962:	00db      	lsls	r3, r3, #3
 800e964:	440b      	add	r3, r1
 800e966:	3314      	adds	r3, #20
 800e968:	2204      	movs	r2, #4
 800e96a:	701a      	strb	r2, [r3, #0]
 800e96c:	e034      	b.n	800e9d8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e96e:	4920      	ldr	r1, [pc, #128]	; (800e9f0 <etharp_tmr+0x14c>)
 800e970:	687a      	ldr	r2, [r7, #4]
 800e972:	4613      	mov	r3, r2
 800e974:	005b      	lsls	r3, r3, #1
 800e976:	4413      	add	r3, r2
 800e978:	00db      	lsls	r3, r3, #3
 800e97a:	440b      	add	r3, r1
 800e97c:	3314      	adds	r3, #20
 800e97e:	781b      	ldrb	r3, [r3, #0]
 800e980:	2b04      	cmp	r3, #4
 800e982:	d10a      	bne.n	800e99a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e984:	491a      	ldr	r1, [pc, #104]	; (800e9f0 <etharp_tmr+0x14c>)
 800e986:	687a      	ldr	r2, [r7, #4]
 800e988:	4613      	mov	r3, r2
 800e98a:	005b      	lsls	r3, r3, #1
 800e98c:	4413      	add	r3, r2
 800e98e:	00db      	lsls	r3, r3, #3
 800e990:	440b      	add	r3, r1
 800e992:	3314      	adds	r3, #20
 800e994:	2202      	movs	r2, #2
 800e996:	701a      	strb	r2, [r3, #0]
 800e998:	e01e      	b.n	800e9d8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e99a:	4915      	ldr	r1, [pc, #84]	; (800e9f0 <etharp_tmr+0x14c>)
 800e99c:	687a      	ldr	r2, [r7, #4]
 800e99e:	4613      	mov	r3, r2
 800e9a0:	005b      	lsls	r3, r3, #1
 800e9a2:	4413      	add	r3, r2
 800e9a4:	00db      	lsls	r3, r3, #3
 800e9a6:	440b      	add	r3, r1
 800e9a8:	3314      	adds	r3, #20
 800e9aa:	781b      	ldrb	r3, [r3, #0]
 800e9ac:	2b01      	cmp	r3, #1
 800e9ae:	d113      	bne.n	800e9d8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e9b0:	490f      	ldr	r1, [pc, #60]	; (800e9f0 <etharp_tmr+0x14c>)
 800e9b2:	687a      	ldr	r2, [r7, #4]
 800e9b4:	4613      	mov	r3, r2
 800e9b6:	005b      	lsls	r3, r3, #1
 800e9b8:	4413      	add	r3, r2
 800e9ba:	00db      	lsls	r3, r3, #3
 800e9bc:	440b      	add	r3, r1
 800e9be:	3308      	adds	r3, #8
 800e9c0:	6818      	ldr	r0, [r3, #0]
 800e9c2:	687a      	ldr	r2, [r7, #4]
 800e9c4:	4613      	mov	r3, r2
 800e9c6:	005b      	lsls	r3, r3, #1
 800e9c8:	4413      	add	r3, r2
 800e9ca:	00db      	lsls	r3, r3, #3
 800e9cc:	4a08      	ldr	r2, [pc, #32]	; (800e9f0 <etharp_tmr+0x14c>)
 800e9ce:	4413      	add	r3, r2
 800e9d0:	3304      	adds	r3, #4
 800e9d2:	4619      	mov	r1, r3
 800e9d4:	f000 fe6e 	bl	800f6b4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	3301      	adds	r3, #1
 800e9dc:	607b      	str	r3, [r7, #4]
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2b09      	cmp	r3, #9
 800e9e2:	f77f af65 	ble.w	800e8b0 <etharp_tmr+0xc>
      }
    }
  }
}
 800e9e6:	bf00      	nop
 800e9e8:	bf00      	nop
 800e9ea:	3708      	adds	r7, #8
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bd80      	pop	{r7, pc}
 800e9f0:	20008888 	.word	0x20008888

0800e9f4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b08a      	sub	sp, #40	; 0x28
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	60f8      	str	r0, [r7, #12]
 800e9fc:	460b      	mov	r3, r1
 800e9fe:	607a      	str	r2, [r7, #4]
 800ea00:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ea02:	230a      	movs	r3, #10
 800ea04:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ea06:	230a      	movs	r3, #10
 800ea08:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800ea0a:	230a      	movs	r3, #10
 800ea0c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800ea12:	230a      	movs	r3, #10
 800ea14:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ea16:	2300      	movs	r3, #0
 800ea18:	83bb      	strh	r3, [r7, #28]
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	837b      	strh	r3, [r7, #26]
 800ea1e:	2300      	movs	r3, #0
 800ea20:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ea22:	2300      	movs	r3, #0
 800ea24:	843b      	strh	r3, [r7, #32]
 800ea26:	e0ae      	b.n	800eb86 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ea28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ea2c:	49a6      	ldr	r1, [pc, #664]	; (800ecc8 <etharp_find_entry+0x2d4>)
 800ea2e:	4613      	mov	r3, r2
 800ea30:	005b      	lsls	r3, r3, #1
 800ea32:	4413      	add	r3, r2
 800ea34:	00db      	lsls	r3, r3, #3
 800ea36:	440b      	add	r3, r1
 800ea38:	3314      	adds	r3, #20
 800ea3a:	781b      	ldrb	r3, [r3, #0]
 800ea3c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ea3e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ea42:	2b0a      	cmp	r3, #10
 800ea44:	d105      	bne.n	800ea52 <etharp_find_entry+0x5e>
 800ea46:	7dfb      	ldrb	r3, [r7, #23]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d102      	bne.n	800ea52 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800ea4c:	8c3b      	ldrh	r3, [r7, #32]
 800ea4e:	847b      	strh	r3, [r7, #34]	; 0x22
 800ea50:	e095      	b.n	800eb7e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ea52:	7dfb      	ldrb	r3, [r7, #23]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	f000 8092 	beq.w	800eb7e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ea5a:	7dfb      	ldrb	r3, [r7, #23]
 800ea5c:	2b01      	cmp	r3, #1
 800ea5e:	d009      	beq.n	800ea74 <etharp_find_entry+0x80>
 800ea60:	7dfb      	ldrb	r3, [r7, #23]
 800ea62:	2b01      	cmp	r3, #1
 800ea64:	d806      	bhi.n	800ea74 <etharp_find_entry+0x80>
 800ea66:	4b99      	ldr	r3, [pc, #612]	; (800eccc <etharp_find_entry+0x2d8>)
 800ea68:	f240 1223 	movw	r2, #291	; 0x123
 800ea6c:	4998      	ldr	r1, [pc, #608]	; (800ecd0 <etharp_find_entry+0x2dc>)
 800ea6e:	4899      	ldr	r0, [pc, #612]	; (800ecd4 <etharp_find_entry+0x2e0>)
 800ea70:	f002 fb3c 	bl	80110ec <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d020      	beq.n	800eabc <etharp_find_entry+0xc8>
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	6819      	ldr	r1, [r3, #0]
 800ea7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ea82:	4891      	ldr	r0, [pc, #580]	; (800ecc8 <etharp_find_entry+0x2d4>)
 800ea84:	4613      	mov	r3, r2
 800ea86:	005b      	lsls	r3, r3, #1
 800ea88:	4413      	add	r3, r2
 800ea8a:	00db      	lsls	r3, r3, #3
 800ea8c:	4403      	add	r3, r0
 800ea8e:	3304      	adds	r3, #4
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	4299      	cmp	r1, r3
 800ea94:	d112      	bne.n	800eabc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d00c      	beq.n	800eab6 <etharp_find_entry+0xc2>
 800ea9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eaa0:	4989      	ldr	r1, [pc, #548]	; (800ecc8 <etharp_find_entry+0x2d4>)
 800eaa2:	4613      	mov	r3, r2
 800eaa4:	005b      	lsls	r3, r3, #1
 800eaa6:	4413      	add	r3, r2
 800eaa8:	00db      	lsls	r3, r3, #3
 800eaaa:	440b      	add	r3, r1
 800eaac:	3308      	adds	r3, #8
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	687a      	ldr	r2, [r7, #4]
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d102      	bne.n	800eabc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800eab6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800eaba:	e100      	b.n	800ecbe <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800eabc:	7dfb      	ldrb	r3, [r7, #23]
 800eabe:	2b01      	cmp	r3, #1
 800eac0:	d140      	bne.n	800eb44 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800eac2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eac6:	4980      	ldr	r1, [pc, #512]	; (800ecc8 <etharp_find_entry+0x2d4>)
 800eac8:	4613      	mov	r3, r2
 800eaca:	005b      	lsls	r3, r3, #1
 800eacc:	4413      	add	r3, r2
 800eace:	00db      	lsls	r3, r3, #3
 800ead0:	440b      	add	r3, r1
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d01a      	beq.n	800eb0e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800ead8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eadc:	497a      	ldr	r1, [pc, #488]	; (800ecc8 <etharp_find_entry+0x2d4>)
 800eade:	4613      	mov	r3, r2
 800eae0:	005b      	lsls	r3, r3, #1
 800eae2:	4413      	add	r3, r2
 800eae4:	00db      	lsls	r3, r3, #3
 800eae6:	440b      	add	r3, r1
 800eae8:	3312      	adds	r3, #18
 800eaea:	881b      	ldrh	r3, [r3, #0]
 800eaec:	8bba      	ldrh	r2, [r7, #28]
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d845      	bhi.n	800eb7e <etharp_find_entry+0x18a>
            old_queue = i;
 800eaf2:	8c3b      	ldrh	r3, [r7, #32]
 800eaf4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800eaf6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eafa:	4973      	ldr	r1, [pc, #460]	; (800ecc8 <etharp_find_entry+0x2d4>)
 800eafc:	4613      	mov	r3, r2
 800eafe:	005b      	lsls	r3, r3, #1
 800eb00:	4413      	add	r3, r2
 800eb02:	00db      	lsls	r3, r3, #3
 800eb04:	440b      	add	r3, r1
 800eb06:	3312      	adds	r3, #18
 800eb08:	881b      	ldrh	r3, [r3, #0]
 800eb0a:	83bb      	strh	r3, [r7, #28]
 800eb0c:	e037      	b.n	800eb7e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800eb0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb12:	496d      	ldr	r1, [pc, #436]	; (800ecc8 <etharp_find_entry+0x2d4>)
 800eb14:	4613      	mov	r3, r2
 800eb16:	005b      	lsls	r3, r3, #1
 800eb18:	4413      	add	r3, r2
 800eb1a:	00db      	lsls	r3, r3, #3
 800eb1c:	440b      	add	r3, r1
 800eb1e:	3312      	adds	r3, #18
 800eb20:	881b      	ldrh	r3, [r3, #0]
 800eb22:	8b7a      	ldrh	r2, [r7, #26]
 800eb24:	429a      	cmp	r2, r3
 800eb26:	d82a      	bhi.n	800eb7e <etharp_find_entry+0x18a>
            old_pending = i;
 800eb28:	8c3b      	ldrh	r3, [r7, #32]
 800eb2a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800eb2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb30:	4965      	ldr	r1, [pc, #404]	; (800ecc8 <etharp_find_entry+0x2d4>)
 800eb32:	4613      	mov	r3, r2
 800eb34:	005b      	lsls	r3, r3, #1
 800eb36:	4413      	add	r3, r2
 800eb38:	00db      	lsls	r3, r3, #3
 800eb3a:	440b      	add	r3, r1
 800eb3c:	3312      	adds	r3, #18
 800eb3e:	881b      	ldrh	r3, [r3, #0]
 800eb40:	837b      	strh	r3, [r7, #26]
 800eb42:	e01c      	b.n	800eb7e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800eb44:	7dfb      	ldrb	r3, [r7, #23]
 800eb46:	2b01      	cmp	r3, #1
 800eb48:	d919      	bls.n	800eb7e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800eb4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb4e:	495e      	ldr	r1, [pc, #376]	; (800ecc8 <etharp_find_entry+0x2d4>)
 800eb50:	4613      	mov	r3, r2
 800eb52:	005b      	lsls	r3, r3, #1
 800eb54:	4413      	add	r3, r2
 800eb56:	00db      	lsls	r3, r3, #3
 800eb58:	440b      	add	r3, r1
 800eb5a:	3312      	adds	r3, #18
 800eb5c:	881b      	ldrh	r3, [r3, #0]
 800eb5e:	8b3a      	ldrh	r2, [r7, #24]
 800eb60:	429a      	cmp	r2, r3
 800eb62:	d80c      	bhi.n	800eb7e <etharp_find_entry+0x18a>
            old_stable = i;
 800eb64:	8c3b      	ldrh	r3, [r7, #32]
 800eb66:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800eb68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eb6c:	4956      	ldr	r1, [pc, #344]	; (800ecc8 <etharp_find_entry+0x2d4>)
 800eb6e:	4613      	mov	r3, r2
 800eb70:	005b      	lsls	r3, r3, #1
 800eb72:	4413      	add	r3, r2
 800eb74:	00db      	lsls	r3, r3, #3
 800eb76:	440b      	add	r3, r1
 800eb78:	3312      	adds	r3, #18
 800eb7a:	881b      	ldrh	r3, [r3, #0]
 800eb7c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800eb7e:	8c3b      	ldrh	r3, [r7, #32]
 800eb80:	3301      	adds	r3, #1
 800eb82:	b29b      	uxth	r3, r3
 800eb84:	843b      	strh	r3, [r7, #32]
 800eb86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800eb8a:	2b09      	cmp	r3, #9
 800eb8c:	f77f af4c 	ble.w	800ea28 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800eb90:	7afb      	ldrb	r3, [r7, #11]
 800eb92:	f003 0302 	and.w	r3, r3, #2
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d108      	bne.n	800ebac <etharp_find_entry+0x1b8>
 800eb9a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800eb9e:	2b0a      	cmp	r3, #10
 800eba0:	d107      	bne.n	800ebb2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800eba2:	7afb      	ldrb	r3, [r7, #11]
 800eba4:	f003 0301 	and.w	r3, r3, #1
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d102      	bne.n	800ebb2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800ebac:	f04f 33ff 	mov.w	r3, #4294967295
 800ebb0:	e085      	b.n	800ecbe <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ebb2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ebb6:	2b09      	cmp	r3, #9
 800ebb8:	dc02      	bgt.n	800ebc0 <etharp_find_entry+0x1cc>
    i = empty;
 800ebba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ebbc:	843b      	strh	r3, [r7, #32]
 800ebbe:	e039      	b.n	800ec34 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ebc0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ebc4:	2b09      	cmp	r3, #9
 800ebc6:	dc14      	bgt.n	800ebf2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800ebc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebca:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ebcc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ebd0:	493d      	ldr	r1, [pc, #244]	; (800ecc8 <etharp_find_entry+0x2d4>)
 800ebd2:	4613      	mov	r3, r2
 800ebd4:	005b      	lsls	r3, r3, #1
 800ebd6:	4413      	add	r3, r2
 800ebd8:	00db      	lsls	r3, r3, #3
 800ebda:	440b      	add	r3, r1
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d018      	beq.n	800ec14 <etharp_find_entry+0x220>
 800ebe2:	4b3a      	ldr	r3, [pc, #232]	; (800eccc <etharp_find_entry+0x2d8>)
 800ebe4:	f240 126d 	movw	r2, #365	; 0x16d
 800ebe8:	493b      	ldr	r1, [pc, #236]	; (800ecd8 <etharp_find_entry+0x2e4>)
 800ebea:	483a      	ldr	r0, [pc, #232]	; (800ecd4 <etharp_find_entry+0x2e0>)
 800ebec:	f002 fa7e 	bl	80110ec <iprintf>
 800ebf0:	e010      	b.n	800ec14 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ebf2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ebf6:	2b09      	cmp	r3, #9
 800ebf8:	dc02      	bgt.n	800ec00 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800ebfa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ebfc:	843b      	strh	r3, [r7, #32]
 800ebfe:	e009      	b.n	800ec14 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ec00:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ec04:	2b09      	cmp	r3, #9
 800ec06:	dc02      	bgt.n	800ec0e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800ec08:	8bfb      	ldrh	r3, [r7, #30]
 800ec0a:	843b      	strh	r3, [r7, #32]
 800ec0c:	e002      	b.n	800ec14 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800ec0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ec12:	e054      	b.n	800ecbe <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ec14:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ec18:	2b09      	cmp	r3, #9
 800ec1a:	dd06      	ble.n	800ec2a <etharp_find_entry+0x236>
 800ec1c:	4b2b      	ldr	r3, [pc, #172]	; (800eccc <etharp_find_entry+0x2d8>)
 800ec1e:	f240 127f 	movw	r2, #383	; 0x17f
 800ec22:	492e      	ldr	r1, [pc, #184]	; (800ecdc <etharp_find_entry+0x2e8>)
 800ec24:	482b      	ldr	r0, [pc, #172]	; (800ecd4 <etharp_find_entry+0x2e0>)
 800ec26:	f002 fa61 	bl	80110ec <iprintf>
    etharp_free_entry(i);
 800ec2a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7ff fe06 	bl	800e840 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ec34:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ec38:	2b09      	cmp	r3, #9
 800ec3a:	dd06      	ble.n	800ec4a <etharp_find_entry+0x256>
 800ec3c:	4b23      	ldr	r3, [pc, #140]	; (800eccc <etharp_find_entry+0x2d8>)
 800ec3e:	f240 1283 	movw	r2, #387	; 0x183
 800ec42:	4926      	ldr	r1, [pc, #152]	; (800ecdc <etharp_find_entry+0x2e8>)
 800ec44:	4823      	ldr	r0, [pc, #140]	; (800ecd4 <etharp_find_entry+0x2e0>)
 800ec46:	f002 fa51 	bl	80110ec <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ec4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec4e:	491e      	ldr	r1, [pc, #120]	; (800ecc8 <etharp_find_entry+0x2d4>)
 800ec50:	4613      	mov	r3, r2
 800ec52:	005b      	lsls	r3, r3, #1
 800ec54:	4413      	add	r3, r2
 800ec56:	00db      	lsls	r3, r3, #3
 800ec58:	440b      	add	r3, r1
 800ec5a:	3314      	adds	r3, #20
 800ec5c:	781b      	ldrb	r3, [r3, #0]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d006      	beq.n	800ec70 <etharp_find_entry+0x27c>
 800ec62:	4b1a      	ldr	r3, [pc, #104]	; (800eccc <etharp_find_entry+0x2d8>)
 800ec64:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800ec68:	491d      	ldr	r1, [pc, #116]	; (800ece0 <etharp_find_entry+0x2ec>)
 800ec6a:	481a      	ldr	r0, [pc, #104]	; (800ecd4 <etharp_find_entry+0x2e0>)
 800ec6c:	f002 fa3e 	bl	80110ec <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d00b      	beq.n	800ec8e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ec76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	6819      	ldr	r1, [r3, #0]
 800ec7e:	4812      	ldr	r0, [pc, #72]	; (800ecc8 <etharp_find_entry+0x2d4>)
 800ec80:	4613      	mov	r3, r2
 800ec82:	005b      	lsls	r3, r3, #1
 800ec84:	4413      	add	r3, r2
 800ec86:	00db      	lsls	r3, r3, #3
 800ec88:	4403      	add	r3, r0
 800ec8a:	3304      	adds	r3, #4
 800ec8c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ec8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ec92:	490d      	ldr	r1, [pc, #52]	; (800ecc8 <etharp_find_entry+0x2d4>)
 800ec94:	4613      	mov	r3, r2
 800ec96:	005b      	lsls	r3, r3, #1
 800ec98:	4413      	add	r3, r2
 800ec9a:	00db      	lsls	r3, r3, #3
 800ec9c:	440b      	add	r3, r1
 800ec9e:	3312      	adds	r3, #18
 800eca0:	2200      	movs	r2, #0
 800eca2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800eca4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eca8:	4907      	ldr	r1, [pc, #28]	; (800ecc8 <etharp_find_entry+0x2d4>)
 800ecaa:	4613      	mov	r3, r2
 800ecac:	005b      	lsls	r3, r3, #1
 800ecae:	4413      	add	r3, r2
 800ecb0:	00db      	lsls	r3, r3, #3
 800ecb2:	440b      	add	r3, r1
 800ecb4:	3308      	adds	r3, #8
 800ecb6:	687a      	ldr	r2, [r7, #4]
 800ecb8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800ecba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	3728      	adds	r7, #40	; 0x28
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}
 800ecc6:	bf00      	nop
 800ecc8:	20008888 	.word	0x20008888
 800eccc:	08014644 	.word	0x08014644
 800ecd0:	0801467c 	.word	0x0801467c
 800ecd4:	080146bc 	.word	0x080146bc
 800ecd8:	080146e4 	.word	0x080146e4
 800ecdc:	080146fc 	.word	0x080146fc
 800ece0:	08014710 	.word	0x08014710

0800ece4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b088      	sub	sp, #32
 800ece8:	af02      	add	r7, sp, #8
 800ecea:	60f8      	str	r0, [r7, #12]
 800ecec:	60b9      	str	r1, [r7, #8]
 800ecee:	607a      	str	r2, [r7, #4]
 800ecf0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ecf8:	2b06      	cmp	r3, #6
 800ecfa:	d006      	beq.n	800ed0a <etharp_update_arp_entry+0x26>
 800ecfc:	4b48      	ldr	r3, [pc, #288]	; (800ee20 <etharp_update_arp_entry+0x13c>)
 800ecfe:	f240 12a9 	movw	r2, #425	; 0x1a9
 800ed02:	4948      	ldr	r1, [pc, #288]	; (800ee24 <etharp_update_arp_entry+0x140>)
 800ed04:	4848      	ldr	r0, [pc, #288]	; (800ee28 <etharp_update_arp_entry+0x144>)
 800ed06:	f002 f9f1 	bl	80110ec <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800ed0a:	68bb      	ldr	r3, [r7, #8]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d012      	beq.n	800ed36 <etharp_update_arp_entry+0x52>
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d00e      	beq.n	800ed36 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ed18:	68bb      	ldr	r3, [r7, #8]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	68f9      	ldr	r1, [r7, #12]
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f001 f8fe 	bl	800ff20 <ip4_addr_isbroadcast_u32>
 800ed24:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d105      	bne.n	800ed36 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ed32:	2be0      	cmp	r3, #224	; 0xe0
 800ed34:	d102      	bne.n	800ed3c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ed36:	f06f 030f 	mvn.w	r3, #15
 800ed3a:	e06c      	b.n	800ee16 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800ed3c:	78fb      	ldrb	r3, [r7, #3]
 800ed3e:	68fa      	ldr	r2, [r7, #12]
 800ed40:	4619      	mov	r1, r3
 800ed42:	68b8      	ldr	r0, [r7, #8]
 800ed44:	f7ff fe56 	bl	800e9f4 <etharp_find_entry>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800ed4c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	da02      	bge.n	800ed5a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800ed54:	8afb      	ldrh	r3, [r7, #22]
 800ed56:	b25b      	sxtb	r3, r3
 800ed58:	e05d      	b.n	800ee16 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ed5a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ed5e:	4933      	ldr	r1, [pc, #204]	; (800ee2c <etharp_update_arp_entry+0x148>)
 800ed60:	4613      	mov	r3, r2
 800ed62:	005b      	lsls	r3, r3, #1
 800ed64:	4413      	add	r3, r2
 800ed66:	00db      	lsls	r3, r3, #3
 800ed68:	440b      	add	r3, r1
 800ed6a:	3314      	adds	r3, #20
 800ed6c:	2202      	movs	r2, #2
 800ed6e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ed70:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ed74:	492d      	ldr	r1, [pc, #180]	; (800ee2c <etharp_update_arp_entry+0x148>)
 800ed76:	4613      	mov	r3, r2
 800ed78:	005b      	lsls	r3, r3, #1
 800ed7a:	4413      	add	r3, r2
 800ed7c:	00db      	lsls	r3, r3, #3
 800ed7e:	440b      	add	r3, r1
 800ed80:	3308      	adds	r3, #8
 800ed82:	68fa      	ldr	r2, [r7, #12]
 800ed84:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ed86:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ed8a:	4613      	mov	r3, r2
 800ed8c:	005b      	lsls	r3, r3, #1
 800ed8e:	4413      	add	r3, r2
 800ed90:	00db      	lsls	r3, r3, #3
 800ed92:	3308      	adds	r3, #8
 800ed94:	4a25      	ldr	r2, [pc, #148]	; (800ee2c <etharp_update_arp_entry+0x148>)
 800ed96:	4413      	add	r3, r2
 800ed98:	3304      	adds	r3, #4
 800ed9a:	2206      	movs	r2, #6
 800ed9c:	6879      	ldr	r1, [r7, #4]
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f002 fab9 	bl	8011316 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800eda4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eda8:	4920      	ldr	r1, [pc, #128]	; (800ee2c <etharp_update_arp_entry+0x148>)
 800edaa:	4613      	mov	r3, r2
 800edac:	005b      	lsls	r3, r3, #1
 800edae:	4413      	add	r3, r2
 800edb0:	00db      	lsls	r3, r3, #3
 800edb2:	440b      	add	r3, r1
 800edb4:	3312      	adds	r3, #18
 800edb6:	2200      	movs	r2, #0
 800edb8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800edba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800edbe:	491b      	ldr	r1, [pc, #108]	; (800ee2c <etharp_update_arp_entry+0x148>)
 800edc0:	4613      	mov	r3, r2
 800edc2:	005b      	lsls	r3, r3, #1
 800edc4:	4413      	add	r3, r2
 800edc6:	00db      	lsls	r3, r3, #3
 800edc8:	440b      	add	r3, r1
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d021      	beq.n	800ee14 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800edd0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800edd4:	4915      	ldr	r1, [pc, #84]	; (800ee2c <etharp_update_arp_entry+0x148>)
 800edd6:	4613      	mov	r3, r2
 800edd8:	005b      	lsls	r3, r3, #1
 800edda:	4413      	add	r3, r2
 800eddc:	00db      	lsls	r3, r3, #3
 800edde:	440b      	add	r3, r1
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800ede4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ede8:	4910      	ldr	r1, [pc, #64]	; (800ee2c <etharp_update_arp_entry+0x148>)
 800edea:	4613      	mov	r3, r2
 800edec:	005b      	lsls	r3, r3, #1
 800edee:	4413      	add	r3, r2
 800edf0:	00db      	lsls	r3, r3, #3
 800edf2:	440b      	add	r3, r1
 800edf4:	2200      	movs	r2, #0
 800edf6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800edfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ee02:	9300      	str	r3, [sp, #0]
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6939      	ldr	r1, [r7, #16]
 800ee08:	68f8      	ldr	r0, [r7, #12]
 800ee0a:	f002 f827 	bl	8010e5c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800ee0e:	6938      	ldr	r0, [r7, #16]
 800ee10:	f7f8 ff30 	bl	8007c74 <pbuf_free>
  }
  return ERR_OK;
 800ee14:	2300      	movs	r3, #0
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3718      	adds	r7, #24
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}
 800ee1e:	bf00      	nop
 800ee20:	08014644 	.word	0x08014644
 800ee24:	0801473c 	.word	0x0801473c
 800ee28:	080146bc 	.word	0x080146bc
 800ee2c:	20008888 	.word	0x20008888

0800ee30 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b084      	sub	sp, #16
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ee38:	2300      	movs	r3, #0
 800ee3a:	60fb      	str	r3, [r7, #12]
 800ee3c:	e01e      	b.n	800ee7c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800ee3e:	4913      	ldr	r1, [pc, #76]	; (800ee8c <etharp_cleanup_netif+0x5c>)
 800ee40:	68fa      	ldr	r2, [r7, #12]
 800ee42:	4613      	mov	r3, r2
 800ee44:	005b      	lsls	r3, r3, #1
 800ee46:	4413      	add	r3, r2
 800ee48:	00db      	lsls	r3, r3, #3
 800ee4a:	440b      	add	r3, r1
 800ee4c:	3314      	adds	r3, #20
 800ee4e:	781b      	ldrb	r3, [r3, #0]
 800ee50:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800ee52:	7afb      	ldrb	r3, [r7, #11]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d00e      	beq.n	800ee76 <etharp_cleanup_netif+0x46>
 800ee58:	490c      	ldr	r1, [pc, #48]	; (800ee8c <etharp_cleanup_netif+0x5c>)
 800ee5a:	68fa      	ldr	r2, [r7, #12]
 800ee5c:	4613      	mov	r3, r2
 800ee5e:	005b      	lsls	r3, r3, #1
 800ee60:	4413      	add	r3, r2
 800ee62:	00db      	lsls	r3, r3, #3
 800ee64:	440b      	add	r3, r1
 800ee66:	3308      	adds	r3, #8
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	687a      	ldr	r2, [r7, #4]
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	d102      	bne.n	800ee76 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800ee70:	68f8      	ldr	r0, [r7, #12]
 800ee72:	f7ff fce5 	bl	800e840 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	3301      	adds	r3, #1
 800ee7a:	60fb      	str	r3, [r7, #12]
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	2b09      	cmp	r3, #9
 800ee80:	dddd      	ble.n	800ee3e <etharp_cleanup_netif+0xe>
    }
  }
}
 800ee82:	bf00      	nop
 800ee84:	bf00      	nop
 800ee86:	3710      	adds	r7, #16
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}
 800ee8c:	20008888 	.word	0x20008888

0800ee90 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ee90:	b5b0      	push	{r4, r5, r7, lr}
 800ee92:	b08a      	sub	sp, #40	; 0x28
 800ee94:	af04      	add	r7, sp, #16
 800ee96:	6078      	str	r0, [r7, #4]
 800ee98:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d107      	bne.n	800eeb0 <etharp_input+0x20>
 800eea0:	4b3d      	ldr	r3, [pc, #244]	; (800ef98 <etharp_input+0x108>)
 800eea2:	f240 228a 	movw	r2, #650	; 0x28a
 800eea6:	493d      	ldr	r1, [pc, #244]	; (800ef9c <etharp_input+0x10c>)
 800eea8:	483d      	ldr	r0, [pc, #244]	; (800efa0 <etharp_input+0x110>)
 800eeaa:	f002 f91f 	bl	80110ec <iprintf>
 800eeae:	e06f      	b.n	800ef90 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	685b      	ldr	r3, [r3, #4]
 800eeb4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800eeb6:	693b      	ldr	r3, [r7, #16]
 800eeb8:	881b      	ldrh	r3, [r3, #0]
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eec0:	d10c      	bne.n	800eedc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800eec2:	693b      	ldr	r3, [r7, #16]
 800eec4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800eec6:	2b06      	cmp	r3, #6
 800eec8:	d108      	bne.n	800eedc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800eeca:	693b      	ldr	r3, [r7, #16]
 800eecc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800eece:	2b04      	cmp	r3, #4
 800eed0:	d104      	bne.n	800eedc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800eed2:	693b      	ldr	r3, [r7, #16]
 800eed4:	885b      	ldrh	r3, [r3, #2]
 800eed6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800eed8:	2b08      	cmp	r3, #8
 800eeda:	d003      	beq.n	800eee4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f7f8 fec9 	bl	8007c74 <pbuf_free>
    return;
 800eee2:	e055      	b.n	800ef90 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800eee4:	693b      	ldr	r3, [r7, #16]
 800eee6:	330e      	adds	r3, #14
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800eeec:	693b      	ldr	r3, [r7, #16]
 800eeee:	3318      	adds	r3, #24
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	3304      	adds	r3, #4
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d102      	bne.n	800ef04 <etharp_input+0x74>
    for_us = 0;
 800eefe:	2300      	movs	r3, #0
 800ef00:	75fb      	strb	r3, [r7, #23]
 800ef02:	e009      	b.n	800ef18 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800ef04:	68ba      	ldr	r2, [r7, #8]
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	3304      	adds	r3, #4
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	429a      	cmp	r2, r3
 800ef0e:	bf0c      	ite	eq
 800ef10:	2301      	moveq	r3, #1
 800ef12:	2300      	movne	r3, #0
 800ef14:	b2db      	uxtb	r3, r3
 800ef16:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ef18:	693b      	ldr	r3, [r7, #16]
 800ef1a:	f103 0208 	add.w	r2, r3, #8
 800ef1e:	7dfb      	ldrb	r3, [r7, #23]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d001      	beq.n	800ef28 <etharp_input+0x98>
 800ef24:	2301      	movs	r3, #1
 800ef26:	e000      	b.n	800ef2a <etharp_input+0x9a>
 800ef28:	2302      	movs	r3, #2
 800ef2a:	f107 010c 	add.w	r1, r7, #12
 800ef2e:	6838      	ldr	r0, [r7, #0]
 800ef30:	f7ff fed8 	bl	800ece4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	88db      	ldrh	r3, [r3, #6]
 800ef38:	b29b      	uxth	r3, r3
 800ef3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef3e:	d003      	beq.n	800ef48 <etharp_input+0xb8>
 800ef40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef44:	d01e      	beq.n	800ef84 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800ef46:	e020      	b.n	800ef8a <etharp_input+0xfa>
      if (for_us) {
 800ef48:	7dfb      	ldrb	r3, [r7, #23]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d01c      	beq.n	800ef88 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800ef64:	693a      	ldr	r2, [r7, #16]
 800ef66:	3208      	adds	r2, #8
        etharp_raw(netif,
 800ef68:	2102      	movs	r1, #2
 800ef6a:	9103      	str	r1, [sp, #12]
 800ef6c:	f107 010c 	add.w	r1, r7, #12
 800ef70:	9102      	str	r1, [sp, #8]
 800ef72:	9201      	str	r2, [sp, #4]
 800ef74:	9300      	str	r3, [sp, #0]
 800ef76:	462b      	mov	r3, r5
 800ef78:	4622      	mov	r2, r4
 800ef7a:	4601      	mov	r1, r0
 800ef7c:	6838      	ldr	r0, [r7, #0]
 800ef7e:	f000 faeb 	bl	800f558 <etharp_raw>
      break;
 800ef82:	e001      	b.n	800ef88 <etharp_input+0xf8>
      break;
 800ef84:	bf00      	nop
 800ef86:	e000      	b.n	800ef8a <etharp_input+0xfa>
      break;
 800ef88:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ef8a:	6878      	ldr	r0, [r7, #4]
 800ef8c:	f7f8 fe72 	bl	8007c74 <pbuf_free>
}
 800ef90:	3718      	adds	r7, #24
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bdb0      	pop	{r4, r5, r7, pc}
 800ef96:	bf00      	nop
 800ef98:	08014644 	.word	0x08014644
 800ef9c:	08014794 	.word	0x08014794
 800efa0:	080146bc 	.word	0x080146bc

0800efa4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b086      	sub	sp, #24
 800efa8:	af02      	add	r7, sp, #8
 800efaa:	60f8      	str	r0, [r7, #12]
 800efac:	60b9      	str	r1, [r7, #8]
 800efae:	4613      	mov	r3, r2
 800efb0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800efb2:	79fa      	ldrb	r2, [r7, #7]
 800efb4:	4944      	ldr	r1, [pc, #272]	; (800f0c8 <etharp_output_to_arp_index+0x124>)
 800efb6:	4613      	mov	r3, r2
 800efb8:	005b      	lsls	r3, r3, #1
 800efba:	4413      	add	r3, r2
 800efbc:	00db      	lsls	r3, r3, #3
 800efbe:	440b      	add	r3, r1
 800efc0:	3314      	adds	r3, #20
 800efc2:	781b      	ldrb	r3, [r3, #0]
 800efc4:	2b01      	cmp	r3, #1
 800efc6:	d806      	bhi.n	800efd6 <etharp_output_to_arp_index+0x32>
 800efc8:	4b40      	ldr	r3, [pc, #256]	; (800f0cc <etharp_output_to_arp_index+0x128>)
 800efca:	f240 22ee 	movw	r2, #750	; 0x2ee
 800efce:	4940      	ldr	r1, [pc, #256]	; (800f0d0 <etharp_output_to_arp_index+0x12c>)
 800efd0:	4840      	ldr	r0, [pc, #256]	; (800f0d4 <etharp_output_to_arp_index+0x130>)
 800efd2:	f002 f88b 	bl	80110ec <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800efd6:	79fa      	ldrb	r2, [r7, #7]
 800efd8:	493b      	ldr	r1, [pc, #236]	; (800f0c8 <etharp_output_to_arp_index+0x124>)
 800efda:	4613      	mov	r3, r2
 800efdc:	005b      	lsls	r3, r3, #1
 800efde:	4413      	add	r3, r2
 800efe0:	00db      	lsls	r3, r3, #3
 800efe2:	440b      	add	r3, r1
 800efe4:	3314      	adds	r3, #20
 800efe6:	781b      	ldrb	r3, [r3, #0]
 800efe8:	2b02      	cmp	r3, #2
 800efea:	d153      	bne.n	800f094 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800efec:	79fa      	ldrb	r2, [r7, #7]
 800efee:	4936      	ldr	r1, [pc, #216]	; (800f0c8 <etharp_output_to_arp_index+0x124>)
 800eff0:	4613      	mov	r3, r2
 800eff2:	005b      	lsls	r3, r3, #1
 800eff4:	4413      	add	r3, r2
 800eff6:	00db      	lsls	r3, r3, #3
 800eff8:	440b      	add	r3, r1
 800effa:	3312      	adds	r3, #18
 800effc:	881b      	ldrh	r3, [r3, #0]
 800effe:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800f002:	d919      	bls.n	800f038 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f004:	79fa      	ldrb	r2, [r7, #7]
 800f006:	4613      	mov	r3, r2
 800f008:	005b      	lsls	r3, r3, #1
 800f00a:	4413      	add	r3, r2
 800f00c:	00db      	lsls	r3, r3, #3
 800f00e:	4a2e      	ldr	r2, [pc, #184]	; (800f0c8 <etharp_output_to_arp_index+0x124>)
 800f010:	4413      	add	r3, r2
 800f012:	3304      	adds	r3, #4
 800f014:	4619      	mov	r1, r3
 800f016:	68f8      	ldr	r0, [r7, #12]
 800f018:	f000 fb4c 	bl	800f6b4 <etharp_request>
 800f01c:	4603      	mov	r3, r0
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d138      	bne.n	800f094 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f022:	79fa      	ldrb	r2, [r7, #7]
 800f024:	4928      	ldr	r1, [pc, #160]	; (800f0c8 <etharp_output_to_arp_index+0x124>)
 800f026:	4613      	mov	r3, r2
 800f028:	005b      	lsls	r3, r3, #1
 800f02a:	4413      	add	r3, r2
 800f02c:	00db      	lsls	r3, r3, #3
 800f02e:	440b      	add	r3, r1
 800f030:	3314      	adds	r3, #20
 800f032:	2203      	movs	r2, #3
 800f034:	701a      	strb	r2, [r3, #0]
 800f036:	e02d      	b.n	800f094 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f038:	79fa      	ldrb	r2, [r7, #7]
 800f03a:	4923      	ldr	r1, [pc, #140]	; (800f0c8 <etharp_output_to_arp_index+0x124>)
 800f03c:	4613      	mov	r3, r2
 800f03e:	005b      	lsls	r3, r3, #1
 800f040:	4413      	add	r3, r2
 800f042:	00db      	lsls	r3, r3, #3
 800f044:	440b      	add	r3, r1
 800f046:	3312      	adds	r3, #18
 800f048:	881b      	ldrh	r3, [r3, #0]
 800f04a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f04e:	d321      	bcc.n	800f094 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f050:	79fa      	ldrb	r2, [r7, #7]
 800f052:	4613      	mov	r3, r2
 800f054:	005b      	lsls	r3, r3, #1
 800f056:	4413      	add	r3, r2
 800f058:	00db      	lsls	r3, r3, #3
 800f05a:	4a1b      	ldr	r2, [pc, #108]	; (800f0c8 <etharp_output_to_arp_index+0x124>)
 800f05c:	4413      	add	r3, r2
 800f05e:	1d19      	adds	r1, r3, #4
 800f060:	79fa      	ldrb	r2, [r7, #7]
 800f062:	4613      	mov	r3, r2
 800f064:	005b      	lsls	r3, r3, #1
 800f066:	4413      	add	r3, r2
 800f068:	00db      	lsls	r3, r3, #3
 800f06a:	3308      	adds	r3, #8
 800f06c:	4a16      	ldr	r2, [pc, #88]	; (800f0c8 <etharp_output_to_arp_index+0x124>)
 800f06e:	4413      	add	r3, r2
 800f070:	3304      	adds	r3, #4
 800f072:	461a      	mov	r2, r3
 800f074:	68f8      	ldr	r0, [r7, #12]
 800f076:	f000 fafb 	bl	800f670 <etharp_request_dst>
 800f07a:	4603      	mov	r3, r0
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d109      	bne.n	800f094 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f080:	79fa      	ldrb	r2, [r7, #7]
 800f082:	4911      	ldr	r1, [pc, #68]	; (800f0c8 <etharp_output_to_arp_index+0x124>)
 800f084:	4613      	mov	r3, r2
 800f086:	005b      	lsls	r3, r3, #1
 800f088:	4413      	add	r3, r2
 800f08a:	00db      	lsls	r3, r3, #3
 800f08c:	440b      	add	r3, r1
 800f08e:	3314      	adds	r3, #20
 800f090:	2203      	movs	r2, #3
 800f092:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800f09a:	79fa      	ldrb	r2, [r7, #7]
 800f09c:	4613      	mov	r3, r2
 800f09e:	005b      	lsls	r3, r3, #1
 800f0a0:	4413      	add	r3, r2
 800f0a2:	00db      	lsls	r3, r3, #3
 800f0a4:	3308      	adds	r3, #8
 800f0a6:	4a08      	ldr	r2, [pc, #32]	; (800f0c8 <etharp_output_to_arp_index+0x124>)
 800f0a8:	4413      	add	r3, r2
 800f0aa:	3304      	adds	r3, #4
 800f0ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f0b0:	9200      	str	r2, [sp, #0]
 800f0b2:	460a      	mov	r2, r1
 800f0b4:	68b9      	ldr	r1, [r7, #8]
 800f0b6:	68f8      	ldr	r0, [r7, #12]
 800f0b8:	f001 fed0 	bl	8010e5c <ethernet_output>
 800f0bc:	4603      	mov	r3, r0
}
 800f0be:	4618      	mov	r0, r3
 800f0c0:	3710      	adds	r7, #16
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}
 800f0c6:	bf00      	nop
 800f0c8:	20008888 	.word	0x20008888
 800f0cc:	08014644 	.word	0x08014644
 800f0d0:	080147b4 	.word	0x080147b4
 800f0d4:	080146bc 	.word	0x080146bc

0800f0d8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b08a      	sub	sp, #40	; 0x28
 800f0dc:	af02      	add	r7, sp, #8
 800f0de:	60f8      	str	r0, [r7, #12]
 800f0e0:	60b9      	str	r1, [r7, #8]
 800f0e2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d106      	bne.n	800f0fc <etharp_output+0x24>
 800f0ee:	4b73      	ldr	r3, [pc, #460]	; (800f2bc <etharp_output+0x1e4>)
 800f0f0:	f240 321e 	movw	r2, #798	; 0x31e
 800f0f4:	4972      	ldr	r1, [pc, #456]	; (800f2c0 <etharp_output+0x1e8>)
 800f0f6:	4873      	ldr	r0, [pc, #460]	; (800f2c4 <etharp_output+0x1ec>)
 800f0f8:	f001 fff8 	bl	80110ec <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d106      	bne.n	800f110 <etharp_output+0x38>
 800f102:	4b6e      	ldr	r3, [pc, #440]	; (800f2bc <etharp_output+0x1e4>)
 800f104:	f240 321f 	movw	r2, #799	; 0x31f
 800f108:	496f      	ldr	r1, [pc, #444]	; (800f2c8 <etharp_output+0x1f0>)
 800f10a:	486e      	ldr	r0, [pc, #440]	; (800f2c4 <etharp_output+0x1ec>)
 800f10c:	f001 ffee 	bl	80110ec <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d106      	bne.n	800f124 <etharp_output+0x4c>
 800f116:	4b69      	ldr	r3, [pc, #420]	; (800f2bc <etharp_output+0x1e4>)
 800f118:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f11c:	496b      	ldr	r1, [pc, #428]	; (800f2cc <etharp_output+0x1f4>)
 800f11e:	4869      	ldr	r0, [pc, #420]	; (800f2c4 <etharp_output+0x1ec>)
 800f120:	f001 ffe4 	bl	80110ec <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	68f9      	ldr	r1, [r7, #12]
 800f12a:	4618      	mov	r0, r3
 800f12c:	f000 fef8 	bl	800ff20 <ip4_addr_isbroadcast_u32>
 800f130:	4603      	mov	r3, r0
 800f132:	2b00      	cmp	r3, #0
 800f134:	d002      	beq.n	800f13c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f136:	4b66      	ldr	r3, [pc, #408]	; (800f2d0 <etharp_output+0x1f8>)
 800f138:	61fb      	str	r3, [r7, #28]
 800f13a:	e0af      	b.n	800f29c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f144:	2be0      	cmp	r3, #224	; 0xe0
 800f146:	d118      	bne.n	800f17a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f148:	2301      	movs	r3, #1
 800f14a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f14c:	2300      	movs	r3, #0
 800f14e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f150:	235e      	movs	r3, #94	; 0x5e
 800f152:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	3301      	adds	r3, #1
 800f158:	781b      	ldrb	r3, [r3, #0]
 800f15a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f15e:	b2db      	uxtb	r3, r3
 800f160:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	3302      	adds	r3, #2
 800f166:	781b      	ldrb	r3, [r3, #0]
 800f168:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	3303      	adds	r3, #3
 800f16e:	781b      	ldrb	r3, [r3, #0]
 800f170:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f172:	f107 0310 	add.w	r3, r7, #16
 800f176:	61fb      	str	r3, [r7, #28]
 800f178:	e090      	b.n	800f29c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681a      	ldr	r2, [r3, #0]
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	3304      	adds	r3, #4
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	405a      	eors	r2, r3
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	3308      	adds	r3, #8
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	4013      	ands	r3, r2
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d012      	beq.n	800f1b8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f198:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800f19c:	4293      	cmp	r3, r2
 800f19e:	d00b      	beq.n	800f1b8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	330c      	adds	r3, #12
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d003      	beq.n	800f1b2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	330c      	adds	r3, #12
 800f1ae:	61bb      	str	r3, [r7, #24]
 800f1b0:	e002      	b.n	800f1b8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f1b2:	f06f 0303 	mvn.w	r3, #3
 800f1b6:	e07d      	b.n	800f2b4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f1b8:	4b46      	ldr	r3, [pc, #280]	; (800f2d4 <etharp_output+0x1fc>)
 800f1ba:	781b      	ldrb	r3, [r3, #0]
 800f1bc:	4619      	mov	r1, r3
 800f1be:	4a46      	ldr	r2, [pc, #280]	; (800f2d8 <etharp_output+0x200>)
 800f1c0:	460b      	mov	r3, r1
 800f1c2:	005b      	lsls	r3, r3, #1
 800f1c4:	440b      	add	r3, r1
 800f1c6:	00db      	lsls	r3, r3, #3
 800f1c8:	4413      	add	r3, r2
 800f1ca:	3314      	adds	r3, #20
 800f1cc:	781b      	ldrb	r3, [r3, #0]
 800f1ce:	2b01      	cmp	r3, #1
 800f1d0:	d925      	bls.n	800f21e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f1d2:	4b40      	ldr	r3, [pc, #256]	; (800f2d4 <etharp_output+0x1fc>)
 800f1d4:	781b      	ldrb	r3, [r3, #0]
 800f1d6:	4619      	mov	r1, r3
 800f1d8:	4a3f      	ldr	r2, [pc, #252]	; (800f2d8 <etharp_output+0x200>)
 800f1da:	460b      	mov	r3, r1
 800f1dc:	005b      	lsls	r3, r3, #1
 800f1de:	440b      	add	r3, r1
 800f1e0:	00db      	lsls	r3, r3, #3
 800f1e2:	4413      	add	r3, r2
 800f1e4:	3308      	adds	r3, #8
 800f1e6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f1e8:	68fa      	ldr	r2, [r7, #12]
 800f1ea:	429a      	cmp	r2, r3
 800f1ec:	d117      	bne.n	800f21e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f1ee:	69bb      	ldr	r3, [r7, #24]
 800f1f0:	681a      	ldr	r2, [r3, #0]
 800f1f2:	4b38      	ldr	r3, [pc, #224]	; (800f2d4 <etharp_output+0x1fc>)
 800f1f4:	781b      	ldrb	r3, [r3, #0]
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	4937      	ldr	r1, [pc, #220]	; (800f2d8 <etharp_output+0x200>)
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	005b      	lsls	r3, r3, #1
 800f1fe:	4403      	add	r3, r0
 800f200:	00db      	lsls	r3, r3, #3
 800f202:	440b      	add	r3, r1
 800f204:	3304      	adds	r3, #4
 800f206:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f208:	429a      	cmp	r2, r3
 800f20a:	d108      	bne.n	800f21e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f20c:	4b31      	ldr	r3, [pc, #196]	; (800f2d4 <etharp_output+0x1fc>)
 800f20e:	781b      	ldrb	r3, [r3, #0]
 800f210:	461a      	mov	r2, r3
 800f212:	68b9      	ldr	r1, [r7, #8]
 800f214:	68f8      	ldr	r0, [r7, #12]
 800f216:	f7ff fec5 	bl	800efa4 <etharp_output_to_arp_index>
 800f21a:	4603      	mov	r3, r0
 800f21c:	e04a      	b.n	800f2b4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f21e:	2300      	movs	r3, #0
 800f220:	75fb      	strb	r3, [r7, #23]
 800f222:	e031      	b.n	800f288 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f224:	7dfa      	ldrb	r2, [r7, #23]
 800f226:	492c      	ldr	r1, [pc, #176]	; (800f2d8 <etharp_output+0x200>)
 800f228:	4613      	mov	r3, r2
 800f22a:	005b      	lsls	r3, r3, #1
 800f22c:	4413      	add	r3, r2
 800f22e:	00db      	lsls	r3, r3, #3
 800f230:	440b      	add	r3, r1
 800f232:	3314      	adds	r3, #20
 800f234:	781b      	ldrb	r3, [r3, #0]
 800f236:	2b01      	cmp	r3, #1
 800f238:	d923      	bls.n	800f282 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f23a:	7dfa      	ldrb	r2, [r7, #23]
 800f23c:	4926      	ldr	r1, [pc, #152]	; (800f2d8 <etharp_output+0x200>)
 800f23e:	4613      	mov	r3, r2
 800f240:	005b      	lsls	r3, r3, #1
 800f242:	4413      	add	r3, r2
 800f244:	00db      	lsls	r3, r3, #3
 800f246:	440b      	add	r3, r1
 800f248:	3308      	adds	r3, #8
 800f24a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f24c:	68fa      	ldr	r2, [r7, #12]
 800f24e:	429a      	cmp	r2, r3
 800f250:	d117      	bne.n	800f282 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f252:	69bb      	ldr	r3, [r7, #24]
 800f254:	6819      	ldr	r1, [r3, #0]
 800f256:	7dfa      	ldrb	r2, [r7, #23]
 800f258:	481f      	ldr	r0, [pc, #124]	; (800f2d8 <etharp_output+0x200>)
 800f25a:	4613      	mov	r3, r2
 800f25c:	005b      	lsls	r3, r3, #1
 800f25e:	4413      	add	r3, r2
 800f260:	00db      	lsls	r3, r3, #3
 800f262:	4403      	add	r3, r0
 800f264:	3304      	adds	r3, #4
 800f266:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f268:	4299      	cmp	r1, r3
 800f26a:	d10a      	bne.n	800f282 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f26c:	4a19      	ldr	r2, [pc, #100]	; (800f2d4 <etharp_output+0x1fc>)
 800f26e:	7dfb      	ldrb	r3, [r7, #23]
 800f270:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f272:	7dfb      	ldrb	r3, [r7, #23]
 800f274:	461a      	mov	r2, r3
 800f276:	68b9      	ldr	r1, [r7, #8]
 800f278:	68f8      	ldr	r0, [r7, #12]
 800f27a:	f7ff fe93 	bl	800efa4 <etharp_output_to_arp_index>
 800f27e:	4603      	mov	r3, r0
 800f280:	e018      	b.n	800f2b4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f282:	7dfb      	ldrb	r3, [r7, #23]
 800f284:	3301      	adds	r3, #1
 800f286:	75fb      	strb	r3, [r7, #23]
 800f288:	7dfb      	ldrb	r3, [r7, #23]
 800f28a:	2b09      	cmp	r3, #9
 800f28c:	d9ca      	bls.n	800f224 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f28e:	68ba      	ldr	r2, [r7, #8]
 800f290:	69b9      	ldr	r1, [r7, #24]
 800f292:	68f8      	ldr	r0, [r7, #12]
 800f294:	f000 f822 	bl	800f2dc <etharp_query>
 800f298:	4603      	mov	r3, r0
 800f29a:	e00b      	b.n	800f2b4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800f2a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f2a6:	9300      	str	r3, [sp, #0]
 800f2a8:	69fb      	ldr	r3, [r7, #28]
 800f2aa:	68b9      	ldr	r1, [r7, #8]
 800f2ac:	68f8      	ldr	r0, [r7, #12]
 800f2ae:	f001 fdd5 	bl	8010e5c <ethernet_output>
 800f2b2:	4603      	mov	r3, r0
}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	3720      	adds	r7, #32
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}
 800f2bc:	08014644 	.word	0x08014644
 800f2c0:	08014794 	.word	0x08014794
 800f2c4:	080146bc 	.word	0x080146bc
 800f2c8:	080147e4 	.word	0x080147e4
 800f2cc:	08014784 	.word	0x08014784
 800f2d0:	08014e00 	.word	0x08014e00
 800f2d4:	20008978 	.word	0x20008978
 800f2d8:	20008888 	.word	0x20008888

0800f2dc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b08c      	sub	sp, #48	; 0x30
 800f2e0:	af02      	add	r7, sp, #8
 800f2e2:	60f8      	str	r0, [r7, #12]
 800f2e4:	60b9      	str	r1, [r7, #8]
 800f2e6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	3326      	adds	r3, #38	; 0x26
 800f2ec:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f2ee:	23ff      	movs	r3, #255	; 0xff
 800f2f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	68f9      	ldr	r1, [r7, #12]
 800f2fe:	4618      	mov	r0, r3
 800f300:	f000 fe0e 	bl	800ff20 <ip4_addr_isbroadcast_u32>
 800f304:	4603      	mov	r3, r0
 800f306:	2b00      	cmp	r3, #0
 800f308:	d10c      	bne.n	800f324 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f312:	2be0      	cmp	r3, #224	; 0xe0
 800f314:	d006      	beq.n	800f324 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d003      	beq.n	800f324 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d102      	bne.n	800f32a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f324:	f06f 030f 	mvn.w	r3, #15
 800f328:	e101      	b.n	800f52e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f32a:	68fa      	ldr	r2, [r7, #12]
 800f32c:	2101      	movs	r1, #1
 800f32e:	68b8      	ldr	r0, [r7, #8]
 800f330:	f7ff fb60 	bl	800e9f4 <etharp_find_entry>
 800f334:	4603      	mov	r3, r0
 800f336:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f338:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	da02      	bge.n	800f346 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f340:	8a7b      	ldrh	r3, [r7, #18]
 800f342:	b25b      	sxtb	r3, r3
 800f344:	e0f3      	b.n	800f52e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f346:	8a7b      	ldrh	r3, [r7, #18]
 800f348:	2b7e      	cmp	r3, #126	; 0x7e
 800f34a:	d906      	bls.n	800f35a <etharp_query+0x7e>
 800f34c:	4b7a      	ldr	r3, [pc, #488]	; (800f538 <etharp_query+0x25c>)
 800f34e:	f240 32c1 	movw	r2, #961	; 0x3c1
 800f352:	497a      	ldr	r1, [pc, #488]	; (800f53c <etharp_query+0x260>)
 800f354:	487a      	ldr	r0, [pc, #488]	; (800f540 <etharp_query+0x264>)
 800f356:	f001 fec9 	bl	80110ec <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f35a:	8a7b      	ldrh	r3, [r7, #18]
 800f35c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f35e:	7c7a      	ldrb	r2, [r7, #17]
 800f360:	4978      	ldr	r1, [pc, #480]	; (800f544 <etharp_query+0x268>)
 800f362:	4613      	mov	r3, r2
 800f364:	005b      	lsls	r3, r3, #1
 800f366:	4413      	add	r3, r2
 800f368:	00db      	lsls	r3, r3, #3
 800f36a:	440b      	add	r3, r1
 800f36c:	3314      	adds	r3, #20
 800f36e:	781b      	ldrb	r3, [r3, #0]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d115      	bne.n	800f3a0 <etharp_query+0xc4>
    is_new_entry = 1;
 800f374:	2301      	movs	r3, #1
 800f376:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f378:	7c7a      	ldrb	r2, [r7, #17]
 800f37a:	4972      	ldr	r1, [pc, #456]	; (800f544 <etharp_query+0x268>)
 800f37c:	4613      	mov	r3, r2
 800f37e:	005b      	lsls	r3, r3, #1
 800f380:	4413      	add	r3, r2
 800f382:	00db      	lsls	r3, r3, #3
 800f384:	440b      	add	r3, r1
 800f386:	3314      	adds	r3, #20
 800f388:	2201      	movs	r2, #1
 800f38a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f38c:	7c7a      	ldrb	r2, [r7, #17]
 800f38e:	496d      	ldr	r1, [pc, #436]	; (800f544 <etharp_query+0x268>)
 800f390:	4613      	mov	r3, r2
 800f392:	005b      	lsls	r3, r3, #1
 800f394:	4413      	add	r3, r2
 800f396:	00db      	lsls	r3, r3, #3
 800f398:	440b      	add	r3, r1
 800f39a:	3308      	adds	r3, #8
 800f39c:	68fa      	ldr	r2, [r7, #12]
 800f39e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f3a0:	7c7a      	ldrb	r2, [r7, #17]
 800f3a2:	4968      	ldr	r1, [pc, #416]	; (800f544 <etharp_query+0x268>)
 800f3a4:	4613      	mov	r3, r2
 800f3a6:	005b      	lsls	r3, r3, #1
 800f3a8:	4413      	add	r3, r2
 800f3aa:	00db      	lsls	r3, r3, #3
 800f3ac:	440b      	add	r3, r1
 800f3ae:	3314      	adds	r3, #20
 800f3b0:	781b      	ldrb	r3, [r3, #0]
 800f3b2:	2b01      	cmp	r3, #1
 800f3b4:	d011      	beq.n	800f3da <etharp_query+0xfe>
 800f3b6:	7c7a      	ldrb	r2, [r7, #17]
 800f3b8:	4962      	ldr	r1, [pc, #392]	; (800f544 <etharp_query+0x268>)
 800f3ba:	4613      	mov	r3, r2
 800f3bc:	005b      	lsls	r3, r3, #1
 800f3be:	4413      	add	r3, r2
 800f3c0:	00db      	lsls	r3, r3, #3
 800f3c2:	440b      	add	r3, r1
 800f3c4:	3314      	adds	r3, #20
 800f3c6:	781b      	ldrb	r3, [r3, #0]
 800f3c8:	2b01      	cmp	r3, #1
 800f3ca:	d806      	bhi.n	800f3da <etharp_query+0xfe>
 800f3cc:	4b5a      	ldr	r3, [pc, #360]	; (800f538 <etharp_query+0x25c>)
 800f3ce:	f240 32cd 	movw	r2, #973	; 0x3cd
 800f3d2:	495d      	ldr	r1, [pc, #372]	; (800f548 <etharp_query+0x26c>)
 800f3d4:	485a      	ldr	r0, [pc, #360]	; (800f540 <etharp_query+0x264>)
 800f3d6:	f001 fe89 	bl	80110ec <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f3da:	6a3b      	ldr	r3, [r7, #32]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d102      	bne.n	800f3e6 <etharp_query+0x10a>
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d10c      	bne.n	800f400 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f3e6:	68b9      	ldr	r1, [r7, #8]
 800f3e8:	68f8      	ldr	r0, [r7, #12]
 800f3ea:	f000 f963 	bl	800f6b4 <etharp_request>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d102      	bne.n	800f400 <etharp_query+0x124>
      return result;
 800f3fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f3fe:	e096      	b.n	800f52e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d106      	bne.n	800f414 <etharp_query+0x138>
 800f406:	4b4c      	ldr	r3, [pc, #304]	; (800f538 <etharp_query+0x25c>)
 800f408:	f240 32e1 	movw	r2, #993	; 0x3e1
 800f40c:	494f      	ldr	r1, [pc, #316]	; (800f54c <etharp_query+0x270>)
 800f40e:	484c      	ldr	r0, [pc, #304]	; (800f540 <etharp_query+0x264>)
 800f410:	f001 fe6c 	bl	80110ec <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f414:	7c7a      	ldrb	r2, [r7, #17]
 800f416:	494b      	ldr	r1, [pc, #300]	; (800f544 <etharp_query+0x268>)
 800f418:	4613      	mov	r3, r2
 800f41a:	005b      	lsls	r3, r3, #1
 800f41c:	4413      	add	r3, r2
 800f41e:	00db      	lsls	r3, r3, #3
 800f420:	440b      	add	r3, r1
 800f422:	3314      	adds	r3, #20
 800f424:	781b      	ldrb	r3, [r3, #0]
 800f426:	2b01      	cmp	r3, #1
 800f428:	d917      	bls.n	800f45a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f42a:	4a49      	ldr	r2, [pc, #292]	; (800f550 <etharp_query+0x274>)
 800f42c:	7c7b      	ldrb	r3, [r7, #17]
 800f42e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f430:	7c7a      	ldrb	r2, [r7, #17]
 800f432:	4613      	mov	r3, r2
 800f434:	005b      	lsls	r3, r3, #1
 800f436:	4413      	add	r3, r2
 800f438:	00db      	lsls	r3, r3, #3
 800f43a:	3308      	adds	r3, #8
 800f43c:	4a41      	ldr	r2, [pc, #260]	; (800f544 <etharp_query+0x268>)
 800f43e:	4413      	add	r3, r2
 800f440:	3304      	adds	r3, #4
 800f442:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f446:	9200      	str	r2, [sp, #0]
 800f448:	697a      	ldr	r2, [r7, #20]
 800f44a:	6879      	ldr	r1, [r7, #4]
 800f44c:	68f8      	ldr	r0, [r7, #12]
 800f44e:	f001 fd05 	bl	8010e5c <ethernet_output>
 800f452:	4603      	mov	r3, r0
 800f454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f458:	e067      	b.n	800f52a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f45a:	7c7a      	ldrb	r2, [r7, #17]
 800f45c:	4939      	ldr	r1, [pc, #228]	; (800f544 <etharp_query+0x268>)
 800f45e:	4613      	mov	r3, r2
 800f460:	005b      	lsls	r3, r3, #1
 800f462:	4413      	add	r3, r2
 800f464:	00db      	lsls	r3, r3, #3
 800f466:	440b      	add	r3, r1
 800f468:	3314      	adds	r3, #20
 800f46a:	781b      	ldrb	r3, [r3, #0]
 800f46c:	2b01      	cmp	r3, #1
 800f46e:	d15c      	bne.n	800f52a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f470:	2300      	movs	r3, #0
 800f472:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f478:	e01c      	b.n	800f4b4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f47a:	69fb      	ldr	r3, [r7, #28]
 800f47c:	895a      	ldrh	r2, [r3, #10]
 800f47e:	69fb      	ldr	r3, [r7, #28]
 800f480:	891b      	ldrh	r3, [r3, #8]
 800f482:	429a      	cmp	r2, r3
 800f484:	d10a      	bne.n	800f49c <etharp_query+0x1c0>
 800f486:	69fb      	ldr	r3, [r7, #28]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d006      	beq.n	800f49c <etharp_query+0x1c0>
 800f48e:	4b2a      	ldr	r3, [pc, #168]	; (800f538 <etharp_query+0x25c>)
 800f490:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f494:	492f      	ldr	r1, [pc, #188]	; (800f554 <etharp_query+0x278>)
 800f496:	482a      	ldr	r0, [pc, #168]	; (800f540 <etharp_query+0x264>)
 800f498:	f001 fe28 	bl	80110ec <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f49c:	69fb      	ldr	r3, [r7, #28]
 800f49e:	7b1b      	ldrb	r3, [r3, #12]
 800f4a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d002      	beq.n	800f4ae <etharp_query+0x1d2>
        copy_needed = 1;
 800f4a8:	2301      	movs	r3, #1
 800f4aa:	61bb      	str	r3, [r7, #24]
        break;
 800f4ac:	e005      	b.n	800f4ba <etharp_query+0x1de>
      }
      p = p->next;
 800f4ae:	69fb      	ldr	r3, [r7, #28]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f4b4:	69fb      	ldr	r3, [r7, #28]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d1df      	bne.n	800f47a <etharp_query+0x19e>
    }
    if (copy_needed) {
 800f4ba:	69bb      	ldr	r3, [r7, #24]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d007      	beq.n	800f4d0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f4c0:	687a      	ldr	r2, [r7, #4]
 800f4c2:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f4c6:	200e      	movs	r0, #14
 800f4c8:	f7f8 fec2 	bl	8008250 <pbuf_clone>
 800f4cc:	61f8      	str	r0, [r7, #28]
 800f4ce:	e004      	b.n	800f4da <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f4d4:	69f8      	ldr	r0, [r7, #28]
 800f4d6:	f7f8 fc6d 	bl	8007db4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f4da:	69fb      	ldr	r3, [r7, #28]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d021      	beq.n	800f524 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f4e0:	7c7a      	ldrb	r2, [r7, #17]
 800f4e2:	4918      	ldr	r1, [pc, #96]	; (800f544 <etharp_query+0x268>)
 800f4e4:	4613      	mov	r3, r2
 800f4e6:	005b      	lsls	r3, r3, #1
 800f4e8:	4413      	add	r3, r2
 800f4ea:	00db      	lsls	r3, r3, #3
 800f4ec:	440b      	add	r3, r1
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d00a      	beq.n	800f50a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f4f4:	7c7a      	ldrb	r2, [r7, #17]
 800f4f6:	4913      	ldr	r1, [pc, #76]	; (800f544 <etharp_query+0x268>)
 800f4f8:	4613      	mov	r3, r2
 800f4fa:	005b      	lsls	r3, r3, #1
 800f4fc:	4413      	add	r3, r2
 800f4fe:	00db      	lsls	r3, r3, #3
 800f500:	440b      	add	r3, r1
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	4618      	mov	r0, r3
 800f506:	f7f8 fbb5 	bl	8007c74 <pbuf_free>
      }
      arp_table[i].q = p;
 800f50a:	7c7a      	ldrb	r2, [r7, #17]
 800f50c:	490d      	ldr	r1, [pc, #52]	; (800f544 <etharp_query+0x268>)
 800f50e:	4613      	mov	r3, r2
 800f510:	005b      	lsls	r3, r3, #1
 800f512:	4413      	add	r3, r2
 800f514:	00db      	lsls	r3, r3, #3
 800f516:	440b      	add	r3, r1
 800f518:	69fa      	ldr	r2, [r7, #28]
 800f51a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f51c:	2300      	movs	r3, #0
 800f51e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f522:	e002      	b.n	800f52a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f524:	23ff      	movs	r3, #255	; 0xff
 800f526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800f52a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f52e:	4618      	mov	r0, r3
 800f530:	3728      	adds	r7, #40	; 0x28
 800f532:	46bd      	mov	sp, r7
 800f534:	bd80      	pop	{r7, pc}
 800f536:	bf00      	nop
 800f538:	08014644 	.word	0x08014644
 800f53c:	080147f0 	.word	0x080147f0
 800f540:	080146bc 	.word	0x080146bc
 800f544:	20008888 	.word	0x20008888
 800f548:	08014800 	.word	0x08014800
 800f54c:	080147e4 	.word	0x080147e4
 800f550:	20008978 	.word	0x20008978
 800f554:	08014828 	.word	0x08014828

0800f558 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b08a      	sub	sp, #40	; 0x28
 800f55c:	af02      	add	r7, sp, #8
 800f55e:	60f8      	str	r0, [r7, #12]
 800f560:	60b9      	str	r1, [r7, #8]
 800f562:	607a      	str	r2, [r7, #4]
 800f564:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f566:	2300      	movs	r3, #0
 800f568:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d106      	bne.n	800f57e <etharp_raw+0x26>
 800f570:	4b3a      	ldr	r3, [pc, #232]	; (800f65c <etharp_raw+0x104>)
 800f572:	f240 4257 	movw	r2, #1111	; 0x457
 800f576:	493a      	ldr	r1, [pc, #232]	; (800f660 <etharp_raw+0x108>)
 800f578:	483a      	ldr	r0, [pc, #232]	; (800f664 <etharp_raw+0x10c>)
 800f57a:	f001 fdb7 	bl	80110ec <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f57e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f582:	211c      	movs	r1, #28
 800f584:	200e      	movs	r0, #14
 800f586:	f7f8 f891 	bl	80076ac <pbuf_alloc>
 800f58a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f58c:	69bb      	ldr	r3, [r7, #24]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d102      	bne.n	800f598 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f592:	f04f 33ff 	mov.w	r3, #4294967295
 800f596:	e05d      	b.n	800f654 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f598:	69bb      	ldr	r3, [r7, #24]
 800f59a:	895b      	ldrh	r3, [r3, #10]
 800f59c:	2b1b      	cmp	r3, #27
 800f59e:	d806      	bhi.n	800f5ae <etharp_raw+0x56>
 800f5a0:	4b2e      	ldr	r3, [pc, #184]	; (800f65c <etharp_raw+0x104>)
 800f5a2:	f240 4262 	movw	r2, #1122	; 0x462
 800f5a6:	4930      	ldr	r1, [pc, #192]	; (800f668 <etharp_raw+0x110>)
 800f5a8:	482e      	ldr	r0, [pc, #184]	; (800f664 <etharp_raw+0x10c>)
 800f5aa:	f001 fd9f 	bl	80110ec <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f5ae:	69bb      	ldr	r3, [r7, #24]
 800f5b0:	685b      	ldr	r3, [r3, #4]
 800f5b2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f5b4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f7f6 fffe 	bl	80065b8 <lwip_htons>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	461a      	mov	r2, r3
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f5ca:	2b06      	cmp	r3, #6
 800f5cc:	d006      	beq.n	800f5dc <etharp_raw+0x84>
 800f5ce:	4b23      	ldr	r3, [pc, #140]	; (800f65c <etharp_raw+0x104>)
 800f5d0:	f240 4269 	movw	r2, #1129	; 0x469
 800f5d4:	4925      	ldr	r1, [pc, #148]	; (800f66c <etharp_raw+0x114>)
 800f5d6:	4823      	ldr	r0, [pc, #140]	; (800f664 <etharp_raw+0x10c>)
 800f5d8:	f001 fd88 	bl	80110ec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f5dc:	697b      	ldr	r3, [r7, #20]
 800f5de:	3308      	adds	r3, #8
 800f5e0:	2206      	movs	r2, #6
 800f5e2:	6839      	ldr	r1, [r7, #0]
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f001 fe96 	bl	8011316 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	3312      	adds	r3, #18
 800f5ee:	2206      	movs	r2, #6
 800f5f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	f001 fe8f 	bl	8011316 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	330e      	adds	r3, #14
 800f5fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f5fe:	6812      	ldr	r2, [r2, #0]
 800f600:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f602:	697b      	ldr	r3, [r7, #20]
 800f604:	3318      	adds	r3, #24
 800f606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f608:	6812      	ldr	r2, [r2, #0]
 800f60a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	2200      	movs	r2, #0
 800f610:	701a      	strb	r2, [r3, #0]
 800f612:	2200      	movs	r2, #0
 800f614:	f042 0201 	orr.w	r2, r2, #1
 800f618:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	2200      	movs	r2, #0
 800f61e:	f042 0208 	orr.w	r2, r2, #8
 800f622:	709a      	strb	r2, [r3, #2]
 800f624:	2200      	movs	r2, #0
 800f626:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f628:	697b      	ldr	r3, [r7, #20]
 800f62a:	2206      	movs	r2, #6
 800f62c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	2204      	movs	r2, #4
 800f632:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f634:	f640 0306 	movw	r3, #2054	; 0x806
 800f638:	9300      	str	r3, [sp, #0]
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	68ba      	ldr	r2, [r7, #8]
 800f63e:	69b9      	ldr	r1, [r7, #24]
 800f640:	68f8      	ldr	r0, [r7, #12]
 800f642:	f001 fc0b 	bl	8010e5c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f646:	69b8      	ldr	r0, [r7, #24]
 800f648:	f7f8 fb14 	bl	8007c74 <pbuf_free>
  p = NULL;
 800f64c:	2300      	movs	r3, #0
 800f64e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f650:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f654:	4618      	mov	r0, r3
 800f656:	3720      	adds	r7, #32
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}
 800f65c:	08014644 	.word	0x08014644
 800f660:	08014794 	.word	0x08014794
 800f664:	080146bc 	.word	0x080146bc
 800f668:	08014844 	.word	0x08014844
 800f66c:	08014878 	.word	0x08014878

0800f670 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b088      	sub	sp, #32
 800f674:	af04      	add	r7, sp, #16
 800f676:	60f8      	str	r0, [r7, #12]
 800f678:	60b9      	str	r1, [r7, #8]
 800f67a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f68c:	2201      	movs	r2, #1
 800f68e:	9203      	str	r2, [sp, #12]
 800f690:	68ba      	ldr	r2, [r7, #8]
 800f692:	9202      	str	r2, [sp, #8]
 800f694:	4a06      	ldr	r2, [pc, #24]	; (800f6b0 <etharp_request_dst+0x40>)
 800f696:	9201      	str	r2, [sp, #4]
 800f698:	9300      	str	r3, [sp, #0]
 800f69a:	4603      	mov	r3, r0
 800f69c:	687a      	ldr	r2, [r7, #4]
 800f69e:	68f8      	ldr	r0, [r7, #12]
 800f6a0:	f7ff ff5a 	bl	800f558 <etharp_raw>
 800f6a4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	3710      	adds	r7, #16
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}
 800f6ae:	bf00      	nop
 800f6b0:	08014e08 	.word	0x08014e08

0800f6b4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b082      	sub	sp, #8
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
 800f6bc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f6be:	4a05      	ldr	r2, [pc, #20]	; (800f6d4 <etharp_request+0x20>)
 800f6c0:	6839      	ldr	r1, [r7, #0]
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f7ff ffd4 	bl	800f670 <etharp_request_dst>
 800f6c8:	4603      	mov	r3, r0
}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	3708      	adds	r7, #8
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}
 800f6d2:	bf00      	nop
 800f6d4:	08014e00 	.word	0x08014e00

0800f6d8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b08e      	sub	sp, #56	; 0x38
 800f6dc:	af04      	add	r7, sp, #16
 800f6de:	6078      	str	r0, [r7, #4]
 800f6e0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800f6e2:	4b79      	ldr	r3, [pc, #484]	; (800f8c8 <icmp_input+0x1f0>)
 800f6e4:	689b      	ldr	r3, [r3, #8]
 800f6e6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800f6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ea:	781b      	ldrb	r3, [r3, #0]
 800f6ec:	f003 030f 	and.w	r3, r3, #15
 800f6f0:	b2db      	uxtb	r3, r3
 800f6f2:	009b      	lsls	r3, r3, #2
 800f6f4:	b2db      	uxtb	r3, r3
 800f6f6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800f6f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f6fa:	2b13      	cmp	r3, #19
 800f6fc:	f240 80cd 	bls.w	800f89a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	895b      	ldrh	r3, [r3, #10]
 800f704:	2b03      	cmp	r3, #3
 800f706:	f240 80ca 	bls.w	800f89e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	685b      	ldr	r3, [r3, #4]
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800f714:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f718:	2b00      	cmp	r3, #0
 800f71a:	f000 80b7 	beq.w	800f88c <icmp_input+0x1b4>
 800f71e:	2b08      	cmp	r3, #8
 800f720:	f040 80b7 	bne.w	800f892 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800f724:	4b69      	ldr	r3, [pc, #420]	; (800f8cc <icmp_input+0x1f4>)
 800f726:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f728:	4b67      	ldr	r3, [pc, #412]	; (800f8c8 <icmp_input+0x1f0>)
 800f72a:	695b      	ldr	r3, [r3, #20]
 800f72c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f730:	2be0      	cmp	r3, #224	; 0xe0
 800f732:	f000 80bb 	beq.w	800f8ac <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800f736:	4b64      	ldr	r3, [pc, #400]	; (800f8c8 <icmp_input+0x1f0>)
 800f738:	695b      	ldr	r3, [r3, #20]
 800f73a:	4a63      	ldr	r2, [pc, #396]	; (800f8c8 <icmp_input+0x1f0>)
 800f73c:	6812      	ldr	r2, [r2, #0]
 800f73e:	4611      	mov	r1, r2
 800f740:	4618      	mov	r0, r3
 800f742:	f000 fbed 	bl	800ff20 <ip4_addr_isbroadcast_u32>
 800f746:	4603      	mov	r3, r0
 800f748:	2b00      	cmp	r3, #0
 800f74a:	f040 80b1 	bne.w	800f8b0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	891b      	ldrh	r3, [r3, #8]
 800f752:	2b07      	cmp	r3, #7
 800f754:	f240 80a5 	bls.w	800f8a2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f758:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f75a:	330e      	adds	r3, #14
 800f75c:	4619      	mov	r1, r3
 800f75e:	6878      	ldr	r0, [r7, #4]
 800f760:	f7f8 f9f2 	bl	8007b48 <pbuf_add_header>
 800f764:	4603      	mov	r3, r0
 800f766:	2b00      	cmp	r3, #0
 800f768:	d04b      	beq.n	800f802 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	891a      	ldrh	r2, [r3, #8]
 800f76e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f770:	4413      	add	r3, r2
 800f772:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	891b      	ldrh	r3, [r3, #8]
 800f778:	8b7a      	ldrh	r2, [r7, #26]
 800f77a:	429a      	cmp	r2, r3
 800f77c:	f0c0 809a 	bcc.w	800f8b4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800f780:	8b7b      	ldrh	r3, [r7, #26]
 800f782:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f786:	4619      	mov	r1, r3
 800f788:	200e      	movs	r0, #14
 800f78a:	f7f7 ff8f 	bl	80076ac <pbuf_alloc>
 800f78e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800f790:	697b      	ldr	r3, [r7, #20]
 800f792:	2b00      	cmp	r3, #0
 800f794:	f000 8090 	beq.w	800f8b8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	895b      	ldrh	r3, [r3, #10]
 800f79c:	461a      	mov	r2, r3
 800f79e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f7a0:	3308      	adds	r3, #8
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d203      	bcs.n	800f7ae <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800f7a6:	6978      	ldr	r0, [r7, #20]
 800f7a8:	f7f8 fa64 	bl	8007c74 <pbuf_free>
          goto icmperr;
 800f7ac:	e085      	b.n	800f8ba <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800f7ae:	697b      	ldr	r3, [r7, #20]
 800f7b0:	685b      	ldr	r3, [r3, #4]
 800f7b2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f7b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f001 fdad 	bl	8011316 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800f7bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f7be:	4619      	mov	r1, r3
 800f7c0:	6978      	ldr	r0, [r7, #20]
 800f7c2:	f7f8 f9d1 	bl	8007b68 <pbuf_remove_header>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d009      	beq.n	800f7e0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f7cc:	4b40      	ldr	r3, [pc, #256]	; (800f8d0 <icmp_input+0x1f8>)
 800f7ce:	22b6      	movs	r2, #182	; 0xb6
 800f7d0:	4940      	ldr	r1, [pc, #256]	; (800f8d4 <icmp_input+0x1fc>)
 800f7d2:	4841      	ldr	r0, [pc, #260]	; (800f8d8 <icmp_input+0x200>)
 800f7d4:	f001 fc8a 	bl	80110ec <iprintf>
          pbuf_free(r);
 800f7d8:	6978      	ldr	r0, [r7, #20]
 800f7da:	f7f8 fa4b 	bl	8007c74 <pbuf_free>
          goto icmperr;
 800f7de:	e06c      	b.n	800f8ba <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800f7e0:	6879      	ldr	r1, [r7, #4]
 800f7e2:	6978      	ldr	r0, [r7, #20]
 800f7e4:	f7f8 fb5e 	bl	8007ea4 <pbuf_copy>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d003      	beq.n	800f7f6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800f7ee:	6978      	ldr	r0, [r7, #20]
 800f7f0:	f7f8 fa40 	bl	8007c74 <pbuf_free>
          goto icmperr;
 800f7f4:	e061      	b.n	800f8ba <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800f7f6:	6878      	ldr	r0, [r7, #4]
 800f7f8:	f7f8 fa3c 	bl	8007c74 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	607b      	str	r3, [r7, #4]
 800f800:	e00f      	b.n	800f822 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f802:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f804:	330e      	adds	r3, #14
 800f806:	4619      	mov	r1, r3
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f7f8 f9ad 	bl	8007b68 <pbuf_remove_header>
 800f80e:	4603      	mov	r3, r0
 800f810:	2b00      	cmp	r3, #0
 800f812:	d006      	beq.n	800f822 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f814:	4b2e      	ldr	r3, [pc, #184]	; (800f8d0 <icmp_input+0x1f8>)
 800f816:	22c7      	movs	r2, #199	; 0xc7
 800f818:	4930      	ldr	r1, [pc, #192]	; (800f8dc <icmp_input+0x204>)
 800f81a:	482f      	ldr	r0, [pc, #188]	; (800f8d8 <icmp_input+0x200>)
 800f81c:	f001 fc66 	bl	80110ec <iprintf>
          goto icmperr;
 800f820:	e04b      	b.n	800f8ba <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	685b      	ldr	r3, [r3, #4]
 800f826:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800f828:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f82a:	4619      	mov	r1, r3
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f7f8 f98b 	bl	8007b48 <pbuf_add_header>
 800f832:	4603      	mov	r3, r0
 800f834:	2b00      	cmp	r3, #0
 800f836:	d12b      	bne.n	800f890 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	685b      	ldr	r3, [r3, #4]
 800f83c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800f83e:	69fb      	ldr	r3, [r7, #28]
 800f840:	681a      	ldr	r2, [r3, #0]
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f846:	4b20      	ldr	r3, [pc, #128]	; (800f8c8 <icmp_input+0x1f0>)
 800f848:	691a      	ldr	r2, [r3, #16]
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f84e:	693b      	ldr	r3, [r7, #16]
 800f850:	2200      	movs	r2, #0
 800f852:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800f854:	693b      	ldr	r3, [r7, #16]
 800f856:	2200      	movs	r2, #0
 800f858:	709a      	strb	r2, [r3, #2]
 800f85a:	2200      	movs	r2, #0
 800f85c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	22ff      	movs	r2, #255	; 0xff
 800f862:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	2200      	movs	r2, #0
 800f868:	729a      	strb	r2, [r3, #10]
 800f86a:	2200      	movs	r2, #0
 800f86c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	9302      	str	r3, [sp, #8]
 800f872:	2301      	movs	r3, #1
 800f874:	9301      	str	r3, [sp, #4]
 800f876:	2300      	movs	r3, #0
 800f878:	9300      	str	r3, [sp, #0]
 800f87a:	23ff      	movs	r3, #255	; 0xff
 800f87c:	2200      	movs	r2, #0
 800f87e:	69f9      	ldr	r1, [r7, #28]
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f000 fa75 	bl	800fd70 <ip4_output_if>
 800f886:	4603      	mov	r3, r0
 800f888:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800f88a:	e001      	b.n	800f890 <icmp_input+0x1b8>
      break;
 800f88c:	bf00      	nop
 800f88e:	e000      	b.n	800f892 <icmp_input+0x1ba>
      break;
 800f890:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f892:	6878      	ldr	r0, [r7, #4]
 800f894:	f7f8 f9ee 	bl	8007c74 <pbuf_free>
  return;
 800f898:	e013      	b.n	800f8c2 <icmp_input+0x1ea>
    goto lenerr;
 800f89a:	bf00      	nop
 800f89c:	e002      	b.n	800f8a4 <icmp_input+0x1cc>
    goto lenerr;
 800f89e:	bf00      	nop
 800f8a0:	e000      	b.n	800f8a4 <icmp_input+0x1cc>
        goto lenerr;
 800f8a2:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f7f8 f9e5 	bl	8007c74 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f8aa:	e00a      	b.n	800f8c2 <icmp_input+0x1ea>
        goto icmperr;
 800f8ac:	bf00      	nop
 800f8ae:	e004      	b.n	800f8ba <icmp_input+0x1e2>
        goto icmperr;
 800f8b0:	bf00      	nop
 800f8b2:	e002      	b.n	800f8ba <icmp_input+0x1e2>
          goto icmperr;
 800f8b4:	bf00      	nop
 800f8b6:	e000      	b.n	800f8ba <icmp_input+0x1e2>
          goto icmperr;
 800f8b8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f8ba:	6878      	ldr	r0, [r7, #4]
 800f8bc:	f7f8 f9da 	bl	8007c74 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f8c0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f8c2:	3728      	adds	r7, #40	; 0x28
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}
 800f8c8:	200052b8 	.word	0x200052b8
 800f8cc:	200052cc 	.word	0x200052cc
 800f8d0:	080148bc 	.word	0x080148bc
 800f8d4:	080148f4 	.word	0x080148f4
 800f8d8:	0801492c 	.word	0x0801492c
 800f8dc:	08014954 	.word	0x08014954

0800f8e0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b082      	sub	sp, #8
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
 800f8e8:	460b      	mov	r3, r1
 800f8ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f8ec:	78fb      	ldrb	r3, [r7, #3]
 800f8ee:	461a      	mov	r2, r3
 800f8f0:	2103      	movs	r1, #3
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	f000 f814 	bl	800f920 <icmp_send_response>
}
 800f8f8:	bf00      	nop
 800f8fa:	3708      	adds	r7, #8
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}

0800f900 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b082      	sub	sp, #8
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
 800f908:	460b      	mov	r3, r1
 800f90a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f90c:	78fb      	ldrb	r3, [r7, #3]
 800f90e:	461a      	mov	r2, r3
 800f910:	210b      	movs	r1, #11
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f000 f804 	bl	800f920 <icmp_send_response>
}
 800f918:	bf00      	nop
 800f91a:	3708      	adds	r7, #8
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd80      	pop	{r7, pc}

0800f920 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b08c      	sub	sp, #48	; 0x30
 800f924:	af04      	add	r7, sp, #16
 800f926:	6078      	str	r0, [r7, #4]
 800f928:	460b      	mov	r3, r1
 800f92a:	70fb      	strb	r3, [r7, #3]
 800f92c:	4613      	mov	r3, r2
 800f92e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f930:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f934:	2124      	movs	r1, #36	; 0x24
 800f936:	2022      	movs	r0, #34	; 0x22
 800f938:	f7f7 feb8 	bl	80076ac <pbuf_alloc>
 800f93c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800f93e:	69fb      	ldr	r3, [r7, #28]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d04c      	beq.n	800f9de <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f944:	69fb      	ldr	r3, [r7, #28]
 800f946:	895b      	ldrh	r3, [r3, #10]
 800f948:	2b23      	cmp	r3, #35	; 0x23
 800f94a:	d806      	bhi.n	800f95a <icmp_send_response+0x3a>
 800f94c:	4b26      	ldr	r3, [pc, #152]	; (800f9e8 <icmp_send_response+0xc8>)
 800f94e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800f952:	4926      	ldr	r1, [pc, #152]	; (800f9ec <icmp_send_response+0xcc>)
 800f954:	4826      	ldr	r0, [pc, #152]	; (800f9f0 <icmp_send_response+0xd0>)
 800f956:	f001 fbc9 	bl	80110ec <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	685b      	ldr	r3, [r3, #4]
 800f95e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f960:	69fb      	ldr	r3, [r7, #28]
 800f962:	685b      	ldr	r3, [r3, #4]
 800f964:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800f966:	697b      	ldr	r3, [r7, #20]
 800f968:	78fa      	ldrb	r2, [r7, #3]
 800f96a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800f96c:	697b      	ldr	r3, [r7, #20]
 800f96e:	78ba      	ldrb	r2, [r7, #2]
 800f970:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800f972:	697b      	ldr	r3, [r7, #20]
 800f974:	2200      	movs	r2, #0
 800f976:	711a      	strb	r2, [r3, #4]
 800f978:	2200      	movs	r2, #0
 800f97a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800f97c:	697b      	ldr	r3, [r7, #20]
 800f97e:	2200      	movs	r2, #0
 800f980:	719a      	strb	r2, [r3, #6]
 800f982:	2200      	movs	r2, #0
 800f984:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f986:	69fb      	ldr	r3, [r7, #28]
 800f988:	685b      	ldr	r3, [r3, #4]
 800f98a:	f103 0008 	add.w	r0, r3, #8
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	685b      	ldr	r3, [r3, #4]
 800f992:	221c      	movs	r2, #28
 800f994:	4619      	mov	r1, r3
 800f996:	f001 fcbe 	bl	8011316 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800f99a:	69bb      	ldr	r3, [r7, #24]
 800f99c:	68db      	ldr	r3, [r3, #12]
 800f99e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f9a0:	f107 030c 	add.w	r3, r7, #12
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	f000 f825 	bl	800f9f4 <ip4_route>
 800f9aa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800f9ac:	693b      	ldr	r3, [r7, #16]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d011      	beq.n	800f9d6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f9b2:	697b      	ldr	r3, [r7, #20]
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	709a      	strb	r2, [r3, #2]
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f9bc:	f107 020c 	add.w	r2, r7, #12
 800f9c0:	693b      	ldr	r3, [r7, #16]
 800f9c2:	9302      	str	r3, [sp, #8]
 800f9c4:	2301      	movs	r3, #1
 800f9c6:	9301      	str	r3, [sp, #4]
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	9300      	str	r3, [sp, #0]
 800f9cc:	23ff      	movs	r3, #255	; 0xff
 800f9ce:	2100      	movs	r1, #0
 800f9d0:	69f8      	ldr	r0, [r7, #28]
 800f9d2:	f000 f9cd 	bl	800fd70 <ip4_output_if>
  }
  pbuf_free(q);
 800f9d6:	69f8      	ldr	r0, [r7, #28]
 800f9d8:	f7f8 f94c 	bl	8007c74 <pbuf_free>
 800f9dc:	e000      	b.n	800f9e0 <icmp_send_response+0xc0>
    return;
 800f9de:	bf00      	nop
}
 800f9e0:	3720      	adds	r7, #32
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}
 800f9e6:	bf00      	nop
 800f9e8:	080148bc 	.word	0x080148bc
 800f9ec:	08014988 	.word	0x08014988
 800f9f0:	0801492c 	.word	0x0801492c

0800f9f4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f9f4:	b480      	push	{r7}
 800f9f6:	b085      	sub	sp, #20
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800f9fc:	4b33      	ldr	r3, [pc, #204]	; (800facc <ip4_route+0xd8>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	60fb      	str	r3, [r7, #12]
 800fa02:	e036      	b.n	800fa72 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa0a:	f003 0301 	and.w	r3, r3, #1
 800fa0e:	b2db      	uxtb	r3, r3
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d02b      	beq.n	800fa6c <ip4_route+0x78>
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa1a:	089b      	lsrs	r3, r3, #2
 800fa1c:	f003 0301 	and.w	r3, r3, #1
 800fa20:	b2db      	uxtb	r3, r3
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d022      	beq.n	800fa6c <ip4_route+0x78>
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	3304      	adds	r3, #4
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d01d      	beq.n	800fa6c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681a      	ldr	r2, [r3, #0]
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	3304      	adds	r3, #4
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	405a      	eors	r2, r3
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	3308      	adds	r3, #8
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	4013      	ands	r3, r2
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d101      	bne.n	800fa4c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	e038      	b.n	800fabe <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa52:	f003 0302 	and.w	r3, r3, #2
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d108      	bne.n	800fa6c <ip4_route+0x78>
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	681a      	ldr	r2, [r3, #0]
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	330c      	adds	r3, #12
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	429a      	cmp	r2, r3
 800fa66:	d101      	bne.n	800fa6c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	e028      	b.n	800fabe <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	60fb      	str	r3, [r7, #12]
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d1c5      	bne.n	800fa04 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fa78:	4b15      	ldr	r3, [pc, #84]	; (800fad0 <ip4_route+0xdc>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d01a      	beq.n	800fab6 <ip4_route+0xc2>
 800fa80:	4b13      	ldr	r3, [pc, #76]	; (800fad0 <ip4_route+0xdc>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa88:	f003 0301 	and.w	r3, r3, #1
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d012      	beq.n	800fab6 <ip4_route+0xc2>
 800fa90:	4b0f      	ldr	r3, [pc, #60]	; (800fad0 <ip4_route+0xdc>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa98:	f003 0304 	and.w	r3, r3, #4
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d00a      	beq.n	800fab6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800faa0:	4b0b      	ldr	r3, [pc, #44]	; (800fad0 <ip4_route+0xdc>)
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	3304      	adds	r3, #4
 800faa6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d004      	beq.n	800fab6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	b2db      	uxtb	r3, r3
 800fab2:	2b7f      	cmp	r3, #127	; 0x7f
 800fab4:	d101      	bne.n	800faba <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800fab6:	2300      	movs	r3, #0
 800fab8:	e001      	b.n	800fabe <ip4_route+0xca>
  }

  return netif_default;
 800faba:	4b05      	ldr	r3, [pc, #20]	; (800fad0 <ip4_route+0xdc>)
 800fabc:	681b      	ldr	r3, [r3, #0]
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	3714      	adds	r7, #20
 800fac2:	46bd      	mov	sp, r7
 800fac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac8:	4770      	bx	lr
 800faca:	bf00      	nop
 800facc:	2000881c 	.word	0x2000881c
 800fad0:	20008820 	.word	0x20008820

0800fad4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b082      	sub	sp, #8
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fae2:	f003 0301 	and.w	r3, r3, #1
 800fae6:	b2db      	uxtb	r3, r3
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d016      	beq.n	800fb1a <ip4_input_accept+0x46>
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	3304      	adds	r3, #4
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d011      	beq.n	800fb1a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800faf6:	4b0b      	ldr	r3, [pc, #44]	; (800fb24 <ip4_input_accept+0x50>)
 800faf8:	695a      	ldr	r2, [r3, #20]
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	3304      	adds	r3, #4
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	429a      	cmp	r2, r3
 800fb02:	d008      	beq.n	800fb16 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800fb04:	4b07      	ldr	r3, [pc, #28]	; (800fb24 <ip4_input_accept+0x50>)
 800fb06:	695b      	ldr	r3, [r3, #20]
 800fb08:	6879      	ldr	r1, [r7, #4]
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f000 fa08 	bl	800ff20 <ip4_addr_isbroadcast_u32>
 800fb10:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d001      	beq.n	800fb1a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800fb16:	2301      	movs	r3, #1
 800fb18:	e000      	b.n	800fb1c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800fb1a:	2300      	movs	r3, #0
}
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	3708      	adds	r7, #8
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}
 800fb24:	200052b8 	.word	0x200052b8

0800fb28 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b086      	sub	sp, #24
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
 800fb30:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	685b      	ldr	r3, [r3, #4]
 800fb36:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800fb38:	697b      	ldr	r3, [r7, #20]
 800fb3a:	781b      	ldrb	r3, [r3, #0]
 800fb3c:	091b      	lsrs	r3, r3, #4
 800fb3e:	b2db      	uxtb	r3, r3
 800fb40:	2b04      	cmp	r3, #4
 800fb42:	d004      	beq.n	800fb4e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	f7f8 f895 	bl	8007c74 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	e107      	b.n	800fd5e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800fb4e:	697b      	ldr	r3, [r7, #20]
 800fb50:	781b      	ldrb	r3, [r3, #0]
 800fb52:	f003 030f 	and.w	r3, r3, #15
 800fb56:	b2db      	uxtb	r3, r3
 800fb58:	009b      	lsls	r3, r3, #2
 800fb5a:	b2db      	uxtb	r3, r3
 800fb5c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800fb5e:	697b      	ldr	r3, [r7, #20]
 800fb60:	885b      	ldrh	r3, [r3, #2]
 800fb62:	b29b      	uxth	r3, r3
 800fb64:	4618      	mov	r0, r3
 800fb66:	f7f6 fd27 	bl	80065b8 <lwip_htons>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	891b      	ldrh	r3, [r3, #8]
 800fb72:	89ba      	ldrh	r2, [r7, #12]
 800fb74:	429a      	cmp	r2, r3
 800fb76:	d204      	bcs.n	800fb82 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800fb78:	89bb      	ldrh	r3, [r7, #12]
 800fb7a:	4619      	mov	r1, r3
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f7f7 fef3 	bl	8007968 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	895b      	ldrh	r3, [r3, #10]
 800fb86:	89fa      	ldrh	r2, [r7, #14]
 800fb88:	429a      	cmp	r2, r3
 800fb8a:	d807      	bhi.n	800fb9c <ip4_input+0x74>
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	891b      	ldrh	r3, [r3, #8]
 800fb90:	89ba      	ldrh	r2, [r7, #12]
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d802      	bhi.n	800fb9c <ip4_input+0x74>
 800fb96:	89fb      	ldrh	r3, [r7, #14]
 800fb98:	2b13      	cmp	r3, #19
 800fb9a:	d804      	bhi.n	800fba6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f7f8 f869 	bl	8007c74 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800fba2:	2300      	movs	r3, #0
 800fba4:	e0db      	b.n	800fd5e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	691b      	ldr	r3, [r3, #16]
 800fbaa:	4a6f      	ldr	r2, [pc, #444]	; (800fd68 <ip4_input+0x240>)
 800fbac:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800fbae:	697b      	ldr	r3, [r7, #20]
 800fbb0:	68db      	ldr	r3, [r3, #12]
 800fbb2:	4a6d      	ldr	r2, [pc, #436]	; (800fd68 <ip4_input+0x240>)
 800fbb4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fbb6:	4b6c      	ldr	r3, [pc, #432]	; (800fd68 <ip4_input+0x240>)
 800fbb8:	695b      	ldr	r3, [r3, #20]
 800fbba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fbbe:	2be0      	cmp	r3, #224	; 0xe0
 800fbc0:	d112      	bne.n	800fbe8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fbc8:	f003 0301 	and.w	r3, r3, #1
 800fbcc:	b2db      	uxtb	r3, r3
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d007      	beq.n	800fbe2 <ip4_input+0xba>
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	3304      	adds	r3, #4
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d002      	beq.n	800fbe2 <ip4_input+0xba>
      netif = inp;
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	613b      	str	r3, [r7, #16]
 800fbe0:	e02a      	b.n	800fc38 <ip4_input+0x110>
    } else {
      netif = NULL;
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	613b      	str	r3, [r7, #16]
 800fbe6:	e027      	b.n	800fc38 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800fbe8:	6838      	ldr	r0, [r7, #0]
 800fbea:	f7ff ff73 	bl	800fad4 <ip4_input_accept>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d002      	beq.n	800fbfa <ip4_input+0xd2>
      netif = inp;
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	613b      	str	r3, [r7, #16]
 800fbf8:	e01e      	b.n	800fc38 <ip4_input+0x110>
    } else {
      netif = NULL;
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800fbfe:	4b5a      	ldr	r3, [pc, #360]	; (800fd68 <ip4_input+0x240>)
 800fc00:	695b      	ldr	r3, [r3, #20]
 800fc02:	b2db      	uxtb	r3, r3
 800fc04:	2b7f      	cmp	r3, #127	; 0x7f
 800fc06:	d017      	beq.n	800fc38 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800fc08:	4b58      	ldr	r3, [pc, #352]	; (800fd6c <ip4_input+0x244>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	613b      	str	r3, [r7, #16]
 800fc0e:	e00e      	b.n	800fc2e <ip4_input+0x106>
          if (netif == inp) {
 800fc10:	693a      	ldr	r2, [r7, #16]
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d006      	beq.n	800fc26 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800fc18:	6938      	ldr	r0, [r7, #16]
 800fc1a:	f7ff ff5b 	bl	800fad4 <ip4_input_accept>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d108      	bne.n	800fc36 <ip4_input+0x10e>
 800fc24:	e000      	b.n	800fc28 <ip4_input+0x100>
            continue;
 800fc26:	bf00      	nop
        NETIF_FOREACH(netif) {
 800fc28:	693b      	ldr	r3, [r7, #16]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	613b      	str	r3, [r7, #16]
 800fc2e:	693b      	ldr	r3, [r7, #16]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d1ed      	bne.n	800fc10 <ip4_input+0xe8>
 800fc34:	e000      	b.n	800fc38 <ip4_input+0x110>
            break;
 800fc36:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fc38:	4b4b      	ldr	r3, [pc, #300]	; (800fd68 <ip4_input+0x240>)
 800fc3a:	691b      	ldr	r3, [r3, #16]
 800fc3c:	6839      	ldr	r1, [r7, #0]
 800fc3e:	4618      	mov	r0, r3
 800fc40:	f000 f96e 	bl	800ff20 <ip4_addr_isbroadcast_u32>
 800fc44:	4603      	mov	r3, r0
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d105      	bne.n	800fc56 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800fc4a:	4b47      	ldr	r3, [pc, #284]	; (800fd68 <ip4_input+0x240>)
 800fc4c:	691b      	ldr	r3, [r3, #16]
 800fc4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fc52:	2be0      	cmp	r3, #224	; 0xe0
 800fc54:	d104      	bne.n	800fc60 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	f7f8 f80c 	bl	8007c74 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	e07e      	b.n	800fd5e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800fc60:	693b      	ldr	r3, [r7, #16]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d104      	bne.n	800fc70 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800fc66:	6878      	ldr	r0, [r7, #4]
 800fc68:	f7f8 f804 	bl	8007c74 <pbuf_free>
    return ERR_OK;
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	e076      	b.n	800fd5e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	88db      	ldrh	r3, [r3, #6]
 800fc74:	b29b      	uxth	r3, r3
 800fc76:	461a      	mov	r2, r3
 800fc78:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800fc7c:	4013      	ands	r3, r2
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d00b      	beq.n	800fc9a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f000 fd22 	bl	80106cc <ip4_reass>
 800fc88:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d101      	bne.n	800fc94 <ip4_input+0x16c>
      return ERR_OK;
 800fc90:	2300      	movs	r3, #0
 800fc92:	e064      	b.n	800fd5e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	685b      	ldr	r3, [r3, #4]
 800fc98:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800fc9a:	4a33      	ldr	r2, [pc, #204]	; (800fd68 <ip4_input+0x240>)
 800fc9c:	693b      	ldr	r3, [r7, #16]
 800fc9e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800fca0:	4a31      	ldr	r2, [pc, #196]	; (800fd68 <ip4_input+0x240>)
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800fca6:	4a30      	ldr	r2, [pc, #192]	; (800fd68 <ip4_input+0x240>)
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800fcac:	697b      	ldr	r3, [r7, #20]
 800fcae:	781b      	ldrb	r3, [r3, #0]
 800fcb0:	f003 030f 	and.w	r3, r3, #15
 800fcb4:	b2db      	uxtb	r3, r3
 800fcb6:	009b      	lsls	r3, r3, #2
 800fcb8:	b2db      	uxtb	r3, r3
 800fcba:	b29a      	uxth	r2, r3
 800fcbc:	4b2a      	ldr	r3, [pc, #168]	; (800fd68 <ip4_input+0x240>)
 800fcbe:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800fcc0:	89fb      	ldrh	r3, [r7, #14]
 800fcc2:	4619      	mov	r1, r3
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f7f7 ff4f 	bl	8007b68 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800fcca:	697b      	ldr	r3, [r7, #20]
 800fccc:	7a5b      	ldrb	r3, [r3, #9]
 800fcce:	2b11      	cmp	r3, #17
 800fcd0:	d006      	beq.n	800fce0 <ip4_input+0x1b8>
 800fcd2:	2b11      	cmp	r3, #17
 800fcd4:	dc13      	bgt.n	800fcfe <ip4_input+0x1d6>
 800fcd6:	2b01      	cmp	r3, #1
 800fcd8:	d00c      	beq.n	800fcf4 <ip4_input+0x1cc>
 800fcda:	2b06      	cmp	r3, #6
 800fcdc:	d005      	beq.n	800fcea <ip4_input+0x1c2>
 800fcde:	e00e      	b.n	800fcfe <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800fce0:	6839      	ldr	r1, [r7, #0]
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f7fe fc68 	bl	800e5b8 <udp_input>
        break;
 800fce8:	e026      	b.n	800fd38 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800fcea:	6839      	ldr	r1, [r7, #0]
 800fcec:	6878      	ldr	r0, [r7, #4]
 800fcee:	f7fa f889 	bl	8009e04 <tcp_input>
        break;
 800fcf2:	e021      	b.n	800fd38 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800fcf4:	6839      	ldr	r1, [r7, #0]
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f7ff fcee 	bl	800f6d8 <icmp_input>
        break;
 800fcfc:	e01c      	b.n	800fd38 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fcfe:	4b1a      	ldr	r3, [pc, #104]	; (800fd68 <ip4_input+0x240>)
 800fd00:	695b      	ldr	r3, [r3, #20]
 800fd02:	6939      	ldr	r1, [r7, #16]
 800fd04:	4618      	mov	r0, r3
 800fd06:	f000 f90b 	bl	800ff20 <ip4_addr_isbroadcast_u32>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d10f      	bne.n	800fd30 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fd10:	4b15      	ldr	r3, [pc, #84]	; (800fd68 <ip4_input+0x240>)
 800fd12:	695b      	ldr	r3, [r3, #20]
 800fd14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fd18:	2be0      	cmp	r3, #224	; 0xe0
 800fd1a:	d009      	beq.n	800fd30 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800fd1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fd20:	4619      	mov	r1, r3
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f7f7 ff93 	bl	8007c4e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800fd28:	2102      	movs	r1, #2
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	f7ff fdd8 	bl	800f8e0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800fd30:	6878      	ldr	r0, [r7, #4]
 800fd32:	f7f7 ff9f 	bl	8007c74 <pbuf_free>
        break;
 800fd36:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800fd38:	4b0b      	ldr	r3, [pc, #44]	; (800fd68 <ip4_input+0x240>)
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800fd3e:	4b0a      	ldr	r3, [pc, #40]	; (800fd68 <ip4_input+0x240>)
 800fd40:	2200      	movs	r2, #0
 800fd42:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800fd44:	4b08      	ldr	r3, [pc, #32]	; (800fd68 <ip4_input+0x240>)
 800fd46:	2200      	movs	r2, #0
 800fd48:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800fd4a:	4b07      	ldr	r3, [pc, #28]	; (800fd68 <ip4_input+0x240>)
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800fd50:	4b05      	ldr	r3, [pc, #20]	; (800fd68 <ip4_input+0x240>)
 800fd52:	2200      	movs	r2, #0
 800fd54:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800fd56:	4b04      	ldr	r3, [pc, #16]	; (800fd68 <ip4_input+0x240>)
 800fd58:	2200      	movs	r2, #0
 800fd5a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800fd5c:	2300      	movs	r3, #0
}
 800fd5e:	4618      	mov	r0, r3
 800fd60:	3718      	adds	r7, #24
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd80      	pop	{r7, pc}
 800fd66:	bf00      	nop
 800fd68:	200052b8 	.word	0x200052b8
 800fd6c:	2000881c 	.word	0x2000881c

0800fd70 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b08a      	sub	sp, #40	; 0x28
 800fd74:	af04      	add	r7, sp, #16
 800fd76:	60f8      	str	r0, [r7, #12]
 800fd78:	60b9      	str	r1, [r7, #8]
 800fd7a:	607a      	str	r2, [r7, #4]
 800fd7c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d009      	beq.n	800fd9c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d003      	beq.n	800fd96 <ip4_output_if+0x26>
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d102      	bne.n	800fd9c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800fd96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd98:	3304      	adds	r3, #4
 800fd9a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800fd9c:	78fa      	ldrb	r2, [r7, #3]
 800fd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda0:	9302      	str	r3, [sp, #8]
 800fda2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fda6:	9301      	str	r3, [sp, #4]
 800fda8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fdac:	9300      	str	r3, [sp, #0]
 800fdae:	4613      	mov	r3, r2
 800fdb0:	687a      	ldr	r2, [r7, #4]
 800fdb2:	6979      	ldr	r1, [r7, #20]
 800fdb4:	68f8      	ldr	r0, [r7, #12]
 800fdb6:	f000 f805 	bl	800fdc4 <ip4_output_if_src>
 800fdba:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3718      	adds	r7, #24
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}

0800fdc4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b088      	sub	sp, #32
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	60f8      	str	r0, [r7, #12]
 800fdcc:	60b9      	str	r1, [r7, #8]
 800fdce:	607a      	str	r2, [r7, #4]
 800fdd0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	7b9b      	ldrb	r3, [r3, #14]
 800fdd6:	2b01      	cmp	r3, #1
 800fdd8:	d006      	beq.n	800fde8 <ip4_output_if_src+0x24>
 800fdda:	4b4b      	ldr	r3, [pc, #300]	; (800ff08 <ip4_output_if_src+0x144>)
 800fddc:	f44f 7255 	mov.w	r2, #852	; 0x354
 800fde0:	494a      	ldr	r1, [pc, #296]	; (800ff0c <ip4_output_if_src+0x148>)
 800fde2:	484b      	ldr	r0, [pc, #300]	; (800ff10 <ip4_output_if_src+0x14c>)
 800fde4:	f001 f982 	bl	80110ec <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d060      	beq.n	800feb0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800fdee:	2314      	movs	r3, #20
 800fdf0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800fdf2:	2114      	movs	r1, #20
 800fdf4:	68f8      	ldr	r0, [r7, #12]
 800fdf6:	f7f7 fea7 	bl	8007b48 <pbuf_add_header>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d002      	beq.n	800fe06 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800fe00:	f06f 0301 	mvn.w	r3, #1
 800fe04:	e07c      	b.n	800ff00 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	685b      	ldr	r3, [r3, #4]
 800fe0a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	895b      	ldrh	r3, [r3, #10]
 800fe10:	2b13      	cmp	r3, #19
 800fe12:	d806      	bhi.n	800fe22 <ip4_output_if_src+0x5e>
 800fe14:	4b3c      	ldr	r3, [pc, #240]	; (800ff08 <ip4_output_if_src+0x144>)
 800fe16:	f44f 7262 	mov.w	r2, #904	; 0x388
 800fe1a:	493e      	ldr	r1, [pc, #248]	; (800ff14 <ip4_output_if_src+0x150>)
 800fe1c:	483c      	ldr	r0, [pc, #240]	; (800ff10 <ip4_output_if_src+0x14c>)
 800fe1e:	f001 f965 	bl	80110ec <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800fe22:	69fb      	ldr	r3, [r7, #28]
 800fe24:	78fa      	ldrb	r2, [r7, #3]
 800fe26:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800fe28:	69fb      	ldr	r3, [r7, #28]
 800fe2a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800fe2e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681a      	ldr	r2, [r3, #0]
 800fe34:	69fb      	ldr	r3, [r7, #28]
 800fe36:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800fe38:	8b7b      	ldrh	r3, [r7, #26]
 800fe3a:	089b      	lsrs	r3, r3, #2
 800fe3c:	b29b      	uxth	r3, r3
 800fe3e:	b2db      	uxtb	r3, r3
 800fe40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe44:	b2da      	uxtb	r2, r3
 800fe46:	69fb      	ldr	r3, [r7, #28]
 800fe48:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800fe4a:	69fb      	ldr	r3, [r7, #28]
 800fe4c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fe50:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	891b      	ldrh	r3, [r3, #8]
 800fe56:	4618      	mov	r0, r3
 800fe58:	f7f6 fbae 	bl	80065b8 <lwip_htons>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	461a      	mov	r2, r3
 800fe60:	69fb      	ldr	r3, [r7, #28]
 800fe62:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800fe64:	69fb      	ldr	r3, [r7, #28]
 800fe66:	2200      	movs	r2, #0
 800fe68:	719a      	strb	r2, [r3, #6]
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800fe6e:	4b2a      	ldr	r3, [pc, #168]	; (800ff18 <ip4_output_if_src+0x154>)
 800fe70:	881b      	ldrh	r3, [r3, #0]
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7f6 fba0 	bl	80065b8 <lwip_htons>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	461a      	mov	r2, r3
 800fe7c:	69fb      	ldr	r3, [r7, #28]
 800fe7e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800fe80:	4b25      	ldr	r3, [pc, #148]	; (800ff18 <ip4_output_if_src+0x154>)
 800fe82:	881b      	ldrh	r3, [r3, #0]
 800fe84:	3301      	adds	r3, #1
 800fe86:	b29a      	uxth	r2, r3
 800fe88:	4b23      	ldr	r3, [pc, #140]	; (800ff18 <ip4_output_if_src+0x154>)
 800fe8a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d104      	bne.n	800fe9c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800fe92:	4b22      	ldr	r3, [pc, #136]	; (800ff1c <ip4_output_if_src+0x158>)
 800fe94:	681a      	ldr	r2, [r3, #0]
 800fe96:	69fb      	ldr	r3, [r7, #28]
 800fe98:	60da      	str	r2, [r3, #12]
 800fe9a:	e003      	b.n	800fea4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	681a      	ldr	r2, [r3, #0]
 800fea0:	69fb      	ldr	r3, [r7, #28]
 800fea2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800fea4:	69fb      	ldr	r3, [r7, #28]
 800fea6:	2200      	movs	r2, #0
 800fea8:	729a      	strb	r2, [r3, #10]
 800feaa:	2200      	movs	r2, #0
 800feac:	72da      	strb	r2, [r3, #11]
 800feae:	e00f      	b.n	800fed0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	895b      	ldrh	r3, [r3, #10]
 800feb4:	2b13      	cmp	r3, #19
 800feb6:	d802      	bhi.n	800febe <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800feb8:	f06f 0301 	mvn.w	r3, #1
 800febc:	e020      	b.n	800ff00 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	685b      	ldr	r3, [r3, #4]
 800fec2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800fec4:	69fb      	ldr	r3, [r7, #28]
 800fec6:	691b      	ldr	r3, [r3, #16]
 800fec8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800feca:	f107 0314 	add.w	r3, r7, #20
 800fece:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800fed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d00c      	beq.n	800fef2 <ip4_output_if_src+0x12e>
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	891a      	ldrh	r2, [r3, #8]
 800fedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fede:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fee0:	429a      	cmp	r2, r3
 800fee2:	d906      	bls.n	800fef2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800fee4:	687a      	ldr	r2, [r7, #4]
 800fee6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fee8:	68f8      	ldr	r0, [r7, #12]
 800feea:	f000 fde3 	bl	8010ab4 <ip4_frag>
 800feee:	4603      	mov	r3, r0
 800fef0:	e006      	b.n	800ff00 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800fef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fef4:	695b      	ldr	r3, [r3, #20]
 800fef6:	687a      	ldr	r2, [r7, #4]
 800fef8:	68f9      	ldr	r1, [r7, #12]
 800fefa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fefc:	4798      	blx	r3
 800fefe:	4603      	mov	r3, r0
}
 800ff00:	4618      	mov	r0, r3
 800ff02:	3720      	adds	r7, #32
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}
 800ff08:	080149b4 	.word	0x080149b4
 800ff0c:	080149e8 	.word	0x080149e8
 800ff10:	080149f4 	.word	0x080149f4
 800ff14:	08014a1c 	.word	0x08014a1c
 800ff18:	2000897a 	.word	0x2000897a
 800ff1c:	08014dfc 	.word	0x08014dfc

0800ff20 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800ff20:	b480      	push	{r7}
 800ff22:	b085      	sub	sp, #20
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
 800ff28:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff34:	d002      	beq.n	800ff3c <ip4_addr_isbroadcast_u32+0x1c>
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d101      	bne.n	800ff40 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800ff3c:	2301      	movs	r3, #1
 800ff3e:	e02a      	b.n	800ff96 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff46:	f003 0302 	and.w	r3, r3, #2
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d101      	bne.n	800ff52 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800ff4e:	2300      	movs	r3, #0
 800ff50:	e021      	b.n	800ff96 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	3304      	adds	r3, #4
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	687a      	ldr	r2, [r7, #4]
 800ff5a:	429a      	cmp	r2, r3
 800ff5c:	d101      	bne.n	800ff62 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	e019      	b.n	800ff96 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ff62:	68fa      	ldr	r2, [r7, #12]
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	3304      	adds	r3, #4
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	405a      	eors	r2, r3
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	3308      	adds	r3, #8
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	4013      	ands	r3, r2
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d10d      	bne.n	800ff94 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	3308      	adds	r3, #8
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	43da      	mvns	r2, r3
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	3308      	adds	r3, #8
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ff8c:	429a      	cmp	r2, r3
 800ff8e:	d101      	bne.n	800ff94 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800ff90:	2301      	movs	r3, #1
 800ff92:	e000      	b.n	800ff96 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800ff94:	2300      	movs	r3, #0
  }
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	3714      	adds	r7, #20
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa0:	4770      	bx	lr
	...

0800ffa4 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b082      	sub	sp, #8
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800ffac:	2210      	movs	r2, #16
 800ffae:	4904      	ldr	r1, [pc, #16]	; (800ffc0 <ip4addr_ntoa+0x1c>)
 800ffb0:	6878      	ldr	r0, [r7, #4]
 800ffb2:	f000 f807 	bl	800ffc4 <ip4addr_ntoa_r>
 800ffb6:	4603      	mov	r3, r0
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3708      	adds	r7, #8
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}
 800ffc0:	2000897c 	.word	0x2000897c

0800ffc4 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800ffc4:	b480      	push	{r7}
 800ffc6:	b08d      	sub	sp, #52	; 0x34
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	60f8      	str	r0, [r7, #12]
 800ffcc:	60b9      	str	r1, [r7, #8]
 800ffce:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800ffda:	68bb      	ldr	r3, [r7, #8]
 800ffdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800ffde:	f107 0318 	add.w	r3, r7, #24
 800ffe2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ffea:	e058      	b.n	801009e <ip4addr_ntoa_r+0xda>
    i = 0;
 800ffec:	2300      	movs	r3, #0
 800ffee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800fff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fff4:	781a      	ldrb	r2, [r3, #0]
 800fff6:	4b32      	ldr	r3, [pc, #200]	; (80100c0 <ip4addr_ntoa_r+0xfc>)
 800fff8:	fba3 1302 	umull	r1, r3, r3, r2
 800fffc:	08d9      	lsrs	r1, r3, #3
 800fffe:	460b      	mov	r3, r1
 8010000:	009b      	lsls	r3, r3, #2
 8010002:	440b      	add	r3, r1
 8010004:	005b      	lsls	r3, r3, #1
 8010006:	1ad3      	subs	r3, r2, r3
 8010008:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801000a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801000c:	781b      	ldrb	r3, [r3, #0]
 801000e:	4a2c      	ldr	r2, [pc, #176]	; (80100c0 <ip4addr_ntoa_r+0xfc>)
 8010010:	fba2 2303 	umull	r2, r3, r2, r3
 8010014:	08db      	lsrs	r3, r3, #3
 8010016:	b2da      	uxtb	r2, r3
 8010018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801001a:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 801001c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010020:	1c5a      	adds	r2, r3, #1
 8010022:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8010026:	4619      	mov	r1, r3
 8010028:	7ffb      	ldrb	r3, [r7, #31]
 801002a:	3330      	adds	r3, #48	; 0x30
 801002c:	b2da      	uxtb	r2, r3
 801002e:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8010032:	443b      	add	r3, r7
 8010034:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8010038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801003a:	781b      	ldrb	r3, [r3, #0]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d1d8      	bne.n	800fff2 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8010040:	e011      	b.n	8010066 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8010042:	6a3b      	ldr	r3, [r7, #32]
 8010044:	1c5a      	adds	r2, r3, #1
 8010046:	623a      	str	r2, [r7, #32]
 8010048:	687a      	ldr	r2, [r7, #4]
 801004a:	429a      	cmp	r2, r3
 801004c:	dc01      	bgt.n	8010052 <ip4addr_ntoa_r+0x8e>
        return NULL;
 801004e:	2300      	movs	r3, #0
 8010050:	e030      	b.n	80100b4 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8010052:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8010056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010058:	1c59      	adds	r1, r3, #1
 801005a:	62f9      	str	r1, [r7, #44]	; 0x2c
 801005c:	3230      	adds	r2, #48	; 0x30
 801005e:	443a      	add	r2, r7
 8010060:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8010064:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8010066:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801006a:	1e5a      	subs	r2, r3, #1
 801006c:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8010070:	2b00      	cmp	r3, #0
 8010072:	d1e6      	bne.n	8010042 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8010074:	6a3b      	ldr	r3, [r7, #32]
 8010076:	1c5a      	adds	r2, r3, #1
 8010078:	623a      	str	r2, [r7, #32]
 801007a:	687a      	ldr	r2, [r7, #4]
 801007c:	429a      	cmp	r2, r3
 801007e:	dc01      	bgt.n	8010084 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8010080:	2300      	movs	r3, #0
 8010082:	e017      	b.n	80100b4 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8010084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010086:	1c5a      	adds	r2, r3, #1
 8010088:	62fa      	str	r2, [r7, #44]	; 0x2c
 801008a:	222e      	movs	r2, #46	; 0x2e
 801008c:	701a      	strb	r2, [r3, #0]
    ap++;
 801008e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010090:	3301      	adds	r3, #1
 8010092:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8010094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010098:	3301      	adds	r3, #1
 801009a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801009e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80100a2:	2b03      	cmp	r3, #3
 80100a4:	d9a2      	bls.n	800ffec <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 80100a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100a8:	3b01      	subs	r3, #1
 80100aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80100ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ae:	2200      	movs	r2, #0
 80100b0:	701a      	strb	r2, [r3, #0]
  return buf;
 80100b2:	68bb      	ldr	r3, [r7, #8]
}
 80100b4:	4618      	mov	r0, r3
 80100b6:	3734      	adds	r7, #52	; 0x34
 80100b8:	46bd      	mov	sp, r7
 80100ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100be:	4770      	bx	lr
 80100c0:	cccccccd 	.word	0xcccccccd

080100c4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b084      	sub	sp, #16
 80100c8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80100ca:	2300      	movs	r3, #0
 80100cc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80100ce:	4b12      	ldr	r3, [pc, #72]	; (8010118 <ip_reass_tmr+0x54>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80100d4:	e018      	b.n	8010108 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	7fdb      	ldrb	r3, [r3, #31]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d00b      	beq.n	80100f6 <ip_reass_tmr+0x32>
      r->timer--;
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	7fdb      	ldrb	r3, [r3, #31]
 80100e2:	3b01      	subs	r3, #1
 80100e4:	b2da      	uxtb	r2, r3
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	60fb      	str	r3, [r7, #12]
 80100f4:	e008      	b.n	8010108 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010100:	68b9      	ldr	r1, [r7, #8]
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f000 f80a 	bl	801011c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d1e3      	bne.n	80100d6 <ip_reass_tmr+0x12>
    }
  }
}
 801010e:	bf00      	nop
 8010110:	bf00      	nop
 8010112:	3710      	adds	r7, #16
 8010114:	46bd      	mov	sp, r7
 8010116:	bd80      	pop	{r7, pc}
 8010118:	2000898c 	.word	0x2000898c

0801011c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b088      	sub	sp, #32
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
 8010124:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8010126:	2300      	movs	r3, #0
 8010128:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801012a:	683a      	ldr	r2, [r7, #0]
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	429a      	cmp	r2, r3
 8010130:	d105      	bne.n	801013e <ip_reass_free_complete_datagram+0x22>
 8010132:	4b45      	ldr	r3, [pc, #276]	; (8010248 <ip_reass_free_complete_datagram+0x12c>)
 8010134:	22ab      	movs	r2, #171	; 0xab
 8010136:	4945      	ldr	r1, [pc, #276]	; (801024c <ip_reass_free_complete_datagram+0x130>)
 8010138:	4845      	ldr	r0, [pc, #276]	; (8010250 <ip_reass_free_complete_datagram+0x134>)
 801013a:	f000 ffd7 	bl	80110ec <iprintf>
  if (prev != NULL) {
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d00a      	beq.n	801015a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	687a      	ldr	r2, [r7, #4]
 801014a:	429a      	cmp	r2, r3
 801014c:	d005      	beq.n	801015a <ip_reass_free_complete_datagram+0x3e>
 801014e:	4b3e      	ldr	r3, [pc, #248]	; (8010248 <ip_reass_free_complete_datagram+0x12c>)
 8010150:	22ad      	movs	r2, #173	; 0xad
 8010152:	4940      	ldr	r1, [pc, #256]	; (8010254 <ip_reass_free_complete_datagram+0x138>)
 8010154:	483e      	ldr	r0, [pc, #248]	; (8010250 <ip_reass_free_complete_datagram+0x134>)
 8010156:	f000 ffc9 	bl	80110ec <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	685b      	ldr	r3, [r3, #4]
 801015e:	685b      	ldr	r3, [r3, #4]
 8010160:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8010162:	697b      	ldr	r3, [r7, #20]
 8010164:	889b      	ldrh	r3, [r3, #4]
 8010166:	b29b      	uxth	r3, r3
 8010168:	2b00      	cmp	r3, #0
 801016a:	d12a      	bne.n	80101c2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	685b      	ldr	r3, [r3, #4]
 8010170:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8010172:	697b      	ldr	r3, [r7, #20]
 8010174:	681a      	ldr	r2, [r3, #0]
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801017a:	69bb      	ldr	r3, [r7, #24]
 801017c:	6858      	ldr	r0, [r3, #4]
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	3308      	adds	r3, #8
 8010182:	2214      	movs	r2, #20
 8010184:	4619      	mov	r1, r3
 8010186:	f001 f8c6 	bl	8011316 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801018a:	2101      	movs	r1, #1
 801018c:	69b8      	ldr	r0, [r7, #24]
 801018e:	f7ff fbb7 	bl	800f900 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8010192:	69b8      	ldr	r0, [r7, #24]
 8010194:	f7f7 fdf6 	bl	8007d84 <pbuf_clen>
 8010198:	4603      	mov	r3, r0
 801019a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801019c:	8bfa      	ldrh	r2, [r7, #30]
 801019e:	8a7b      	ldrh	r3, [r7, #18]
 80101a0:	4413      	add	r3, r2
 80101a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80101a6:	db05      	blt.n	80101b4 <ip_reass_free_complete_datagram+0x98>
 80101a8:	4b27      	ldr	r3, [pc, #156]	; (8010248 <ip_reass_free_complete_datagram+0x12c>)
 80101aa:	22bc      	movs	r2, #188	; 0xbc
 80101ac:	492a      	ldr	r1, [pc, #168]	; (8010258 <ip_reass_free_complete_datagram+0x13c>)
 80101ae:	4828      	ldr	r0, [pc, #160]	; (8010250 <ip_reass_free_complete_datagram+0x134>)
 80101b0:	f000 ff9c 	bl	80110ec <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80101b4:	8bfa      	ldrh	r2, [r7, #30]
 80101b6:	8a7b      	ldrh	r3, [r7, #18]
 80101b8:	4413      	add	r3, r2
 80101ba:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80101bc:	69b8      	ldr	r0, [r7, #24]
 80101be:	f7f7 fd59 	bl	8007c74 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	685b      	ldr	r3, [r3, #4]
 80101c6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80101c8:	e01f      	b.n	801020a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80101ca:	69bb      	ldr	r3, [r7, #24]
 80101cc:	685b      	ldr	r3, [r3, #4]
 80101ce:	617b      	str	r3, [r7, #20]
    pcur = p;
 80101d0:	69bb      	ldr	r3, [r7, #24]
 80101d2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80101da:	68f8      	ldr	r0, [r7, #12]
 80101dc:	f7f7 fdd2 	bl	8007d84 <pbuf_clen>
 80101e0:	4603      	mov	r3, r0
 80101e2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80101e4:	8bfa      	ldrh	r2, [r7, #30]
 80101e6:	8a7b      	ldrh	r3, [r7, #18]
 80101e8:	4413      	add	r3, r2
 80101ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80101ee:	db05      	blt.n	80101fc <ip_reass_free_complete_datagram+0xe0>
 80101f0:	4b15      	ldr	r3, [pc, #84]	; (8010248 <ip_reass_free_complete_datagram+0x12c>)
 80101f2:	22cc      	movs	r2, #204	; 0xcc
 80101f4:	4918      	ldr	r1, [pc, #96]	; (8010258 <ip_reass_free_complete_datagram+0x13c>)
 80101f6:	4816      	ldr	r0, [pc, #88]	; (8010250 <ip_reass_free_complete_datagram+0x134>)
 80101f8:	f000 ff78 	bl	80110ec <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80101fc:	8bfa      	ldrh	r2, [r7, #30]
 80101fe:	8a7b      	ldrh	r3, [r7, #18]
 8010200:	4413      	add	r3, r2
 8010202:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8010204:	68f8      	ldr	r0, [r7, #12]
 8010206:	f7f7 fd35 	bl	8007c74 <pbuf_free>
  while (p != NULL) {
 801020a:	69bb      	ldr	r3, [r7, #24]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d1dc      	bne.n	80101ca <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8010210:	6839      	ldr	r1, [r7, #0]
 8010212:	6878      	ldr	r0, [r7, #4]
 8010214:	f000 f8c2 	bl	801039c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8010218:	4b10      	ldr	r3, [pc, #64]	; (801025c <ip_reass_free_complete_datagram+0x140>)
 801021a:	881b      	ldrh	r3, [r3, #0]
 801021c:	8bfa      	ldrh	r2, [r7, #30]
 801021e:	429a      	cmp	r2, r3
 8010220:	d905      	bls.n	801022e <ip_reass_free_complete_datagram+0x112>
 8010222:	4b09      	ldr	r3, [pc, #36]	; (8010248 <ip_reass_free_complete_datagram+0x12c>)
 8010224:	22d2      	movs	r2, #210	; 0xd2
 8010226:	490e      	ldr	r1, [pc, #56]	; (8010260 <ip_reass_free_complete_datagram+0x144>)
 8010228:	4809      	ldr	r0, [pc, #36]	; (8010250 <ip_reass_free_complete_datagram+0x134>)
 801022a:	f000 ff5f 	bl	80110ec <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801022e:	4b0b      	ldr	r3, [pc, #44]	; (801025c <ip_reass_free_complete_datagram+0x140>)
 8010230:	881a      	ldrh	r2, [r3, #0]
 8010232:	8bfb      	ldrh	r3, [r7, #30]
 8010234:	1ad3      	subs	r3, r2, r3
 8010236:	b29a      	uxth	r2, r3
 8010238:	4b08      	ldr	r3, [pc, #32]	; (801025c <ip_reass_free_complete_datagram+0x140>)
 801023a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801023c:	8bfb      	ldrh	r3, [r7, #30]
}
 801023e:	4618      	mov	r0, r3
 8010240:	3720      	adds	r7, #32
 8010242:	46bd      	mov	sp, r7
 8010244:	bd80      	pop	{r7, pc}
 8010246:	bf00      	nop
 8010248:	08014a4c 	.word	0x08014a4c
 801024c:	08014a88 	.word	0x08014a88
 8010250:	08014a94 	.word	0x08014a94
 8010254:	08014abc 	.word	0x08014abc
 8010258:	08014ad0 	.word	0x08014ad0
 801025c:	20008990 	.word	0x20008990
 8010260:	08014af0 	.word	0x08014af0

08010264 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b08a      	sub	sp, #40	; 0x28
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
 801026c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801026e:	2300      	movs	r3, #0
 8010270:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8010272:	2300      	movs	r3, #0
 8010274:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8010276:	2300      	movs	r3, #0
 8010278:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801027a:	2300      	movs	r3, #0
 801027c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801027e:	2300      	movs	r3, #0
 8010280:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8010282:	4b28      	ldr	r3, [pc, #160]	; (8010324 <ip_reass_remove_oldest_datagram+0xc0>)
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010288:	e030      	b.n	80102ec <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801028a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801028c:	695a      	ldr	r2, [r3, #20]
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	68db      	ldr	r3, [r3, #12]
 8010292:	429a      	cmp	r2, r3
 8010294:	d10c      	bne.n	80102b0 <ip_reass_remove_oldest_datagram+0x4c>
 8010296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010298:	699a      	ldr	r2, [r3, #24]
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	691b      	ldr	r3, [r3, #16]
 801029e:	429a      	cmp	r2, r3
 80102a0:	d106      	bne.n	80102b0 <ip_reass_remove_oldest_datagram+0x4c>
 80102a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a4:	899a      	ldrh	r2, [r3, #12]
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	889b      	ldrh	r3, [r3, #4]
 80102aa:	b29b      	uxth	r3, r3
 80102ac:	429a      	cmp	r2, r3
 80102ae:	d014      	beq.n	80102da <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80102b0:	693b      	ldr	r3, [r7, #16]
 80102b2:	3301      	adds	r3, #1
 80102b4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80102b6:	6a3b      	ldr	r3, [r7, #32]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d104      	bne.n	80102c6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80102bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102be:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80102c0:	69fb      	ldr	r3, [r7, #28]
 80102c2:	61bb      	str	r3, [r7, #24]
 80102c4:	e009      	b.n	80102da <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80102c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102c8:	7fda      	ldrb	r2, [r3, #31]
 80102ca:	6a3b      	ldr	r3, [r7, #32]
 80102cc:	7fdb      	ldrb	r3, [r3, #31]
 80102ce:	429a      	cmp	r2, r3
 80102d0:	d803      	bhi.n	80102da <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80102d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102d4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80102d6:	69fb      	ldr	r3, [r7, #28]
 80102d8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80102da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d001      	beq.n	80102e6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80102e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80102e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80102ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d1cb      	bne.n	801028a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80102f2:	6a3b      	ldr	r3, [r7, #32]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d008      	beq.n	801030a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80102f8:	69b9      	ldr	r1, [r7, #24]
 80102fa:	6a38      	ldr	r0, [r7, #32]
 80102fc:	f7ff ff0e 	bl	801011c <ip_reass_free_complete_datagram>
 8010300:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010302:	697a      	ldr	r2, [r7, #20]
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	4413      	add	r3, r2
 8010308:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801030a:	697a      	ldr	r2, [r7, #20]
 801030c:	683b      	ldr	r3, [r7, #0]
 801030e:	429a      	cmp	r2, r3
 8010310:	da02      	bge.n	8010318 <ip_reass_remove_oldest_datagram+0xb4>
 8010312:	693b      	ldr	r3, [r7, #16]
 8010314:	2b01      	cmp	r3, #1
 8010316:	dcac      	bgt.n	8010272 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8010318:	697b      	ldr	r3, [r7, #20]
}
 801031a:	4618      	mov	r0, r3
 801031c:	3728      	adds	r7, #40	; 0x28
 801031e:	46bd      	mov	sp, r7
 8010320:	bd80      	pop	{r7, pc}
 8010322:	bf00      	nop
 8010324:	2000898c 	.word	0x2000898c

08010328 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b084      	sub	sp, #16
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
 8010330:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010332:	2004      	movs	r0, #4
 8010334:	f7f6 fdb8 	bl	8006ea8 <memp_malloc>
 8010338:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d110      	bne.n	8010362 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010340:	6839      	ldr	r1, [r7, #0]
 8010342:	6878      	ldr	r0, [r7, #4]
 8010344:	f7ff ff8e 	bl	8010264 <ip_reass_remove_oldest_datagram>
 8010348:	4602      	mov	r2, r0
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	4293      	cmp	r3, r2
 801034e:	dc03      	bgt.n	8010358 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010350:	2004      	movs	r0, #4
 8010352:	f7f6 fda9 	bl	8006ea8 <memp_malloc>
 8010356:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d101      	bne.n	8010362 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801035e:	2300      	movs	r3, #0
 8010360:	e016      	b.n	8010390 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010362:	2220      	movs	r2, #32
 8010364:	2100      	movs	r1, #0
 8010366:	68f8      	ldr	r0, [r7, #12]
 8010368:	f000 ff5f 	bl	801122a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	220f      	movs	r2, #15
 8010370:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8010372:	4b09      	ldr	r3, [pc, #36]	; (8010398 <ip_reass_enqueue_new_datagram+0x70>)
 8010374:	681a      	ldr	r2, [r3, #0]
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801037a:	4a07      	ldr	r2, [pc, #28]	; (8010398 <ip_reass_enqueue_new_datagram+0x70>)
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	3308      	adds	r3, #8
 8010384:	2214      	movs	r2, #20
 8010386:	6879      	ldr	r1, [r7, #4]
 8010388:	4618      	mov	r0, r3
 801038a:	f000 ffc4 	bl	8011316 <memcpy>
  return ipr;
 801038e:	68fb      	ldr	r3, [r7, #12]
}
 8010390:	4618      	mov	r0, r3
 8010392:	3710      	adds	r7, #16
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}
 8010398:	2000898c 	.word	0x2000898c

0801039c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b082      	sub	sp, #8
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
 80103a4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80103a6:	4b10      	ldr	r3, [pc, #64]	; (80103e8 <ip_reass_dequeue_datagram+0x4c>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	687a      	ldr	r2, [r7, #4]
 80103ac:	429a      	cmp	r2, r3
 80103ae:	d104      	bne.n	80103ba <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	4a0c      	ldr	r2, [pc, #48]	; (80103e8 <ip_reass_dequeue_datagram+0x4c>)
 80103b6:	6013      	str	r3, [r2, #0]
 80103b8:	e00d      	b.n	80103d6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80103ba:	683b      	ldr	r3, [r7, #0]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d106      	bne.n	80103ce <ip_reass_dequeue_datagram+0x32>
 80103c0:	4b0a      	ldr	r3, [pc, #40]	; (80103ec <ip_reass_dequeue_datagram+0x50>)
 80103c2:	f240 1245 	movw	r2, #325	; 0x145
 80103c6:	490a      	ldr	r1, [pc, #40]	; (80103f0 <ip_reass_dequeue_datagram+0x54>)
 80103c8:	480a      	ldr	r0, [pc, #40]	; (80103f4 <ip_reass_dequeue_datagram+0x58>)
 80103ca:	f000 fe8f 	bl	80110ec <iprintf>
    prev->next = ipr->next;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	681a      	ldr	r2, [r3, #0]
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80103d6:	6879      	ldr	r1, [r7, #4]
 80103d8:	2004      	movs	r0, #4
 80103da:	f7f6 fdd5 	bl	8006f88 <memp_free>
}
 80103de:	bf00      	nop
 80103e0:	3708      	adds	r7, #8
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd80      	pop	{r7, pc}
 80103e6:	bf00      	nop
 80103e8:	2000898c 	.word	0x2000898c
 80103ec:	08014a4c 	.word	0x08014a4c
 80103f0:	08014b14 	.word	0x08014b14
 80103f4:	08014a94 	.word	0x08014a94

080103f8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b08c      	sub	sp, #48	; 0x30
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	60f8      	str	r0, [r7, #12]
 8010400:	60b9      	str	r1, [r7, #8]
 8010402:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010404:	2300      	movs	r3, #0
 8010406:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010408:	2301      	movs	r3, #1
 801040a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801040c:	68bb      	ldr	r3, [r7, #8]
 801040e:	685b      	ldr	r3, [r3, #4]
 8010410:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010412:	69fb      	ldr	r3, [r7, #28]
 8010414:	885b      	ldrh	r3, [r3, #2]
 8010416:	b29b      	uxth	r3, r3
 8010418:	4618      	mov	r0, r3
 801041a:	f7f6 f8cd 	bl	80065b8 <lwip_htons>
 801041e:	4603      	mov	r3, r0
 8010420:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8010422:	69fb      	ldr	r3, [r7, #28]
 8010424:	781b      	ldrb	r3, [r3, #0]
 8010426:	f003 030f 	and.w	r3, r3, #15
 801042a:	b2db      	uxtb	r3, r3
 801042c:	009b      	lsls	r3, r3, #2
 801042e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010430:	7e7b      	ldrb	r3, [r7, #25]
 8010432:	b29b      	uxth	r3, r3
 8010434:	8b7a      	ldrh	r2, [r7, #26]
 8010436:	429a      	cmp	r2, r3
 8010438:	d202      	bcs.n	8010440 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801043a:	f04f 33ff 	mov.w	r3, #4294967295
 801043e:	e135      	b.n	80106ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010440:	7e7b      	ldrb	r3, [r7, #25]
 8010442:	b29b      	uxth	r3, r3
 8010444:	8b7a      	ldrh	r2, [r7, #26]
 8010446:	1ad3      	subs	r3, r2, r3
 8010448:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801044a:	69fb      	ldr	r3, [r7, #28]
 801044c:	88db      	ldrh	r3, [r3, #6]
 801044e:	b29b      	uxth	r3, r3
 8010450:	4618      	mov	r0, r3
 8010452:	f7f6 f8b1 	bl	80065b8 <lwip_htons>
 8010456:	4603      	mov	r3, r0
 8010458:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801045c:	b29b      	uxth	r3, r3
 801045e:	00db      	lsls	r3, r3, #3
 8010460:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010462:	68bb      	ldr	r3, [r7, #8]
 8010464:	685b      	ldr	r3, [r3, #4]
 8010466:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8010468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801046a:	2200      	movs	r2, #0
 801046c:	701a      	strb	r2, [r3, #0]
 801046e:	2200      	movs	r2, #0
 8010470:	705a      	strb	r2, [r3, #1]
 8010472:	2200      	movs	r2, #0
 8010474:	709a      	strb	r2, [r3, #2]
 8010476:	2200      	movs	r2, #0
 8010478:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801047a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801047c:	8afa      	ldrh	r2, [r7, #22]
 801047e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010480:	8afa      	ldrh	r2, [r7, #22]
 8010482:	8b7b      	ldrh	r3, [r7, #26]
 8010484:	4413      	add	r3, r2
 8010486:	b29a      	uxth	r2, r3
 8010488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801048a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801048c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801048e:	88db      	ldrh	r3, [r3, #6]
 8010490:	b29b      	uxth	r3, r3
 8010492:	8afa      	ldrh	r2, [r7, #22]
 8010494:	429a      	cmp	r2, r3
 8010496:	d902      	bls.n	801049e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010498:	f04f 33ff 	mov.w	r3, #4294967295
 801049c:	e106      	b.n	80106ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	685b      	ldr	r3, [r3, #4]
 80104a2:	627b      	str	r3, [r7, #36]	; 0x24
 80104a4:	e068      	b.n	8010578 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80104a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a8:	685b      	ldr	r3, [r3, #4]
 80104aa:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80104ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ae:	889b      	ldrh	r3, [r3, #4]
 80104b0:	b29a      	uxth	r2, r3
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	889b      	ldrh	r3, [r3, #4]
 80104b6:	b29b      	uxth	r3, r3
 80104b8:	429a      	cmp	r2, r3
 80104ba:	d235      	bcs.n	8010528 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80104bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80104c0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80104c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d020      	beq.n	801050a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80104c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ca:	889b      	ldrh	r3, [r3, #4]
 80104cc:	b29a      	uxth	r2, r3
 80104ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104d0:	88db      	ldrh	r3, [r3, #6]
 80104d2:	b29b      	uxth	r3, r3
 80104d4:	429a      	cmp	r2, r3
 80104d6:	d307      	bcc.n	80104e8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80104d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104da:	88db      	ldrh	r3, [r3, #6]
 80104dc:	b29a      	uxth	r2, r3
 80104de:	693b      	ldr	r3, [r7, #16]
 80104e0:	889b      	ldrh	r3, [r3, #4]
 80104e2:	b29b      	uxth	r3, r3
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d902      	bls.n	80104ee <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80104e8:	f04f 33ff 	mov.w	r3, #4294967295
 80104ec:	e0de      	b.n	80106ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80104ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104f0:	68ba      	ldr	r2, [r7, #8]
 80104f2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80104f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104f6:	88db      	ldrh	r3, [r3, #6]
 80104f8:	b29a      	uxth	r2, r3
 80104fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104fc:	889b      	ldrh	r3, [r3, #4]
 80104fe:	b29b      	uxth	r3, r3
 8010500:	429a      	cmp	r2, r3
 8010502:	d03d      	beq.n	8010580 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010504:	2300      	movs	r3, #0
 8010506:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8010508:	e03a      	b.n	8010580 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801050a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801050c:	88db      	ldrh	r3, [r3, #6]
 801050e:	b29a      	uxth	r2, r3
 8010510:	693b      	ldr	r3, [r7, #16]
 8010512:	889b      	ldrh	r3, [r3, #4]
 8010514:	b29b      	uxth	r3, r3
 8010516:	429a      	cmp	r2, r3
 8010518:	d902      	bls.n	8010520 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801051a:	f04f 33ff 	mov.w	r3, #4294967295
 801051e:	e0c5      	b.n	80106ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	68ba      	ldr	r2, [r7, #8]
 8010524:	605a      	str	r2, [r3, #4]
      break;
 8010526:	e02b      	b.n	8010580 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8010528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801052a:	889b      	ldrh	r3, [r3, #4]
 801052c:	b29a      	uxth	r2, r3
 801052e:	693b      	ldr	r3, [r7, #16]
 8010530:	889b      	ldrh	r3, [r3, #4]
 8010532:	b29b      	uxth	r3, r3
 8010534:	429a      	cmp	r2, r3
 8010536:	d102      	bne.n	801053e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010538:	f04f 33ff 	mov.w	r3, #4294967295
 801053c:	e0b6      	b.n	80106ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801053e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010540:	889b      	ldrh	r3, [r3, #4]
 8010542:	b29a      	uxth	r2, r3
 8010544:	693b      	ldr	r3, [r7, #16]
 8010546:	88db      	ldrh	r3, [r3, #6]
 8010548:	b29b      	uxth	r3, r3
 801054a:	429a      	cmp	r2, r3
 801054c:	d202      	bcs.n	8010554 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801054e:	f04f 33ff 	mov.w	r3, #4294967295
 8010552:	e0ab      	b.n	80106ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010556:	2b00      	cmp	r3, #0
 8010558:	d009      	beq.n	801056e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801055a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801055c:	88db      	ldrh	r3, [r3, #6]
 801055e:	b29a      	uxth	r2, r3
 8010560:	693b      	ldr	r3, [r7, #16]
 8010562:	889b      	ldrh	r3, [r3, #4]
 8010564:	b29b      	uxth	r3, r3
 8010566:	429a      	cmp	r2, r3
 8010568:	d001      	beq.n	801056e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801056a:	2300      	movs	r3, #0
 801056c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801056e:	693b      	ldr	r3, [r7, #16]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8010574:	693b      	ldr	r3, [r7, #16]
 8010576:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8010578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801057a:	2b00      	cmp	r3, #0
 801057c:	d193      	bne.n	80104a6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801057e:	e000      	b.n	8010582 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010580:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010584:	2b00      	cmp	r3, #0
 8010586:	d12d      	bne.n	80105e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8010588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801058a:	2b00      	cmp	r3, #0
 801058c:	d01c      	beq.n	80105c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801058e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010590:	88db      	ldrh	r3, [r3, #6]
 8010592:	b29a      	uxth	r2, r3
 8010594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010596:	889b      	ldrh	r3, [r3, #4]
 8010598:	b29b      	uxth	r3, r3
 801059a:	429a      	cmp	r2, r3
 801059c:	d906      	bls.n	80105ac <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801059e:	4b45      	ldr	r3, [pc, #276]	; (80106b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80105a0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80105a4:	4944      	ldr	r1, [pc, #272]	; (80106b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80105a6:	4845      	ldr	r0, [pc, #276]	; (80106bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80105a8:	f000 fda0 	bl	80110ec <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80105ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ae:	68ba      	ldr	r2, [r7, #8]
 80105b0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80105b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b4:	88db      	ldrh	r3, [r3, #6]
 80105b6:	b29a      	uxth	r2, r3
 80105b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ba:	889b      	ldrh	r3, [r3, #4]
 80105bc:	b29b      	uxth	r3, r3
 80105be:	429a      	cmp	r2, r3
 80105c0:	d010      	beq.n	80105e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80105c2:	2300      	movs	r3, #0
 80105c4:	623b      	str	r3, [r7, #32]
 80105c6:	e00d      	b.n	80105e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	685b      	ldr	r3, [r3, #4]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d006      	beq.n	80105de <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80105d0:	4b38      	ldr	r3, [pc, #224]	; (80106b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80105d2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80105d6:	493a      	ldr	r1, [pc, #232]	; (80106c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80105d8:	4838      	ldr	r0, [pc, #224]	; (80106bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80105da:	f000 fd87 	bl	80110ec <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	68ba      	ldr	r2, [r7, #8]
 80105e2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d105      	bne.n	80105f6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	7f9b      	ldrb	r3, [r3, #30]
 80105ee:	f003 0301 	and.w	r3, r3, #1
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d059      	beq.n	80106aa <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80105f6:	6a3b      	ldr	r3, [r7, #32]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d04f      	beq.n	801069c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	685b      	ldr	r3, [r3, #4]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d006      	beq.n	8010612 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	685b      	ldr	r3, [r3, #4]
 8010608:	685b      	ldr	r3, [r3, #4]
 801060a:	889b      	ldrh	r3, [r3, #4]
 801060c:	b29b      	uxth	r3, r3
 801060e:	2b00      	cmp	r3, #0
 8010610:	d002      	beq.n	8010618 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010612:	2300      	movs	r3, #0
 8010614:	623b      	str	r3, [r7, #32]
 8010616:	e041      	b.n	801069c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801061a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801061c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010622:	e012      	b.n	801064a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010626:	685b      	ldr	r3, [r3, #4]
 8010628:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801062a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801062c:	88db      	ldrh	r3, [r3, #6]
 801062e:	b29a      	uxth	r2, r3
 8010630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010632:	889b      	ldrh	r3, [r3, #4]
 8010634:	b29b      	uxth	r3, r3
 8010636:	429a      	cmp	r2, r3
 8010638:	d002      	beq.n	8010640 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801063a:	2300      	movs	r3, #0
 801063c:	623b      	str	r3, [r7, #32]
            break;
 801063e:	e007      	b.n	8010650 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010642:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8010644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801064a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801064c:	2b00      	cmp	r3, #0
 801064e:	d1e9      	bne.n	8010624 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010650:	6a3b      	ldr	r3, [r7, #32]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d022      	beq.n	801069c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	685b      	ldr	r3, [r3, #4]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d106      	bne.n	801066c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801065e:	4b15      	ldr	r3, [pc, #84]	; (80106b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010660:	f240 12df 	movw	r2, #479	; 0x1df
 8010664:	4917      	ldr	r1, [pc, #92]	; (80106c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010666:	4815      	ldr	r0, [pc, #84]	; (80106bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010668:	f000 fd40 	bl	80110ec <iprintf>
          LWIP_ASSERT("sanity check",
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	685b      	ldr	r3, [r3, #4]
 8010670:	685b      	ldr	r3, [r3, #4]
 8010672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010674:	429a      	cmp	r2, r3
 8010676:	d106      	bne.n	8010686 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8010678:	4b0e      	ldr	r3, [pc, #56]	; (80106b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801067a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801067e:	4911      	ldr	r1, [pc, #68]	; (80106c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010680:	480e      	ldr	r0, [pc, #56]	; (80106bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010682:	f000 fd33 	bl	80110ec <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8010686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d006      	beq.n	801069c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801068e:	4b09      	ldr	r3, [pc, #36]	; (80106b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010690:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8010694:	490c      	ldr	r1, [pc, #48]	; (80106c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8010696:	4809      	ldr	r0, [pc, #36]	; (80106bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010698:	f000 fd28 	bl	80110ec <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801069c:	6a3b      	ldr	r3, [r7, #32]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	bf14      	ite	ne
 80106a2:	2301      	movne	r3, #1
 80106a4:	2300      	moveq	r3, #0
 80106a6:	b2db      	uxtb	r3, r3
 80106a8:	e000      	b.n	80106ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80106aa:	2300      	movs	r3, #0
}
 80106ac:	4618      	mov	r0, r3
 80106ae:	3730      	adds	r7, #48	; 0x30
 80106b0:	46bd      	mov	sp, r7
 80106b2:	bd80      	pop	{r7, pc}
 80106b4:	08014a4c 	.word	0x08014a4c
 80106b8:	08014b30 	.word	0x08014b30
 80106bc:	08014a94 	.word	0x08014a94
 80106c0:	08014b50 	.word	0x08014b50
 80106c4:	08014b88 	.word	0x08014b88
 80106c8:	08014b98 	.word	0x08014b98

080106cc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b08e      	sub	sp, #56	; 0x38
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	685b      	ldr	r3, [r3, #4]
 80106d8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80106da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106dc:	781b      	ldrb	r3, [r3, #0]
 80106de:	f003 030f 	and.w	r3, r3, #15
 80106e2:	b2db      	uxtb	r3, r3
 80106e4:	009b      	lsls	r3, r3, #2
 80106e6:	b2db      	uxtb	r3, r3
 80106e8:	2b14      	cmp	r3, #20
 80106ea:	f040 8171 	bne.w	80109d0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80106ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106f0:	88db      	ldrh	r3, [r3, #6]
 80106f2:	b29b      	uxth	r3, r3
 80106f4:	4618      	mov	r0, r3
 80106f6:	f7f5 ff5f 	bl	80065b8 <lwip_htons>
 80106fa:	4603      	mov	r3, r0
 80106fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010700:	b29b      	uxth	r3, r3
 8010702:	00db      	lsls	r3, r3, #3
 8010704:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010708:	885b      	ldrh	r3, [r3, #2]
 801070a:	b29b      	uxth	r3, r3
 801070c:	4618      	mov	r0, r3
 801070e:	f7f5 ff53 	bl	80065b8 <lwip_htons>
 8010712:	4603      	mov	r3, r0
 8010714:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010718:	781b      	ldrb	r3, [r3, #0]
 801071a:	f003 030f 	and.w	r3, r3, #15
 801071e:	b2db      	uxtb	r3, r3
 8010720:	009b      	lsls	r3, r3, #2
 8010722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8010726:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801072a:	b29b      	uxth	r3, r3
 801072c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801072e:	429a      	cmp	r2, r3
 8010730:	f0c0 8150 	bcc.w	80109d4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010734:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010738:	b29b      	uxth	r3, r3
 801073a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801073c:	1ad3      	subs	r3, r2, r3
 801073e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010740:	6878      	ldr	r0, [r7, #4]
 8010742:	f7f7 fb1f 	bl	8007d84 <pbuf_clen>
 8010746:	4603      	mov	r3, r0
 8010748:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801074a:	4b8c      	ldr	r3, [pc, #560]	; (801097c <ip4_reass+0x2b0>)
 801074c:	881b      	ldrh	r3, [r3, #0]
 801074e:	461a      	mov	r2, r3
 8010750:	8c3b      	ldrh	r3, [r7, #32]
 8010752:	4413      	add	r3, r2
 8010754:	2b0a      	cmp	r3, #10
 8010756:	dd10      	ble.n	801077a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010758:	8c3b      	ldrh	r3, [r7, #32]
 801075a:	4619      	mov	r1, r3
 801075c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801075e:	f7ff fd81 	bl	8010264 <ip_reass_remove_oldest_datagram>
 8010762:	4603      	mov	r3, r0
 8010764:	2b00      	cmp	r3, #0
 8010766:	f000 8137 	beq.w	80109d8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801076a:	4b84      	ldr	r3, [pc, #528]	; (801097c <ip4_reass+0x2b0>)
 801076c:	881b      	ldrh	r3, [r3, #0]
 801076e:	461a      	mov	r2, r3
 8010770:	8c3b      	ldrh	r3, [r7, #32]
 8010772:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010774:	2b0a      	cmp	r3, #10
 8010776:	f300 812f 	bgt.w	80109d8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801077a:	4b81      	ldr	r3, [pc, #516]	; (8010980 <ip4_reass+0x2b4>)
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	633b      	str	r3, [r7, #48]	; 0x30
 8010780:	e015      	b.n	80107ae <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010784:	695a      	ldr	r2, [r3, #20]
 8010786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010788:	68db      	ldr	r3, [r3, #12]
 801078a:	429a      	cmp	r2, r3
 801078c:	d10c      	bne.n	80107a8 <ip4_reass+0xdc>
 801078e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010790:	699a      	ldr	r2, [r3, #24]
 8010792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010794:	691b      	ldr	r3, [r3, #16]
 8010796:	429a      	cmp	r2, r3
 8010798:	d106      	bne.n	80107a8 <ip4_reass+0xdc>
 801079a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801079c:	899a      	ldrh	r2, [r3, #12]
 801079e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107a0:	889b      	ldrh	r3, [r3, #4]
 80107a2:	b29b      	uxth	r3, r3
 80107a4:	429a      	cmp	r2, r3
 80107a6:	d006      	beq.n	80107b6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80107a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	633b      	str	r3, [r7, #48]	; 0x30
 80107ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d1e6      	bne.n	8010782 <ip4_reass+0xb6>
 80107b4:	e000      	b.n	80107b8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80107b6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80107b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d109      	bne.n	80107d2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80107be:	8c3b      	ldrh	r3, [r7, #32]
 80107c0:	4619      	mov	r1, r3
 80107c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107c4:	f7ff fdb0 	bl	8010328 <ip_reass_enqueue_new_datagram>
 80107c8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80107ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d11c      	bne.n	801080a <ip4_reass+0x13e>
      goto nullreturn;
 80107d0:	e105      	b.n	80109de <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80107d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107d4:	88db      	ldrh	r3, [r3, #6]
 80107d6:	b29b      	uxth	r3, r3
 80107d8:	4618      	mov	r0, r3
 80107da:	f7f5 feed 	bl	80065b8 <lwip_htons>
 80107de:	4603      	mov	r3, r0
 80107e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d110      	bne.n	801080a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80107e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ea:	89db      	ldrh	r3, [r3, #14]
 80107ec:	4618      	mov	r0, r3
 80107ee:	f7f5 fee3 	bl	80065b8 <lwip_htons>
 80107f2:	4603      	mov	r3, r0
 80107f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d006      	beq.n	801080a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80107fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107fe:	3308      	adds	r3, #8
 8010800:	2214      	movs	r2, #20
 8010802:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010804:	4618      	mov	r0, r3
 8010806:	f000 fd86 	bl	8011316 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801080a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801080c:	88db      	ldrh	r3, [r3, #6]
 801080e:	b29b      	uxth	r3, r3
 8010810:	f003 0320 	and.w	r3, r3, #32
 8010814:	2b00      	cmp	r3, #0
 8010816:	bf0c      	ite	eq
 8010818:	2301      	moveq	r3, #1
 801081a:	2300      	movne	r3, #0
 801081c:	b2db      	uxtb	r3, r3
 801081e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010820:	69fb      	ldr	r3, [r7, #28]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d00e      	beq.n	8010844 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010826:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010828:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801082a:	4413      	add	r3, r2
 801082c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801082e:	8b7a      	ldrh	r2, [r7, #26]
 8010830:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010832:	429a      	cmp	r2, r3
 8010834:	f0c0 80a0 	bcc.w	8010978 <ip4_reass+0x2ac>
 8010838:	8b7b      	ldrh	r3, [r7, #26]
 801083a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801083e:	4293      	cmp	r3, r2
 8010840:	f200 809a 	bhi.w	8010978 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010844:	69fa      	ldr	r2, [r7, #28]
 8010846:	6879      	ldr	r1, [r7, #4]
 8010848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801084a:	f7ff fdd5 	bl	80103f8 <ip_reass_chain_frag_into_datagram_and_validate>
 801084e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010850:	697b      	ldr	r3, [r7, #20]
 8010852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010856:	f000 809b 	beq.w	8010990 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801085a:	4b48      	ldr	r3, [pc, #288]	; (801097c <ip4_reass+0x2b0>)
 801085c:	881a      	ldrh	r2, [r3, #0]
 801085e:	8c3b      	ldrh	r3, [r7, #32]
 8010860:	4413      	add	r3, r2
 8010862:	b29a      	uxth	r2, r3
 8010864:	4b45      	ldr	r3, [pc, #276]	; (801097c <ip4_reass+0x2b0>)
 8010866:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8010868:	69fb      	ldr	r3, [r7, #28]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d00d      	beq.n	801088a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801086e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010870:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010872:	4413      	add	r3, r2
 8010874:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8010876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010878:	8a7a      	ldrh	r2, [r7, #18]
 801087a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801087c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801087e:	7f9b      	ldrb	r3, [r3, #30]
 8010880:	f043 0301 	orr.w	r3, r3, #1
 8010884:	b2da      	uxtb	r2, r3
 8010886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010888:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801088a:	697b      	ldr	r3, [r7, #20]
 801088c:	2b01      	cmp	r3, #1
 801088e:	d171      	bne.n	8010974 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010892:	8b9b      	ldrh	r3, [r3, #28]
 8010894:	3314      	adds	r3, #20
 8010896:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801089a:	685b      	ldr	r3, [r3, #4]
 801089c:	685b      	ldr	r3, [r3, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80108a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a4:	685b      	ldr	r3, [r3, #4]
 80108a6:	685b      	ldr	r3, [r3, #4]
 80108a8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80108aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ac:	3308      	adds	r3, #8
 80108ae:	2214      	movs	r2, #20
 80108b0:	4619      	mov	r1, r3
 80108b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108b4:	f000 fd2f 	bl	8011316 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80108b8:	8a3b      	ldrh	r3, [r7, #16]
 80108ba:	4618      	mov	r0, r3
 80108bc:	f7f5 fe7c 	bl	80065b8 <lwip_htons>
 80108c0:	4603      	mov	r3, r0
 80108c2:	461a      	mov	r2, r3
 80108c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80108c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ca:	2200      	movs	r2, #0
 80108cc:	719a      	strb	r2, [r3, #6]
 80108ce:	2200      	movs	r2, #0
 80108d0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80108d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108d4:	2200      	movs	r2, #0
 80108d6:	729a      	strb	r2, [r3, #10]
 80108d8:	2200      	movs	r2, #0
 80108da:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80108dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108de:	685b      	ldr	r3, [r3, #4]
 80108e0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80108e2:	e00d      	b.n	8010900 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80108e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108e6:	685b      	ldr	r3, [r3, #4]
 80108e8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80108ea:	2114      	movs	r1, #20
 80108ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80108ee:	f7f7 f93b 	bl	8007b68 <pbuf_remove_header>
      pbuf_cat(p, r);
 80108f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80108f4:	6878      	ldr	r0, [r7, #4]
 80108f6:	f7f7 fa7f 	bl	8007df8 <pbuf_cat>
      r = iprh->next_pbuf;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8010900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010902:	2b00      	cmp	r3, #0
 8010904:	d1ee      	bne.n	80108e4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010906:	4b1e      	ldr	r3, [pc, #120]	; (8010980 <ip4_reass+0x2b4>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801090c:	429a      	cmp	r2, r3
 801090e:	d102      	bne.n	8010916 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010910:	2300      	movs	r3, #0
 8010912:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010914:	e010      	b.n	8010938 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010916:	4b1a      	ldr	r3, [pc, #104]	; (8010980 <ip4_reass+0x2b4>)
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801091c:	e007      	b.n	801092e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801091e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010924:	429a      	cmp	r2, r3
 8010926:	d006      	beq.n	8010936 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801092e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010930:	2b00      	cmp	r3, #0
 8010932:	d1f4      	bne.n	801091e <ip4_reass+0x252>
 8010934:	e000      	b.n	8010938 <ip4_reass+0x26c>
          break;
 8010936:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010938:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801093a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801093c:	f7ff fd2e 	bl	801039c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010940:	6878      	ldr	r0, [r7, #4]
 8010942:	f7f7 fa1f 	bl	8007d84 <pbuf_clen>
 8010946:	4603      	mov	r3, r0
 8010948:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801094a:	4b0c      	ldr	r3, [pc, #48]	; (801097c <ip4_reass+0x2b0>)
 801094c:	881b      	ldrh	r3, [r3, #0]
 801094e:	8c3a      	ldrh	r2, [r7, #32]
 8010950:	429a      	cmp	r2, r3
 8010952:	d906      	bls.n	8010962 <ip4_reass+0x296>
 8010954:	4b0b      	ldr	r3, [pc, #44]	; (8010984 <ip4_reass+0x2b8>)
 8010956:	f240 229b 	movw	r2, #667	; 0x29b
 801095a:	490b      	ldr	r1, [pc, #44]	; (8010988 <ip4_reass+0x2bc>)
 801095c:	480b      	ldr	r0, [pc, #44]	; (801098c <ip4_reass+0x2c0>)
 801095e:	f000 fbc5 	bl	80110ec <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010962:	4b06      	ldr	r3, [pc, #24]	; (801097c <ip4_reass+0x2b0>)
 8010964:	881a      	ldrh	r2, [r3, #0]
 8010966:	8c3b      	ldrh	r3, [r7, #32]
 8010968:	1ad3      	subs	r3, r2, r3
 801096a:	b29a      	uxth	r2, r3
 801096c:	4b03      	ldr	r3, [pc, #12]	; (801097c <ip4_reass+0x2b0>)
 801096e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	e038      	b.n	80109e6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010974:	2300      	movs	r3, #0
 8010976:	e036      	b.n	80109e6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8010978:	bf00      	nop
 801097a:	e00a      	b.n	8010992 <ip4_reass+0x2c6>
 801097c:	20008990 	.word	0x20008990
 8010980:	2000898c 	.word	0x2000898c
 8010984:	08014a4c 	.word	0x08014a4c
 8010988:	08014bbc 	.word	0x08014bbc
 801098c:	08014a94 	.word	0x08014a94
    goto nullreturn_ipr;
 8010990:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010994:	2b00      	cmp	r3, #0
 8010996:	d106      	bne.n	80109a6 <ip4_reass+0x2da>
 8010998:	4b15      	ldr	r3, [pc, #84]	; (80109f0 <ip4_reass+0x324>)
 801099a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801099e:	4915      	ldr	r1, [pc, #84]	; (80109f4 <ip4_reass+0x328>)
 80109a0:	4815      	ldr	r0, [pc, #84]	; (80109f8 <ip4_reass+0x32c>)
 80109a2:	f000 fba3 	bl	80110ec <iprintf>
  if (ipr->p == NULL) {
 80109a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109a8:	685b      	ldr	r3, [r3, #4]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d116      	bne.n	80109dc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80109ae:	4b13      	ldr	r3, [pc, #76]	; (80109fc <ip4_reass+0x330>)
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109b4:	429a      	cmp	r2, r3
 80109b6:	d006      	beq.n	80109c6 <ip4_reass+0x2fa>
 80109b8:	4b0d      	ldr	r3, [pc, #52]	; (80109f0 <ip4_reass+0x324>)
 80109ba:	f240 22ab 	movw	r2, #683	; 0x2ab
 80109be:	4910      	ldr	r1, [pc, #64]	; (8010a00 <ip4_reass+0x334>)
 80109c0:	480d      	ldr	r0, [pc, #52]	; (80109f8 <ip4_reass+0x32c>)
 80109c2:	f000 fb93 	bl	80110ec <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80109c6:	2100      	movs	r1, #0
 80109c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80109ca:	f7ff fce7 	bl	801039c <ip_reass_dequeue_datagram>
 80109ce:	e006      	b.n	80109de <ip4_reass+0x312>
    goto nullreturn;
 80109d0:	bf00      	nop
 80109d2:	e004      	b.n	80109de <ip4_reass+0x312>
    goto nullreturn;
 80109d4:	bf00      	nop
 80109d6:	e002      	b.n	80109de <ip4_reass+0x312>
      goto nullreturn;
 80109d8:	bf00      	nop
 80109da:	e000      	b.n	80109de <ip4_reass+0x312>
  }

nullreturn:
 80109dc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80109de:	6878      	ldr	r0, [r7, #4]
 80109e0:	f7f7 f948 	bl	8007c74 <pbuf_free>
  return NULL;
 80109e4:	2300      	movs	r3, #0
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	3738      	adds	r7, #56	; 0x38
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}
 80109ee:	bf00      	nop
 80109f0:	08014a4c 	.word	0x08014a4c
 80109f4:	08014bd8 	.word	0x08014bd8
 80109f8:	08014a94 	.word	0x08014a94
 80109fc:	2000898c 	.word	0x2000898c
 8010a00:	08014be4 	.word	0x08014be4

08010a04 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010a08:	2005      	movs	r0, #5
 8010a0a:	f7f6 fa4d 	bl	8006ea8 <memp_malloc>
 8010a0e:	4603      	mov	r3, r0
}
 8010a10:	4618      	mov	r0, r3
 8010a12:	bd80      	pop	{r7, pc}

08010a14 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b082      	sub	sp, #8
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d106      	bne.n	8010a30 <ip_frag_free_pbuf_custom_ref+0x1c>
 8010a22:	4b07      	ldr	r3, [pc, #28]	; (8010a40 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8010a24:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8010a28:	4906      	ldr	r1, [pc, #24]	; (8010a44 <ip_frag_free_pbuf_custom_ref+0x30>)
 8010a2a:	4807      	ldr	r0, [pc, #28]	; (8010a48 <ip_frag_free_pbuf_custom_ref+0x34>)
 8010a2c:	f000 fb5e 	bl	80110ec <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8010a30:	6879      	ldr	r1, [r7, #4]
 8010a32:	2005      	movs	r0, #5
 8010a34:	f7f6 faa8 	bl	8006f88 <memp_free>
}
 8010a38:	bf00      	nop
 8010a3a:	3708      	adds	r7, #8
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	bd80      	pop	{r7, pc}
 8010a40:	08014a4c 	.word	0x08014a4c
 8010a44:	08014c04 	.word	0x08014c04
 8010a48:	08014a94 	.word	0x08014a94

08010a4c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b084      	sub	sp, #16
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d106      	bne.n	8010a6c <ipfrag_free_pbuf_custom+0x20>
 8010a5e:	4b11      	ldr	r3, [pc, #68]	; (8010aa4 <ipfrag_free_pbuf_custom+0x58>)
 8010a60:	f240 22ce 	movw	r2, #718	; 0x2ce
 8010a64:	4910      	ldr	r1, [pc, #64]	; (8010aa8 <ipfrag_free_pbuf_custom+0x5c>)
 8010a66:	4811      	ldr	r0, [pc, #68]	; (8010aac <ipfrag_free_pbuf_custom+0x60>)
 8010a68:	f000 fb40 	bl	80110ec <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010a6c:	68fa      	ldr	r2, [r7, #12]
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	429a      	cmp	r2, r3
 8010a72:	d006      	beq.n	8010a82 <ipfrag_free_pbuf_custom+0x36>
 8010a74:	4b0b      	ldr	r3, [pc, #44]	; (8010aa4 <ipfrag_free_pbuf_custom+0x58>)
 8010a76:	f240 22cf 	movw	r2, #719	; 0x2cf
 8010a7a:	490d      	ldr	r1, [pc, #52]	; (8010ab0 <ipfrag_free_pbuf_custom+0x64>)
 8010a7c:	480b      	ldr	r0, [pc, #44]	; (8010aac <ipfrag_free_pbuf_custom+0x60>)
 8010a7e:	f000 fb35 	bl	80110ec <iprintf>
  if (pcr->original != NULL) {
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	695b      	ldr	r3, [r3, #20]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d004      	beq.n	8010a94 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	695b      	ldr	r3, [r3, #20]
 8010a8e:	4618      	mov	r0, r3
 8010a90:	f7f7 f8f0 	bl	8007c74 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010a94:	68f8      	ldr	r0, [r7, #12]
 8010a96:	f7ff ffbd 	bl	8010a14 <ip_frag_free_pbuf_custom_ref>
}
 8010a9a:	bf00      	nop
 8010a9c:	3710      	adds	r7, #16
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bd80      	pop	{r7, pc}
 8010aa2:	bf00      	nop
 8010aa4:	08014a4c 	.word	0x08014a4c
 8010aa8:	08014c10 	.word	0x08014c10
 8010aac:	08014a94 	.word	0x08014a94
 8010ab0:	08014c1c 	.word	0x08014c1c

08010ab4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b094      	sub	sp, #80	; 0x50
 8010ab8:	af02      	add	r7, sp, #8
 8010aba:	60f8      	str	r0, [r7, #12]
 8010abc:	60b9      	str	r1, [r7, #8]
 8010abe:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010ac6:	68bb      	ldr	r3, [r7, #8]
 8010ac8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010aca:	3b14      	subs	r3, #20
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	da00      	bge.n	8010ad2 <ip4_frag+0x1e>
 8010ad0:	3307      	adds	r3, #7
 8010ad2:	10db      	asrs	r3, r3, #3
 8010ad4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8010ad6:	2314      	movs	r3, #20
 8010ad8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	685b      	ldr	r3, [r3, #4]
 8010ade:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8010ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ae2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ae6:	781b      	ldrb	r3, [r3, #0]
 8010ae8:	f003 030f 	and.w	r3, r3, #15
 8010aec:	b2db      	uxtb	r3, r3
 8010aee:	009b      	lsls	r3, r3, #2
 8010af0:	b2db      	uxtb	r3, r3
 8010af2:	2b14      	cmp	r3, #20
 8010af4:	d002      	beq.n	8010afc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8010af6:	f06f 0305 	mvn.w	r3, #5
 8010afa:	e110      	b.n	8010d1e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	895b      	ldrh	r3, [r3, #10]
 8010b00:	2b13      	cmp	r3, #19
 8010b02:	d809      	bhi.n	8010b18 <ip4_frag+0x64>
 8010b04:	4b88      	ldr	r3, [pc, #544]	; (8010d28 <ip4_frag+0x274>)
 8010b06:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8010b0a:	4988      	ldr	r1, [pc, #544]	; (8010d2c <ip4_frag+0x278>)
 8010b0c:	4888      	ldr	r0, [pc, #544]	; (8010d30 <ip4_frag+0x27c>)
 8010b0e:	f000 faed 	bl	80110ec <iprintf>
 8010b12:	f06f 0305 	mvn.w	r3, #5
 8010b16:	e102      	b.n	8010d1e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b1a:	88db      	ldrh	r3, [r3, #6]
 8010b1c:	b29b      	uxth	r3, r3
 8010b1e:	4618      	mov	r0, r3
 8010b20:	f7f5 fd4a 	bl	80065b8 <lwip_htons>
 8010b24:	4603      	mov	r3, r0
 8010b26:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8010b28:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010b2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010b2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8010b32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010b34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010b38:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	891b      	ldrh	r3, [r3, #8]
 8010b3e:	3b14      	subs	r3, #20
 8010b40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8010b44:	e0e1      	b.n	8010d0a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010b46:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010b48:	00db      	lsls	r3, r3, #3
 8010b4a:	b29b      	uxth	r3, r3
 8010b4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010b50:	4293      	cmp	r3, r2
 8010b52:	bf28      	it	cs
 8010b54:	4613      	movcs	r3, r2
 8010b56:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010b58:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010b5c:	2114      	movs	r1, #20
 8010b5e:	200e      	movs	r0, #14
 8010b60:	f7f6 fda4 	bl	80076ac <pbuf_alloc>
 8010b64:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8010b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	f000 80d5 	beq.w	8010d18 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b70:	895b      	ldrh	r3, [r3, #10]
 8010b72:	2b13      	cmp	r3, #19
 8010b74:	d806      	bhi.n	8010b84 <ip4_frag+0xd0>
 8010b76:	4b6c      	ldr	r3, [pc, #432]	; (8010d28 <ip4_frag+0x274>)
 8010b78:	f44f 7249 	mov.w	r2, #804	; 0x324
 8010b7c:	496d      	ldr	r1, [pc, #436]	; (8010d34 <ip4_frag+0x280>)
 8010b7e:	486c      	ldr	r0, [pc, #432]	; (8010d30 <ip4_frag+0x27c>)
 8010b80:	f000 fab4 	bl	80110ec <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b86:	685b      	ldr	r3, [r3, #4]
 8010b88:	2214      	movs	r2, #20
 8010b8a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f000 fbc2 	bl	8011316 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b94:	685b      	ldr	r3, [r3, #4]
 8010b96:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8010b98:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010b9a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8010b9e:	e064      	b.n	8010c6a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	895a      	ldrh	r2, [r3, #10]
 8010ba4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010ba6:	1ad3      	subs	r3, r2, r3
 8010ba8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	895b      	ldrh	r3, [r3, #10]
 8010bae:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010bb0:	429a      	cmp	r2, r3
 8010bb2:	d906      	bls.n	8010bc2 <ip4_frag+0x10e>
 8010bb4:	4b5c      	ldr	r3, [pc, #368]	; (8010d28 <ip4_frag+0x274>)
 8010bb6:	f240 322d 	movw	r2, #813	; 0x32d
 8010bba:	495f      	ldr	r1, [pc, #380]	; (8010d38 <ip4_frag+0x284>)
 8010bbc:	485c      	ldr	r0, [pc, #368]	; (8010d30 <ip4_frag+0x27c>)
 8010bbe:	f000 fa95 	bl	80110ec <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010bc2:	8bfa      	ldrh	r2, [r7, #30]
 8010bc4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010bc8:	4293      	cmp	r3, r2
 8010bca:	bf28      	it	cs
 8010bcc:	4613      	movcs	r3, r2
 8010bce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010bd2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d105      	bne.n	8010be6 <ip4_frag+0x132>
        poff = 0;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	60fb      	str	r3, [r7, #12]
        continue;
 8010be4:	e041      	b.n	8010c6a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010be6:	f7ff ff0d 	bl	8010a04 <ip_frag_alloc_pbuf_custom_ref>
 8010bea:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010bec:	69bb      	ldr	r3, [r7, #24]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d103      	bne.n	8010bfa <ip4_frag+0x146>
        pbuf_free(rambuf);
 8010bf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010bf4:	f7f7 f83e 	bl	8007c74 <pbuf_free>
        goto memerr;
 8010bf8:	e08f      	b.n	8010d1a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010bfa:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010c00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010c02:	4413      	add	r3, r2
 8010c04:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8010c08:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8010c0c:	9201      	str	r2, [sp, #4]
 8010c0e:	9300      	str	r3, [sp, #0]
 8010c10:	4603      	mov	r3, r0
 8010c12:	2241      	movs	r2, #65	; 0x41
 8010c14:	2000      	movs	r0, #0
 8010c16:	f7f6 fe73 	bl	8007900 <pbuf_alloced_custom>
 8010c1a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010c1c:	697b      	ldr	r3, [r7, #20]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d106      	bne.n	8010c30 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010c22:	69b8      	ldr	r0, [r7, #24]
 8010c24:	f7ff fef6 	bl	8010a14 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010c28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c2a:	f7f7 f823 	bl	8007c74 <pbuf_free>
        goto memerr;
 8010c2e:	e074      	b.n	8010d1a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010c30:	68f8      	ldr	r0, [r7, #12]
 8010c32:	f7f7 f8bf 	bl	8007db4 <pbuf_ref>
      pcr->original = p;
 8010c36:	69bb      	ldr	r3, [r7, #24]
 8010c38:	68fa      	ldr	r2, [r7, #12]
 8010c3a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010c3c:	69bb      	ldr	r3, [r7, #24]
 8010c3e:	4a3f      	ldr	r2, [pc, #252]	; (8010d3c <ip4_frag+0x288>)
 8010c40:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010c42:	6979      	ldr	r1, [r7, #20]
 8010c44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c46:	f7f7 f8d7 	bl	8007df8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010c4a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010c4e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010c52:	1ad3      	subs	r3, r2, r3
 8010c54:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8010c58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d004      	beq.n	8010c6a <ip4_frag+0x1b6>
        poff = 0;
 8010c60:	2300      	movs	r3, #0
 8010c62:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8010c6a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d196      	bne.n	8010ba0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8010c72:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010c74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010c78:	4413      	add	r3, r2
 8010c7a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010c7c:	68bb      	ldr	r3, [r7, #8]
 8010c7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010c80:	f1a3 0213 	sub.w	r2, r3, #19
 8010c84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	bfcc      	ite	gt
 8010c8c:	2301      	movgt	r3, #1
 8010c8e:	2300      	movle	r3, #0
 8010c90:	b2db      	uxtb	r3, r3
 8010c92:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010c94:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010c98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010c9c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8010c9e:	6a3b      	ldr	r3, [r7, #32]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d002      	beq.n	8010caa <ip4_frag+0x1f6>
 8010ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d003      	beq.n	8010cb2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8010caa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010cac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010cb0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010cb2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	f7f5 fc7f 	bl	80065b8 <lwip_htons>
 8010cba:	4603      	mov	r3, r0
 8010cbc:	461a      	mov	r2, r3
 8010cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010cc2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010cc4:	3314      	adds	r3, #20
 8010cc6:	b29b      	uxth	r3, r3
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f7f5 fc75 	bl	80065b8 <lwip_htons>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	461a      	mov	r2, r3
 8010cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd8:	2200      	movs	r2, #0
 8010cda:	729a      	strb	r2, [r3, #10]
 8010cdc:	2200      	movs	r2, #0
 8010cde:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010ce0:	68bb      	ldr	r3, [r7, #8]
 8010ce2:	695b      	ldr	r3, [r3, #20]
 8010ce4:	687a      	ldr	r2, [r7, #4]
 8010ce6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ce8:	68b8      	ldr	r0, [r7, #8]
 8010cea:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010cec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010cee:	f7f6 ffc1 	bl	8007c74 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010cf2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010cf6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010cf8:	1ad3      	subs	r3, r2, r3
 8010cfa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8010cfe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010d02:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010d04:	4413      	add	r3, r2
 8010d06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8010d0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	f47f af19 	bne.w	8010b46 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010d14:	2300      	movs	r3, #0
 8010d16:	e002      	b.n	8010d1e <ip4_frag+0x26a>
      goto memerr;
 8010d18:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010d1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010d1e:	4618      	mov	r0, r3
 8010d20:	3748      	adds	r7, #72	; 0x48
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}
 8010d26:	bf00      	nop
 8010d28:	08014a4c 	.word	0x08014a4c
 8010d2c:	08014c28 	.word	0x08014c28
 8010d30:	08014a94 	.word	0x08014a94
 8010d34:	08014c44 	.word	0x08014c44
 8010d38:	08014c64 	.word	0x08014c64
 8010d3c:	08010a4d 	.word	0x08010a4d

08010d40 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b086      	sub	sp, #24
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
 8010d48:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010d4a:	230e      	movs	r3, #14
 8010d4c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	895b      	ldrh	r3, [r3, #10]
 8010d52:	2b0e      	cmp	r3, #14
 8010d54:	d96e      	bls.n	8010e34 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	7bdb      	ldrb	r3, [r3, #15]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d106      	bne.n	8010d6c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010d64:	3301      	adds	r3, #1
 8010d66:	b2da      	uxtb	r2, r3
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	685b      	ldr	r3, [r3, #4]
 8010d70:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8010d72:	693b      	ldr	r3, [r7, #16]
 8010d74:	7b1a      	ldrb	r2, [r3, #12]
 8010d76:	7b5b      	ldrb	r3, [r3, #13]
 8010d78:	021b      	lsls	r3, r3, #8
 8010d7a:	4313      	orrs	r3, r2
 8010d7c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010d7e:	693b      	ldr	r3, [r7, #16]
 8010d80:	781b      	ldrb	r3, [r3, #0]
 8010d82:	f003 0301 	and.w	r3, r3, #1
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d023      	beq.n	8010dd2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010d8a:	693b      	ldr	r3, [r7, #16]
 8010d8c:	781b      	ldrb	r3, [r3, #0]
 8010d8e:	2b01      	cmp	r3, #1
 8010d90:	d10f      	bne.n	8010db2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010d92:	693b      	ldr	r3, [r7, #16]
 8010d94:	785b      	ldrb	r3, [r3, #1]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d11b      	bne.n	8010dd2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010d9a:	693b      	ldr	r3, [r7, #16]
 8010d9c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010d9e:	2b5e      	cmp	r3, #94	; 0x5e
 8010da0:	d117      	bne.n	8010dd2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	7b5b      	ldrb	r3, [r3, #13]
 8010da6:	f043 0310 	orr.w	r3, r3, #16
 8010daa:	b2da      	uxtb	r2, r3
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	735a      	strb	r2, [r3, #13]
 8010db0:	e00f      	b.n	8010dd2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010db2:	693b      	ldr	r3, [r7, #16]
 8010db4:	2206      	movs	r2, #6
 8010db6:	4928      	ldr	r1, [pc, #160]	; (8010e58 <ethernet_input+0x118>)
 8010db8:	4618      	mov	r0, r3
 8010dba:	f000 fa0c 	bl	80111d6 <memcmp>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d106      	bne.n	8010dd2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	7b5b      	ldrb	r3, [r3, #13]
 8010dc8:	f043 0308 	orr.w	r3, r3, #8
 8010dcc:	b2da      	uxtb	r2, r3
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010dd2:	89fb      	ldrh	r3, [r7, #14]
 8010dd4:	2b08      	cmp	r3, #8
 8010dd6:	d003      	beq.n	8010de0 <ethernet_input+0xa0>
 8010dd8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8010ddc:	d014      	beq.n	8010e08 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8010dde:	e032      	b.n	8010e46 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010de0:	683b      	ldr	r3, [r7, #0]
 8010de2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010de6:	f003 0308 	and.w	r3, r3, #8
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d024      	beq.n	8010e38 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010dee:	8afb      	ldrh	r3, [r7, #22]
 8010df0:	4619      	mov	r1, r3
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f7f6 feb8 	bl	8007b68 <pbuf_remove_header>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d11e      	bne.n	8010e3c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8010dfe:	6839      	ldr	r1, [r7, #0]
 8010e00:	6878      	ldr	r0, [r7, #4]
 8010e02:	f7fe fe91 	bl	800fb28 <ip4_input>
      break;
 8010e06:	e013      	b.n	8010e30 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010e08:	683b      	ldr	r3, [r7, #0]
 8010e0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010e0e:	f003 0308 	and.w	r3, r3, #8
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d014      	beq.n	8010e40 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010e16:	8afb      	ldrh	r3, [r7, #22]
 8010e18:	4619      	mov	r1, r3
 8010e1a:	6878      	ldr	r0, [r7, #4]
 8010e1c:	f7f6 fea4 	bl	8007b68 <pbuf_remove_header>
 8010e20:	4603      	mov	r3, r0
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d10e      	bne.n	8010e44 <ethernet_input+0x104>
        etharp_input(p, netif);
 8010e26:	6839      	ldr	r1, [r7, #0]
 8010e28:	6878      	ldr	r0, [r7, #4]
 8010e2a:	f7fe f831 	bl	800ee90 <etharp_input>
      break;
 8010e2e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010e30:	2300      	movs	r3, #0
 8010e32:	e00c      	b.n	8010e4e <ethernet_input+0x10e>
    goto free_and_return;
 8010e34:	bf00      	nop
 8010e36:	e006      	b.n	8010e46 <ethernet_input+0x106>
        goto free_and_return;
 8010e38:	bf00      	nop
 8010e3a:	e004      	b.n	8010e46 <ethernet_input+0x106>
        goto free_and_return;
 8010e3c:	bf00      	nop
 8010e3e:	e002      	b.n	8010e46 <ethernet_input+0x106>
        goto free_and_return;
 8010e40:	bf00      	nop
 8010e42:	e000      	b.n	8010e46 <ethernet_input+0x106>
        goto free_and_return;
 8010e44:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010e46:	6878      	ldr	r0, [r7, #4]
 8010e48:	f7f6 ff14 	bl	8007c74 <pbuf_free>
  return ERR_OK;
 8010e4c:	2300      	movs	r3, #0
}
 8010e4e:	4618      	mov	r0, r3
 8010e50:	3718      	adds	r7, #24
 8010e52:	46bd      	mov	sp, r7
 8010e54:	bd80      	pop	{r7, pc}
 8010e56:	bf00      	nop
 8010e58:	08014e00 	.word	0x08014e00

08010e5c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b086      	sub	sp, #24
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	60f8      	str	r0, [r7, #12]
 8010e64:	60b9      	str	r1, [r7, #8]
 8010e66:	607a      	str	r2, [r7, #4]
 8010e68:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010e6a:	8c3b      	ldrh	r3, [r7, #32]
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f7f5 fba3 	bl	80065b8 <lwip_htons>
 8010e72:	4603      	mov	r3, r0
 8010e74:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010e76:	210e      	movs	r1, #14
 8010e78:	68b8      	ldr	r0, [r7, #8]
 8010e7a:	f7f6 fe65 	bl	8007b48 <pbuf_add_header>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d125      	bne.n	8010ed0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010e84:	68bb      	ldr	r3, [r7, #8]
 8010e86:	685b      	ldr	r3, [r3, #4]
 8010e88:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010e8a:	693b      	ldr	r3, [r7, #16]
 8010e8c:	8afa      	ldrh	r2, [r7, #22]
 8010e8e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010e90:	693b      	ldr	r3, [r7, #16]
 8010e92:	2206      	movs	r2, #6
 8010e94:	6839      	ldr	r1, [r7, #0]
 8010e96:	4618      	mov	r0, r3
 8010e98:	f000 fa3d 	bl	8011316 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010e9c:	693b      	ldr	r3, [r7, #16]
 8010e9e:	3306      	adds	r3, #6
 8010ea0:	2206      	movs	r2, #6
 8010ea2:	6879      	ldr	r1, [r7, #4]
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f000 fa36 	bl	8011316 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010eb0:	2b06      	cmp	r3, #6
 8010eb2:	d006      	beq.n	8010ec2 <ethernet_output+0x66>
 8010eb4:	4b0a      	ldr	r3, [pc, #40]	; (8010ee0 <ethernet_output+0x84>)
 8010eb6:	f44f 7299 	mov.w	r2, #306	; 0x132
 8010eba:	490a      	ldr	r1, [pc, #40]	; (8010ee4 <ethernet_output+0x88>)
 8010ebc:	480a      	ldr	r0, [pc, #40]	; (8010ee8 <ethernet_output+0x8c>)
 8010ebe:	f000 f915 	bl	80110ec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	699b      	ldr	r3, [r3, #24]
 8010ec6:	68b9      	ldr	r1, [r7, #8]
 8010ec8:	68f8      	ldr	r0, [r7, #12]
 8010eca:	4798      	blx	r3
 8010ecc:	4603      	mov	r3, r0
 8010ece:	e002      	b.n	8010ed6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010ed0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010ed2:	f06f 0301 	mvn.w	r3, #1
}
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	3718      	adds	r7, #24
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bd80      	pop	{r7, pc}
 8010ede:	bf00      	nop
 8010ee0:	08014c74 	.word	0x08014c74
 8010ee4:	08014cac 	.word	0x08014cac
 8010ee8:	08014ce0 	.word	0x08014ce0

08010eec <rand>:
 8010eec:	4b16      	ldr	r3, [pc, #88]	; (8010f48 <rand+0x5c>)
 8010eee:	b510      	push	{r4, lr}
 8010ef0:	681c      	ldr	r4, [r3, #0]
 8010ef2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010ef4:	b9b3      	cbnz	r3, 8010f24 <rand+0x38>
 8010ef6:	2018      	movs	r0, #24
 8010ef8:	f000 fa86 	bl	8011408 <malloc>
 8010efc:	4602      	mov	r2, r0
 8010efe:	6320      	str	r0, [r4, #48]	; 0x30
 8010f00:	b920      	cbnz	r0, 8010f0c <rand+0x20>
 8010f02:	4b12      	ldr	r3, [pc, #72]	; (8010f4c <rand+0x60>)
 8010f04:	4812      	ldr	r0, [pc, #72]	; (8010f50 <rand+0x64>)
 8010f06:	2152      	movs	r1, #82	; 0x52
 8010f08:	f000 fa14 	bl	8011334 <__assert_func>
 8010f0c:	4911      	ldr	r1, [pc, #68]	; (8010f54 <rand+0x68>)
 8010f0e:	4b12      	ldr	r3, [pc, #72]	; (8010f58 <rand+0x6c>)
 8010f10:	e9c0 1300 	strd	r1, r3, [r0]
 8010f14:	4b11      	ldr	r3, [pc, #68]	; (8010f5c <rand+0x70>)
 8010f16:	6083      	str	r3, [r0, #8]
 8010f18:	230b      	movs	r3, #11
 8010f1a:	8183      	strh	r3, [r0, #12]
 8010f1c:	2100      	movs	r1, #0
 8010f1e:	2001      	movs	r0, #1
 8010f20:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010f24:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010f26:	480e      	ldr	r0, [pc, #56]	; (8010f60 <rand+0x74>)
 8010f28:	690b      	ldr	r3, [r1, #16]
 8010f2a:	694c      	ldr	r4, [r1, #20]
 8010f2c:	4a0d      	ldr	r2, [pc, #52]	; (8010f64 <rand+0x78>)
 8010f2e:	4358      	muls	r0, r3
 8010f30:	fb02 0004 	mla	r0, r2, r4, r0
 8010f34:	fba3 3202 	umull	r3, r2, r3, r2
 8010f38:	3301      	adds	r3, #1
 8010f3a:	eb40 0002 	adc.w	r0, r0, r2
 8010f3e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8010f42:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010f46:	bd10      	pop	{r4, pc}
 8010f48:	20000084 	.word	0x20000084
 8010f4c:	08014e0e 	.word	0x08014e0e
 8010f50:	08014e25 	.word	0x08014e25
 8010f54:	abcd330e 	.word	0xabcd330e
 8010f58:	e66d1234 	.word	0xe66d1234
 8010f5c:	0005deec 	.word	0x0005deec
 8010f60:	5851f42d 	.word	0x5851f42d
 8010f64:	4c957f2d 	.word	0x4c957f2d

08010f68 <std>:
 8010f68:	2300      	movs	r3, #0
 8010f6a:	b510      	push	{r4, lr}
 8010f6c:	4604      	mov	r4, r0
 8010f6e:	e9c0 3300 	strd	r3, r3, [r0]
 8010f72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010f76:	6083      	str	r3, [r0, #8]
 8010f78:	8181      	strh	r1, [r0, #12]
 8010f7a:	6643      	str	r3, [r0, #100]	; 0x64
 8010f7c:	81c2      	strh	r2, [r0, #14]
 8010f7e:	6183      	str	r3, [r0, #24]
 8010f80:	4619      	mov	r1, r3
 8010f82:	2208      	movs	r2, #8
 8010f84:	305c      	adds	r0, #92	; 0x5c
 8010f86:	f000 f950 	bl	801122a <memset>
 8010f8a:	4b0d      	ldr	r3, [pc, #52]	; (8010fc0 <std+0x58>)
 8010f8c:	6263      	str	r3, [r4, #36]	; 0x24
 8010f8e:	4b0d      	ldr	r3, [pc, #52]	; (8010fc4 <std+0x5c>)
 8010f90:	62a3      	str	r3, [r4, #40]	; 0x28
 8010f92:	4b0d      	ldr	r3, [pc, #52]	; (8010fc8 <std+0x60>)
 8010f94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010f96:	4b0d      	ldr	r3, [pc, #52]	; (8010fcc <std+0x64>)
 8010f98:	6323      	str	r3, [r4, #48]	; 0x30
 8010f9a:	4b0d      	ldr	r3, [pc, #52]	; (8010fd0 <std+0x68>)
 8010f9c:	6224      	str	r4, [r4, #32]
 8010f9e:	429c      	cmp	r4, r3
 8010fa0:	d006      	beq.n	8010fb0 <std+0x48>
 8010fa2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8010fa6:	4294      	cmp	r4, r2
 8010fa8:	d002      	beq.n	8010fb0 <std+0x48>
 8010faa:	33d0      	adds	r3, #208	; 0xd0
 8010fac:	429c      	cmp	r4, r3
 8010fae:	d105      	bne.n	8010fbc <std+0x54>
 8010fb0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fb8:	f000 b9aa 	b.w	8011310 <__retarget_lock_init_recursive>
 8010fbc:	bd10      	pop	{r4, pc}
 8010fbe:	bf00      	nop
 8010fc0:	08011151 	.word	0x08011151
 8010fc4:	08011173 	.word	0x08011173
 8010fc8:	080111ab 	.word	0x080111ab
 8010fcc:	080111cf 	.word	0x080111cf
 8010fd0:	20008994 	.word	0x20008994

08010fd4 <stdio_exit_handler>:
 8010fd4:	4a02      	ldr	r2, [pc, #8]	; (8010fe0 <stdio_exit_handler+0xc>)
 8010fd6:	4903      	ldr	r1, [pc, #12]	; (8010fe4 <stdio_exit_handler+0x10>)
 8010fd8:	4803      	ldr	r0, [pc, #12]	; (8010fe8 <stdio_exit_handler+0x14>)
 8010fda:	f000 b869 	b.w	80110b0 <_fwalk_sglue>
 8010fde:	bf00      	nop
 8010fe0:	2000002c 	.word	0x2000002c
 8010fe4:	08011ed5 	.word	0x08011ed5
 8010fe8:	20000038 	.word	0x20000038

08010fec <cleanup_stdio>:
 8010fec:	6841      	ldr	r1, [r0, #4]
 8010fee:	4b0c      	ldr	r3, [pc, #48]	; (8011020 <cleanup_stdio+0x34>)
 8010ff0:	4299      	cmp	r1, r3
 8010ff2:	b510      	push	{r4, lr}
 8010ff4:	4604      	mov	r4, r0
 8010ff6:	d001      	beq.n	8010ffc <cleanup_stdio+0x10>
 8010ff8:	f000 ff6c 	bl	8011ed4 <_fflush_r>
 8010ffc:	68a1      	ldr	r1, [r4, #8]
 8010ffe:	4b09      	ldr	r3, [pc, #36]	; (8011024 <cleanup_stdio+0x38>)
 8011000:	4299      	cmp	r1, r3
 8011002:	d002      	beq.n	801100a <cleanup_stdio+0x1e>
 8011004:	4620      	mov	r0, r4
 8011006:	f000 ff65 	bl	8011ed4 <_fflush_r>
 801100a:	68e1      	ldr	r1, [r4, #12]
 801100c:	4b06      	ldr	r3, [pc, #24]	; (8011028 <cleanup_stdio+0x3c>)
 801100e:	4299      	cmp	r1, r3
 8011010:	d004      	beq.n	801101c <cleanup_stdio+0x30>
 8011012:	4620      	mov	r0, r4
 8011014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011018:	f000 bf5c 	b.w	8011ed4 <_fflush_r>
 801101c:	bd10      	pop	{r4, pc}
 801101e:	bf00      	nop
 8011020:	20008994 	.word	0x20008994
 8011024:	200089fc 	.word	0x200089fc
 8011028:	20008a64 	.word	0x20008a64

0801102c <global_stdio_init.part.0>:
 801102c:	b510      	push	{r4, lr}
 801102e:	4b0b      	ldr	r3, [pc, #44]	; (801105c <global_stdio_init.part.0+0x30>)
 8011030:	4c0b      	ldr	r4, [pc, #44]	; (8011060 <global_stdio_init.part.0+0x34>)
 8011032:	4a0c      	ldr	r2, [pc, #48]	; (8011064 <global_stdio_init.part.0+0x38>)
 8011034:	601a      	str	r2, [r3, #0]
 8011036:	4620      	mov	r0, r4
 8011038:	2200      	movs	r2, #0
 801103a:	2104      	movs	r1, #4
 801103c:	f7ff ff94 	bl	8010f68 <std>
 8011040:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011044:	2201      	movs	r2, #1
 8011046:	2109      	movs	r1, #9
 8011048:	f7ff ff8e 	bl	8010f68 <std>
 801104c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011050:	2202      	movs	r2, #2
 8011052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011056:	2112      	movs	r1, #18
 8011058:	f7ff bf86 	b.w	8010f68 <std>
 801105c:	20008acc 	.word	0x20008acc
 8011060:	20008994 	.word	0x20008994
 8011064:	08010fd5 	.word	0x08010fd5

08011068 <__sfp_lock_acquire>:
 8011068:	4801      	ldr	r0, [pc, #4]	; (8011070 <__sfp_lock_acquire+0x8>)
 801106a:	f000 b952 	b.w	8011312 <__retarget_lock_acquire_recursive>
 801106e:	bf00      	nop
 8011070:	20008ad5 	.word	0x20008ad5

08011074 <__sfp_lock_release>:
 8011074:	4801      	ldr	r0, [pc, #4]	; (801107c <__sfp_lock_release+0x8>)
 8011076:	f000 b94d 	b.w	8011314 <__retarget_lock_release_recursive>
 801107a:	bf00      	nop
 801107c:	20008ad5 	.word	0x20008ad5

08011080 <__sinit>:
 8011080:	b510      	push	{r4, lr}
 8011082:	4604      	mov	r4, r0
 8011084:	f7ff fff0 	bl	8011068 <__sfp_lock_acquire>
 8011088:	6a23      	ldr	r3, [r4, #32]
 801108a:	b11b      	cbz	r3, 8011094 <__sinit+0x14>
 801108c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011090:	f7ff bff0 	b.w	8011074 <__sfp_lock_release>
 8011094:	4b04      	ldr	r3, [pc, #16]	; (80110a8 <__sinit+0x28>)
 8011096:	6223      	str	r3, [r4, #32]
 8011098:	4b04      	ldr	r3, [pc, #16]	; (80110ac <__sinit+0x2c>)
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d1f5      	bne.n	801108c <__sinit+0xc>
 80110a0:	f7ff ffc4 	bl	801102c <global_stdio_init.part.0>
 80110a4:	e7f2      	b.n	801108c <__sinit+0xc>
 80110a6:	bf00      	nop
 80110a8:	08010fed 	.word	0x08010fed
 80110ac:	20008acc 	.word	0x20008acc

080110b0 <_fwalk_sglue>:
 80110b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110b4:	4607      	mov	r7, r0
 80110b6:	4688      	mov	r8, r1
 80110b8:	4614      	mov	r4, r2
 80110ba:	2600      	movs	r6, #0
 80110bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80110c0:	f1b9 0901 	subs.w	r9, r9, #1
 80110c4:	d505      	bpl.n	80110d2 <_fwalk_sglue+0x22>
 80110c6:	6824      	ldr	r4, [r4, #0]
 80110c8:	2c00      	cmp	r4, #0
 80110ca:	d1f7      	bne.n	80110bc <_fwalk_sglue+0xc>
 80110cc:	4630      	mov	r0, r6
 80110ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110d2:	89ab      	ldrh	r3, [r5, #12]
 80110d4:	2b01      	cmp	r3, #1
 80110d6:	d907      	bls.n	80110e8 <_fwalk_sglue+0x38>
 80110d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80110dc:	3301      	adds	r3, #1
 80110de:	d003      	beq.n	80110e8 <_fwalk_sglue+0x38>
 80110e0:	4629      	mov	r1, r5
 80110e2:	4638      	mov	r0, r7
 80110e4:	47c0      	blx	r8
 80110e6:	4306      	orrs	r6, r0
 80110e8:	3568      	adds	r5, #104	; 0x68
 80110ea:	e7e9      	b.n	80110c0 <_fwalk_sglue+0x10>

080110ec <iprintf>:
 80110ec:	b40f      	push	{r0, r1, r2, r3}
 80110ee:	b507      	push	{r0, r1, r2, lr}
 80110f0:	4906      	ldr	r1, [pc, #24]	; (801110c <iprintf+0x20>)
 80110f2:	ab04      	add	r3, sp, #16
 80110f4:	6808      	ldr	r0, [r1, #0]
 80110f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80110fa:	6881      	ldr	r1, [r0, #8]
 80110fc:	9301      	str	r3, [sp, #4]
 80110fe:	f000 fbb9 	bl	8011874 <_vfiprintf_r>
 8011102:	b003      	add	sp, #12
 8011104:	f85d eb04 	ldr.w	lr, [sp], #4
 8011108:	b004      	add	sp, #16
 801110a:	4770      	bx	lr
 801110c:	20000084 	.word	0x20000084

08011110 <siprintf>:
 8011110:	b40e      	push	{r1, r2, r3}
 8011112:	b500      	push	{lr}
 8011114:	b09c      	sub	sp, #112	; 0x70
 8011116:	ab1d      	add	r3, sp, #116	; 0x74
 8011118:	9002      	str	r0, [sp, #8]
 801111a:	9006      	str	r0, [sp, #24]
 801111c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011120:	4809      	ldr	r0, [pc, #36]	; (8011148 <siprintf+0x38>)
 8011122:	9107      	str	r1, [sp, #28]
 8011124:	9104      	str	r1, [sp, #16]
 8011126:	4909      	ldr	r1, [pc, #36]	; (801114c <siprintf+0x3c>)
 8011128:	f853 2b04 	ldr.w	r2, [r3], #4
 801112c:	9105      	str	r1, [sp, #20]
 801112e:	6800      	ldr	r0, [r0, #0]
 8011130:	9301      	str	r3, [sp, #4]
 8011132:	a902      	add	r1, sp, #8
 8011134:	f000 fa76 	bl	8011624 <_svfiprintf_r>
 8011138:	9b02      	ldr	r3, [sp, #8]
 801113a:	2200      	movs	r2, #0
 801113c:	701a      	strb	r2, [r3, #0]
 801113e:	b01c      	add	sp, #112	; 0x70
 8011140:	f85d eb04 	ldr.w	lr, [sp], #4
 8011144:	b003      	add	sp, #12
 8011146:	4770      	bx	lr
 8011148:	20000084 	.word	0x20000084
 801114c:	ffff0208 	.word	0xffff0208

08011150 <__sread>:
 8011150:	b510      	push	{r4, lr}
 8011152:	460c      	mov	r4, r1
 8011154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011158:	f000 f892 	bl	8011280 <_read_r>
 801115c:	2800      	cmp	r0, #0
 801115e:	bfab      	itete	ge
 8011160:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011162:	89a3      	ldrhlt	r3, [r4, #12]
 8011164:	181b      	addge	r3, r3, r0
 8011166:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801116a:	bfac      	ite	ge
 801116c:	6563      	strge	r3, [r4, #84]	; 0x54
 801116e:	81a3      	strhlt	r3, [r4, #12]
 8011170:	bd10      	pop	{r4, pc}

08011172 <__swrite>:
 8011172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011176:	461f      	mov	r7, r3
 8011178:	898b      	ldrh	r3, [r1, #12]
 801117a:	05db      	lsls	r3, r3, #23
 801117c:	4605      	mov	r5, r0
 801117e:	460c      	mov	r4, r1
 8011180:	4616      	mov	r6, r2
 8011182:	d505      	bpl.n	8011190 <__swrite+0x1e>
 8011184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011188:	2302      	movs	r3, #2
 801118a:	2200      	movs	r2, #0
 801118c:	f000 f866 	bl	801125c <_lseek_r>
 8011190:	89a3      	ldrh	r3, [r4, #12]
 8011192:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011196:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801119a:	81a3      	strh	r3, [r4, #12]
 801119c:	4632      	mov	r2, r6
 801119e:	463b      	mov	r3, r7
 80111a0:	4628      	mov	r0, r5
 80111a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80111a6:	f000 b87d 	b.w	80112a4 <_write_r>

080111aa <__sseek>:
 80111aa:	b510      	push	{r4, lr}
 80111ac:	460c      	mov	r4, r1
 80111ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111b2:	f000 f853 	bl	801125c <_lseek_r>
 80111b6:	1c43      	adds	r3, r0, #1
 80111b8:	89a3      	ldrh	r3, [r4, #12]
 80111ba:	bf15      	itete	ne
 80111bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80111be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80111c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80111c6:	81a3      	strheq	r3, [r4, #12]
 80111c8:	bf18      	it	ne
 80111ca:	81a3      	strhne	r3, [r4, #12]
 80111cc:	bd10      	pop	{r4, pc}

080111ce <__sclose>:
 80111ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111d2:	f000 b833 	b.w	801123c <_close_r>

080111d6 <memcmp>:
 80111d6:	b510      	push	{r4, lr}
 80111d8:	3901      	subs	r1, #1
 80111da:	4402      	add	r2, r0
 80111dc:	4290      	cmp	r0, r2
 80111de:	d101      	bne.n	80111e4 <memcmp+0xe>
 80111e0:	2000      	movs	r0, #0
 80111e2:	e005      	b.n	80111f0 <memcmp+0x1a>
 80111e4:	7803      	ldrb	r3, [r0, #0]
 80111e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80111ea:	42a3      	cmp	r3, r4
 80111ec:	d001      	beq.n	80111f2 <memcmp+0x1c>
 80111ee:	1b18      	subs	r0, r3, r4
 80111f0:	bd10      	pop	{r4, pc}
 80111f2:	3001      	adds	r0, #1
 80111f4:	e7f2      	b.n	80111dc <memcmp+0x6>

080111f6 <memmove>:
 80111f6:	4288      	cmp	r0, r1
 80111f8:	b510      	push	{r4, lr}
 80111fa:	eb01 0402 	add.w	r4, r1, r2
 80111fe:	d902      	bls.n	8011206 <memmove+0x10>
 8011200:	4284      	cmp	r4, r0
 8011202:	4623      	mov	r3, r4
 8011204:	d807      	bhi.n	8011216 <memmove+0x20>
 8011206:	1e43      	subs	r3, r0, #1
 8011208:	42a1      	cmp	r1, r4
 801120a:	d008      	beq.n	801121e <memmove+0x28>
 801120c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011210:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011214:	e7f8      	b.n	8011208 <memmove+0x12>
 8011216:	4402      	add	r2, r0
 8011218:	4601      	mov	r1, r0
 801121a:	428a      	cmp	r2, r1
 801121c:	d100      	bne.n	8011220 <memmove+0x2a>
 801121e:	bd10      	pop	{r4, pc}
 8011220:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011224:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011228:	e7f7      	b.n	801121a <memmove+0x24>

0801122a <memset>:
 801122a:	4402      	add	r2, r0
 801122c:	4603      	mov	r3, r0
 801122e:	4293      	cmp	r3, r2
 8011230:	d100      	bne.n	8011234 <memset+0xa>
 8011232:	4770      	bx	lr
 8011234:	f803 1b01 	strb.w	r1, [r3], #1
 8011238:	e7f9      	b.n	801122e <memset+0x4>
	...

0801123c <_close_r>:
 801123c:	b538      	push	{r3, r4, r5, lr}
 801123e:	4d06      	ldr	r5, [pc, #24]	; (8011258 <_close_r+0x1c>)
 8011240:	2300      	movs	r3, #0
 8011242:	4604      	mov	r4, r0
 8011244:	4608      	mov	r0, r1
 8011246:	602b      	str	r3, [r5, #0]
 8011248:	f7ef fd59 	bl	8000cfe <_close>
 801124c:	1c43      	adds	r3, r0, #1
 801124e:	d102      	bne.n	8011256 <_close_r+0x1a>
 8011250:	682b      	ldr	r3, [r5, #0]
 8011252:	b103      	cbz	r3, 8011256 <_close_r+0x1a>
 8011254:	6023      	str	r3, [r4, #0]
 8011256:	bd38      	pop	{r3, r4, r5, pc}
 8011258:	20008ad0 	.word	0x20008ad0

0801125c <_lseek_r>:
 801125c:	b538      	push	{r3, r4, r5, lr}
 801125e:	4d07      	ldr	r5, [pc, #28]	; (801127c <_lseek_r+0x20>)
 8011260:	4604      	mov	r4, r0
 8011262:	4608      	mov	r0, r1
 8011264:	4611      	mov	r1, r2
 8011266:	2200      	movs	r2, #0
 8011268:	602a      	str	r2, [r5, #0]
 801126a:	461a      	mov	r2, r3
 801126c:	f7ef fd6e 	bl	8000d4c <_lseek>
 8011270:	1c43      	adds	r3, r0, #1
 8011272:	d102      	bne.n	801127a <_lseek_r+0x1e>
 8011274:	682b      	ldr	r3, [r5, #0]
 8011276:	b103      	cbz	r3, 801127a <_lseek_r+0x1e>
 8011278:	6023      	str	r3, [r4, #0]
 801127a:	bd38      	pop	{r3, r4, r5, pc}
 801127c:	20008ad0 	.word	0x20008ad0

08011280 <_read_r>:
 8011280:	b538      	push	{r3, r4, r5, lr}
 8011282:	4d07      	ldr	r5, [pc, #28]	; (80112a0 <_read_r+0x20>)
 8011284:	4604      	mov	r4, r0
 8011286:	4608      	mov	r0, r1
 8011288:	4611      	mov	r1, r2
 801128a:	2200      	movs	r2, #0
 801128c:	602a      	str	r2, [r5, #0]
 801128e:	461a      	mov	r2, r3
 8011290:	f7ef fcfc 	bl	8000c8c <_read>
 8011294:	1c43      	adds	r3, r0, #1
 8011296:	d102      	bne.n	801129e <_read_r+0x1e>
 8011298:	682b      	ldr	r3, [r5, #0]
 801129a:	b103      	cbz	r3, 801129e <_read_r+0x1e>
 801129c:	6023      	str	r3, [r4, #0]
 801129e:	bd38      	pop	{r3, r4, r5, pc}
 80112a0:	20008ad0 	.word	0x20008ad0

080112a4 <_write_r>:
 80112a4:	b538      	push	{r3, r4, r5, lr}
 80112a6:	4d07      	ldr	r5, [pc, #28]	; (80112c4 <_write_r+0x20>)
 80112a8:	4604      	mov	r4, r0
 80112aa:	4608      	mov	r0, r1
 80112ac:	4611      	mov	r1, r2
 80112ae:	2200      	movs	r2, #0
 80112b0:	602a      	str	r2, [r5, #0]
 80112b2:	461a      	mov	r2, r3
 80112b4:	f7ef fd07 	bl	8000cc6 <_write>
 80112b8:	1c43      	adds	r3, r0, #1
 80112ba:	d102      	bne.n	80112c2 <_write_r+0x1e>
 80112bc:	682b      	ldr	r3, [r5, #0]
 80112be:	b103      	cbz	r3, 80112c2 <_write_r+0x1e>
 80112c0:	6023      	str	r3, [r4, #0]
 80112c2:	bd38      	pop	{r3, r4, r5, pc}
 80112c4:	20008ad0 	.word	0x20008ad0

080112c8 <__libc_init_array>:
 80112c8:	b570      	push	{r4, r5, r6, lr}
 80112ca:	4d0d      	ldr	r5, [pc, #52]	; (8011300 <__libc_init_array+0x38>)
 80112cc:	4c0d      	ldr	r4, [pc, #52]	; (8011304 <__libc_init_array+0x3c>)
 80112ce:	1b64      	subs	r4, r4, r5
 80112d0:	10a4      	asrs	r4, r4, #2
 80112d2:	2600      	movs	r6, #0
 80112d4:	42a6      	cmp	r6, r4
 80112d6:	d109      	bne.n	80112ec <__libc_init_array+0x24>
 80112d8:	4d0b      	ldr	r5, [pc, #44]	; (8011308 <__libc_init_array+0x40>)
 80112da:	4c0c      	ldr	r4, [pc, #48]	; (801130c <__libc_init_array+0x44>)
 80112dc:	f000 ffe0 	bl	80122a0 <_init>
 80112e0:	1b64      	subs	r4, r4, r5
 80112e2:	10a4      	asrs	r4, r4, #2
 80112e4:	2600      	movs	r6, #0
 80112e6:	42a6      	cmp	r6, r4
 80112e8:	d105      	bne.n	80112f6 <__libc_init_array+0x2e>
 80112ea:	bd70      	pop	{r4, r5, r6, pc}
 80112ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80112f0:	4798      	blx	r3
 80112f2:	3601      	adds	r6, #1
 80112f4:	e7ee      	b.n	80112d4 <__libc_init_array+0xc>
 80112f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80112fa:	4798      	blx	r3
 80112fc:	3601      	adds	r6, #1
 80112fe:	e7f2      	b.n	80112e6 <__libc_init_array+0x1e>
 8011300:	08014ef4 	.word	0x08014ef4
 8011304:	08014ef4 	.word	0x08014ef4
 8011308:	08014ef4 	.word	0x08014ef4
 801130c:	08014ef8 	.word	0x08014ef8

08011310 <__retarget_lock_init_recursive>:
 8011310:	4770      	bx	lr

08011312 <__retarget_lock_acquire_recursive>:
 8011312:	4770      	bx	lr

08011314 <__retarget_lock_release_recursive>:
 8011314:	4770      	bx	lr

08011316 <memcpy>:
 8011316:	440a      	add	r2, r1
 8011318:	4291      	cmp	r1, r2
 801131a:	f100 33ff 	add.w	r3, r0, #4294967295
 801131e:	d100      	bne.n	8011322 <memcpy+0xc>
 8011320:	4770      	bx	lr
 8011322:	b510      	push	{r4, lr}
 8011324:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011328:	f803 4f01 	strb.w	r4, [r3, #1]!
 801132c:	4291      	cmp	r1, r2
 801132e:	d1f9      	bne.n	8011324 <memcpy+0xe>
 8011330:	bd10      	pop	{r4, pc}
	...

08011334 <__assert_func>:
 8011334:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011336:	4614      	mov	r4, r2
 8011338:	461a      	mov	r2, r3
 801133a:	4b09      	ldr	r3, [pc, #36]	; (8011360 <__assert_func+0x2c>)
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	4605      	mov	r5, r0
 8011340:	68d8      	ldr	r0, [r3, #12]
 8011342:	b14c      	cbz	r4, 8011358 <__assert_func+0x24>
 8011344:	4b07      	ldr	r3, [pc, #28]	; (8011364 <__assert_func+0x30>)
 8011346:	9100      	str	r1, [sp, #0]
 8011348:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801134c:	4906      	ldr	r1, [pc, #24]	; (8011368 <__assert_func+0x34>)
 801134e:	462b      	mov	r3, r5
 8011350:	f000 fde8 	bl	8011f24 <fiprintf>
 8011354:	f000 fe9e 	bl	8012094 <abort>
 8011358:	4b04      	ldr	r3, [pc, #16]	; (801136c <__assert_func+0x38>)
 801135a:	461c      	mov	r4, r3
 801135c:	e7f3      	b.n	8011346 <__assert_func+0x12>
 801135e:	bf00      	nop
 8011360:	20000084 	.word	0x20000084
 8011364:	08014e7d 	.word	0x08014e7d
 8011368:	08014e8a 	.word	0x08014e8a
 801136c:	08014eb8 	.word	0x08014eb8

08011370 <_free_r>:
 8011370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011372:	2900      	cmp	r1, #0
 8011374:	d044      	beq.n	8011400 <_free_r+0x90>
 8011376:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801137a:	9001      	str	r0, [sp, #4]
 801137c:	2b00      	cmp	r3, #0
 801137e:	f1a1 0404 	sub.w	r4, r1, #4
 8011382:	bfb8      	it	lt
 8011384:	18e4      	addlt	r4, r4, r3
 8011386:	f000 f8e7 	bl	8011558 <__malloc_lock>
 801138a:	4a1e      	ldr	r2, [pc, #120]	; (8011404 <_free_r+0x94>)
 801138c:	9801      	ldr	r0, [sp, #4]
 801138e:	6813      	ldr	r3, [r2, #0]
 8011390:	b933      	cbnz	r3, 80113a0 <_free_r+0x30>
 8011392:	6063      	str	r3, [r4, #4]
 8011394:	6014      	str	r4, [r2, #0]
 8011396:	b003      	add	sp, #12
 8011398:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801139c:	f000 b8e2 	b.w	8011564 <__malloc_unlock>
 80113a0:	42a3      	cmp	r3, r4
 80113a2:	d908      	bls.n	80113b6 <_free_r+0x46>
 80113a4:	6825      	ldr	r5, [r4, #0]
 80113a6:	1961      	adds	r1, r4, r5
 80113a8:	428b      	cmp	r3, r1
 80113aa:	bf01      	itttt	eq
 80113ac:	6819      	ldreq	r1, [r3, #0]
 80113ae:	685b      	ldreq	r3, [r3, #4]
 80113b0:	1949      	addeq	r1, r1, r5
 80113b2:	6021      	streq	r1, [r4, #0]
 80113b4:	e7ed      	b.n	8011392 <_free_r+0x22>
 80113b6:	461a      	mov	r2, r3
 80113b8:	685b      	ldr	r3, [r3, #4]
 80113ba:	b10b      	cbz	r3, 80113c0 <_free_r+0x50>
 80113bc:	42a3      	cmp	r3, r4
 80113be:	d9fa      	bls.n	80113b6 <_free_r+0x46>
 80113c0:	6811      	ldr	r1, [r2, #0]
 80113c2:	1855      	adds	r5, r2, r1
 80113c4:	42a5      	cmp	r5, r4
 80113c6:	d10b      	bne.n	80113e0 <_free_r+0x70>
 80113c8:	6824      	ldr	r4, [r4, #0]
 80113ca:	4421      	add	r1, r4
 80113cc:	1854      	adds	r4, r2, r1
 80113ce:	42a3      	cmp	r3, r4
 80113d0:	6011      	str	r1, [r2, #0]
 80113d2:	d1e0      	bne.n	8011396 <_free_r+0x26>
 80113d4:	681c      	ldr	r4, [r3, #0]
 80113d6:	685b      	ldr	r3, [r3, #4]
 80113d8:	6053      	str	r3, [r2, #4]
 80113da:	440c      	add	r4, r1
 80113dc:	6014      	str	r4, [r2, #0]
 80113de:	e7da      	b.n	8011396 <_free_r+0x26>
 80113e0:	d902      	bls.n	80113e8 <_free_r+0x78>
 80113e2:	230c      	movs	r3, #12
 80113e4:	6003      	str	r3, [r0, #0]
 80113e6:	e7d6      	b.n	8011396 <_free_r+0x26>
 80113e8:	6825      	ldr	r5, [r4, #0]
 80113ea:	1961      	adds	r1, r4, r5
 80113ec:	428b      	cmp	r3, r1
 80113ee:	bf04      	itt	eq
 80113f0:	6819      	ldreq	r1, [r3, #0]
 80113f2:	685b      	ldreq	r3, [r3, #4]
 80113f4:	6063      	str	r3, [r4, #4]
 80113f6:	bf04      	itt	eq
 80113f8:	1949      	addeq	r1, r1, r5
 80113fa:	6021      	streq	r1, [r4, #0]
 80113fc:	6054      	str	r4, [r2, #4]
 80113fe:	e7ca      	b.n	8011396 <_free_r+0x26>
 8011400:	b003      	add	sp, #12
 8011402:	bd30      	pop	{r4, r5, pc}
 8011404:	20008ad8 	.word	0x20008ad8

08011408 <malloc>:
 8011408:	4b02      	ldr	r3, [pc, #8]	; (8011414 <malloc+0xc>)
 801140a:	4601      	mov	r1, r0
 801140c:	6818      	ldr	r0, [r3, #0]
 801140e:	f000 b823 	b.w	8011458 <_malloc_r>
 8011412:	bf00      	nop
 8011414:	20000084 	.word	0x20000084

08011418 <sbrk_aligned>:
 8011418:	b570      	push	{r4, r5, r6, lr}
 801141a:	4e0e      	ldr	r6, [pc, #56]	; (8011454 <sbrk_aligned+0x3c>)
 801141c:	460c      	mov	r4, r1
 801141e:	6831      	ldr	r1, [r6, #0]
 8011420:	4605      	mov	r5, r0
 8011422:	b911      	cbnz	r1, 801142a <sbrk_aligned+0x12>
 8011424:	f000 fe26 	bl	8012074 <_sbrk_r>
 8011428:	6030      	str	r0, [r6, #0]
 801142a:	4621      	mov	r1, r4
 801142c:	4628      	mov	r0, r5
 801142e:	f000 fe21 	bl	8012074 <_sbrk_r>
 8011432:	1c43      	adds	r3, r0, #1
 8011434:	d00a      	beq.n	801144c <sbrk_aligned+0x34>
 8011436:	1cc4      	adds	r4, r0, #3
 8011438:	f024 0403 	bic.w	r4, r4, #3
 801143c:	42a0      	cmp	r0, r4
 801143e:	d007      	beq.n	8011450 <sbrk_aligned+0x38>
 8011440:	1a21      	subs	r1, r4, r0
 8011442:	4628      	mov	r0, r5
 8011444:	f000 fe16 	bl	8012074 <_sbrk_r>
 8011448:	3001      	adds	r0, #1
 801144a:	d101      	bne.n	8011450 <sbrk_aligned+0x38>
 801144c:	f04f 34ff 	mov.w	r4, #4294967295
 8011450:	4620      	mov	r0, r4
 8011452:	bd70      	pop	{r4, r5, r6, pc}
 8011454:	20008adc 	.word	0x20008adc

08011458 <_malloc_r>:
 8011458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801145c:	1ccd      	adds	r5, r1, #3
 801145e:	f025 0503 	bic.w	r5, r5, #3
 8011462:	3508      	adds	r5, #8
 8011464:	2d0c      	cmp	r5, #12
 8011466:	bf38      	it	cc
 8011468:	250c      	movcc	r5, #12
 801146a:	2d00      	cmp	r5, #0
 801146c:	4607      	mov	r7, r0
 801146e:	db01      	blt.n	8011474 <_malloc_r+0x1c>
 8011470:	42a9      	cmp	r1, r5
 8011472:	d905      	bls.n	8011480 <_malloc_r+0x28>
 8011474:	230c      	movs	r3, #12
 8011476:	603b      	str	r3, [r7, #0]
 8011478:	2600      	movs	r6, #0
 801147a:	4630      	mov	r0, r6
 801147c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011480:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011554 <_malloc_r+0xfc>
 8011484:	f000 f868 	bl	8011558 <__malloc_lock>
 8011488:	f8d8 3000 	ldr.w	r3, [r8]
 801148c:	461c      	mov	r4, r3
 801148e:	bb5c      	cbnz	r4, 80114e8 <_malloc_r+0x90>
 8011490:	4629      	mov	r1, r5
 8011492:	4638      	mov	r0, r7
 8011494:	f7ff ffc0 	bl	8011418 <sbrk_aligned>
 8011498:	1c43      	adds	r3, r0, #1
 801149a:	4604      	mov	r4, r0
 801149c:	d155      	bne.n	801154a <_malloc_r+0xf2>
 801149e:	f8d8 4000 	ldr.w	r4, [r8]
 80114a2:	4626      	mov	r6, r4
 80114a4:	2e00      	cmp	r6, #0
 80114a6:	d145      	bne.n	8011534 <_malloc_r+0xdc>
 80114a8:	2c00      	cmp	r4, #0
 80114aa:	d048      	beq.n	801153e <_malloc_r+0xe6>
 80114ac:	6823      	ldr	r3, [r4, #0]
 80114ae:	4631      	mov	r1, r6
 80114b0:	4638      	mov	r0, r7
 80114b2:	eb04 0903 	add.w	r9, r4, r3
 80114b6:	f000 fddd 	bl	8012074 <_sbrk_r>
 80114ba:	4581      	cmp	r9, r0
 80114bc:	d13f      	bne.n	801153e <_malloc_r+0xe6>
 80114be:	6821      	ldr	r1, [r4, #0]
 80114c0:	1a6d      	subs	r5, r5, r1
 80114c2:	4629      	mov	r1, r5
 80114c4:	4638      	mov	r0, r7
 80114c6:	f7ff ffa7 	bl	8011418 <sbrk_aligned>
 80114ca:	3001      	adds	r0, #1
 80114cc:	d037      	beq.n	801153e <_malloc_r+0xe6>
 80114ce:	6823      	ldr	r3, [r4, #0]
 80114d0:	442b      	add	r3, r5
 80114d2:	6023      	str	r3, [r4, #0]
 80114d4:	f8d8 3000 	ldr.w	r3, [r8]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d038      	beq.n	801154e <_malloc_r+0xf6>
 80114dc:	685a      	ldr	r2, [r3, #4]
 80114de:	42a2      	cmp	r2, r4
 80114e0:	d12b      	bne.n	801153a <_malloc_r+0xe2>
 80114e2:	2200      	movs	r2, #0
 80114e4:	605a      	str	r2, [r3, #4]
 80114e6:	e00f      	b.n	8011508 <_malloc_r+0xb0>
 80114e8:	6822      	ldr	r2, [r4, #0]
 80114ea:	1b52      	subs	r2, r2, r5
 80114ec:	d41f      	bmi.n	801152e <_malloc_r+0xd6>
 80114ee:	2a0b      	cmp	r2, #11
 80114f0:	d917      	bls.n	8011522 <_malloc_r+0xca>
 80114f2:	1961      	adds	r1, r4, r5
 80114f4:	42a3      	cmp	r3, r4
 80114f6:	6025      	str	r5, [r4, #0]
 80114f8:	bf18      	it	ne
 80114fa:	6059      	strne	r1, [r3, #4]
 80114fc:	6863      	ldr	r3, [r4, #4]
 80114fe:	bf08      	it	eq
 8011500:	f8c8 1000 	streq.w	r1, [r8]
 8011504:	5162      	str	r2, [r4, r5]
 8011506:	604b      	str	r3, [r1, #4]
 8011508:	4638      	mov	r0, r7
 801150a:	f104 060b 	add.w	r6, r4, #11
 801150e:	f000 f829 	bl	8011564 <__malloc_unlock>
 8011512:	f026 0607 	bic.w	r6, r6, #7
 8011516:	1d23      	adds	r3, r4, #4
 8011518:	1af2      	subs	r2, r6, r3
 801151a:	d0ae      	beq.n	801147a <_malloc_r+0x22>
 801151c:	1b9b      	subs	r3, r3, r6
 801151e:	50a3      	str	r3, [r4, r2]
 8011520:	e7ab      	b.n	801147a <_malloc_r+0x22>
 8011522:	42a3      	cmp	r3, r4
 8011524:	6862      	ldr	r2, [r4, #4]
 8011526:	d1dd      	bne.n	80114e4 <_malloc_r+0x8c>
 8011528:	f8c8 2000 	str.w	r2, [r8]
 801152c:	e7ec      	b.n	8011508 <_malloc_r+0xb0>
 801152e:	4623      	mov	r3, r4
 8011530:	6864      	ldr	r4, [r4, #4]
 8011532:	e7ac      	b.n	801148e <_malloc_r+0x36>
 8011534:	4634      	mov	r4, r6
 8011536:	6876      	ldr	r6, [r6, #4]
 8011538:	e7b4      	b.n	80114a4 <_malloc_r+0x4c>
 801153a:	4613      	mov	r3, r2
 801153c:	e7cc      	b.n	80114d8 <_malloc_r+0x80>
 801153e:	230c      	movs	r3, #12
 8011540:	603b      	str	r3, [r7, #0]
 8011542:	4638      	mov	r0, r7
 8011544:	f000 f80e 	bl	8011564 <__malloc_unlock>
 8011548:	e797      	b.n	801147a <_malloc_r+0x22>
 801154a:	6025      	str	r5, [r4, #0]
 801154c:	e7dc      	b.n	8011508 <_malloc_r+0xb0>
 801154e:	605b      	str	r3, [r3, #4]
 8011550:	deff      	udf	#255	; 0xff
 8011552:	bf00      	nop
 8011554:	20008ad8 	.word	0x20008ad8

08011558 <__malloc_lock>:
 8011558:	4801      	ldr	r0, [pc, #4]	; (8011560 <__malloc_lock+0x8>)
 801155a:	f7ff beda 	b.w	8011312 <__retarget_lock_acquire_recursive>
 801155e:	bf00      	nop
 8011560:	20008ad4 	.word	0x20008ad4

08011564 <__malloc_unlock>:
 8011564:	4801      	ldr	r0, [pc, #4]	; (801156c <__malloc_unlock+0x8>)
 8011566:	f7ff bed5 	b.w	8011314 <__retarget_lock_release_recursive>
 801156a:	bf00      	nop
 801156c:	20008ad4 	.word	0x20008ad4

08011570 <__ssputs_r>:
 8011570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011574:	688e      	ldr	r6, [r1, #8]
 8011576:	461f      	mov	r7, r3
 8011578:	42be      	cmp	r6, r7
 801157a:	680b      	ldr	r3, [r1, #0]
 801157c:	4682      	mov	sl, r0
 801157e:	460c      	mov	r4, r1
 8011580:	4690      	mov	r8, r2
 8011582:	d82c      	bhi.n	80115de <__ssputs_r+0x6e>
 8011584:	898a      	ldrh	r2, [r1, #12]
 8011586:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801158a:	d026      	beq.n	80115da <__ssputs_r+0x6a>
 801158c:	6965      	ldr	r5, [r4, #20]
 801158e:	6909      	ldr	r1, [r1, #16]
 8011590:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011594:	eba3 0901 	sub.w	r9, r3, r1
 8011598:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801159c:	1c7b      	adds	r3, r7, #1
 801159e:	444b      	add	r3, r9
 80115a0:	106d      	asrs	r5, r5, #1
 80115a2:	429d      	cmp	r5, r3
 80115a4:	bf38      	it	cc
 80115a6:	461d      	movcc	r5, r3
 80115a8:	0553      	lsls	r3, r2, #21
 80115aa:	d527      	bpl.n	80115fc <__ssputs_r+0x8c>
 80115ac:	4629      	mov	r1, r5
 80115ae:	f7ff ff53 	bl	8011458 <_malloc_r>
 80115b2:	4606      	mov	r6, r0
 80115b4:	b360      	cbz	r0, 8011610 <__ssputs_r+0xa0>
 80115b6:	6921      	ldr	r1, [r4, #16]
 80115b8:	464a      	mov	r2, r9
 80115ba:	f7ff feac 	bl	8011316 <memcpy>
 80115be:	89a3      	ldrh	r3, [r4, #12]
 80115c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80115c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80115c8:	81a3      	strh	r3, [r4, #12]
 80115ca:	6126      	str	r6, [r4, #16]
 80115cc:	6165      	str	r5, [r4, #20]
 80115ce:	444e      	add	r6, r9
 80115d0:	eba5 0509 	sub.w	r5, r5, r9
 80115d4:	6026      	str	r6, [r4, #0]
 80115d6:	60a5      	str	r5, [r4, #8]
 80115d8:	463e      	mov	r6, r7
 80115da:	42be      	cmp	r6, r7
 80115dc:	d900      	bls.n	80115e0 <__ssputs_r+0x70>
 80115de:	463e      	mov	r6, r7
 80115e0:	6820      	ldr	r0, [r4, #0]
 80115e2:	4632      	mov	r2, r6
 80115e4:	4641      	mov	r1, r8
 80115e6:	f7ff fe06 	bl	80111f6 <memmove>
 80115ea:	68a3      	ldr	r3, [r4, #8]
 80115ec:	1b9b      	subs	r3, r3, r6
 80115ee:	60a3      	str	r3, [r4, #8]
 80115f0:	6823      	ldr	r3, [r4, #0]
 80115f2:	4433      	add	r3, r6
 80115f4:	6023      	str	r3, [r4, #0]
 80115f6:	2000      	movs	r0, #0
 80115f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115fc:	462a      	mov	r2, r5
 80115fe:	f000 fd50 	bl	80120a2 <_realloc_r>
 8011602:	4606      	mov	r6, r0
 8011604:	2800      	cmp	r0, #0
 8011606:	d1e0      	bne.n	80115ca <__ssputs_r+0x5a>
 8011608:	6921      	ldr	r1, [r4, #16]
 801160a:	4650      	mov	r0, sl
 801160c:	f7ff feb0 	bl	8011370 <_free_r>
 8011610:	230c      	movs	r3, #12
 8011612:	f8ca 3000 	str.w	r3, [sl]
 8011616:	89a3      	ldrh	r3, [r4, #12]
 8011618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801161c:	81a3      	strh	r3, [r4, #12]
 801161e:	f04f 30ff 	mov.w	r0, #4294967295
 8011622:	e7e9      	b.n	80115f8 <__ssputs_r+0x88>

08011624 <_svfiprintf_r>:
 8011624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011628:	4698      	mov	r8, r3
 801162a:	898b      	ldrh	r3, [r1, #12]
 801162c:	061b      	lsls	r3, r3, #24
 801162e:	b09d      	sub	sp, #116	; 0x74
 8011630:	4607      	mov	r7, r0
 8011632:	460d      	mov	r5, r1
 8011634:	4614      	mov	r4, r2
 8011636:	d50e      	bpl.n	8011656 <_svfiprintf_r+0x32>
 8011638:	690b      	ldr	r3, [r1, #16]
 801163a:	b963      	cbnz	r3, 8011656 <_svfiprintf_r+0x32>
 801163c:	2140      	movs	r1, #64	; 0x40
 801163e:	f7ff ff0b 	bl	8011458 <_malloc_r>
 8011642:	6028      	str	r0, [r5, #0]
 8011644:	6128      	str	r0, [r5, #16]
 8011646:	b920      	cbnz	r0, 8011652 <_svfiprintf_r+0x2e>
 8011648:	230c      	movs	r3, #12
 801164a:	603b      	str	r3, [r7, #0]
 801164c:	f04f 30ff 	mov.w	r0, #4294967295
 8011650:	e0d0      	b.n	80117f4 <_svfiprintf_r+0x1d0>
 8011652:	2340      	movs	r3, #64	; 0x40
 8011654:	616b      	str	r3, [r5, #20]
 8011656:	2300      	movs	r3, #0
 8011658:	9309      	str	r3, [sp, #36]	; 0x24
 801165a:	2320      	movs	r3, #32
 801165c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011660:	f8cd 800c 	str.w	r8, [sp, #12]
 8011664:	2330      	movs	r3, #48	; 0x30
 8011666:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801180c <_svfiprintf_r+0x1e8>
 801166a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801166e:	f04f 0901 	mov.w	r9, #1
 8011672:	4623      	mov	r3, r4
 8011674:	469a      	mov	sl, r3
 8011676:	f813 2b01 	ldrb.w	r2, [r3], #1
 801167a:	b10a      	cbz	r2, 8011680 <_svfiprintf_r+0x5c>
 801167c:	2a25      	cmp	r2, #37	; 0x25
 801167e:	d1f9      	bne.n	8011674 <_svfiprintf_r+0x50>
 8011680:	ebba 0b04 	subs.w	fp, sl, r4
 8011684:	d00b      	beq.n	801169e <_svfiprintf_r+0x7a>
 8011686:	465b      	mov	r3, fp
 8011688:	4622      	mov	r2, r4
 801168a:	4629      	mov	r1, r5
 801168c:	4638      	mov	r0, r7
 801168e:	f7ff ff6f 	bl	8011570 <__ssputs_r>
 8011692:	3001      	adds	r0, #1
 8011694:	f000 80a9 	beq.w	80117ea <_svfiprintf_r+0x1c6>
 8011698:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801169a:	445a      	add	r2, fp
 801169c:	9209      	str	r2, [sp, #36]	; 0x24
 801169e:	f89a 3000 	ldrb.w	r3, [sl]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	f000 80a1 	beq.w	80117ea <_svfiprintf_r+0x1c6>
 80116a8:	2300      	movs	r3, #0
 80116aa:	f04f 32ff 	mov.w	r2, #4294967295
 80116ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80116b2:	f10a 0a01 	add.w	sl, sl, #1
 80116b6:	9304      	str	r3, [sp, #16]
 80116b8:	9307      	str	r3, [sp, #28]
 80116ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80116be:	931a      	str	r3, [sp, #104]	; 0x68
 80116c0:	4654      	mov	r4, sl
 80116c2:	2205      	movs	r2, #5
 80116c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116c8:	4850      	ldr	r0, [pc, #320]	; (801180c <_svfiprintf_r+0x1e8>)
 80116ca:	f7ee fdb9 	bl	8000240 <memchr>
 80116ce:	9a04      	ldr	r2, [sp, #16]
 80116d0:	b9d8      	cbnz	r0, 801170a <_svfiprintf_r+0xe6>
 80116d2:	06d0      	lsls	r0, r2, #27
 80116d4:	bf44      	itt	mi
 80116d6:	2320      	movmi	r3, #32
 80116d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80116dc:	0711      	lsls	r1, r2, #28
 80116de:	bf44      	itt	mi
 80116e0:	232b      	movmi	r3, #43	; 0x2b
 80116e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80116e6:	f89a 3000 	ldrb.w	r3, [sl]
 80116ea:	2b2a      	cmp	r3, #42	; 0x2a
 80116ec:	d015      	beq.n	801171a <_svfiprintf_r+0xf6>
 80116ee:	9a07      	ldr	r2, [sp, #28]
 80116f0:	4654      	mov	r4, sl
 80116f2:	2000      	movs	r0, #0
 80116f4:	f04f 0c0a 	mov.w	ip, #10
 80116f8:	4621      	mov	r1, r4
 80116fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80116fe:	3b30      	subs	r3, #48	; 0x30
 8011700:	2b09      	cmp	r3, #9
 8011702:	d94d      	bls.n	80117a0 <_svfiprintf_r+0x17c>
 8011704:	b1b0      	cbz	r0, 8011734 <_svfiprintf_r+0x110>
 8011706:	9207      	str	r2, [sp, #28]
 8011708:	e014      	b.n	8011734 <_svfiprintf_r+0x110>
 801170a:	eba0 0308 	sub.w	r3, r0, r8
 801170e:	fa09 f303 	lsl.w	r3, r9, r3
 8011712:	4313      	orrs	r3, r2
 8011714:	9304      	str	r3, [sp, #16]
 8011716:	46a2      	mov	sl, r4
 8011718:	e7d2      	b.n	80116c0 <_svfiprintf_r+0x9c>
 801171a:	9b03      	ldr	r3, [sp, #12]
 801171c:	1d19      	adds	r1, r3, #4
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	9103      	str	r1, [sp, #12]
 8011722:	2b00      	cmp	r3, #0
 8011724:	bfbb      	ittet	lt
 8011726:	425b      	neglt	r3, r3
 8011728:	f042 0202 	orrlt.w	r2, r2, #2
 801172c:	9307      	strge	r3, [sp, #28]
 801172e:	9307      	strlt	r3, [sp, #28]
 8011730:	bfb8      	it	lt
 8011732:	9204      	strlt	r2, [sp, #16]
 8011734:	7823      	ldrb	r3, [r4, #0]
 8011736:	2b2e      	cmp	r3, #46	; 0x2e
 8011738:	d10c      	bne.n	8011754 <_svfiprintf_r+0x130>
 801173a:	7863      	ldrb	r3, [r4, #1]
 801173c:	2b2a      	cmp	r3, #42	; 0x2a
 801173e:	d134      	bne.n	80117aa <_svfiprintf_r+0x186>
 8011740:	9b03      	ldr	r3, [sp, #12]
 8011742:	1d1a      	adds	r2, r3, #4
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	9203      	str	r2, [sp, #12]
 8011748:	2b00      	cmp	r3, #0
 801174a:	bfb8      	it	lt
 801174c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011750:	3402      	adds	r4, #2
 8011752:	9305      	str	r3, [sp, #20]
 8011754:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801181c <_svfiprintf_r+0x1f8>
 8011758:	7821      	ldrb	r1, [r4, #0]
 801175a:	2203      	movs	r2, #3
 801175c:	4650      	mov	r0, sl
 801175e:	f7ee fd6f 	bl	8000240 <memchr>
 8011762:	b138      	cbz	r0, 8011774 <_svfiprintf_r+0x150>
 8011764:	9b04      	ldr	r3, [sp, #16]
 8011766:	eba0 000a 	sub.w	r0, r0, sl
 801176a:	2240      	movs	r2, #64	; 0x40
 801176c:	4082      	lsls	r2, r0
 801176e:	4313      	orrs	r3, r2
 8011770:	3401      	adds	r4, #1
 8011772:	9304      	str	r3, [sp, #16]
 8011774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011778:	4825      	ldr	r0, [pc, #148]	; (8011810 <_svfiprintf_r+0x1ec>)
 801177a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801177e:	2206      	movs	r2, #6
 8011780:	f7ee fd5e 	bl	8000240 <memchr>
 8011784:	2800      	cmp	r0, #0
 8011786:	d038      	beq.n	80117fa <_svfiprintf_r+0x1d6>
 8011788:	4b22      	ldr	r3, [pc, #136]	; (8011814 <_svfiprintf_r+0x1f0>)
 801178a:	bb1b      	cbnz	r3, 80117d4 <_svfiprintf_r+0x1b0>
 801178c:	9b03      	ldr	r3, [sp, #12]
 801178e:	3307      	adds	r3, #7
 8011790:	f023 0307 	bic.w	r3, r3, #7
 8011794:	3308      	adds	r3, #8
 8011796:	9303      	str	r3, [sp, #12]
 8011798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801179a:	4433      	add	r3, r6
 801179c:	9309      	str	r3, [sp, #36]	; 0x24
 801179e:	e768      	b.n	8011672 <_svfiprintf_r+0x4e>
 80117a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80117a4:	460c      	mov	r4, r1
 80117a6:	2001      	movs	r0, #1
 80117a8:	e7a6      	b.n	80116f8 <_svfiprintf_r+0xd4>
 80117aa:	2300      	movs	r3, #0
 80117ac:	3401      	adds	r4, #1
 80117ae:	9305      	str	r3, [sp, #20]
 80117b0:	4619      	mov	r1, r3
 80117b2:	f04f 0c0a 	mov.w	ip, #10
 80117b6:	4620      	mov	r0, r4
 80117b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80117bc:	3a30      	subs	r2, #48	; 0x30
 80117be:	2a09      	cmp	r2, #9
 80117c0:	d903      	bls.n	80117ca <_svfiprintf_r+0x1a6>
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d0c6      	beq.n	8011754 <_svfiprintf_r+0x130>
 80117c6:	9105      	str	r1, [sp, #20]
 80117c8:	e7c4      	b.n	8011754 <_svfiprintf_r+0x130>
 80117ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80117ce:	4604      	mov	r4, r0
 80117d0:	2301      	movs	r3, #1
 80117d2:	e7f0      	b.n	80117b6 <_svfiprintf_r+0x192>
 80117d4:	ab03      	add	r3, sp, #12
 80117d6:	9300      	str	r3, [sp, #0]
 80117d8:	462a      	mov	r2, r5
 80117da:	4b0f      	ldr	r3, [pc, #60]	; (8011818 <_svfiprintf_r+0x1f4>)
 80117dc:	a904      	add	r1, sp, #16
 80117de:	4638      	mov	r0, r7
 80117e0:	f3af 8000 	nop.w
 80117e4:	1c42      	adds	r2, r0, #1
 80117e6:	4606      	mov	r6, r0
 80117e8:	d1d6      	bne.n	8011798 <_svfiprintf_r+0x174>
 80117ea:	89ab      	ldrh	r3, [r5, #12]
 80117ec:	065b      	lsls	r3, r3, #25
 80117ee:	f53f af2d 	bmi.w	801164c <_svfiprintf_r+0x28>
 80117f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80117f4:	b01d      	add	sp, #116	; 0x74
 80117f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117fa:	ab03      	add	r3, sp, #12
 80117fc:	9300      	str	r3, [sp, #0]
 80117fe:	462a      	mov	r2, r5
 8011800:	4b05      	ldr	r3, [pc, #20]	; (8011818 <_svfiprintf_r+0x1f4>)
 8011802:	a904      	add	r1, sp, #16
 8011804:	4638      	mov	r0, r7
 8011806:	f000 f9bd 	bl	8011b84 <_printf_i>
 801180a:	e7eb      	b.n	80117e4 <_svfiprintf_r+0x1c0>
 801180c:	08014eb9 	.word	0x08014eb9
 8011810:	08014ec3 	.word	0x08014ec3
 8011814:	00000000 	.word	0x00000000
 8011818:	08011571 	.word	0x08011571
 801181c:	08014ebf 	.word	0x08014ebf

08011820 <__sfputc_r>:
 8011820:	6893      	ldr	r3, [r2, #8]
 8011822:	3b01      	subs	r3, #1
 8011824:	2b00      	cmp	r3, #0
 8011826:	b410      	push	{r4}
 8011828:	6093      	str	r3, [r2, #8]
 801182a:	da08      	bge.n	801183e <__sfputc_r+0x1e>
 801182c:	6994      	ldr	r4, [r2, #24]
 801182e:	42a3      	cmp	r3, r4
 8011830:	db01      	blt.n	8011836 <__sfputc_r+0x16>
 8011832:	290a      	cmp	r1, #10
 8011834:	d103      	bne.n	801183e <__sfputc_r+0x1e>
 8011836:	f85d 4b04 	ldr.w	r4, [sp], #4
 801183a:	f000 bb85 	b.w	8011f48 <__swbuf_r>
 801183e:	6813      	ldr	r3, [r2, #0]
 8011840:	1c58      	adds	r0, r3, #1
 8011842:	6010      	str	r0, [r2, #0]
 8011844:	7019      	strb	r1, [r3, #0]
 8011846:	4608      	mov	r0, r1
 8011848:	f85d 4b04 	ldr.w	r4, [sp], #4
 801184c:	4770      	bx	lr

0801184e <__sfputs_r>:
 801184e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011850:	4606      	mov	r6, r0
 8011852:	460f      	mov	r7, r1
 8011854:	4614      	mov	r4, r2
 8011856:	18d5      	adds	r5, r2, r3
 8011858:	42ac      	cmp	r4, r5
 801185a:	d101      	bne.n	8011860 <__sfputs_r+0x12>
 801185c:	2000      	movs	r0, #0
 801185e:	e007      	b.n	8011870 <__sfputs_r+0x22>
 8011860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011864:	463a      	mov	r2, r7
 8011866:	4630      	mov	r0, r6
 8011868:	f7ff ffda 	bl	8011820 <__sfputc_r>
 801186c:	1c43      	adds	r3, r0, #1
 801186e:	d1f3      	bne.n	8011858 <__sfputs_r+0xa>
 8011870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011874 <_vfiprintf_r>:
 8011874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011878:	460d      	mov	r5, r1
 801187a:	b09d      	sub	sp, #116	; 0x74
 801187c:	4614      	mov	r4, r2
 801187e:	4698      	mov	r8, r3
 8011880:	4606      	mov	r6, r0
 8011882:	b118      	cbz	r0, 801188c <_vfiprintf_r+0x18>
 8011884:	6a03      	ldr	r3, [r0, #32]
 8011886:	b90b      	cbnz	r3, 801188c <_vfiprintf_r+0x18>
 8011888:	f7ff fbfa 	bl	8011080 <__sinit>
 801188c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801188e:	07d9      	lsls	r1, r3, #31
 8011890:	d405      	bmi.n	801189e <_vfiprintf_r+0x2a>
 8011892:	89ab      	ldrh	r3, [r5, #12]
 8011894:	059a      	lsls	r2, r3, #22
 8011896:	d402      	bmi.n	801189e <_vfiprintf_r+0x2a>
 8011898:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801189a:	f7ff fd3a 	bl	8011312 <__retarget_lock_acquire_recursive>
 801189e:	89ab      	ldrh	r3, [r5, #12]
 80118a0:	071b      	lsls	r3, r3, #28
 80118a2:	d501      	bpl.n	80118a8 <_vfiprintf_r+0x34>
 80118a4:	692b      	ldr	r3, [r5, #16]
 80118a6:	b99b      	cbnz	r3, 80118d0 <_vfiprintf_r+0x5c>
 80118a8:	4629      	mov	r1, r5
 80118aa:	4630      	mov	r0, r6
 80118ac:	f000 fb8a 	bl	8011fc4 <__swsetup_r>
 80118b0:	b170      	cbz	r0, 80118d0 <_vfiprintf_r+0x5c>
 80118b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80118b4:	07dc      	lsls	r4, r3, #31
 80118b6:	d504      	bpl.n	80118c2 <_vfiprintf_r+0x4e>
 80118b8:	f04f 30ff 	mov.w	r0, #4294967295
 80118bc:	b01d      	add	sp, #116	; 0x74
 80118be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118c2:	89ab      	ldrh	r3, [r5, #12]
 80118c4:	0598      	lsls	r0, r3, #22
 80118c6:	d4f7      	bmi.n	80118b8 <_vfiprintf_r+0x44>
 80118c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80118ca:	f7ff fd23 	bl	8011314 <__retarget_lock_release_recursive>
 80118ce:	e7f3      	b.n	80118b8 <_vfiprintf_r+0x44>
 80118d0:	2300      	movs	r3, #0
 80118d2:	9309      	str	r3, [sp, #36]	; 0x24
 80118d4:	2320      	movs	r3, #32
 80118d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80118da:	f8cd 800c 	str.w	r8, [sp, #12]
 80118de:	2330      	movs	r3, #48	; 0x30
 80118e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011a94 <_vfiprintf_r+0x220>
 80118e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80118e8:	f04f 0901 	mov.w	r9, #1
 80118ec:	4623      	mov	r3, r4
 80118ee:	469a      	mov	sl, r3
 80118f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80118f4:	b10a      	cbz	r2, 80118fa <_vfiprintf_r+0x86>
 80118f6:	2a25      	cmp	r2, #37	; 0x25
 80118f8:	d1f9      	bne.n	80118ee <_vfiprintf_r+0x7a>
 80118fa:	ebba 0b04 	subs.w	fp, sl, r4
 80118fe:	d00b      	beq.n	8011918 <_vfiprintf_r+0xa4>
 8011900:	465b      	mov	r3, fp
 8011902:	4622      	mov	r2, r4
 8011904:	4629      	mov	r1, r5
 8011906:	4630      	mov	r0, r6
 8011908:	f7ff ffa1 	bl	801184e <__sfputs_r>
 801190c:	3001      	adds	r0, #1
 801190e:	f000 80a9 	beq.w	8011a64 <_vfiprintf_r+0x1f0>
 8011912:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011914:	445a      	add	r2, fp
 8011916:	9209      	str	r2, [sp, #36]	; 0x24
 8011918:	f89a 3000 	ldrb.w	r3, [sl]
 801191c:	2b00      	cmp	r3, #0
 801191e:	f000 80a1 	beq.w	8011a64 <_vfiprintf_r+0x1f0>
 8011922:	2300      	movs	r3, #0
 8011924:	f04f 32ff 	mov.w	r2, #4294967295
 8011928:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801192c:	f10a 0a01 	add.w	sl, sl, #1
 8011930:	9304      	str	r3, [sp, #16]
 8011932:	9307      	str	r3, [sp, #28]
 8011934:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011938:	931a      	str	r3, [sp, #104]	; 0x68
 801193a:	4654      	mov	r4, sl
 801193c:	2205      	movs	r2, #5
 801193e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011942:	4854      	ldr	r0, [pc, #336]	; (8011a94 <_vfiprintf_r+0x220>)
 8011944:	f7ee fc7c 	bl	8000240 <memchr>
 8011948:	9a04      	ldr	r2, [sp, #16]
 801194a:	b9d8      	cbnz	r0, 8011984 <_vfiprintf_r+0x110>
 801194c:	06d1      	lsls	r1, r2, #27
 801194e:	bf44      	itt	mi
 8011950:	2320      	movmi	r3, #32
 8011952:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011956:	0713      	lsls	r3, r2, #28
 8011958:	bf44      	itt	mi
 801195a:	232b      	movmi	r3, #43	; 0x2b
 801195c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011960:	f89a 3000 	ldrb.w	r3, [sl]
 8011964:	2b2a      	cmp	r3, #42	; 0x2a
 8011966:	d015      	beq.n	8011994 <_vfiprintf_r+0x120>
 8011968:	9a07      	ldr	r2, [sp, #28]
 801196a:	4654      	mov	r4, sl
 801196c:	2000      	movs	r0, #0
 801196e:	f04f 0c0a 	mov.w	ip, #10
 8011972:	4621      	mov	r1, r4
 8011974:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011978:	3b30      	subs	r3, #48	; 0x30
 801197a:	2b09      	cmp	r3, #9
 801197c:	d94d      	bls.n	8011a1a <_vfiprintf_r+0x1a6>
 801197e:	b1b0      	cbz	r0, 80119ae <_vfiprintf_r+0x13a>
 8011980:	9207      	str	r2, [sp, #28]
 8011982:	e014      	b.n	80119ae <_vfiprintf_r+0x13a>
 8011984:	eba0 0308 	sub.w	r3, r0, r8
 8011988:	fa09 f303 	lsl.w	r3, r9, r3
 801198c:	4313      	orrs	r3, r2
 801198e:	9304      	str	r3, [sp, #16]
 8011990:	46a2      	mov	sl, r4
 8011992:	e7d2      	b.n	801193a <_vfiprintf_r+0xc6>
 8011994:	9b03      	ldr	r3, [sp, #12]
 8011996:	1d19      	adds	r1, r3, #4
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	9103      	str	r1, [sp, #12]
 801199c:	2b00      	cmp	r3, #0
 801199e:	bfbb      	ittet	lt
 80119a0:	425b      	neglt	r3, r3
 80119a2:	f042 0202 	orrlt.w	r2, r2, #2
 80119a6:	9307      	strge	r3, [sp, #28]
 80119a8:	9307      	strlt	r3, [sp, #28]
 80119aa:	bfb8      	it	lt
 80119ac:	9204      	strlt	r2, [sp, #16]
 80119ae:	7823      	ldrb	r3, [r4, #0]
 80119b0:	2b2e      	cmp	r3, #46	; 0x2e
 80119b2:	d10c      	bne.n	80119ce <_vfiprintf_r+0x15a>
 80119b4:	7863      	ldrb	r3, [r4, #1]
 80119b6:	2b2a      	cmp	r3, #42	; 0x2a
 80119b8:	d134      	bne.n	8011a24 <_vfiprintf_r+0x1b0>
 80119ba:	9b03      	ldr	r3, [sp, #12]
 80119bc:	1d1a      	adds	r2, r3, #4
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	9203      	str	r2, [sp, #12]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	bfb8      	it	lt
 80119c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80119ca:	3402      	adds	r4, #2
 80119cc:	9305      	str	r3, [sp, #20]
 80119ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011aa4 <_vfiprintf_r+0x230>
 80119d2:	7821      	ldrb	r1, [r4, #0]
 80119d4:	2203      	movs	r2, #3
 80119d6:	4650      	mov	r0, sl
 80119d8:	f7ee fc32 	bl	8000240 <memchr>
 80119dc:	b138      	cbz	r0, 80119ee <_vfiprintf_r+0x17a>
 80119de:	9b04      	ldr	r3, [sp, #16]
 80119e0:	eba0 000a 	sub.w	r0, r0, sl
 80119e4:	2240      	movs	r2, #64	; 0x40
 80119e6:	4082      	lsls	r2, r0
 80119e8:	4313      	orrs	r3, r2
 80119ea:	3401      	adds	r4, #1
 80119ec:	9304      	str	r3, [sp, #16]
 80119ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119f2:	4829      	ldr	r0, [pc, #164]	; (8011a98 <_vfiprintf_r+0x224>)
 80119f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80119f8:	2206      	movs	r2, #6
 80119fa:	f7ee fc21 	bl	8000240 <memchr>
 80119fe:	2800      	cmp	r0, #0
 8011a00:	d03f      	beq.n	8011a82 <_vfiprintf_r+0x20e>
 8011a02:	4b26      	ldr	r3, [pc, #152]	; (8011a9c <_vfiprintf_r+0x228>)
 8011a04:	bb1b      	cbnz	r3, 8011a4e <_vfiprintf_r+0x1da>
 8011a06:	9b03      	ldr	r3, [sp, #12]
 8011a08:	3307      	adds	r3, #7
 8011a0a:	f023 0307 	bic.w	r3, r3, #7
 8011a0e:	3308      	adds	r3, #8
 8011a10:	9303      	str	r3, [sp, #12]
 8011a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a14:	443b      	add	r3, r7
 8011a16:	9309      	str	r3, [sp, #36]	; 0x24
 8011a18:	e768      	b.n	80118ec <_vfiprintf_r+0x78>
 8011a1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8011a1e:	460c      	mov	r4, r1
 8011a20:	2001      	movs	r0, #1
 8011a22:	e7a6      	b.n	8011972 <_vfiprintf_r+0xfe>
 8011a24:	2300      	movs	r3, #0
 8011a26:	3401      	adds	r4, #1
 8011a28:	9305      	str	r3, [sp, #20]
 8011a2a:	4619      	mov	r1, r3
 8011a2c:	f04f 0c0a 	mov.w	ip, #10
 8011a30:	4620      	mov	r0, r4
 8011a32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a36:	3a30      	subs	r2, #48	; 0x30
 8011a38:	2a09      	cmp	r2, #9
 8011a3a:	d903      	bls.n	8011a44 <_vfiprintf_r+0x1d0>
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d0c6      	beq.n	80119ce <_vfiprintf_r+0x15a>
 8011a40:	9105      	str	r1, [sp, #20]
 8011a42:	e7c4      	b.n	80119ce <_vfiprintf_r+0x15a>
 8011a44:	fb0c 2101 	mla	r1, ip, r1, r2
 8011a48:	4604      	mov	r4, r0
 8011a4a:	2301      	movs	r3, #1
 8011a4c:	e7f0      	b.n	8011a30 <_vfiprintf_r+0x1bc>
 8011a4e:	ab03      	add	r3, sp, #12
 8011a50:	9300      	str	r3, [sp, #0]
 8011a52:	462a      	mov	r2, r5
 8011a54:	4b12      	ldr	r3, [pc, #72]	; (8011aa0 <_vfiprintf_r+0x22c>)
 8011a56:	a904      	add	r1, sp, #16
 8011a58:	4630      	mov	r0, r6
 8011a5a:	f3af 8000 	nop.w
 8011a5e:	4607      	mov	r7, r0
 8011a60:	1c78      	adds	r0, r7, #1
 8011a62:	d1d6      	bne.n	8011a12 <_vfiprintf_r+0x19e>
 8011a64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a66:	07d9      	lsls	r1, r3, #31
 8011a68:	d405      	bmi.n	8011a76 <_vfiprintf_r+0x202>
 8011a6a:	89ab      	ldrh	r3, [r5, #12]
 8011a6c:	059a      	lsls	r2, r3, #22
 8011a6e:	d402      	bmi.n	8011a76 <_vfiprintf_r+0x202>
 8011a70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a72:	f7ff fc4f 	bl	8011314 <__retarget_lock_release_recursive>
 8011a76:	89ab      	ldrh	r3, [r5, #12]
 8011a78:	065b      	lsls	r3, r3, #25
 8011a7a:	f53f af1d 	bmi.w	80118b8 <_vfiprintf_r+0x44>
 8011a7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011a80:	e71c      	b.n	80118bc <_vfiprintf_r+0x48>
 8011a82:	ab03      	add	r3, sp, #12
 8011a84:	9300      	str	r3, [sp, #0]
 8011a86:	462a      	mov	r2, r5
 8011a88:	4b05      	ldr	r3, [pc, #20]	; (8011aa0 <_vfiprintf_r+0x22c>)
 8011a8a:	a904      	add	r1, sp, #16
 8011a8c:	4630      	mov	r0, r6
 8011a8e:	f000 f879 	bl	8011b84 <_printf_i>
 8011a92:	e7e4      	b.n	8011a5e <_vfiprintf_r+0x1ea>
 8011a94:	08014eb9 	.word	0x08014eb9
 8011a98:	08014ec3 	.word	0x08014ec3
 8011a9c:	00000000 	.word	0x00000000
 8011aa0:	0801184f 	.word	0x0801184f
 8011aa4:	08014ebf 	.word	0x08014ebf

08011aa8 <_printf_common>:
 8011aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011aac:	4616      	mov	r6, r2
 8011aae:	4699      	mov	r9, r3
 8011ab0:	688a      	ldr	r2, [r1, #8]
 8011ab2:	690b      	ldr	r3, [r1, #16]
 8011ab4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011ab8:	4293      	cmp	r3, r2
 8011aba:	bfb8      	it	lt
 8011abc:	4613      	movlt	r3, r2
 8011abe:	6033      	str	r3, [r6, #0]
 8011ac0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011ac4:	4607      	mov	r7, r0
 8011ac6:	460c      	mov	r4, r1
 8011ac8:	b10a      	cbz	r2, 8011ace <_printf_common+0x26>
 8011aca:	3301      	adds	r3, #1
 8011acc:	6033      	str	r3, [r6, #0]
 8011ace:	6823      	ldr	r3, [r4, #0]
 8011ad0:	0699      	lsls	r1, r3, #26
 8011ad2:	bf42      	ittt	mi
 8011ad4:	6833      	ldrmi	r3, [r6, #0]
 8011ad6:	3302      	addmi	r3, #2
 8011ad8:	6033      	strmi	r3, [r6, #0]
 8011ada:	6825      	ldr	r5, [r4, #0]
 8011adc:	f015 0506 	ands.w	r5, r5, #6
 8011ae0:	d106      	bne.n	8011af0 <_printf_common+0x48>
 8011ae2:	f104 0a19 	add.w	sl, r4, #25
 8011ae6:	68e3      	ldr	r3, [r4, #12]
 8011ae8:	6832      	ldr	r2, [r6, #0]
 8011aea:	1a9b      	subs	r3, r3, r2
 8011aec:	42ab      	cmp	r3, r5
 8011aee:	dc26      	bgt.n	8011b3e <_printf_common+0x96>
 8011af0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011af4:	1e13      	subs	r3, r2, #0
 8011af6:	6822      	ldr	r2, [r4, #0]
 8011af8:	bf18      	it	ne
 8011afa:	2301      	movne	r3, #1
 8011afc:	0692      	lsls	r2, r2, #26
 8011afe:	d42b      	bmi.n	8011b58 <_printf_common+0xb0>
 8011b00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011b04:	4649      	mov	r1, r9
 8011b06:	4638      	mov	r0, r7
 8011b08:	47c0      	blx	r8
 8011b0a:	3001      	adds	r0, #1
 8011b0c:	d01e      	beq.n	8011b4c <_printf_common+0xa4>
 8011b0e:	6823      	ldr	r3, [r4, #0]
 8011b10:	6922      	ldr	r2, [r4, #16]
 8011b12:	f003 0306 	and.w	r3, r3, #6
 8011b16:	2b04      	cmp	r3, #4
 8011b18:	bf02      	ittt	eq
 8011b1a:	68e5      	ldreq	r5, [r4, #12]
 8011b1c:	6833      	ldreq	r3, [r6, #0]
 8011b1e:	1aed      	subeq	r5, r5, r3
 8011b20:	68a3      	ldr	r3, [r4, #8]
 8011b22:	bf0c      	ite	eq
 8011b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011b28:	2500      	movne	r5, #0
 8011b2a:	4293      	cmp	r3, r2
 8011b2c:	bfc4      	itt	gt
 8011b2e:	1a9b      	subgt	r3, r3, r2
 8011b30:	18ed      	addgt	r5, r5, r3
 8011b32:	2600      	movs	r6, #0
 8011b34:	341a      	adds	r4, #26
 8011b36:	42b5      	cmp	r5, r6
 8011b38:	d11a      	bne.n	8011b70 <_printf_common+0xc8>
 8011b3a:	2000      	movs	r0, #0
 8011b3c:	e008      	b.n	8011b50 <_printf_common+0xa8>
 8011b3e:	2301      	movs	r3, #1
 8011b40:	4652      	mov	r2, sl
 8011b42:	4649      	mov	r1, r9
 8011b44:	4638      	mov	r0, r7
 8011b46:	47c0      	blx	r8
 8011b48:	3001      	adds	r0, #1
 8011b4a:	d103      	bne.n	8011b54 <_printf_common+0xac>
 8011b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b54:	3501      	adds	r5, #1
 8011b56:	e7c6      	b.n	8011ae6 <_printf_common+0x3e>
 8011b58:	18e1      	adds	r1, r4, r3
 8011b5a:	1c5a      	adds	r2, r3, #1
 8011b5c:	2030      	movs	r0, #48	; 0x30
 8011b5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011b62:	4422      	add	r2, r4
 8011b64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011b68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011b6c:	3302      	adds	r3, #2
 8011b6e:	e7c7      	b.n	8011b00 <_printf_common+0x58>
 8011b70:	2301      	movs	r3, #1
 8011b72:	4622      	mov	r2, r4
 8011b74:	4649      	mov	r1, r9
 8011b76:	4638      	mov	r0, r7
 8011b78:	47c0      	blx	r8
 8011b7a:	3001      	adds	r0, #1
 8011b7c:	d0e6      	beq.n	8011b4c <_printf_common+0xa4>
 8011b7e:	3601      	adds	r6, #1
 8011b80:	e7d9      	b.n	8011b36 <_printf_common+0x8e>
	...

08011b84 <_printf_i>:
 8011b84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011b88:	7e0f      	ldrb	r7, [r1, #24]
 8011b8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011b8c:	2f78      	cmp	r7, #120	; 0x78
 8011b8e:	4691      	mov	r9, r2
 8011b90:	4680      	mov	r8, r0
 8011b92:	460c      	mov	r4, r1
 8011b94:	469a      	mov	sl, r3
 8011b96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011b9a:	d807      	bhi.n	8011bac <_printf_i+0x28>
 8011b9c:	2f62      	cmp	r7, #98	; 0x62
 8011b9e:	d80a      	bhi.n	8011bb6 <_printf_i+0x32>
 8011ba0:	2f00      	cmp	r7, #0
 8011ba2:	f000 80d4 	beq.w	8011d4e <_printf_i+0x1ca>
 8011ba6:	2f58      	cmp	r7, #88	; 0x58
 8011ba8:	f000 80c0 	beq.w	8011d2c <_printf_i+0x1a8>
 8011bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011bb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011bb4:	e03a      	b.n	8011c2c <_printf_i+0xa8>
 8011bb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011bba:	2b15      	cmp	r3, #21
 8011bbc:	d8f6      	bhi.n	8011bac <_printf_i+0x28>
 8011bbe:	a101      	add	r1, pc, #4	; (adr r1, 8011bc4 <_printf_i+0x40>)
 8011bc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011bc4:	08011c1d 	.word	0x08011c1d
 8011bc8:	08011c31 	.word	0x08011c31
 8011bcc:	08011bad 	.word	0x08011bad
 8011bd0:	08011bad 	.word	0x08011bad
 8011bd4:	08011bad 	.word	0x08011bad
 8011bd8:	08011bad 	.word	0x08011bad
 8011bdc:	08011c31 	.word	0x08011c31
 8011be0:	08011bad 	.word	0x08011bad
 8011be4:	08011bad 	.word	0x08011bad
 8011be8:	08011bad 	.word	0x08011bad
 8011bec:	08011bad 	.word	0x08011bad
 8011bf0:	08011d35 	.word	0x08011d35
 8011bf4:	08011c5d 	.word	0x08011c5d
 8011bf8:	08011cef 	.word	0x08011cef
 8011bfc:	08011bad 	.word	0x08011bad
 8011c00:	08011bad 	.word	0x08011bad
 8011c04:	08011d57 	.word	0x08011d57
 8011c08:	08011bad 	.word	0x08011bad
 8011c0c:	08011c5d 	.word	0x08011c5d
 8011c10:	08011bad 	.word	0x08011bad
 8011c14:	08011bad 	.word	0x08011bad
 8011c18:	08011cf7 	.word	0x08011cf7
 8011c1c:	682b      	ldr	r3, [r5, #0]
 8011c1e:	1d1a      	adds	r2, r3, #4
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	602a      	str	r2, [r5, #0]
 8011c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011c28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011c2c:	2301      	movs	r3, #1
 8011c2e:	e09f      	b.n	8011d70 <_printf_i+0x1ec>
 8011c30:	6820      	ldr	r0, [r4, #0]
 8011c32:	682b      	ldr	r3, [r5, #0]
 8011c34:	0607      	lsls	r7, r0, #24
 8011c36:	f103 0104 	add.w	r1, r3, #4
 8011c3a:	6029      	str	r1, [r5, #0]
 8011c3c:	d501      	bpl.n	8011c42 <_printf_i+0xbe>
 8011c3e:	681e      	ldr	r6, [r3, #0]
 8011c40:	e003      	b.n	8011c4a <_printf_i+0xc6>
 8011c42:	0646      	lsls	r6, r0, #25
 8011c44:	d5fb      	bpl.n	8011c3e <_printf_i+0xba>
 8011c46:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011c4a:	2e00      	cmp	r6, #0
 8011c4c:	da03      	bge.n	8011c56 <_printf_i+0xd2>
 8011c4e:	232d      	movs	r3, #45	; 0x2d
 8011c50:	4276      	negs	r6, r6
 8011c52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c56:	485a      	ldr	r0, [pc, #360]	; (8011dc0 <_printf_i+0x23c>)
 8011c58:	230a      	movs	r3, #10
 8011c5a:	e012      	b.n	8011c82 <_printf_i+0xfe>
 8011c5c:	682b      	ldr	r3, [r5, #0]
 8011c5e:	6820      	ldr	r0, [r4, #0]
 8011c60:	1d19      	adds	r1, r3, #4
 8011c62:	6029      	str	r1, [r5, #0]
 8011c64:	0605      	lsls	r5, r0, #24
 8011c66:	d501      	bpl.n	8011c6c <_printf_i+0xe8>
 8011c68:	681e      	ldr	r6, [r3, #0]
 8011c6a:	e002      	b.n	8011c72 <_printf_i+0xee>
 8011c6c:	0641      	lsls	r1, r0, #25
 8011c6e:	d5fb      	bpl.n	8011c68 <_printf_i+0xe4>
 8011c70:	881e      	ldrh	r6, [r3, #0]
 8011c72:	4853      	ldr	r0, [pc, #332]	; (8011dc0 <_printf_i+0x23c>)
 8011c74:	2f6f      	cmp	r7, #111	; 0x6f
 8011c76:	bf0c      	ite	eq
 8011c78:	2308      	moveq	r3, #8
 8011c7a:	230a      	movne	r3, #10
 8011c7c:	2100      	movs	r1, #0
 8011c7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011c82:	6865      	ldr	r5, [r4, #4]
 8011c84:	60a5      	str	r5, [r4, #8]
 8011c86:	2d00      	cmp	r5, #0
 8011c88:	bfa2      	ittt	ge
 8011c8a:	6821      	ldrge	r1, [r4, #0]
 8011c8c:	f021 0104 	bicge.w	r1, r1, #4
 8011c90:	6021      	strge	r1, [r4, #0]
 8011c92:	b90e      	cbnz	r6, 8011c98 <_printf_i+0x114>
 8011c94:	2d00      	cmp	r5, #0
 8011c96:	d04b      	beq.n	8011d30 <_printf_i+0x1ac>
 8011c98:	4615      	mov	r5, r2
 8011c9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8011c9e:	fb03 6711 	mls	r7, r3, r1, r6
 8011ca2:	5dc7      	ldrb	r7, [r0, r7]
 8011ca4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011ca8:	4637      	mov	r7, r6
 8011caa:	42bb      	cmp	r3, r7
 8011cac:	460e      	mov	r6, r1
 8011cae:	d9f4      	bls.n	8011c9a <_printf_i+0x116>
 8011cb0:	2b08      	cmp	r3, #8
 8011cb2:	d10b      	bne.n	8011ccc <_printf_i+0x148>
 8011cb4:	6823      	ldr	r3, [r4, #0]
 8011cb6:	07de      	lsls	r6, r3, #31
 8011cb8:	d508      	bpl.n	8011ccc <_printf_i+0x148>
 8011cba:	6923      	ldr	r3, [r4, #16]
 8011cbc:	6861      	ldr	r1, [r4, #4]
 8011cbe:	4299      	cmp	r1, r3
 8011cc0:	bfde      	ittt	le
 8011cc2:	2330      	movle	r3, #48	; 0x30
 8011cc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011cc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011ccc:	1b52      	subs	r2, r2, r5
 8011cce:	6122      	str	r2, [r4, #16]
 8011cd0:	f8cd a000 	str.w	sl, [sp]
 8011cd4:	464b      	mov	r3, r9
 8011cd6:	aa03      	add	r2, sp, #12
 8011cd8:	4621      	mov	r1, r4
 8011cda:	4640      	mov	r0, r8
 8011cdc:	f7ff fee4 	bl	8011aa8 <_printf_common>
 8011ce0:	3001      	adds	r0, #1
 8011ce2:	d14a      	bne.n	8011d7a <_printf_i+0x1f6>
 8011ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ce8:	b004      	add	sp, #16
 8011cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cee:	6823      	ldr	r3, [r4, #0]
 8011cf0:	f043 0320 	orr.w	r3, r3, #32
 8011cf4:	6023      	str	r3, [r4, #0]
 8011cf6:	4833      	ldr	r0, [pc, #204]	; (8011dc4 <_printf_i+0x240>)
 8011cf8:	2778      	movs	r7, #120	; 0x78
 8011cfa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011cfe:	6823      	ldr	r3, [r4, #0]
 8011d00:	6829      	ldr	r1, [r5, #0]
 8011d02:	061f      	lsls	r7, r3, #24
 8011d04:	f851 6b04 	ldr.w	r6, [r1], #4
 8011d08:	d402      	bmi.n	8011d10 <_printf_i+0x18c>
 8011d0a:	065f      	lsls	r7, r3, #25
 8011d0c:	bf48      	it	mi
 8011d0e:	b2b6      	uxthmi	r6, r6
 8011d10:	07df      	lsls	r7, r3, #31
 8011d12:	bf48      	it	mi
 8011d14:	f043 0320 	orrmi.w	r3, r3, #32
 8011d18:	6029      	str	r1, [r5, #0]
 8011d1a:	bf48      	it	mi
 8011d1c:	6023      	strmi	r3, [r4, #0]
 8011d1e:	b91e      	cbnz	r6, 8011d28 <_printf_i+0x1a4>
 8011d20:	6823      	ldr	r3, [r4, #0]
 8011d22:	f023 0320 	bic.w	r3, r3, #32
 8011d26:	6023      	str	r3, [r4, #0]
 8011d28:	2310      	movs	r3, #16
 8011d2a:	e7a7      	b.n	8011c7c <_printf_i+0xf8>
 8011d2c:	4824      	ldr	r0, [pc, #144]	; (8011dc0 <_printf_i+0x23c>)
 8011d2e:	e7e4      	b.n	8011cfa <_printf_i+0x176>
 8011d30:	4615      	mov	r5, r2
 8011d32:	e7bd      	b.n	8011cb0 <_printf_i+0x12c>
 8011d34:	682b      	ldr	r3, [r5, #0]
 8011d36:	6826      	ldr	r6, [r4, #0]
 8011d38:	6961      	ldr	r1, [r4, #20]
 8011d3a:	1d18      	adds	r0, r3, #4
 8011d3c:	6028      	str	r0, [r5, #0]
 8011d3e:	0635      	lsls	r5, r6, #24
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	d501      	bpl.n	8011d48 <_printf_i+0x1c4>
 8011d44:	6019      	str	r1, [r3, #0]
 8011d46:	e002      	b.n	8011d4e <_printf_i+0x1ca>
 8011d48:	0670      	lsls	r0, r6, #25
 8011d4a:	d5fb      	bpl.n	8011d44 <_printf_i+0x1c0>
 8011d4c:	8019      	strh	r1, [r3, #0]
 8011d4e:	2300      	movs	r3, #0
 8011d50:	6123      	str	r3, [r4, #16]
 8011d52:	4615      	mov	r5, r2
 8011d54:	e7bc      	b.n	8011cd0 <_printf_i+0x14c>
 8011d56:	682b      	ldr	r3, [r5, #0]
 8011d58:	1d1a      	adds	r2, r3, #4
 8011d5a:	602a      	str	r2, [r5, #0]
 8011d5c:	681d      	ldr	r5, [r3, #0]
 8011d5e:	6862      	ldr	r2, [r4, #4]
 8011d60:	2100      	movs	r1, #0
 8011d62:	4628      	mov	r0, r5
 8011d64:	f7ee fa6c 	bl	8000240 <memchr>
 8011d68:	b108      	cbz	r0, 8011d6e <_printf_i+0x1ea>
 8011d6a:	1b40      	subs	r0, r0, r5
 8011d6c:	6060      	str	r0, [r4, #4]
 8011d6e:	6863      	ldr	r3, [r4, #4]
 8011d70:	6123      	str	r3, [r4, #16]
 8011d72:	2300      	movs	r3, #0
 8011d74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d78:	e7aa      	b.n	8011cd0 <_printf_i+0x14c>
 8011d7a:	6923      	ldr	r3, [r4, #16]
 8011d7c:	462a      	mov	r2, r5
 8011d7e:	4649      	mov	r1, r9
 8011d80:	4640      	mov	r0, r8
 8011d82:	47d0      	blx	sl
 8011d84:	3001      	adds	r0, #1
 8011d86:	d0ad      	beq.n	8011ce4 <_printf_i+0x160>
 8011d88:	6823      	ldr	r3, [r4, #0]
 8011d8a:	079b      	lsls	r3, r3, #30
 8011d8c:	d413      	bmi.n	8011db6 <_printf_i+0x232>
 8011d8e:	68e0      	ldr	r0, [r4, #12]
 8011d90:	9b03      	ldr	r3, [sp, #12]
 8011d92:	4298      	cmp	r0, r3
 8011d94:	bfb8      	it	lt
 8011d96:	4618      	movlt	r0, r3
 8011d98:	e7a6      	b.n	8011ce8 <_printf_i+0x164>
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	4632      	mov	r2, r6
 8011d9e:	4649      	mov	r1, r9
 8011da0:	4640      	mov	r0, r8
 8011da2:	47d0      	blx	sl
 8011da4:	3001      	adds	r0, #1
 8011da6:	d09d      	beq.n	8011ce4 <_printf_i+0x160>
 8011da8:	3501      	adds	r5, #1
 8011daa:	68e3      	ldr	r3, [r4, #12]
 8011dac:	9903      	ldr	r1, [sp, #12]
 8011dae:	1a5b      	subs	r3, r3, r1
 8011db0:	42ab      	cmp	r3, r5
 8011db2:	dcf2      	bgt.n	8011d9a <_printf_i+0x216>
 8011db4:	e7eb      	b.n	8011d8e <_printf_i+0x20a>
 8011db6:	2500      	movs	r5, #0
 8011db8:	f104 0619 	add.w	r6, r4, #25
 8011dbc:	e7f5      	b.n	8011daa <_printf_i+0x226>
 8011dbe:	bf00      	nop
 8011dc0:	08014eca 	.word	0x08014eca
 8011dc4:	08014edb 	.word	0x08014edb

08011dc8 <__sflush_r>:
 8011dc8:	898a      	ldrh	r2, [r1, #12]
 8011dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dce:	4605      	mov	r5, r0
 8011dd0:	0710      	lsls	r0, r2, #28
 8011dd2:	460c      	mov	r4, r1
 8011dd4:	d458      	bmi.n	8011e88 <__sflush_r+0xc0>
 8011dd6:	684b      	ldr	r3, [r1, #4]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	dc05      	bgt.n	8011de8 <__sflush_r+0x20>
 8011ddc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	dc02      	bgt.n	8011de8 <__sflush_r+0x20>
 8011de2:	2000      	movs	r0, #0
 8011de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011de8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011dea:	2e00      	cmp	r6, #0
 8011dec:	d0f9      	beq.n	8011de2 <__sflush_r+0x1a>
 8011dee:	2300      	movs	r3, #0
 8011df0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011df4:	682f      	ldr	r7, [r5, #0]
 8011df6:	6a21      	ldr	r1, [r4, #32]
 8011df8:	602b      	str	r3, [r5, #0]
 8011dfa:	d032      	beq.n	8011e62 <__sflush_r+0x9a>
 8011dfc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011dfe:	89a3      	ldrh	r3, [r4, #12]
 8011e00:	075a      	lsls	r2, r3, #29
 8011e02:	d505      	bpl.n	8011e10 <__sflush_r+0x48>
 8011e04:	6863      	ldr	r3, [r4, #4]
 8011e06:	1ac0      	subs	r0, r0, r3
 8011e08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011e0a:	b10b      	cbz	r3, 8011e10 <__sflush_r+0x48>
 8011e0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011e0e:	1ac0      	subs	r0, r0, r3
 8011e10:	2300      	movs	r3, #0
 8011e12:	4602      	mov	r2, r0
 8011e14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011e16:	6a21      	ldr	r1, [r4, #32]
 8011e18:	4628      	mov	r0, r5
 8011e1a:	47b0      	blx	r6
 8011e1c:	1c43      	adds	r3, r0, #1
 8011e1e:	89a3      	ldrh	r3, [r4, #12]
 8011e20:	d106      	bne.n	8011e30 <__sflush_r+0x68>
 8011e22:	6829      	ldr	r1, [r5, #0]
 8011e24:	291d      	cmp	r1, #29
 8011e26:	d82b      	bhi.n	8011e80 <__sflush_r+0xb8>
 8011e28:	4a29      	ldr	r2, [pc, #164]	; (8011ed0 <__sflush_r+0x108>)
 8011e2a:	410a      	asrs	r2, r1
 8011e2c:	07d6      	lsls	r6, r2, #31
 8011e2e:	d427      	bmi.n	8011e80 <__sflush_r+0xb8>
 8011e30:	2200      	movs	r2, #0
 8011e32:	6062      	str	r2, [r4, #4]
 8011e34:	04d9      	lsls	r1, r3, #19
 8011e36:	6922      	ldr	r2, [r4, #16]
 8011e38:	6022      	str	r2, [r4, #0]
 8011e3a:	d504      	bpl.n	8011e46 <__sflush_r+0x7e>
 8011e3c:	1c42      	adds	r2, r0, #1
 8011e3e:	d101      	bne.n	8011e44 <__sflush_r+0x7c>
 8011e40:	682b      	ldr	r3, [r5, #0]
 8011e42:	b903      	cbnz	r3, 8011e46 <__sflush_r+0x7e>
 8011e44:	6560      	str	r0, [r4, #84]	; 0x54
 8011e46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011e48:	602f      	str	r7, [r5, #0]
 8011e4a:	2900      	cmp	r1, #0
 8011e4c:	d0c9      	beq.n	8011de2 <__sflush_r+0x1a>
 8011e4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011e52:	4299      	cmp	r1, r3
 8011e54:	d002      	beq.n	8011e5c <__sflush_r+0x94>
 8011e56:	4628      	mov	r0, r5
 8011e58:	f7ff fa8a 	bl	8011370 <_free_r>
 8011e5c:	2000      	movs	r0, #0
 8011e5e:	6360      	str	r0, [r4, #52]	; 0x34
 8011e60:	e7c0      	b.n	8011de4 <__sflush_r+0x1c>
 8011e62:	2301      	movs	r3, #1
 8011e64:	4628      	mov	r0, r5
 8011e66:	47b0      	blx	r6
 8011e68:	1c41      	adds	r1, r0, #1
 8011e6a:	d1c8      	bne.n	8011dfe <__sflush_r+0x36>
 8011e6c:	682b      	ldr	r3, [r5, #0]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d0c5      	beq.n	8011dfe <__sflush_r+0x36>
 8011e72:	2b1d      	cmp	r3, #29
 8011e74:	d001      	beq.n	8011e7a <__sflush_r+0xb2>
 8011e76:	2b16      	cmp	r3, #22
 8011e78:	d101      	bne.n	8011e7e <__sflush_r+0xb6>
 8011e7a:	602f      	str	r7, [r5, #0]
 8011e7c:	e7b1      	b.n	8011de2 <__sflush_r+0x1a>
 8011e7e:	89a3      	ldrh	r3, [r4, #12]
 8011e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e84:	81a3      	strh	r3, [r4, #12]
 8011e86:	e7ad      	b.n	8011de4 <__sflush_r+0x1c>
 8011e88:	690f      	ldr	r7, [r1, #16]
 8011e8a:	2f00      	cmp	r7, #0
 8011e8c:	d0a9      	beq.n	8011de2 <__sflush_r+0x1a>
 8011e8e:	0793      	lsls	r3, r2, #30
 8011e90:	680e      	ldr	r6, [r1, #0]
 8011e92:	bf08      	it	eq
 8011e94:	694b      	ldreq	r3, [r1, #20]
 8011e96:	600f      	str	r7, [r1, #0]
 8011e98:	bf18      	it	ne
 8011e9a:	2300      	movne	r3, #0
 8011e9c:	eba6 0807 	sub.w	r8, r6, r7
 8011ea0:	608b      	str	r3, [r1, #8]
 8011ea2:	f1b8 0f00 	cmp.w	r8, #0
 8011ea6:	dd9c      	ble.n	8011de2 <__sflush_r+0x1a>
 8011ea8:	6a21      	ldr	r1, [r4, #32]
 8011eaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011eac:	4643      	mov	r3, r8
 8011eae:	463a      	mov	r2, r7
 8011eb0:	4628      	mov	r0, r5
 8011eb2:	47b0      	blx	r6
 8011eb4:	2800      	cmp	r0, #0
 8011eb6:	dc06      	bgt.n	8011ec6 <__sflush_r+0xfe>
 8011eb8:	89a3      	ldrh	r3, [r4, #12]
 8011eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ebe:	81a3      	strh	r3, [r4, #12]
 8011ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ec4:	e78e      	b.n	8011de4 <__sflush_r+0x1c>
 8011ec6:	4407      	add	r7, r0
 8011ec8:	eba8 0800 	sub.w	r8, r8, r0
 8011ecc:	e7e9      	b.n	8011ea2 <__sflush_r+0xda>
 8011ece:	bf00      	nop
 8011ed0:	dfbffffe 	.word	0xdfbffffe

08011ed4 <_fflush_r>:
 8011ed4:	b538      	push	{r3, r4, r5, lr}
 8011ed6:	690b      	ldr	r3, [r1, #16]
 8011ed8:	4605      	mov	r5, r0
 8011eda:	460c      	mov	r4, r1
 8011edc:	b913      	cbnz	r3, 8011ee4 <_fflush_r+0x10>
 8011ede:	2500      	movs	r5, #0
 8011ee0:	4628      	mov	r0, r5
 8011ee2:	bd38      	pop	{r3, r4, r5, pc}
 8011ee4:	b118      	cbz	r0, 8011eee <_fflush_r+0x1a>
 8011ee6:	6a03      	ldr	r3, [r0, #32]
 8011ee8:	b90b      	cbnz	r3, 8011eee <_fflush_r+0x1a>
 8011eea:	f7ff f8c9 	bl	8011080 <__sinit>
 8011eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d0f3      	beq.n	8011ede <_fflush_r+0xa>
 8011ef6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011ef8:	07d0      	lsls	r0, r2, #31
 8011efa:	d404      	bmi.n	8011f06 <_fflush_r+0x32>
 8011efc:	0599      	lsls	r1, r3, #22
 8011efe:	d402      	bmi.n	8011f06 <_fflush_r+0x32>
 8011f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011f02:	f7ff fa06 	bl	8011312 <__retarget_lock_acquire_recursive>
 8011f06:	4628      	mov	r0, r5
 8011f08:	4621      	mov	r1, r4
 8011f0a:	f7ff ff5d 	bl	8011dc8 <__sflush_r>
 8011f0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011f10:	07da      	lsls	r2, r3, #31
 8011f12:	4605      	mov	r5, r0
 8011f14:	d4e4      	bmi.n	8011ee0 <_fflush_r+0xc>
 8011f16:	89a3      	ldrh	r3, [r4, #12]
 8011f18:	059b      	lsls	r3, r3, #22
 8011f1a:	d4e1      	bmi.n	8011ee0 <_fflush_r+0xc>
 8011f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011f1e:	f7ff f9f9 	bl	8011314 <__retarget_lock_release_recursive>
 8011f22:	e7dd      	b.n	8011ee0 <_fflush_r+0xc>

08011f24 <fiprintf>:
 8011f24:	b40e      	push	{r1, r2, r3}
 8011f26:	b503      	push	{r0, r1, lr}
 8011f28:	4601      	mov	r1, r0
 8011f2a:	ab03      	add	r3, sp, #12
 8011f2c:	4805      	ldr	r0, [pc, #20]	; (8011f44 <fiprintf+0x20>)
 8011f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f32:	6800      	ldr	r0, [r0, #0]
 8011f34:	9301      	str	r3, [sp, #4]
 8011f36:	f7ff fc9d 	bl	8011874 <_vfiprintf_r>
 8011f3a:	b002      	add	sp, #8
 8011f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f40:	b003      	add	sp, #12
 8011f42:	4770      	bx	lr
 8011f44:	20000084 	.word	0x20000084

08011f48 <__swbuf_r>:
 8011f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f4a:	460e      	mov	r6, r1
 8011f4c:	4614      	mov	r4, r2
 8011f4e:	4605      	mov	r5, r0
 8011f50:	b118      	cbz	r0, 8011f5a <__swbuf_r+0x12>
 8011f52:	6a03      	ldr	r3, [r0, #32]
 8011f54:	b90b      	cbnz	r3, 8011f5a <__swbuf_r+0x12>
 8011f56:	f7ff f893 	bl	8011080 <__sinit>
 8011f5a:	69a3      	ldr	r3, [r4, #24]
 8011f5c:	60a3      	str	r3, [r4, #8]
 8011f5e:	89a3      	ldrh	r3, [r4, #12]
 8011f60:	071a      	lsls	r2, r3, #28
 8011f62:	d525      	bpl.n	8011fb0 <__swbuf_r+0x68>
 8011f64:	6923      	ldr	r3, [r4, #16]
 8011f66:	b31b      	cbz	r3, 8011fb0 <__swbuf_r+0x68>
 8011f68:	6823      	ldr	r3, [r4, #0]
 8011f6a:	6922      	ldr	r2, [r4, #16]
 8011f6c:	1a98      	subs	r0, r3, r2
 8011f6e:	6963      	ldr	r3, [r4, #20]
 8011f70:	b2f6      	uxtb	r6, r6
 8011f72:	4283      	cmp	r3, r0
 8011f74:	4637      	mov	r7, r6
 8011f76:	dc04      	bgt.n	8011f82 <__swbuf_r+0x3a>
 8011f78:	4621      	mov	r1, r4
 8011f7a:	4628      	mov	r0, r5
 8011f7c:	f7ff ffaa 	bl	8011ed4 <_fflush_r>
 8011f80:	b9e0      	cbnz	r0, 8011fbc <__swbuf_r+0x74>
 8011f82:	68a3      	ldr	r3, [r4, #8]
 8011f84:	3b01      	subs	r3, #1
 8011f86:	60a3      	str	r3, [r4, #8]
 8011f88:	6823      	ldr	r3, [r4, #0]
 8011f8a:	1c5a      	adds	r2, r3, #1
 8011f8c:	6022      	str	r2, [r4, #0]
 8011f8e:	701e      	strb	r6, [r3, #0]
 8011f90:	6962      	ldr	r2, [r4, #20]
 8011f92:	1c43      	adds	r3, r0, #1
 8011f94:	429a      	cmp	r2, r3
 8011f96:	d004      	beq.n	8011fa2 <__swbuf_r+0x5a>
 8011f98:	89a3      	ldrh	r3, [r4, #12]
 8011f9a:	07db      	lsls	r3, r3, #31
 8011f9c:	d506      	bpl.n	8011fac <__swbuf_r+0x64>
 8011f9e:	2e0a      	cmp	r6, #10
 8011fa0:	d104      	bne.n	8011fac <__swbuf_r+0x64>
 8011fa2:	4621      	mov	r1, r4
 8011fa4:	4628      	mov	r0, r5
 8011fa6:	f7ff ff95 	bl	8011ed4 <_fflush_r>
 8011faa:	b938      	cbnz	r0, 8011fbc <__swbuf_r+0x74>
 8011fac:	4638      	mov	r0, r7
 8011fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fb0:	4621      	mov	r1, r4
 8011fb2:	4628      	mov	r0, r5
 8011fb4:	f000 f806 	bl	8011fc4 <__swsetup_r>
 8011fb8:	2800      	cmp	r0, #0
 8011fba:	d0d5      	beq.n	8011f68 <__swbuf_r+0x20>
 8011fbc:	f04f 37ff 	mov.w	r7, #4294967295
 8011fc0:	e7f4      	b.n	8011fac <__swbuf_r+0x64>
	...

08011fc4 <__swsetup_r>:
 8011fc4:	b538      	push	{r3, r4, r5, lr}
 8011fc6:	4b2a      	ldr	r3, [pc, #168]	; (8012070 <__swsetup_r+0xac>)
 8011fc8:	4605      	mov	r5, r0
 8011fca:	6818      	ldr	r0, [r3, #0]
 8011fcc:	460c      	mov	r4, r1
 8011fce:	b118      	cbz	r0, 8011fd8 <__swsetup_r+0x14>
 8011fd0:	6a03      	ldr	r3, [r0, #32]
 8011fd2:	b90b      	cbnz	r3, 8011fd8 <__swsetup_r+0x14>
 8011fd4:	f7ff f854 	bl	8011080 <__sinit>
 8011fd8:	89a3      	ldrh	r3, [r4, #12]
 8011fda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011fde:	0718      	lsls	r0, r3, #28
 8011fe0:	d422      	bmi.n	8012028 <__swsetup_r+0x64>
 8011fe2:	06d9      	lsls	r1, r3, #27
 8011fe4:	d407      	bmi.n	8011ff6 <__swsetup_r+0x32>
 8011fe6:	2309      	movs	r3, #9
 8011fe8:	602b      	str	r3, [r5, #0]
 8011fea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011fee:	81a3      	strh	r3, [r4, #12]
 8011ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ff4:	e034      	b.n	8012060 <__swsetup_r+0x9c>
 8011ff6:	0758      	lsls	r0, r3, #29
 8011ff8:	d512      	bpl.n	8012020 <__swsetup_r+0x5c>
 8011ffa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011ffc:	b141      	cbz	r1, 8012010 <__swsetup_r+0x4c>
 8011ffe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012002:	4299      	cmp	r1, r3
 8012004:	d002      	beq.n	801200c <__swsetup_r+0x48>
 8012006:	4628      	mov	r0, r5
 8012008:	f7ff f9b2 	bl	8011370 <_free_r>
 801200c:	2300      	movs	r3, #0
 801200e:	6363      	str	r3, [r4, #52]	; 0x34
 8012010:	89a3      	ldrh	r3, [r4, #12]
 8012012:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012016:	81a3      	strh	r3, [r4, #12]
 8012018:	2300      	movs	r3, #0
 801201a:	6063      	str	r3, [r4, #4]
 801201c:	6923      	ldr	r3, [r4, #16]
 801201e:	6023      	str	r3, [r4, #0]
 8012020:	89a3      	ldrh	r3, [r4, #12]
 8012022:	f043 0308 	orr.w	r3, r3, #8
 8012026:	81a3      	strh	r3, [r4, #12]
 8012028:	6923      	ldr	r3, [r4, #16]
 801202a:	b94b      	cbnz	r3, 8012040 <__swsetup_r+0x7c>
 801202c:	89a3      	ldrh	r3, [r4, #12]
 801202e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012036:	d003      	beq.n	8012040 <__swsetup_r+0x7c>
 8012038:	4621      	mov	r1, r4
 801203a:	4628      	mov	r0, r5
 801203c:	f000 f886 	bl	801214c <__smakebuf_r>
 8012040:	89a0      	ldrh	r0, [r4, #12]
 8012042:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012046:	f010 0301 	ands.w	r3, r0, #1
 801204a:	d00a      	beq.n	8012062 <__swsetup_r+0x9e>
 801204c:	2300      	movs	r3, #0
 801204e:	60a3      	str	r3, [r4, #8]
 8012050:	6963      	ldr	r3, [r4, #20]
 8012052:	425b      	negs	r3, r3
 8012054:	61a3      	str	r3, [r4, #24]
 8012056:	6923      	ldr	r3, [r4, #16]
 8012058:	b943      	cbnz	r3, 801206c <__swsetup_r+0xa8>
 801205a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801205e:	d1c4      	bne.n	8011fea <__swsetup_r+0x26>
 8012060:	bd38      	pop	{r3, r4, r5, pc}
 8012062:	0781      	lsls	r1, r0, #30
 8012064:	bf58      	it	pl
 8012066:	6963      	ldrpl	r3, [r4, #20]
 8012068:	60a3      	str	r3, [r4, #8]
 801206a:	e7f4      	b.n	8012056 <__swsetup_r+0x92>
 801206c:	2000      	movs	r0, #0
 801206e:	e7f7      	b.n	8012060 <__swsetup_r+0x9c>
 8012070:	20000084 	.word	0x20000084

08012074 <_sbrk_r>:
 8012074:	b538      	push	{r3, r4, r5, lr}
 8012076:	4d06      	ldr	r5, [pc, #24]	; (8012090 <_sbrk_r+0x1c>)
 8012078:	2300      	movs	r3, #0
 801207a:	4604      	mov	r4, r0
 801207c:	4608      	mov	r0, r1
 801207e:	602b      	str	r3, [r5, #0]
 8012080:	f7ee fe72 	bl	8000d68 <_sbrk>
 8012084:	1c43      	adds	r3, r0, #1
 8012086:	d102      	bne.n	801208e <_sbrk_r+0x1a>
 8012088:	682b      	ldr	r3, [r5, #0]
 801208a:	b103      	cbz	r3, 801208e <_sbrk_r+0x1a>
 801208c:	6023      	str	r3, [r4, #0]
 801208e:	bd38      	pop	{r3, r4, r5, pc}
 8012090:	20008ad0 	.word	0x20008ad0

08012094 <abort>:
 8012094:	b508      	push	{r3, lr}
 8012096:	2006      	movs	r0, #6
 8012098:	f000 f8bc 	bl	8012214 <raise>
 801209c:	2001      	movs	r0, #1
 801209e:	f7ee fdeb 	bl	8000c78 <_exit>

080120a2 <_realloc_r>:
 80120a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120a6:	4680      	mov	r8, r0
 80120a8:	4614      	mov	r4, r2
 80120aa:	460e      	mov	r6, r1
 80120ac:	b921      	cbnz	r1, 80120b8 <_realloc_r+0x16>
 80120ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80120b2:	4611      	mov	r1, r2
 80120b4:	f7ff b9d0 	b.w	8011458 <_malloc_r>
 80120b8:	b92a      	cbnz	r2, 80120c6 <_realloc_r+0x24>
 80120ba:	f7ff f959 	bl	8011370 <_free_r>
 80120be:	4625      	mov	r5, r4
 80120c0:	4628      	mov	r0, r5
 80120c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120c6:	f000 f8e3 	bl	8012290 <_malloc_usable_size_r>
 80120ca:	4284      	cmp	r4, r0
 80120cc:	4607      	mov	r7, r0
 80120ce:	d802      	bhi.n	80120d6 <_realloc_r+0x34>
 80120d0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80120d4:	d812      	bhi.n	80120fc <_realloc_r+0x5a>
 80120d6:	4621      	mov	r1, r4
 80120d8:	4640      	mov	r0, r8
 80120da:	f7ff f9bd 	bl	8011458 <_malloc_r>
 80120de:	4605      	mov	r5, r0
 80120e0:	2800      	cmp	r0, #0
 80120e2:	d0ed      	beq.n	80120c0 <_realloc_r+0x1e>
 80120e4:	42bc      	cmp	r4, r7
 80120e6:	4622      	mov	r2, r4
 80120e8:	4631      	mov	r1, r6
 80120ea:	bf28      	it	cs
 80120ec:	463a      	movcs	r2, r7
 80120ee:	f7ff f912 	bl	8011316 <memcpy>
 80120f2:	4631      	mov	r1, r6
 80120f4:	4640      	mov	r0, r8
 80120f6:	f7ff f93b 	bl	8011370 <_free_r>
 80120fa:	e7e1      	b.n	80120c0 <_realloc_r+0x1e>
 80120fc:	4635      	mov	r5, r6
 80120fe:	e7df      	b.n	80120c0 <_realloc_r+0x1e>

08012100 <__swhatbuf_r>:
 8012100:	b570      	push	{r4, r5, r6, lr}
 8012102:	460c      	mov	r4, r1
 8012104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012108:	2900      	cmp	r1, #0
 801210a:	b096      	sub	sp, #88	; 0x58
 801210c:	4615      	mov	r5, r2
 801210e:	461e      	mov	r6, r3
 8012110:	da0d      	bge.n	801212e <__swhatbuf_r+0x2e>
 8012112:	89a3      	ldrh	r3, [r4, #12]
 8012114:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012118:	f04f 0100 	mov.w	r1, #0
 801211c:	bf0c      	ite	eq
 801211e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012122:	2340      	movne	r3, #64	; 0x40
 8012124:	2000      	movs	r0, #0
 8012126:	6031      	str	r1, [r6, #0]
 8012128:	602b      	str	r3, [r5, #0]
 801212a:	b016      	add	sp, #88	; 0x58
 801212c:	bd70      	pop	{r4, r5, r6, pc}
 801212e:	466a      	mov	r2, sp
 8012130:	f000 f878 	bl	8012224 <_fstat_r>
 8012134:	2800      	cmp	r0, #0
 8012136:	dbec      	blt.n	8012112 <__swhatbuf_r+0x12>
 8012138:	9901      	ldr	r1, [sp, #4]
 801213a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801213e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012142:	4259      	negs	r1, r3
 8012144:	4159      	adcs	r1, r3
 8012146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801214a:	e7eb      	b.n	8012124 <__swhatbuf_r+0x24>

0801214c <__smakebuf_r>:
 801214c:	898b      	ldrh	r3, [r1, #12]
 801214e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012150:	079d      	lsls	r5, r3, #30
 8012152:	4606      	mov	r6, r0
 8012154:	460c      	mov	r4, r1
 8012156:	d507      	bpl.n	8012168 <__smakebuf_r+0x1c>
 8012158:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801215c:	6023      	str	r3, [r4, #0]
 801215e:	6123      	str	r3, [r4, #16]
 8012160:	2301      	movs	r3, #1
 8012162:	6163      	str	r3, [r4, #20]
 8012164:	b002      	add	sp, #8
 8012166:	bd70      	pop	{r4, r5, r6, pc}
 8012168:	ab01      	add	r3, sp, #4
 801216a:	466a      	mov	r2, sp
 801216c:	f7ff ffc8 	bl	8012100 <__swhatbuf_r>
 8012170:	9900      	ldr	r1, [sp, #0]
 8012172:	4605      	mov	r5, r0
 8012174:	4630      	mov	r0, r6
 8012176:	f7ff f96f 	bl	8011458 <_malloc_r>
 801217a:	b948      	cbnz	r0, 8012190 <__smakebuf_r+0x44>
 801217c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012180:	059a      	lsls	r2, r3, #22
 8012182:	d4ef      	bmi.n	8012164 <__smakebuf_r+0x18>
 8012184:	f023 0303 	bic.w	r3, r3, #3
 8012188:	f043 0302 	orr.w	r3, r3, #2
 801218c:	81a3      	strh	r3, [r4, #12]
 801218e:	e7e3      	b.n	8012158 <__smakebuf_r+0xc>
 8012190:	89a3      	ldrh	r3, [r4, #12]
 8012192:	6020      	str	r0, [r4, #0]
 8012194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012198:	81a3      	strh	r3, [r4, #12]
 801219a:	9b00      	ldr	r3, [sp, #0]
 801219c:	6163      	str	r3, [r4, #20]
 801219e:	9b01      	ldr	r3, [sp, #4]
 80121a0:	6120      	str	r0, [r4, #16]
 80121a2:	b15b      	cbz	r3, 80121bc <__smakebuf_r+0x70>
 80121a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80121a8:	4630      	mov	r0, r6
 80121aa:	f000 f84d 	bl	8012248 <_isatty_r>
 80121ae:	b128      	cbz	r0, 80121bc <__smakebuf_r+0x70>
 80121b0:	89a3      	ldrh	r3, [r4, #12]
 80121b2:	f023 0303 	bic.w	r3, r3, #3
 80121b6:	f043 0301 	orr.w	r3, r3, #1
 80121ba:	81a3      	strh	r3, [r4, #12]
 80121bc:	89a3      	ldrh	r3, [r4, #12]
 80121be:	431d      	orrs	r5, r3
 80121c0:	81a5      	strh	r5, [r4, #12]
 80121c2:	e7cf      	b.n	8012164 <__smakebuf_r+0x18>

080121c4 <_raise_r>:
 80121c4:	291f      	cmp	r1, #31
 80121c6:	b538      	push	{r3, r4, r5, lr}
 80121c8:	4604      	mov	r4, r0
 80121ca:	460d      	mov	r5, r1
 80121cc:	d904      	bls.n	80121d8 <_raise_r+0x14>
 80121ce:	2316      	movs	r3, #22
 80121d0:	6003      	str	r3, [r0, #0]
 80121d2:	f04f 30ff 	mov.w	r0, #4294967295
 80121d6:	bd38      	pop	{r3, r4, r5, pc}
 80121d8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80121da:	b112      	cbz	r2, 80121e2 <_raise_r+0x1e>
 80121dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80121e0:	b94b      	cbnz	r3, 80121f6 <_raise_r+0x32>
 80121e2:	4620      	mov	r0, r4
 80121e4:	f000 f852 	bl	801228c <_getpid_r>
 80121e8:	462a      	mov	r2, r5
 80121ea:	4601      	mov	r1, r0
 80121ec:	4620      	mov	r0, r4
 80121ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80121f2:	f000 b839 	b.w	8012268 <_kill_r>
 80121f6:	2b01      	cmp	r3, #1
 80121f8:	d00a      	beq.n	8012210 <_raise_r+0x4c>
 80121fa:	1c59      	adds	r1, r3, #1
 80121fc:	d103      	bne.n	8012206 <_raise_r+0x42>
 80121fe:	2316      	movs	r3, #22
 8012200:	6003      	str	r3, [r0, #0]
 8012202:	2001      	movs	r0, #1
 8012204:	e7e7      	b.n	80121d6 <_raise_r+0x12>
 8012206:	2400      	movs	r4, #0
 8012208:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801220c:	4628      	mov	r0, r5
 801220e:	4798      	blx	r3
 8012210:	2000      	movs	r0, #0
 8012212:	e7e0      	b.n	80121d6 <_raise_r+0x12>

08012214 <raise>:
 8012214:	4b02      	ldr	r3, [pc, #8]	; (8012220 <raise+0xc>)
 8012216:	4601      	mov	r1, r0
 8012218:	6818      	ldr	r0, [r3, #0]
 801221a:	f7ff bfd3 	b.w	80121c4 <_raise_r>
 801221e:	bf00      	nop
 8012220:	20000084 	.word	0x20000084

08012224 <_fstat_r>:
 8012224:	b538      	push	{r3, r4, r5, lr}
 8012226:	4d07      	ldr	r5, [pc, #28]	; (8012244 <_fstat_r+0x20>)
 8012228:	2300      	movs	r3, #0
 801222a:	4604      	mov	r4, r0
 801222c:	4608      	mov	r0, r1
 801222e:	4611      	mov	r1, r2
 8012230:	602b      	str	r3, [r5, #0]
 8012232:	f7ee fd70 	bl	8000d16 <_fstat>
 8012236:	1c43      	adds	r3, r0, #1
 8012238:	d102      	bne.n	8012240 <_fstat_r+0x1c>
 801223a:	682b      	ldr	r3, [r5, #0]
 801223c:	b103      	cbz	r3, 8012240 <_fstat_r+0x1c>
 801223e:	6023      	str	r3, [r4, #0]
 8012240:	bd38      	pop	{r3, r4, r5, pc}
 8012242:	bf00      	nop
 8012244:	20008ad0 	.word	0x20008ad0

08012248 <_isatty_r>:
 8012248:	b538      	push	{r3, r4, r5, lr}
 801224a:	4d06      	ldr	r5, [pc, #24]	; (8012264 <_isatty_r+0x1c>)
 801224c:	2300      	movs	r3, #0
 801224e:	4604      	mov	r4, r0
 8012250:	4608      	mov	r0, r1
 8012252:	602b      	str	r3, [r5, #0]
 8012254:	f7ee fd6f 	bl	8000d36 <_isatty>
 8012258:	1c43      	adds	r3, r0, #1
 801225a:	d102      	bne.n	8012262 <_isatty_r+0x1a>
 801225c:	682b      	ldr	r3, [r5, #0]
 801225e:	b103      	cbz	r3, 8012262 <_isatty_r+0x1a>
 8012260:	6023      	str	r3, [r4, #0]
 8012262:	bd38      	pop	{r3, r4, r5, pc}
 8012264:	20008ad0 	.word	0x20008ad0

08012268 <_kill_r>:
 8012268:	b538      	push	{r3, r4, r5, lr}
 801226a:	4d07      	ldr	r5, [pc, #28]	; (8012288 <_kill_r+0x20>)
 801226c:	2300      	movs	r3, #0
 801226e:	4604      	mov	r4, r0
 8012270:	4608      	mov	r0, r1
 8012272:	4611      	mov	r1, r2
 8012274:	602b      	str	r3, [r5, #0]
 8012276:	f7ee fced 	bl	8000c54 <_kill>
 801227a:	1c43      	adds	r3, r0, #1
 801227c:	d102      	bne.n	8012284 <_kill_r+0x1c>
 801227e:	682b      	ldr	r3, [r5, #0]
 8012280:	b103      	cbz	r3, 8012284 <_kill_r+0x1c>
 8012282:	6023      	str	r3, [r4, #0]
 8012284:	bd38      	pop	{r3, r4, r5, pc}
 8012286:	bf00      	nop
 8012288:	20008ad0 	.word	0x20008ad0

0801228c <_getpid_r>:
 801228c:	f7ee bcda 	b.w	8000c44 <_getpid>

08012290 <_malloc_usable_size_r>:
 8012290:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012294:	1f18      	subs	r0, r3, #4
 8012296:	2b00      	cmp	r3, #0
 8012298:	bfbc      	itt	lt
 801229a:	580b      	ldrlt	r3, [r1, r0]
 801229c:	18c0      	addlt	r0, r0, r3
 801229e:	4770      	bx	lr

080122a0 <_init>:
 80122a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122a2:	bf00      	nop
 80122a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80122a6:	bc08      	pop	{r3}
 80122a8:	469e      	mov	lr, r3
 80122aa:	4770      	bx	lr

080122ac <_fini>:
 80122ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122ae:	bf00      	nop
 80122b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80122b2:	bc08      	pop	{r3}
 80122b4:	469e      	mov	lr, r3
 80122b6:	4770      	bx	lr
